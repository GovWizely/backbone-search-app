!function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return o(n?n:e)},l,l.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){t.exports=e("./lib/axios")},{"./lib/axios":3}],2:[function(e,t,n){"use strict";var r=e("./../defaults"),o=e("./../utils"),i=e("./../helpers/buildUrl"),a=e("./../helpers/parseHeaders"),s=e("./../helpers/transformData");t.exports=function(t,n,u){var c=s(u.data,u.headers,u.transformRequest),l=o.merge(r.headers.common,r.headers[u.method]||{},u.headers||{});o.isFormData(c)&&delete l["Content-Type"];var p=new(XMLHttpRequest||ActiveXObject)("Microsoft.XMLHTTP");if(p.open(u.method.toUpperCase(),i(u.url,u.params),!0),p.timeout=u.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState){var e=a(p.getAllResponseHeaders()),r=-1!==["text",""].indexOf(u.responseType||"")?p.responseText:p.response,o={data:s(r,e,u.transformResponse),status:p.status,statusText:p.statusText,headers:e,config:u};(p.status>=200&&p.status<300?t:n)(o),p=null}},o.isStandardBrowserEnv()){var f=e("./../helpers/cookies"),d=e("./../helpers/urlIsSameOrigin"),h=d(u.url)?f.read(u.xsrfCookieName||r.xsrfCookieName):void 0;h&&(l[u.xsrfHeaderName||r.xsrfHeaderName]=h)}if(o.forEach(l,function(e,t){c||"content-type"!==t.toLowerCase()?p.setRequestHeader(t,e):delete l[t]}),u.withCredentials&&(p.withCredentials=!0),u.responseType)try{p.responseType=u.responseType}catch(v){if("json"!==p.responseType)throw v}o.isArrayBuffer(c)&&(c=new DataView(c)),p.send(c)}},{"./../defaults":6,"./../helpers/buildUrl":7,"./../helpers/cookies":8,"./../helpers/parseHeaders":9,"./../helpers/transformData":11,"./../helpers/urlIsSameOrigin":12,"./../utils":13}],3:[function(e,t,n){"use strict";var r=e("./defaults"),o=e("./utils"),i=e("./core/dispatchRequest"),a=e("./core/InterceptorManager"),s=t.exports=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),e=o.merge({method:"get",headers:{},timeout:r.timeout,transformRequest:r.transformRequest,transformResponse:r.transformResponse},e),e.withCredentials=e.withCredentials||r.withCredentials;var t=[i,void 0],n=Promise.resolve(e);for(s.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),s.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n};s.defaults=r,s.all=function(e){return Promise.all(e)},s.spread=e("./helpers/spread"),s.interceptors={request:new a,response:new a},function(){function e(){o.forEach(arguments,function(e){s[e]=function(t,n){return s(o.merge(n||{},{method:e,url:t}))}})}function t(){o.forEach(arguments,function(e){s[e]=function(t,n,r){return s(o.merge(r||{},{method:e,url:t,data:n}))}})}e("delete","get","head"),t("post","put","patch")}()},{"./core/InterceptorManager":4,"./core/dispatchRequest":5,"./defaults":6,"./helpers/spread":10,"./utils":13}],4:[function(e,t,n){"use strict";function r(){this.handlers=[]}var o=e("./../utils");r.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},r.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},r.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},t.exports=r},{"./../utils":13}],5:[function(e,t,n){(function(n){"use strict";t.exports=function(t){return new Promise(function(r,o){try{"undefined"!=typeof XMLHttpRequest||"undefined"!=typeof ActiveXObject?e("../adapters/xhr")(r,o,t):"undefined"!=typeof n&&e("../adapters/http")(r,o,t)}catch(i){o(i)}})}}).call(this,e("_process"))},{"../adapters/http":2,"../adapters/xhr":2,_process:114}],6:[function(e,t,n){"use strict";var r=e("./utils"),o=/^\)\]\}',?\n/,i={"Content-Type":"application/x-www-form-urlencoded"};t.exports={transformRequest:[function(e,t){return r.isFormData(e)?e:r.isArrayBuffer(e)?e:r.isArrayBufferView(e)?e.buffer:!r.isObject(e)||r.isFile(e)||r.isBlob(e)?e:(r.isUndefined(t)||(r.forEach(t,function(e,n){"content-type"===n.toLowerCase()&&(t["Content-Type"]=e)}),r.isUndefined(t["Content-Type"])&&(t["Content-Type"]="application/json;charset=utf-8")),JSON.stringify(e))}],transformResponse:[function(e){if("string"==typeof e){e=e.replace(o,"");try{e=JSON.parse(e)}catch(t){}}return e}],headers:{common:{Accept:"application/json, text/plain, */*"},patch:r.merge(i),post:r.merge(i),put:r.merge(i)},timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"}},{"./utils":13}],7:[function(e,t,n){"use strict";function r(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=e("./../utils");t.exports=function(e,t){if(!t)return e;var n=[];return o.forEach(t,function(e,t){null!==e&&"undefined"!=typeof e&&(o.isArray(e)&&(t+="[]"),o.isArray(e)||(e=[e]),o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),n.push(r(t)+"="+r(e))}))}),n.length>0&&(e+=(-1===e.indexOf("?")?"?":"&")+n.join("&")),e}},{"./../utils":13}],8:[function(e,t,n){"use strict";var r=e("./../utils");t.exports={write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),a===!0&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}},{"./../utils":13}],9:[function(e,t,n){"use strict";var r=e("./../utils");t.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),function(e){o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t&&(i[t]=i[t]?i[t]+", "+n:n)}),i):i}},{"./../utils":13}],10:[function(e,t,n){"use strict";t.exports=function(e){return function(t){return e.apply(null,t)}}},{}],11:[function(e,t,n){"use strict";var r=e("./../utils");t.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},{"./../utils":13}],12:[function(e,t,n){"use strict";function r(e){var t=e;return a&&(s.setAttribute("href",t),t=s.href),s.setAttribute("href",t),{href:s.href,protocol:s.protocol?s.protocol.replace(/:$/,""):"",host:s.host,search:s.search?s.search.replace(/^\?/,""):"",hash:s.hash?s.hash.replace(/^#/,""):"",hostname:s.hostname,port:s.port,pathname:"/"===s.pathname.charAt(0)?s.pathname:"/"+s.pathname}}var o,i=e("./../utils"),a=/(msie|trident)/i.test(navigator.userAgent),s=document.createElement("a");o=r(window.location.href),t.exports=function(e){var t=i.isString(e)?r(e):e;return t.protocol===o.protocol&&t.host===o.host}},{"./../utils":13}],13:[function(e,t,n){"use strict";function r(e){return"[object Array]"===b.call(e)}function o(e){return"[object ArrayBuffer]"===b.call(e)}function i(e){return"[object FormData]"===b.call(e)}function a(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function s(e){return"string"==typeof e}function u(e){return"number"==typeof e}function c(e){return"undefined"==typeof e}function l(e){return null!==e&&"object"==typeof e}function p(e){return"[object Date]"===b.call(e)}function f(e){return"[object File]"===b.call(e)}function d(e){return"[object Blob]"===b.call(e)}function h(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function v(e){return"[object Arguments]"===b.call(e)}function m(){return"undefined"!=typeof window&&"undefined"!=typeof document&&"function"==typeof document.createElement}function g(e,t){if(null!==e&&"undefined"!=typeof e){var n=r(e)||v(e);if("object"==typeof e||n||(e=[e]),n)for(var o=0,i=e.length;i>o;o++)t.call(null,e[o],o,e);else for(var a in e)e.hasOwnProperty(a)&&t.call(null,e[a],a,e)}}function y(){var e={};return g(arguments,function(t){g(t,function(t,n){e[n]=t})}),e}var b=Object.prototype.toString;t.exports={isArray:r,isArrayBuffer:o,isFormData:i,isArrayBufferView:a,isString:s,isNumber:u,isObject:l,isUndefined:c,isDate:p,isFile:f,isBlob:d,isStandardBrowserEnv:m,forEach:g,merge:y,trim:h}},{}],14:[function(e,t,n){!function(){"use strict";function e(){for(var t="",r=0;r<arguments.length;r++){var o=arguments[r];if(o){var i=typeof o;if("string"===i||"number"===i)t+=" "+o;else if(Array.isArray(o))t+=" "+e.apply(null,o);else if("object"===i)for(var a in o)n.call(o,a)&&o[a]&&(t+=" "+a)}}return t.substr(1)}var n={}.hasOwnProperty;"undefined"!=typeof t&&t.exports?t.exports=e:"function"==typeof define&&"object"==typeof define.amd&&define.amd?define("classnames",function(){return e}):window.classNames=e}()},{}],15:[function(e,t,n){function r(e){return null===e||void 0===e}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length?"function"!=typeof e.copy||"function"!=typeof e.slice?!1:e.length>0&&"number"!=typeof e[0]?!1:!0:!1}function i(e,t,n){var i,l;if(r(e)||r(t))return!1;if(e.prototype!==t.prototype)return!1;if(u(e))return u(t)?(e=a.call(e),t=a.call(t),c(e,t,n)):!1;if(o(e)){if(!o(t))return!1;if(e.length!==t.length)return!1;for(i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0}try{var p=s(e),f=s(t)}catch(d){return!1}if(p.length!=f.length)return!1;for(p.sort(),f.sort(),i=p.length-1;i>=0;i--)if(p[i]!=f[i])return!1;for(i=p.length-1;i>=0;i--)if(l=p[i],!c(e[l],t[l],n))return!1;return typeof e==typeof t}var a=Array.prototype.slice,s=e("./lib/keys.js"),u=e("./lib/is_arguments.js"),c=t.exports=function(e,t,n){return n||(n={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:i(e,t,n)}},{"./lib/is_arguments.js":16,"./lib/keys.js":17}],16:[function(e,t,n){function r(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}var i="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();n=t.exports=i?r:o,n.supported=r,n.unsupported=o},{}],17:[function(e,t,n){function r(e){var t=[];for(var n in e)t.push(n);return t}n=t.exports="function"==typeof Object.keys?Object.keys:r,n.shim=r},{}],18:[function(e,t,n){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function i(e){return"number"==typeof e}function a(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}t.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!i(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,n,r,i,u,c;if(this._events||(this._events={}),"error"===e&&(!this._events.error||a(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(n=this._events[e],s(n))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:for(r=arguments.length,i=new Array(r-1),u=1;r>u;u++)i[u-1]=arguments[u];n.apply(this,i)}else if(a(n)){for(r=arguments.length,i=new Array(r-1),u=1;r>u;u++)i[u-1]=arguments[u];for(c=n.slice(),r=c.length,u=0;r>u;u++)c[u].apply(this,i)}return!0},r.prototype.addListener=function(e,t){var n;if(!o(t))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,a(this._events[e])&&!this._events[e].warned){var n;n=s(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,n&&n>0&&this._events[e].length>n&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())}return this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!o(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},r.prototype.removeListener=function(e,t){var n,r,i,s;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],i=n.length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(a(n)){for(s=i;s-->0;)if(n[s]===t||n[s].listener&&n[s].listener===t){r=s;break}if(0>r)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],o(n))this.removeListener(e,n);else for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.listenerCount=function(e,t){var n;return n=e._events&&e._events[t]?o(e._events[t])?1:e._events[t].length:0}},{}],19:[function(e,t,n){(function(n){"use strict";var r=e("./emptyFunction"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,o){return e.addEventListener?(e.addEventListener(t,o,!0),{remove:function(){e.removeEventListener(t,o,!0)}}):("production"!==n.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:r})},registerDefault:function(){}};t.exports=o}).call(this,e("_process"))},{"./emptyFunction":26,_process:114}],20:[function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};t.exports=o},{}],21:[function(e,t,n){"use strict";function r(e){return e.replace(o,function(e,t){return t.toUpperCase()})}var o=/-(.)/g;t.exports=r},{}],22:[function(e,t,n){"use strict";function r(e){return o(e.replace(i,"ms-"))}var o=e("./camelize"),i=/^-ms-/;t.exports=r},{"./camelize":21}],23:[function(e,t,n){"use strict";function r(e,t){var n=!0;e:for(;n;){var r=e,i=t;if(n=!1,r&&i){if(r===i)return!0;if(o(r))return!1;if(o(i)){e=r,t=i.parentNode,n=!0;continue e}return r.contains?r.contains(i):r.compareDocumentPosition?!!(16&r.compareDocumentPosition(i)):!1}return!1}}var o=e("./isTextNode");t.exports=r},{"./isTextNode":36}],24:[function(e,t,n){"use strict";function r(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function o(e){return r(e)?Array.isArray(e)?e.slice():i(e):[e]}var i=e("./toArray");t.exports=o},{"./toArray":44}],25:[function(e,t,n){(function(n){"use strict";function r(e){var t=e.match(l);return t&&t[1].toLowerCase()}function o(e,t){var o=c;c?void 0:"production"!==n.env.NODE_ENV?u(!1,"createNodesFromMarkup dummy not initialized"):u(!1);var i=r(e),l=i&&s(i);if(l){o.innerHTML=l[1]+e+l[2];for(var p=l[0];p--;)o=o.lastChild}else o.innerHTML=e;var f=o.getElementsByTagName("script");f.length&&(t?void 0:"production"!==n.env.NODE_ENV?u(!1,"createNodesFromMarkup(...): Unexpected <script> element rendered."):u(!1),a(f).forEach(t));for(var d=a(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return d}var i=e("./ExecutionEnvironment"),a=e("./createArrayFromMixed"),s=e("./getMarkupWrap"),u=e("./invariant"),c=i.canUseDOM?document.createElement("div"):null,l=/^\s*<(\w+)/;t.exports=o}).call(this,e("_process"))},{"./ExecutionEnvironment":20,"./createArrayFromMixed":24,"./getMarkupWrap":30,"./invariant":34,_process:114}],26:[function(e,t,n){"use strict";function r(e){return function(){return e}}function o(){}o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},t.exports=o},{}],27:[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&Object.freeze(n),t.exports=n}).call(this,e("_process"))},{_process:114}],28:[function(e,t,n){"use strict";function r(e){try{e.focus()}catch(t){}}t.exports=r},{}],29:[function(e,t,n){"use strict";function r(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=r},{}],30:[function(e,t,n){(function(n){"use strict";function r(e){return a?void 0:"production"!==n.env.NODE_ENV?i(!1,"Markup wrapping node not initialized"):i(!1),f.hasOwnProperty(e)||(e="*"),s.hasOwnProperty(e)||("*"===e?a.innerHTML="<link />":a.innerHTML="<"+e+"></"+e+">",s[e]=!a.firstChild),s[e]?f[e]:null}var o=e("./ExecutionEnvironment"),i=e("./invariant"),a=o.canUseDOM?document.createElement("div"):null,s={},u=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],p=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],f={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:l,th:l},d=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];d.forEach(function(e){f[e]=p,s[e]=!0}),t.exports=r}).call(this,e("_process"))},{"./ExecutionEnvironment":20,"./invariant":34,_process:114}],31:[function(e,t,n){"use strict";function r(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=r},{}],32:[function(e,t,n){"use strict";function r(e){return e.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;t.exports=r},{}],33:[function(e,t,n){"use strict";function r(e){return o(e).replace(i,"-ms-")}var o=e("./hyphenate"),i=/^ms-/;t.exports=r},{"./hyphenate":32}],34:[function(e,t,n){(function(e){"use strict";var n=function(t,n,r,o,i,a,s,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,i,a,s,u],p=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return l[p++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:114}],35:[function(e,t,n){"use strict";function r(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=r},{}],36:[function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=e("./isNode");t.exports=r},{"./isNode":35}],37:[function(e,t,n){(function(n){"use strict";var r=e("./invariant"),o=function(e){var t,o={};e instanceof Object&&!Array.isArray(e)?void 0:"production"!==n.env.NODE_ENV?r(!1,"keyMirror(...): Argument must be an object."):r(!1);for(t in e)e.hasOwnProperty(t)&&(o[t]=t);return o};t.exports=o}).call(this,e("_process"))},{"./invariant":34,_process:114}],38:[function(e,t,n){"use strict";var r=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=r},{}],39:[function(e,t,n){"use strict";function r(e,t,n){if(!e)return null;var r={};for(var i in e)o.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],40:[function(e,t,n){"use strict";function r(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}t.exports=r},{}],41:[function(e,t,n){"use strict";var r,o=e("./ExecutionEnvironment");o.canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),t.exports=r||{}},{"./ExecutionEnvironment":20}],42:[function(e,t,n){"use strict";var r=e("./performance"),o=r;o&&o.now||(o=Date);var i=o.now.bind(o);t.exports=i},{"./performance":41}],43:[function(e,t,n){"use strict";function r(e,t){if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=o.bind(t),a=0;a<n.length;a++)if(!i(n[a])||e[n[a]]!==t[n[a]])return!1;return!0}var o=Object.prototype.hasOwnProperty;t.exports=r},{}],44:[function(e,t,n){(function(n){"use strict";function r(e){var t=e.length;if(Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e?"production"!==n.env.NODE_ENV?o(!1,"toArray: Array-like object expected"):o(!1):void 0,"number"!=typeof t?"production"!==n.env.NODE_ENV?o(!1,"toArray: Object needs a length property"):o(!1):void 0,0===t||t-1 in e?void 0:"production"!==n.env.NODE_ENV?o(!1,"toArray: Object should have keys for indices"):o(!1),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(r){}for(var i=Array(t),a=0;t>a;a++)i[a]=e[a];return i}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":34,_process:114}],45:[function(e,t,n){(function(n){"use strict";var r=e("./emptyFunction"),o=r;"production"!==n.env.NODE_ENV&&(o=function(e,t){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;n>o;o++)r[o-2]=arguments[o];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){var i=0,a="Warning: "+t.replace(/%s/g,function(){return r[i++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(s){}}}),t.exports=o}).call(this,e("_process"))},{"./emptyFunction":26,_process:114}],46:[function(e,t,n){t.exports.Dispatcher=e("./lib/Dispatcher")},{"./lib/Dispatcher":47}],47:[function(e,t,n){(function(r){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.__esModule=!0;var i=e("fbjs/lib/invariant"),a="ID_",s=function(){function e(){o(this,e),this._callbacks={},this._isDispatching=!1,this._isHandled={},this._isPending={},this._lastID=1}return e.prototype.register=function(e){var t=a+this._lastID++;return this._callbacks[t]=e,t},e.prototype.unregister=function(e){this._callbacks[e]?void 0:"production"!==r.env.NODE_ENV?i(!1,"Dispatcher.unregister(...): `%s` does not map to a registered callback.",e):i(!1),delete this._callbacks[e]},e.prototype.waitFor=function(e){this._isDispatching?void 0:"production"!==r.env.NODE_ENV?i(!1,"Dispatcher.waitFor(...): Must be invoked while dispatching."):i(!1);for(var t=0;t<e.length;t++){var n=e[t];this._isPending[n]?this._isHandled[n]?void 0:"production"!==r.env.NODE_ENV?i(!1,"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",n):i(!1):(this._callbacks[n]?void 0:"production"!==r.env.NODE_ENV?i(!1,"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",n):i(!1),this._invokeCallback(n))}},e.prototype.dispatch=function(e){this._isDispatching?"production"!==r.env.NODE_ENV?i(!1,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."):i(!1):void 0,this._startDispatching(e);try{for(var t in this._callbacks)this._isPending[t]||this._invokeCallback(t)}finally{this._stopDispatching()}},e.prototype.isDispatching=function(){return this._isDispatching},e.prototype._invokeCallback=function(e){this._isPending[e]=!0,this._callbacks[e](this._pendingPayload),this._isHandled[e]=!0},e.prototype._startDispatching=function(e){for(var t in this._callbacks)this._isPending[t]=!1,this._isHandled[t]=!1;this._pendingPayload=e,this._isDispatching=!0},e.prototype._stopDispatching=function(){delete this._pendingPayload,this._isDispatching=!1},e}();t.exports=s}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":48}],48:[function(e,t,n){(function(e){"use strict";var n=function(t,n,r,o,i,a,s,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,i,a,s,u],p=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return l[p++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:114}],49:[function(e,t,n){"use strict";n.__esModule=!0;var r="PUSH";n.PUSH=r;var o="REPLACE";n.REPLACE=o;var i="POP";n.POP=i,n["default"]={PUSH:r,REPLACE:o,POP:i}},{}],50:[function(e,t,n){"use strict";function r(e,t,n){function r(){a=!0,n.apply(this,arguments)}function o(){a||(e>i?t.call(this,i++,o,r):r.apply(this,arguments))}var i=0,a=!1;o()}n.__esModule=!0,n.loopAsync=r},{}],51:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return c+e}function i(e,t){try{window.sessionStorage.setItem(o(e),JSON.stringify(t))}catch(n){if(n.name===l||0===window.sessionStorage.length)return void u["default"](!1,"[history] Unable to save state; sessionStorage is not available in Safari private mode");throw n}}function a(e){var t=window.sessionStorage.getItem(o(e));if(t)try{return JSON.parse(t)}catch(n){}return null}n.__esModule=!0,n.saveState=i,n.readState=a;var s=e("warning"),u=r(s),c="@@History/",l="QuotaExceededError"},{warning:296}],52:[function(e,t,n){"use strict";function r(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function o(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function i(){return window.location.href.split("#")[1]||""}function a(e){window.location.replace(window.location.pathname+window.location.search+"#"+e)}function s(){return window.location.pathname+window.location.search+window.location.hash}function u(e){e&&window.history.go(e)}function c(e,t){t(window.confirm(e))}function l(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}function p(){var e=navigator.userAgent;return-1===e.indexOf("Firefox")}n.__esModule=!0,n.addEventListener=r,n.removeEventListener=o,n.getHashPath=i,n.replaceHashPath=a,n.getWindowPath=s,n.go=u,n.getUserConfirmation=c,n.supportsHistory=l,n.supportsGoWithoutReloadUsingHash=p},{}],53:[function(e,t,n){"use strict";n.__esModule=!0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);n.canUseDOM=r},{}],54:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){function e(e){e=e||window.history.state||{};var t=l.getWindowPath(),n=e,r=n.key,o=void 0;return r?o=p.readState(r):(o=null,r=y.createKey(),m&&window.history.replaceState(i({},e,{key:r}),null,t)),y.createLocation(t,o,void 0,r)}function t(t){function n(t){void 0!==t.state&&r(e(t.state))}var r=t.transitionTo;return l.addEventListener(window,"popstate",n),function(){l.removeEventListener(window,"popstate",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.hash,i=e.state,a=e.action,s=e.key;if(a!==u.POP){p.saveState(s,i);var c=(t||"")+n+r+o,l={key:s};if(a===u.PUSH){if(g)return window.location.href=c,!1;window.history.pushState(l,null,c)}else{if(g)return window.location.replace(c),!1;window.history.replaceState(l,null,c)}}}function r(e){1===++b&&(_=t(y));var n=y.listenBefore(e);return function(){n(),0===--b&&_()}}function o(e){1===++b&&(_=t(y));var n=y.listen(e);return function(){n(),0===--b&&_()}}function a(e){1===++b&&(_=t(y)),y.registerTransitionHook(e)}function f(e){y.unregisterTransitionHook(e),0===--b&&_()}var h=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];s["default"](c.canUseDOM,"Browser history needs a DOM");var v=h.forceRefresh,m=l.supportsHistory(),g=!m||v,y=d["default"](i({},h,{getCurrentLocation:e,finishTransition:n,saveState:p.saveState})),b=0,_=void 0;return i({},y,{listenBefore:r,listen:o,registerTransitionHook:a,unregisterTransitionHook:f})}n.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=e("invariant"),s=r(a),u=e("./Actions"),c=e("./ExecutionEnvironment"),l=e("./DOMUtils"),p=e("./DOMStateStorage"),f=e("./createDOMHistory"),d=r(f);n["default"]=o,t.exports=n["default"]},{"./Actions":49,"./DOMStateStorage":51,"./DOMUtils":52,"./ExecutionEnvironment":53,"./createDOMHistory":55,invariant:73}],55:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){function t(e){return s["default"](u.canUseDOM,"DOM history needs a DOM"),n.listen(e)}var n=p["default"](i({getUserConfirmation:c.getUserConfirmation},e,{go:c.go}));return i({},n,{listen:t})}n.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=e("invariant"),s=r(a),u=e("./ExecutionEnvironment"),c=e("./DOMUtils"),l=e("./createHistory"),p=r(l);n["default"]=o,t.exports=n["default"]},{"./DOMUtils":52,"./ExecutionEnvironment":53,"./createHistory":57,invariant:73}],56:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return"string"==typeof e&&"/"===e.charAt(0)}function i(){var e=g.getHashPath();return o(e)?!0:(g.replaceHashPath("/"+e),!1)}function a(e,t,n){return e+(-1===e.indexOf("?")?"?":"&")+(t+"="+n)}function s(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function u(e,t){var n=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return n&&n[1]}function c(){function e(){var e=g.getHashPath(),t=void 0,n=void 0;return x?(t=u(e,x),e=s(e,x),t?n=y.readState(t):(n=null,t=N.createKey(),g.replaceHashPath(a(e,x,t)))):t=n=null,N.createLocation(e,n,void 0,t)}function t(t){function n(){i()&&r(e())}var r=t.transitionTo;return i(),g.addEventListener(window,"hashchange",n),function(){g.removeEventListener(window,"hashchange",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.state,i=e.action,s=e.key;if(i!==v.POP){var u=(t||"")+n+r;x&&(u=a(u,x,s)),u===g.getHashPath()?f["default"](!1,"You cannot %s the same path using hash history",i):(x?y.saveState(s,o):e.key=e.state=null,i===v.PUSH?window.location.hash=u:g.replaceHashPath(u))}}function r(e){1===++D&&(R=t(N));var n=N.listenBefore(e);return function(){n(),0===--D&&R()}}function o(e){1===++D&&(R=t(N));var n=N.listen(e);return function(){n(),0===--D&&R()}}function c(e,t){f["default"](x||null==e,"You cannot use state without a queryKey it will be dropped"),N.pushState(e,t)}function p(e,t){f["default"](x||null==e,"You cannot use state without a queryKey it will be dropped"),
N.replaceState(e,t)}function d(e){f["default"](T,"Hash history go(n) causes a full page reload in this browser"),N.go(e)}function b(e){return"#"+N.createHref(e)}function w(e){1===++D&&(R=t(N)),N.registerTransitionHook(e)}function O(e){N.unregisterTransitionHook(e),0===--D&&R()}var C=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];h["default"](m.canUseDOM,"Hash history needs a DOM");var x=C.queryKey;(void 0===x||x)&&(x="string"==typeof x?x:E);var N=_["default"](l({},C,{getCurrentLocation:e,finishTransition:n,saveState:y.saveState})),D=0,R=void 0,T=g.supportsGoWithoutReloadUsingHash();return l({},N,{listenBefore:r,listen:o,pushState:c,replaceState:p,go:d,createHref:b,registerTransitionHook:w,unregisterTransitionHook:O})}n.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p=e("warning"),f=r(p),d=e("invariant"),h=r(d),v=e("./Actions"),m=e("./ExecutionEnvironment"),g=e("./DOMUtils"),y=e("./DOMStateStorage"),b=e("./createDOMHistory"),_=r(b),E="_k";n["default"]=c,t.exports=n["default"]},{"./Actions":49,"./DOMStateStorage":51,"./DOMUtils":52,"./ExecutionEnvironment":53,"./createDOMHistory":55,invariant:73,warning:296}],57:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return Math.random().toString(36).substr(2,e)}function i(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&c["default"](e.state,t.state)}function a(){function e(e){return j.push(e),function(){j=j.filter(function(t){return t!==e})}}function t(){return V&&V.action===p.POP?I.indexOf(V.key):L?I.indexOf(L.key):-1}function n(e){var n=t();L=e,L.action===p.PUSH?I=[].concat(I.slice(0,n+1),[L.key]):L.action===p.REPLACE&&(I[n]=L.key),A.forEach(function(e){e(L)})}function r(e){if(A.push(e),L)e(L);else{var t=R();I=[t.key],n(t)}return function(){A=A.filter(function(t){return t!==e})}}function a(e,t){l.loopAsync(j.length,function(t,n,r){v["default"](j[t],e,function(e){null!=e?r(e):n()})},function(e){S&&"string"==typeof e?S(e,function(e){t(e!==!1)}):t(e!==!1)})}function u(e){L&&i(L,e)||(V=e,a(e,function(t){if(V===e)if(t)T(e)!==!1&&n(e);else if(L&&e.action===p.POP){var r=I.indexOf(L.key),o=I.indexOf(e.key);-1!==r&&-1!==o&&k(r-o)}}))}function c(e,t){u(w(t,e,p.PUSH,b()))}function f(e,t){u(w(t,e,p.REPLACE,b()))}function h(){k(-1)}function m(){k(1)}function b(){return o(M)}function _(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,n=e.search,r=e.hash,o=t;return n&&(o+=n),r&&(o+=r),o}function E(e){return _(e)}function w(e,t,n){var r=arguments.length<=3||void 0===arguments[3]?b():arguments[3];return d["default"](e,t,n,r)}function O(e){L?(C(L,e),n(L)):C(R(),e)}function C(e,t){e.state=s({},e.state,t),P(e.key,e.state)}function x(e){-1===j.indexOf(e)&&j.push(e)}function N(e){j=j.filter(function(t){return t!==e})}var D=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],R=D.getCurrentLocation,T=D.finishTransition,P=D.saveState,k=D.go,M=D.keyLength,S=D.getUserConfirmation;"number"!=typeof M&&(M=y);var j=[],I=[],A=[],L=void 0,V=void 0;return{listenBefore:e,listen:r,transitionTo:u,pushState:c,replaceState:f,go:k,goBack:h,goForward:m,createKey:b,createPath:_,createHref:E,createLocation:w,setState:g["default"](O,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:g["default"](x,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:g["default"](N,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead")}}n.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=e("deep-equal"),c=r(u),l=e("./AsyncUtils"),p=e("./Actions"),f=e("./createLocation"),d=r(f),h=e("./runTransitionHook"),v=r(h),m=e("./deprecate"),g=r(m),y=6;n["default"]=a,t.exports=n["default"]},{"./Actions":49,"./AsyncUtils":50,"./createLocation":58,"./deprecate":60,"./runTransitionHook":65,"deep-equal":15}],58:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?i.POP:arguments[2],r=arguments.length<=3||void 0===arguments[3]?null:arguments[3];"string"==typeof e&&(e=s["default"](e));var o=e.pathname||"/",a=e.search||"",u=e.hash||"";return{pathname:o,search:a,hash:u,state:t,action:n,key:r}}n.__esModule=!0;var i=e("./Actions"),a=e("./parsePath"),s=r(a);n["default"]=o,t.exports=n["default"]},{"./Actions":49,"./parsePath":64}],59:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function i(){function e(e,t){m[e]=t}function t(e){return m[e]}function n(){var e=h[v],n=e.key,r=e.basename,o=e.pathname,i=e.search,a=(r||"")+o+(i||""),s=void 0;return n?s=t(n):(s=null,n=f.createKey(),e.key=n),f.createLocation(a,s,void 0,n)}function r(e){var t=v+e;return t>=0&&t<h.length}function i(e){if(e){u["default"](r(e),"Cannot go(%s) there is not enough history",e),v+=e;var t=n();f.transitionTo(a({},t,{action:c.POP}))}}function s(t){switch(t.action){case c.PUSH:v+=1,v<h.length&&h.splice(v),h.push(t),e(t.key,t.state);break;case c.REPLACE:h[v]=t,e(t.key,t.state)}}var l=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(l)?l={entries:l}:"string"==typeof l&&(l={entries:[l]});var f=p["default"](a({},l,{getCurrentLocation:n,finishTransition:s,saveState:e,go:i})),d=l,h=d.entries,v=d.current;"string"==typeof h?h=[h]:Array.isArray(h)||(h=["/"]),h=h.map(function(e){var t=f.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?a({},e,{key:t}):void u["default"](!1,"Unable to create history entry from %s",e)}),null==v?v=h.length-1:u["default"](v>=0&&v<h.length,"Current index must be >= 0 and < %s, was %s",h.length,v);var m=o(h);return f}n.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=e("invariant"),u=r(s),c=e("./Actions"),l=e("./createHistory"),p=r(l);n["default"]=i,t.exports=n["default"]},{"./Actions":49,"./createHistory":57,invariant:73}],60:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return function(){return a["default"](!1,"[history] "+t),e.apply(this,arguments)}}n.__esModule=!0;var i=e("warning"),a=r(i);n["default"]=o,t.exports=n["default"]},{warning:296}],61:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("./deprecate"),i=r(o),a=e("./useBeforeUnload"),s=r(a);n["default"]=i["default"](s["default"],"enableBeforeUnload is deprecated, use useBeforeUnload instead"),t.exports=n["default"]},{"./deprecate":60,"./useBeforeUnload":67}],62:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("./deprecate"),i=r(o),a=e("./useQueries"),s=r(a);n["default"]=i["default"](s["default"],"enableQueries is deprecated, use useQueries instead"),t.exports=n["default"]},{"./deprecate":60,"./useQueries":68}],63:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("./createBrowserHistory"),i=r(o);n.createHistory=i["default"];var a=e("./createHashHistory"),s=r(a);n.createHashHistory=s["default"];var u=e("./createMemoryHistory"),c=r(u);n.createMemoryHistory=c["default"];var l=e("./createLocation"),p=r(l);n.createLocation=p["default"];var f=e("./useBasename"),d=r(f);n.useBasename=d["default"];var h=e("./useBeforeUnload"),v=r(h);n.useBeforeUnload=v["default"];var m=e("./useQueries"),g=r(m);n.useQueries=g["default"];var y=e("./Actions"),b=r(y);n.Actions=b["default"];var _=e("./enableBeforeUnload"),E=r(_);n.enableBeforeUnload=E["default"];var w=e("./enableQueries"),O=r(w);n.enableQueries=O["default"]},{"./Actions":49,"./createBrowserHistory":54,"./createHashHistory":56,"./createLocation":58,"./createMemoryHistory":59,"./enableBeforeUnload":61,"./enableQueries":62,"./useBasename":66,"./useBeforeUnload":67,"./useQueries":68}],64:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:(s["default"](!1,'A path must be pathname + search + hash only, not a fully qualified URL like "%s"',e),e.substring(t[0].length))}function i(e){var t=o(e),n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substring(i),t=t.substring(0,i));var a=t.indexOf("?");return-1!==a&&(n=t.substring(a),t=t.substring(0,a)),""===t&&(t="/"),{pathname:t,search:n,hash:r}}n.__esModule=!0;var a=e("warning"),s=r(a);n["default"]=i,t.exports=n["default"]},{warning:296}],65:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){var r=e(t,n);e.length<2?n(r):a["default"](void 0===r,'You should not "return" in a transition hook with a callback argument; call the callback instead')}n.__esModule=!0;var i=e("warning"),a=r(i);n["default"]=o,t.exports=n["default"]},{warning:296}],66:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){return function(){function t(e){return v&&null==e.basename&&(0===e.pathname.indexOf(v)?(e.pathname=e.pathname.substring(v.length),e.basename=v,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function n(e){if(!v)return e;"string"==typeof e&&(e=l["default"](e));var t=v+e.pathname;return a({},e,{pathname:t})}function r(e){return g.listenBefore(function(n,r){u["default"](e,t(n),r)})}function i(e){return g.listen(function(n){e(t(n))})}function s(e,t){g.pushState(e,n(t))}function c(e,t){g.replaceState(e,n(t))}function p(e){return g.createPath(n(e))}function f(e){return g.createHref(n(e))}function d(){return t(g.createLocation.apply(g,arguments))}var h=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],v=h.basename,m=o(h,["basename"]),g=e(m);return a({},g,{listenBefore:r,listen:i,pushState:s,replaceState:c,createPath:p,createHref:f,createLocation:d})}}n.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=e("./runTransitionHook"),u=r(s),c=e("./parsePath"),l=r(c);n["default"]=i,t.exports=n["default"]},{"./parsePath":64,"./runTransitionHook":65}],67:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){function t(t){var n=e();return"string"==typeof n?((t||window.event).returnValue=n,n):void 0}return l.addEventListener(window,"beforeunload",t),function(){l.removeEventListener(window,"beforeunload",t)}}function i(e){return function(t){function n(){for(var e=void 0,t=0,n=d.length;null==e&&n>t;++t)e=d[t].call();return e}function r(e){return d.push(e),1===d.length&&(c.canUseDOM?p=o(n):u["default"](!1,"listenBeforeUnload only works in DOM environments")),function(){d=d.filter(function(t){return t!==e}),0===d.length&&p&&(p(),p=null)}}function i(e){c.canUseDOM&&-1===d.indexOf(e)&&(d.push(e),1===d.length&&(p=o(n)))}function s(e){d.length>0&&(d=d.filter(function(t){return t!==e}),0===d.length&&p())}var l=e(t),p=void 0,d=[];return a({},l,{listenBeforeUnload:r,registerBeforeUnloadHook:f["default"](i,"registerBeforeUnloadHook is deprecated; use listenBeforeUnload instead"),unregisterBeforeUnloadHook:f["default"](s,"unregisterBeforeUnloadHook is deprecated; use the callback returned from listenBeforeUnload instead")})}}n.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=e("warning"),u=r(s),c=e("./ExecutionEnvironment"),l=e("./DOMUtils"),p=e("./deprecate"),f=r(p);n["default"]=i,t.exports=n["default"]},{"./DOMUtils":52,"./ExecutionEnvironment":53,"./deprecate":60,warning:296}],68:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){return l["default"].stringify(e,{arrayFormat:"brackets"})}function a(e){return l["default"].parse(e)}function s(e){return function(){function t(e){return null==e.query&&(e.query=y(e.search.substring(1))),e}function n(e,t){var n=void 0;if(!t||""===(n=g(t)))return e;"string"==typeof e&&(e=h["default"](e));var r=e.search+(e.search?"&":"?")+n;return u({},e,{search:r})}function r(e){return _.listenBefore(function(n,r){f["default"](e,t(n),r)})}function s(e){return _.listen(function(n){e(t(n))})}function c(e,t,r){return _.pushState(e,n(t,r))}function l(e,t,r){return _.replaceState(e,n(t,r))}function p(e,t){return _.createPath(n(e,t))}function d(e,t){return _.createHref(n(e,t))}function v(){return t(_.createLocation.apply(_,arguments))}var m=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],g=m.stringifyQuery,y=m.parseQueryString,b=o(m,["stringifyQuery","parseQueryString"]),_=e(b);return"function"!=typeof g&&(g=i),"function"!=typeof y&&(y=a),u({},_,{listenBefore:r,listen:s,pushState:c,replaceState:l,createPath:p,createHref:d,createLocation:v})}}n.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=e("qs"),l=r(c),p=e("./runTransitionHook"),f=r(p),d=e("./parsePath"),h=r(d);n["default"]=s,t.exports=n["default"]},{"./parsePath":64,"./runTransitionHook":65,qs:69}],69:[function(e,t,n){var r=e("./stringify"),o=e("./parse");t.exports={stringify:r,parse:o}},{"./parse":70,"./stringify":71}],70:[function(e,t,n){var r=e("./utils"),o={delimiter:"&",depth:5,arrayLimit:20,parameterLimit:1e3,strictNullHandling:!1,plainObjects:!1,allowPrototypes:!1};o.parseValues=function(e,t){for(var n={},o=e.split(t.delimiter,t.parameterLimit===1/0?void 0:t.parameterLimit),i=0,a=o.length;a>i;++i){var s=o[i],u=-1===s.indexOf("]=")?s.indexOf("="):s.indexOf("]=")+1;if(-1===u)n[r.decode(s)]="",t.strictNullHandling&&(n[r.decode(s)]=null);else{var c=r.decode(s.slice(0,u)),l=r.decode(s.slice(u+1));Object.prototype.hasOwnProperty.call(n,c)?n[c]=[].concat(n[c]).concat(l):n[c]=l}}return n},o.parseObject=function(e,t,n){if(!e.length)return t;var r,i=e.shift();if("[]"===i)r=[],r=r.concat(o.parseObject(e,t,n));else{r=n.plainObjects?Object.create(null):{};var a="["===i[0]&&"]"===i[i.length-1]?i.slice(1,i.length-1):i,s=parseInt(a,10),u=""+s;!isNaN(s)&&i!==a&&u===a&&s>=0&&n.parseArrays&&s<=n.arrayLimit?(r=[],r[s]=o.parseObject(e,t,n)):r[a]=o.parseObject(e,t,n)}return r},o.parseKeys=function(e,t,n){if(e){n.allowDots&&(e=e.replace(/\.([^\.\[]+)/g,"[$1]"));var r=/^([^\[\]]*)/,i=/(\[[^\[\]]*\])/g,a=r.exec(e),s=[];if(a[1]){if(!n.plainObjects&&Object.prototype.hasOwnProperty(a[1])&&!n.allowPrototypes)return;s.push(a[1])}for(var u=0;null!==(a=i.exec(e))&&u<n.depth;)++u,(n.plainObjects||!Object.prototype.hasOwnProperty(a[1].replace(/\[|\]/g,""))||n.allowPrototypes)&&s.push(a[1]);return a&&s.push("["+e.slice(a.index)+"]"),o.parseObject(s,t,n)}},t.exports=function(e,t){if(t=t||{},t.delimiter="string"==typeof t.delimiter||r.isRegExp(t.delimiter)?t.delimiter:o.delimiter,t.depth="number"==typeof t.depth?t.depth:o.depth,t.arrayLimit="number"==typeof t.arrayLimit?t.arrayLimit:o.arrayLimit,t.parseArrays=t.parseArrays!==!1,t.allowDots=t.allowDots!==!1,t.plainObjects="boolean"==typeof t.plainObjects?t.plainObjects:o.plainObjects,t.allowPrototypes="boolean"==typeof t.allowPrototypes?t.allowPrototypes:o.allowPrototypes,t.parameterLimit="number"==typeof t.parameterLimit?t.parameterLimit:o.parameterLimit,t.strictNullHandling="boolean"==typeof t.strictNullHandling?t.strictNullHandling:o.strictNullHandling,""===e||null===e||"undefined"==typeof e)return t.plainObjects?Object.create(null):{};for(var n="string"==typeof e?o.parseValues(e,t):e,i=t.plainObjects?Object.create(null):{},a=Object.keys(n),s=0,u=a.length;u>s;++s){var c=a[s],l=o.parseKeys(c,n[c],t);i=r.merge(i,l,t)}return r.compact(i)}},{"./utils":72}],71:[function(e,t,n){var r=e("./utils"),o={delimiter:"&",arrayPrefixGenerators:{brackets:function(e,t){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e,t){return e}},strictNullHandling:!1};o.stringify=function(e,t,n,i,a){if("function"==typeof a)e=a(t,e);else if(r.isBuffer(e))e=e.toString();else if(e instanceof Date)e=e.toISOString();else if(null===e){if(i)return r.encode(t);e=""}if("string"==typeof e||"number"==typeof e||"boolean"==typeof e)return[r.encode(t)+"="+r.encode(e)];var s=[];if("undefined"==typeof e)return s;for(var u=Array.isArray(a)?a:Object.keys(e),c=0,l=u.length;l>c;++c){var p=u[c];s=Array.isArray(e)?s.concat(o.stringify(e[p],n(t,p),n,i,a)):s.concat(o.stringify(e[p],t+"["+p+"]",n,i,a))}return s},t.exports=function(e,t){t=t||{};var n,r,i="undefined"==typeof t.delimiter?o.delimiter:t.delimiter,a="boolean"==typeof t.strictNullHandling?t.strictNullHandling:o.strictNullHandling;"function"==typeof t.filter?(r=t.filter,e=r("",e)):Array.isArray(t.filter)&&(n=r=t.filter);var s=[];if("object"!=typeof e||null===e)return"";var u;u=t.arrayFormat in o.arrayPrefixGenerators?t.arrayFormat:"indices"in t?t.indices?"indices":"repeat":"indices";var c=o.arrayPrefixGenerators[u];n||(n=Object.keys(e));for(var l=0,p=n.length;p>l;++l){var f=n[l];s=s.concat(o.stringify(e[f],f,c,a,r))}return s.join(i)}},{"./utils":72}],72:[function(e,t,n){var r={};r.hexTable=new Array(256);for(var o=0;256>o;++o)r.hexTable[o]="%"+((16>o?"0":"")+o.toString(16)).toUpperCase();n.arrayToObject=function(e,t){for(var n=t.plainObjects?Object.create(null):{},r=0,o=e.length;o>r;++r)"undefined"!=typeof e[r]&&(n[r]=e[r]);return n},n.merge=function(e,t,r){if(!t)return e;if("object"!=typeof t)return Array.isArray(e)?e.push(t):"object"==typeof e?e[t]=!0:e=[e,t],e;if("object"!=typeof e)return e=[e].concat(t);Array.isArray(e)&&!Array.isArray(t)&&(e=n.arrayToObject(e,r));for(var o=Object.keys(t),i=0,a=o.length;a>i;++i){var s=o[i],u=t[s];Object.prototype.hasOwnProperty.call(e,s)?e[s]=n.merge(e[s],u,r):e[s]=u}return e},n.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},n.encode=function(e){if(0===e.length)return e;"string"!=typeof e&&(e=""+e);for(var t="",n=0,o=e.length;o>n;++n){var i=e.charCodeAt(n);45===i||46===i||95===i||126===i||i>=48&&57>=i||i>=65&&90>=i||i>=97&&122>=i?t+=e[n]:128>i?t+=r.hexTable[i]:2048>i?t+=r.hexTable[192|i>>6]+r.hexTable[128|63&i]:55296>i||i>=57344?t+=r.hexTable[224|i>>12]+r.hexTable[128|i>>6&63]+r.hexTable[128|63&i]:(++n,i=65536+((1023&i)<<10|1023&e.charCodeAt(n)),t+=r.hexTable[240|i>>18]+r.hexTable[128|i>>12&63]+r.hexTable[128|i>>6&63]+r.hexTable[128|63&i])}return t},n.compact=function(e,t){if("object"!=typeof e||null===e)return e;t=t||[];var r=t.indexOf(e);if(-1!==r)return t[r];if(t.push(e),Array.isArray(e)){for(var o=[],i=0,a=e.length;a>i;++i)"undefined"!=typeof e[i]&&o.push(e[i]);return o}var s=Object.keys(e);for(i=0,a=s.length;a>i;++i){var u=s[i];e[u]=n.compact(e[u],t)}return e},n.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},n.isBuffer=function(e){return null===e||"undefined"==typeof e?!1:!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},{}],73:[function(e,t,n){(function(e){"use strict";var n=function(t,n,r,o,i,a,s,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,i,a,s,u],p=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return l[p++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:114}],74:[function(e,t,n){!function(e,n){"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=Z.type(e);return"function"===n||Z.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(Z.isFunction(t))return Z.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return Z.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(se.test(t))return Z.filter(t,e,n);t=Z.filter(t,e)}return Z.grep(e,function(e){return $.call(t,e)>=0!==n})}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function i(e){var t=he[e]={};return Z.each(e.match(de)||[],function(e,n){t[n]=!0}),t}function a(){G.removeEventListener("DOMContentLoaded",a,!1),e.removeEventListener("load",a,!1),Z.ready()}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=Z.expando+s.uid++}function u(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(_e,"-$1").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:be.test(n)?Z.parseJSON(n):n}catch(o){}ye.set(e,t,n)}else n=void 0;return n}function c(){return!0}function l(){return!1}function p(){try{return G.activeElement}catch(e){}}function f(e,t){return Z.nodeName(e,"table")&&Z.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function d(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function h(e){var t=Ae.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function v(e,t){for(var n=0,r=e.length;r>n;n++)ge.set(e[n],"globalEval",!t||ge.get(t[n],"globalEval"))}function m(e,t){var n,r,o,i,a,s,u,c;if(1===t.nodeType){if(ge.hasData(e)&&(i=ge.access(e),a=ge.set(t,i),c=i.events)){delete a.handle,a.events={};for(o in c)for(n=0,r=c[o].length;r>n;n++)Z.event.add(t,o,c[o][n])}ye.hasData(e)&&(s=ye.access(e),u=Z.extend({},s),ye.set(t,u))}}function g(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&Z.nodeName(e,t)?Z.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ce.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function b(t,n){var r,o=Z(n.createElement(t)).appendTo(n.body),i=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(o[0]))?r.display:Z.css(o[0],"display");return o.detach(),i}function _(e){var t=G,n=Fe[e];return n||(n=b(e,t),"none"!==n&&n||(Ue=(Ue||Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Ue[0].contentDocument,t.write(),t.close(),n=b(e,t),Ue.detach()),Fe[e]=n),n}function E(e,t,n){var r,o,i,a,s=e.style;return n=n||qe(e),n&&(a=n.getPropertyValue(t)||n[t]),n&&(""!==a||Z.contains(e.ownerDocument,e)||(a=Z.style(e,t)),He.test(a)&&Be.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function w(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function O(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),r=t,o=Qe.length;o--;)if(t=Qe[o]+n,t in e)return t;return r}function C(e,t,n){var r=Ke.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function x(e,t,n,r,o){for(var i=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>i;i+=2)"margin"===n&&(a+=Z.css(e,n+we[i],!0,o)),r?("content"===n&&(a-=Z.css(e,"padding"+we[i],!0,o)),"margin"!==n&&(a-=Z.css(e,"border"+we[i]+"Width",!0,o))):(a+=Z.css(e,"padding"+we[i],!0,o),"padding"!==n&&(a+=Z.css(e,"border"+we[i]+"Width",!0,o)));return a}function N(e,t,n){var r=!0,o="width"===t?e.offsetWidth:e.offsetHeight,i=qe(e),a="border-box"===Z.css(e,"boxSizing",!1,i);if(0>=o||null==o){if(o=E(e,t,i),(0>o||null==o)&&(o=e.style[t]),He.test(o))return o;r=a&&(X.boxSizingReliable()||o===e.style[t]),o=parseFloat(o)||0}return o+x(e,t,n||(a?"border":"content"),r,i)+"px"}function D(e,t){for(var n,r,o,i=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(i[a]=ge.get(r,"olddisplay"),n=r.style.display,t?(i[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Oe(r)&&(i[a]=ge.access(r,"olddisplay",_(r.nodeName)))):(o=Oe(r),"none"===n&&o||ge.set(r,"olddisplay",o?n:Z.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?i[a]||"":"none"));return e}function R(e,t,n,r,o){return new R.prototype.init(e,t,n,r,o)}function T(){return setTimeout(function(){Xe=void 0}),Xe=Z.now()}function P(e,t){var n,r=0,o={height:e};for(t=t?1:0;4>r;r+=2-t)n=we[r],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function k(e,t,n){for(var r,o=(nt[t]||[]).concat(nt["*"]),i=0,a=o.length;a>i;i++)if(r=o[i].call(n,t,e))return r}function M(e,t,n){var r,o,i,a,s,u,c,l,p=this,f={},d=e.style,h=e.nodeType&&Oe(e),v=ge.get(e,"fxshow");n.queue||(s=Z._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,Z.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=Z.css(e,"display"),l="none"===c?ge.get(e,"olddisplay")||_(e.nodeName):c,"inline"===l&&"none"===Z.css(e,"float")&&(d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(o=t[r],Je.exec(o)){if(delete t[r],i=i||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!v||void 0===v[r])continue;h=!0}f[r]=v&&v[r]||Z.style(e,r)}else c=void 0;if(Z.isEmptyObject(f))"inline"===("none"===c?_(e.nodeName):c)&&(d.display=c);else{v?"hidden"in v&&(h=v.hidden):v=ge.access(e,"fxshow",{}),i&&(v.hidden=!h),h?Z(e).show():p.done(function(){Z(e).hide()}),p.done(function(){var t;ge.remove(e,"fxshow");for(t in f)Z.style(e,t,f[t])});for(r in f)a=k(h?v[r]:0,r,p),r in v||(v[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function S(e,t){var n,r,o,i,a;for(n in e)if(r=Z.camelCase(n),o=t[r],i=e[n],Z.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),a=Z.cssHooks[r],a&&"expand"in a){i=a.expand(i),delete e[r];for(n in i)n in e||(e[n]=i[n],t[n]=o)}else t[r]=o}function j(e,t,n){var r,o,i=0,a=tt.length,s=Z.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=Xe||T(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,i=1-r,a=0,u=c.tweens.length;u>a;a++)c.tweens[a].run(i);return s.notifyWith(e,[c,i,n]),1>i&&u?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:Z.extend({},t),opts:Z.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xe||T(),duration:n.duration,tweens:[],createTween:function(t,n){var r=Z.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;r>n;n++)c.tweens[n].run(1);return t?s.resolveWith(e,[c,t]):s.rejectWith(e,[c,t]),this}}),l=c.props;for(S(l,c.opts.specialEasing);a>i;i++)if(r=tt[i].call(c,e,l,c.opts))return r;return Z.map(l,k,c),Z.isFunction(c.opts.start)&&c.opts.start.call(e,c),Z.fx.timer(Z.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function I(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(de)||[];if(Z.isFunction(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function A(e,t,n,r){function o(s){var u;return i[s]=!0,Z.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||a||i[c]?a?!(u=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),u}var i={},a=e===bt;return o(t.dataTypes[0])||!i["*"]&&o("*")}function L(e,t){var n,r,o=Z.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&Z.extend(!0,e,r),e}function V(e,t,n){for(var r,o,i,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}return i?(i!==u[0]&&u.unshift(i),n[i]):void 0}function U(e,t,n,r){var o,i,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=l.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(a=c[u+" "+i]||c["* "+i],!a)for(o in c)if(s=o.split(" "),s[1]===i&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[o]:c[o]!==!0&&(i=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(p){return{state:"parsererror",error:a?p:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}function F(e,t,n,r){var o;if(Z.isArray(t))Z.each(t,function(t,o){n||Ct.test(e)?r(e,o):F(e+"["+("object"==typeof o?t:"")+"]",o,n,r)});else if(n||"object"!==Z.type(t))r(e,t);else for(o in t)F(e+"["+o+"]",t[o],n,r)}function B(e){return Z.isWindow(e)?e:9===e.nodeType&&e.defaultView}var H=[],q=H.slice,W=H.concat,K=H.push,$=H.indexOf,z={},Y=z.toString,Q=z.hasOwnProperty,X={},G=e.document,J="2.1.4",Z=function(e,t){return new Z.fn.init(e,t)},ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,te=/^-ms-/,ne=/-([\da-z])/gi,re=function(e,t){return t.toUpperCase()};Z.fn=Z.prototype={jquery:J,constructor:Z,selector:"",length:0,toArray:function(){return q.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:q.call(this)},pushStack:function(e){var t=Z.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return Z.each(this,e,t)},map:function(e){return this.pushStack(Z.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:K,sort:H.sort,splice:H.splice},Z.extend=Z.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||Z.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(c&&r&&(Z.isPlainObject(r)||(o=Z.isArray(r)))?(o?(o=!1,i=n&&Z.isArray(n)?n:[]):i=n&&Z.isPlainObject(n)?n:{},a[t]=Z.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},Z.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===Z.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!Z.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==Z.type(e)||e.nodeType||Z.isWindow(e)?!1:e.constructor&&!Q.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?z[Y.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=Z.trim(e),e&&(1===e.indexOf("use strict")?(t=G.createElement("script"),t.text=e,G.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){
return e.replace(te,"ms-").replace(ne,re)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var o,i=0,a=e.length,s=n(e);if(r){if(s)for(;a>i&&(o=t.apply(e[i],r),o!==!1);i++);else for(i in e)if(o=t.apply(e[i],r),o===!1)break}else if(s)for(;a>i&&(o=t.call(e[i],i,e[i]),o!==!1);i++);else for(i in e)if(o=t.call(e[i],i,e[i]),o===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ee,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?Z.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){return null==t?-1:$.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;n>r;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r,o=[],i=0,a=e.length,s=!n;a>i;i++)r=!t(e[i],i),r!==s&&o.push(e[i]);return o},map:function(e,t,r){var o,i=0,a=e.length,s=n(e),u=[];if(s)for(;a>i;i++)o=t(e[i],i,r),null!=o&&u.push(o);else for(i in e)o=t(e[i],i,r),null!=o&&u.push(o);return W.apply([],u)},guid:1,proxy:function(e,t){var n,r,o;return"string"==typeof t&&(n=e[t],t=e,e=n),Z.isFunction(e)?(r=q.call(arguments,2),o=function(){return e.apply(t||this,r.concat(q.call(arguments)))},o.guid=e.guid=e.guid||Z.guid++,o):void 0},now:Date.now,support:X}),Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){z["[object "+t+"]"]=t.toLowerCase()});var oe=function(e){function t(e,t,n,r){var o,i,a,s,u,c,p,d,h,v;if((t?t.ownerDocument||t:F)!==M&&k(t),t=t||M,n=n||[],s=t.nodeType,"string"!=typeof e||!e||1!==s&&9!==s&&11!==s)return n;if(!r&&j){if(11!==s&&(o=ye.exec(e)))if(a=o[1]){if(9===s){if(i=t.getElementById(a),!i||!i.parentNode)return n;if(i.id===a)return n.push(i),n}else if(t.ownerDocument&&(i=t.ownerDocument.getElementById(a))&&V(t,i)&&i.id===a)return n.push(i),n}else{if(o[2])return J.apply(n,t.getElementsByTagName(e)),n;if((a=o[3])&&E.getElementsByClassName)return J.apply(n,t.getElementsByClassName(a)),n}if(E.qsa&&(!I||!I.test(e))){if(d=p=U,h=t,v=1!==s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){for(c=x(e),(p=t.getAttribute("id"))?d=p.replace(_e,"\\$&"):t.setAttribute("id",d),d="[id='"+d+"'] ",u=c.length;u--;)c[u]=d+f(c[u]);h=be.test(e)&&l(t.parentNode)||t,v=c.join(",")}if(v)try{return J.apply(n,h.querySelectorAll(v)),n}catch(m){}finally{p||t.removeAttribute("id")}}}return D(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[U]=!0,e}function o(e){var t=M.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function i(e,t){for(var n=e.split("|"),r=e.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||z)-(~e.sourceIndex||z);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function l(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function f(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,o=n&&"parentNode"===r,i=H++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,i)}:function(t,n,a){var s,u,c=[B,i];if(a){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||o){if(u=t[U]||(t[U]={}),(s=u[r])&&s[0]===B&&s[1]===i)return c[2]=s[2];if(u[r]=c,c[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function v(e,n,r){for(var o=0,i=n.length;i>o;o++)t(e,n[o],r);return r}function m(e,t,n,r,o){for(var i,a=[],s=0,u=e.length,c=null!=t;u>s;s++)(i=e[s])&&(!n||n(i,r,o))&&(a.push(i),c&&t.push(s));return a}function g(e,t,n,o,i,a){return o&&!o[U]&&(o=g(o)),i&&!i[U]&&(i=g(i,a)),r(function(r,a,s,u){var c,l,p,f=[],d=[],h=a.length,g=r||v(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?g:m(g,f,e,s,u),b=n?i||(r?e:h||o)?[]:a:y;if(n&&n(y,b,s,u),o)for(c=m(b,d),o(c,[],s,u),l=c.length;l--;)(p=c[l])&&(b[d[l]]=!(y[d[l]]=p));if(r){if(i||e){if(i){for(c=[],l=b.length;l--;)(p=b[l])&&c.push(y[l]=p);i(null,b=[],c,u)}for(l=b.length;l--;)(p=b[l])&&(c=i?ee(r,p):f[l])>-1&&(r[c]=!(a[c]=p))}}else b=m(b===a?b.splice(h,b.length):b),i?i(null,a,b,u):J.apply(a,b)})}function y(e){for(var t,n,r,o=e.length,i=w.relative[e[0].type],a=i||w.relative[" "],s=i?1:0,u=d(function(e){return e===t},a,!0),c=d(function(e){return ee(t,e)>-1},a,!0),l=[function(e,n,r){var o=!i&&(r||n!==R)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,o}];o>s;s++)if(n=w.relative[e[s].type])l=[d(h(l),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[U]){for(r=++s;o>r&&!w.relative[e[r].type];r++);return g(s>1&&h(l),s>1&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ue,"$1"),n,r>s&&y(e.slice(s,r)),o>r&&y(e=e.slice(r)),o>r&&f(e))}l.push(n)}return h(l)}function b(e,n){var o=n.length>0,i=e.length>0,a=function(r,a,s,u,c){var l,p,f,d=0,h="0",v=r&&[],g=[],y=R,b=r||i&&w.find.TAG("*",c),_=B+=null==y?1:Math.random()||.1,E=b.length;for(c&&(R=a!==M&&a);h!==E&&null!=(l=b[h]);h++){if(i&&l){for(p=0;f=e[p++];)if(f(l,a,s)){u.push(l);break}c&&(B=_)}o&&((l=!f&&l)&&d--,r&&v.push(l))}if(d+=h,o&&h!==d){for(p=0;f=n[p++];)f(v,g,a,s);if(r){if(d>0)for(;h--;)v[h]||g[h]||(g[h]=X.call(u));g=m(g)}J.apply(u,g),c&&!r&&g.length>0&&d+n.length>1&&t.uniqueSort(u)}return c&&(B=_,R=y),v};return o?r(a):a}var _,E,w,O,C,x,N,D,R,T,P,k,M,S,j,I,A,L,V,U="sizzle"+1*new Date,F=e.document,B=0,H=0,q=n(),W=n(),K=n(),$=function(e,t){return e===t&&(P=!0),0},z=1<<31,Y={}.hasOwnProperty,Q=[],X=Q.pop,G=Q.push,J=Q.push,Z=Q.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",oe=re.replace("w","w#"),ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+oe+"))|)"+ne+"*\\]",ae=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ce=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),pe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(ae),de=new RegExp("^"+oe+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},ve=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,_e=/'|\\/g,Ee=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Oe=function(){k()};try{J.apply(Q=Z.call(F.childNodes),F.childNodes),Q[F.childNodes.length].nodeType}catch(Ce){J={apply:Q.length?function(e,t){G.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}E=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},k=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:F;return r!==M&&9===r.nodeType&&r.documentElement?(M=r,S=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Oe,!1):n.attachEvent&&n.attachEvent("onunload",Oe)),j=!C(r),E.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),E.getElementsByTagName=o(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),E.getElementsByClassName=ge.test(r.getElementsByClassName),E.getById=o(function(e){return S.appendChild(e).id=U,!r.getElementsByName||!r.getElementsByName(U).length}),E.getById?(w.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&j){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},w.filter.ID=function(e){var t=e.replace(Ee,we);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(Ee,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=E.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):E.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},w.find.CLASS=E.getElementsByClassName&&function(e,t){return j?t.getElementsByClassName(e):void 0},A=[],I=[],(E.qsa=ge.test(r.querySelectorAll))&&(o(function(e){S.appendChild(e).innerHTML="<a id='"+U+"'></a><select id='"+U+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+U+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+U+"+*").length||I.push(".#.+[+~]")}),o(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(E.matchesSelector=ge.test(L=S.matches||S.webkitMatchesSelector||S.mozMatchesSelector||S.oMatchesSelector||S.msMatchesSelector))&&o(function(e){E.disconnectedMatch=L.call(e,"div"),L.call(e,"[s!='']:x"),A.push("!=",ae)}),I=I.length&&new RegExp(I.join("|")),A=A.length&&new RegExp(A.join("|")),t=ge.test(S.compareDocumentPosition),V=t||ge.test(S.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},$=t?function(e,t){if(e===t)return P=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!E.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===F&&V(F,e)?-1:t===r||t.ownerDocument===F&&V(F,t)?1:T?ee(T,e)-ee(T,t):0:4&n?-1:1)}:function(e,t){if(e===t)return P=!0,0;var n,o=0,i=e.parentNode,s=t.parentNode,u=[e],c=[t];if(!i||!s)return e===r?-1:t===r?1:i?-1:s?1:T?ee(T,e)-ee(T,t):0;if(i===s)return a(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;u[o]===c[o];)o++;return o?a(u[o],c[o]):u[o]===F?-1:c[o]===F?1:0},r):M},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==M&&k(e),n=n.replace(pe,"='$1']"),E.matchesSelector&&j&&(!A||!A.test(n))&&(!I||!I.test(n)))try{var r=L.call(e,n);if(r||E.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(o){}return t(n,M,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==M&&k(e),V(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==M&&k(e);var n=w.attrHandle[t.toLowerCase()],r=n&&Y.call(w.attrHandle,t.toLowerCase())?n(e,t,!j):void 0;return void 0!==r?r:E.attributes||!j?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,o=0;if(P=!E.detectDuplicates,T=!E.sortStable&&e.slice(0),e.sort($),P){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return T=null,e},O=t.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=O(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=O(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Ee,we),e[3]=(e[3]||e[4]||e[5]||"").replace(Ee,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=x(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Ee,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=q[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&q(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(o){var i=t.attr(o,e);return null==i?"!="===n:n?(i+="","="===n?i===r:"!="===n?i!==r:"^="===n?r&&0===i.indexOf(r):"*="===n?r&&i.indexOf(r)>-1:"$="===n?r&&i.slice(-r.length)===r:"~="===n?(" "+i.replace(se," ")+" ").indexOf(r)>-1:"|="===n?i===r||i.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var c,l,p,f,d,h,v=i!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!u&&!s;if(m){if(i){for(;v;){for(p=t;p=p[v];)if(s?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(l=m[U]||(m[U]={}),c=l[e]||[],d=c[0]===B&&c[1],f=c[0]===B&&c[2],p=d&&m.childNodes[d];p=++d&&p&&p[v]||(f=d=0)||h.pop();)if(1===p.nodeType&&++f&&p===t){l[e]=[B,d,f];break}}else if(y&&(c=(t[U]||(t[U]={}))[e])&&c[0]===B)f=c[1];else for(;(p=++d&&p&&p[v]||(f=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++f||(y&&((p[U]||(p[U]={}))[e]=[B,f]),p!==t)););return f-=o,f===r||f%r===0&&f/r>=0}}},PSEUDO:function(e,n){var o,i=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return i[U]?i(n):i.length>1?(o=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,o=i(e,n),a=o.length;a--;)r=ee(e,o[a]),e[r]=!(t[r]=o[a])}):function(e){return i(e,0,o)}):i}},pseudos:{not:r(function(e){var t=[],n=[],o=N(e.replace(ue,"$1"));return o[U]?r(function(e,t,n,r){for(var i,a=o(e,null,r,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))}):function(e,r,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(Ee,we),function(t){return(t.textContent||t.innerText||O(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(Ee,we).toLowerCase(),function(t){var n;do if(n=j?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===S},focus:function(e){return e===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return ve.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[0>n?n+t:n]}),even:c(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[_]=s(_);for(_ in{submit:!0,reset:!0})w.pseudos[_]=u(_);return p.prototype=w.filters=w.pseudos,w.setFilters=new p,x=t.tokenize=function(e,n){var r,o,i,a,s,u,c,l=W[e+" "];if(l)return n?0:l.slice(0);for(s=e,u=[],c=w.preFilter;s;){(!r||(o=ce.exec(s)))&&(o&&(s=s.slice(o[0].length)||s),u.push(i=[])),r=!1,(o=le.exec(s))&&(r=o.shift(),i.push({value:r,type:o[0].replace(ue," ")}),s=s.slice(r.length));for(a in w.filter)!(o=he[a].exec(s))||c[a]&&!(o=c[a](o))||(r=o.shift(),i.push({value:r,type:a,matches:o}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):W(e,u).slice(0)},N=t.compile=function(e,t){var n,r=[],o=[],i=K[e+" "];if(!i){for(t||(t=x(e)),n=t.length;n--;)i=y(t[n]),i[U]?r.push(i):o.push(i);i=K(e,b(o,r)),i.selector=e}return i},D=t.select=function(e,t,n,r){var o,i,a,s,u,c="function"==typeof e&&e,p=!r&&x(e=c.selector||e);if(n=n||[],1===p.length){if(i=p[0]=p[0].slice(0),i.length>2&&"ID"===(a=i[0]).type&&E.getById&&9===t.nodeType&&j&&w.relative[i[1].type]){if(t=(w.find.ID(a.matches[0].replace(Ee,we),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=he.needsContext.test(e)?0:i.length;o--&&(a=i[o],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(Ee,we),be.test(i[0].type)&&l(t.parentNode)||t))){if(i.splice(o,1),e=r.length&&f(i),!e)return J.apply(n,r),n;break}}return(c||N(e,p))(r,t,!j,n,be.test(e)&&l(t.parentNode)||t),n},E.sortStable=U.split("").sort($).join("")===U,E.detectDuplicates=!!P,k(),E.sortDetached=o(function(e){return 1&e.compareDocumentPosition(M.createElement("div"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||i("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),E.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||i("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||i(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);Z.find=oe,Z.expr=oe.selectors,Z.expr[":"]=Z.expr.pseudos,Z.unique=oe.uniqueSort,Z.text=oe.getText,Z.isXMLDoc=oe.isXML,Z.contains=oe.contains;var ie=Z.expr.match.needsContext,ae=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,se=/^.[^:#\[\.,]*$/;Z.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Z.find.matchesSelector(r,e)?[r]:[]:Z.find.matches(e,Z.grep(t,function(e){return 1===e.nodeType}))},Z.fn.extend({find:function(e){var t,n=this.length,r=[],o=this;if("string"!=typeof e)return this.pushStack(Z(e).filter(function(){for(t=0;n>t;t++)if(Z.contains(o[t],this))return!0}));for(t=0;n>t;t++)Z.find(e,o[t],r);return r=this.pushStack(n>1?Z.unique(r):r),r.selector=this.selector?this.selector+" "+e:e,r},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&ie.test(e)?Z(e):e||[],!1).length}});var ue,ce=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,le=Z.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:ce.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||ue).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof Z?t[0]:t,Z.merge(this,Z.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:G,!0)),ae.test(n[1])&&Z.isPlainObject(t))for(n in t)Z.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=G.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=G,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):Z.isFunction(e)?"undefined"!=typeof ue.ready?ue.ready(e):e(Z):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),Z.makeArray(e,this))};le.prototype=Z.fn,ue=Z(G);var pe=/^(?:parents|prev(?:Until|All))/,fe={children:!0,contents:!0,next:!0,prev:!0};Z.extend({dir:function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&Z(e).is(n))break;r.push(e)}return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),Z.fn.extend({has:function(e){var t=Z(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(Z.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,r=0,o=this.length,i=[],a=ie.test(e)||"string"!=typeof e?Z(e,t||this.context):0;o>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&Z.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?Z.unique(i):i)},index:function(e){return e?"string"==typeof e?$.call(Z(e),this[0]):$.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Z.unique(Z.merge(this.get(),Z(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Z.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Z.dir(e,"parentNode")},parentsUntil:function(e,t,n){return Z.dir(e,"parentNode",n)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return Z.dir(e,"nextSibling")},prevAll:function(e){return Z.dir(e,"previousSibling")},nextUntil:function(e,t,n){return Z.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return Z.dir(e,"previousSibling",n)},siblings:function(e){return Z.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return Z.sibling(e.firstChild)},contents:function(e){return e.contentDocument||Z.merge([],e.childNodes)}},function(e,t){Z.fn[e]=function(n,r){var o=Z.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=Z.filter(r,o)),this.length>1&&(fe[e]||Z.unique(o),pe.test(e)&&o.reverse()),this.pushStack(o)}});var de=/\S+/g,he={};Z.Callbacks=function(e){e="string"==typeof e?he[e]||i(e):Z.extend({},e);var t,n,r,o,a,s,u=[],c=!e.once&&[],l=function(i){for(t=e.memory&&i,n=!0,s=o||0,o=0,a=u.length,r=!0;u&&a>s;s++)if(u[s].apply(i[0],i[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,u&&(c?c.length&&l(c.shift()):t?u=[]:p.disable())},p={add:function(){if(u){var n=u.length;!function i(t){Z.each(t,function(t,n){var r=Z.type(n);"function"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&"string"!==r&&i(n)})}(arguments),r?a=u.length:t&&(o=n,l(t))}return this},remove:function(){return u&&Z.each(arguments,function(e,t){for(var n;(n=Z.inArray(t,u,n))>-1;)u.splice(n,1),r&&(a>=n&&a--,s>=n&&s--)}),this},has:function(e){return e?Z.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],a=0,this},disable:function(){return u=c=t=void 0,this},disabled:function(){return!u},lock:function(){return c=void 0,t||p.disable(),this},locked:function(){return!c},fireWith:function(e,t){return!u||n&&!c||(t=t||[],t=[e,t.slice?t.slice():t],r?c.push(t):l(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!n}};return p},Z.extend({Deferred:function(e){var t=[["resolve","done",Z.Callbacks("once memory"),"resolved"],["reject","fail",Z.Callbacks("once memory"),"rejected"],["notify","progress",Z.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var e=arguments;return Z.Deferred(function(n){Z.each(t,function(t,i){var a=Z.isFunction(e[t])&&e[t];o[i[1]](function(){var e=a&&a.apply(this,arguments);e&&Z.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[i[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?Z.extend(e,r):r}},o={};return r.pipe=r.then,Z.each(t,function(e,i){var a=i[2],s=i[3];r[i[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),o[i[0]]=function(){return o[i[0]+"With"](this===o?r:this,arguments),this},o[i[0]+"With"]=a.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t,n,r,o=0,i=q.call(arguments),a=i.length,s=1!==a||e&&Z.isFunction(e.promise)?a:0,u=1===s?e:Z.Deferred(),c=function(e,n,r){return function(o){n[e]=this,r[e]=arguments.length>1?q.call(arguments):o,r===t?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>o;o++)i[o]&&Z.isFunction(i[o].promise)?i[o].promise().done(c(o,r,i)).fail(u.reject).progress(c(o,n,t)):--s;return s||u.resolveWith(r,i),u.promise()}});var ve;Z.fn.ready=function(e){return Z.ready.promise().done(e),this},Z.extend({isReady:!1,readyWait:1,holdReady:function(e){e?Z.readyWait++:Z.ready(!0)},ready:function(e){(e===!0?--Z.readyWait:Z.isReady)||(Z.isReady=!0,e!==!0&&--Z.readyWait>0||(ve.resolveWith(G,[Z]),Z.fn.triggerHandler&&(Z(G).triggerHandler("ready"),Z(G).off("ready"))))}}),Z.ready.promise=function(t){return ve||(ve=Z.Deferred(),"complete"===G.readyState?setTimeout(Z.ready):(G.addEventListener("DOMContentLoaded",a,!1),e.addEventListener("load",a,!1))),ve.promise(t)},Z.ready.promise();var me=Z.access=function(e,t,n,r,o,i,a){var s=0,u=e.length,c=null==n;if("object"===Z.type(n)){o=!0;for(s in n)Z.access(e,t,s,n[s],!0,i,a)}else if(void 0!==r&&(o=!0,Z.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(Z(e),n)})),t))for(;u>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):u?t(e[0],n):i};Z.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},s.uid=1,s.accepts=Z.acceptData,s.prototype={key:function(e){if(!s.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=s.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,Z.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,o=this.key(e),i=this.cache[o];if("string"==typeof t)i[t]=n;else if(Z.isEmptyObject(i))Z.extend(this.cache[o],t);else for(r in t)i[r]=t[r];return i},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var r;return void 0===t||t&&"string"==typeof t&&void 0===n?(r=this.get(e,t),void 0!==r?r:this.get(e,Z.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r,o,i=this.key(e),a=this.cache[i];if(void 0===t)this.cache[i]={};else{Z.isArray(t)?r=t.concat(t.map(Z.camelCase)):(o=Z.camelCase(t),t in a?r=[t,o]:(r=o,r=r in a?[r]:r.match(de)||[])),n=r.length;for(;n--;)delete a[r[n]]}},hasData:function(e){return!Z.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var ge=new s,ye=new s,be=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,_e=/([A-Z])/g;Z.extend({hasData:function(e){return ye.hasData(e)||ge.hasData(e)},data:function(e,t,n){return ye.access(e,t,n)},removeData:function(e,t){ye.remove(e,t)},_data:function(e,t,n){return ge.access(e,t,n)},_removeData:function(e,t){ge.remove(e,t)}}),Z.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=ye.get(i),1===i.nodeType&&!ge.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=Z.camelCase(r.slice(5)),u(i,r,o[r])));ge.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){ye.set(this,e)}):me(this,function(t){var n,r=Z.camelCase(e);if(i&&void 0===t){if(n=ye.get(i,e),void 0!==n)return n;if(n=ye.get(i,r),void 0!==n)return n;if(n=u(i,r,void 0),void 0!==n)return n}else this.each(function(){var n=ye.get(this,r);ye.set(this,r,t),-1!==e.indexOf("-")&&void 0!==n&&ye.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ye.remove(this,e)})}}),Z.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ge.get(e,t),n&&(!r||Z.isArray(n)?r=ge.access(e,t,Z.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=Z.queue(e,t),r=n.length,o=n.shift(),i=Z._queueHooks(e,t),a=function(){Z.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,a,i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ge.get(e,n)||ge.access(e,n,{empty:Z.Callbacks("once memory").add(function(){ge.remove(e,[t+"queue",n])})})}}),Z.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?Z.queue(this[0],e):void 0===t?this:this.each(function(){var n=Z.queue(this,e,t);Z._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&Z.dequeue(this,e)})},dequeue:function(e){return this.each(function(){Z.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=Z.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=ge.get(i[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var Ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,we=["Top","Right","Bottom","Left"],Oe=function(e,t){return e=t||e,"none"===Z.css(e,"display")||!Z.contains(e.ownerDocument,e)},Ce=/^(?:checkbox|radio)$/i;!function(){var e=G.createDocumentFragment(),t=e.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),X.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",X.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var xe="undefined";X.focusinBubbles="onfocusin"in e;var Ne=/^key/,De=/^(?:mouse|pointer|contextmenu)|click/,Re=/^(?:focusinfocus|focusoutblur)$/,Te=/^([^.]*)(?:\.(.+)|)$/;Z.event={global:{},add:function(e,t,n,r,o){var i,a,s,u,c,l,p,f,d,h,v,m=ge.get(e);if(m)for(n.handler&&(i=n,n=i.handler,o=i.selector),n.guid||(n.guid=Z.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return typeof Z!==xe&&Z.event.triggered!==t.type?Z.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(de)||[""],c=t.length;c--;)s=Te.exec(t[c])||[],d=v=s[1],h=(s[2]||"").split(".").sort(),d&&(p=Z.event.special[d]||{},d=(o?p.delegateType:p.bindType)||d,p=Z.event.special[d]||{},l=Z.extend({type:d,origType:v,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&Z.expr.match.needsContext.test(o),namespace:h.join(".")},i),(f=u[d])||(f=u[d]=[],f.delegateCount=0,p.setup&&p.setup.call(e,r,h,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),
p.add&&(p.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,l):f.push(l),Z.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,s,u,c,l,p,f,d,h,v,m=ge.hasData(e)&&ge.get(e);if(m&&(u=m.events)){for(t=(t||"").match(de)||[""],c=t.length;c--;)if(s=Te.exec(t[c])||[],d=v=s[1],h=(s[2]||"").split(".").sort(),d){for(p=Z.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=u[d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=f.length;i--;)l=f[i],!o&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(f.splice(i,1),l.selector&&f.delegateCount--,p.remove&&p.remove.call(e,l));a&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||Z.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)Z.event.remove(e,d+t[c],n,r,!0);Z.isEmptyObject(u)&&(delete m.handle,ge.remove(e,"events"))}},trigger:function(t,n,r,o){var i,a,s,u,c,l,p,f=[r||G],d=Q.call(t,"type")?t.type:t,h=Q.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||G,3!==r.nodeType&&8!==r.nodeType&&!Re.test(d+Z.event.triggered)&&(d.indexOf(".")>=0&&(h=d.split("."),d=h.shift(),h.sort()),c=d.indexOf(":")<0&&"on"+d,t=t[Z.expando]?t:new Z.Event(d,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:Z.makeArray(n,[t]),p=Z.event.special[d]||{},o||!p.trigger||p.trigger.apply(r,n)!==!1)){if(!o&&!p.noBubble&&!Z.isWindow(r)){for(u=p.delegateType||d,Re.test(u+d)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(r.ownerDocument||G)&&f.push(s.defaultView||s.parentWindow||e)}for(i=0;(a=f[i++])&&!t.isPropagationStopped();)t.type=i>1?u:p.bindType||d,l=(ge.get(a,"events")||{})[t.type]&&ge.get(a,"handle"),l&&l.apply(a,n),l=c&&a[c],l&&l.apply&&Z.acceptData(a)&&(t.result=l.apply(a,n),t.result===!1&&t.preventDefault());return t.type=d,o||t.isDefaultPrevented()||p._default&&p._default.apply(f.pop(),n)!==!1||!Z.acceptData(r)||c&&Z.isFunction(r[d])&&!Z.isWindow(r)&&(s=r[c],s&&(r[c]=null),Z.event.triggered=d,r[d](),Z.event.triggered=void 0,s&&(r[c]=s)),t.result}},dispatch:function(e){e=Z.event.fix(e);var t,n,r,o,i,a=[],s=q.call(arguments),u=(ge.get(this,"events")||{})[e.type]||[],c=Z.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){for(a=Z.event.handlers.call(this,e,u),t=0;(o=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((Z.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,o,i,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||"click"!==e.type){for(r=[],n=0;s>n;n++)i=t[n],o=i.selector+" ",void 0===r[o]&&(r[o]=i.needsContext?Z(o,this).index(u)>=0:Z.find(o,this,null,[u]).length),r[o]&&r.push(i);r.length&&a.push({elem:u,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,o,i=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||G,r=n.documentElement,o=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||o&&o.scrollLeft||0)-(r&&r.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||o&&o.scrollTop||0)-(r&&r.clientTop||o&&o.clientTop||0)),e.which||void 0===i||(e.which=1&i?1:2&i?3:4&i?2:0),e}},fix:function(e){if(e[Z.expando])return e;var t,n,r,o=e.type,i=e,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=De.test(o)?this.mouseHooks:Ne.test(o)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new Z.Event(i),t=r.length;t--;)n=r[t],e[n]=i[n];return e.target||(e.target=G),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,i):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==p()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===p()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&Z.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return Z.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var o=Z.extend(new Z.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?Z.event.trigger(o,null,t):Z.event.dispatch.call(t,o),o.isDefaultPrevented()&&n.preventDefault()}},Z.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},Z.Event=function(e,t){return this instanceof Z.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?c:l):this.type=e,t&&Z.extend(this,t),this.timeStamp=e&&e.timeStamp||Z.now(),void(this[Z.expando]=!0)):new Z.Event(e,t)},Z.Event.prototype={isDefaultPrevented:l,isPropagationStopped:l,isImmediatePropagationStopped:l,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=c,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=c,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=c,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},Z.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){Z.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return(!o||o!==r&&!Z.contains(r,o))&&(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),X.focusinBubbles||Z.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){Z.event.simulate(t,e.target,Z.event.fix(e),!0)};Z.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=ge.access(r,t);o||r.addEventListener(e,n,!0),ge.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=ge.access(r,t)-1;o?ge.access(r,t,o):(r.removeEventListener(e,n,!0),ge.remove(r,t))}}}),Z.fn.extend({on:function(e,t,n,r,o){var i,a;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(a in e)this.on(a,t,n,e[a],o);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=l;else if(!r)return this;return 1===o&&(i=r,r=function(e){return Z().off(e),i.apply(this,arguments)},r.guid=i.guid||(i.guid=Z.guid++)),this.each(function(){Z.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Z(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=l),this.each(function(){Z.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){Z.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?Z.event.trigger(e,t,n,!0):void 0}});var Pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ke=/<([\w:]+)/,Me=/<|&#?\w+;/,Se=/<(?:script|style|link)/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^$|\/(?:java|ecma)script/i,Ae=/^true\/(.*)/,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ve.optgroup=Ve.option,Ve.tbody=Ve.tfoot=Ve.colgroup=Ve.caption=Ve.thead,Ve.th=Ve.td,Z.extend({clone:function(e,t,n){var r,o,i,a,s=e.cloneNode(!0),u=Z.contains(e.ownerDocument,e);if(!(X.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Z.isXMLDoc(e)))for(a=g(s),i=g(e),r=0,o=i.length;o>r;r++)y(i[r],a[r]);if(t)if(n)for(i=i||g(e),a=a||g(s),r=0,o=i.length;o>r;r++)m(i[r],a[r]);else m(e,s);return a=g(s,"script"),a.length>0&&v(a,!u&&g(e,"script")),s},buildFragment:function(e,t,n,r){for(var o,i,a,s,u,c,l=t.createDocumentFragment(),p=[],f=0,d=e.length;d>f;f++)if(o=e[f],o||0===o)if("object"===Z.type(o))Z.merge(p,o.nodeType?[o]:o);else if(Me.test(o)){for(i=i||l.appendChild(t.createElement("div")),a=(ke.exec(o)||["",""])[1].toLowerCase(),s=Ve[a]||Ve._default,i.innerHTML=s[1]+o.replace(Pe,"<$1></$2>")+s[2],c=s[0];c--;)i=i.lastChild;Z.merge(p,i.childNodes),i=l.firstChild,i.textContent=""}else p.push(t.createTextNode(o));for(l.textContent="",f=0;o=p[f++];)if((!r||-1===Z.inArray(o,r))&&(u=Z.contains(o.ownerDocument,o),i=g(l.appendChild(o),"script"),u&&v(i),n))for(c=0;o=i[c++];)Ie.test(o.type||"")&&n.push(o);return l},cleanData:function(e){for(var t,n,r,o,i=Z.event.special,a=0;void 0!==(n=e[a]);a++){if(Z.acceptData(n)&&(o=n[ge.expando],o&&(t=ge.cache[o]))){if(t.events)for(r in t.events)i[r]?Z.event.remove(n,r):Z.removeEvent(n,r,t.handle);ge.cache[o]&&delete ge.cache[o]}delete ye.cache[n[ye.expando]]}}}),Z.fn.extend({text:function(e){return me(this,function(e){return void 0===e?Z.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=f(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=f(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?Z.filter(e,this):this,o=0;null!=(n=r[o]);o++)t||1!==n.nodeType||Z.cleanData(g(n)),n.parentNode&&(t&&Z.contains(n.ownerDocument,n)&&v(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Z.cleanData(g(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return Z.clone(this,e,t)})},html:function(e){return me(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Se.test(e)&&!Ve[(ke.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Pe,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(Z.cleanData(g(t,!1)),t.innerHTML=e);t=0}catch(o){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,Z.cleanData(g(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=W.apply([],e);var n,r,o,i,a,s,u=0,c=this.length,l=this,p=c-1,f=e[0],v=Z.isFunction(f);if(v||c>1&&"string"==typeof f&&!X.checkClone&&je.test(f))return this.each(function(n){var r=l.eq(n);v&&(e[0]=f.call(this,n,r.html())),r.domManip(e,t)});if(c&&(n=Z.buildFragment(e,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(o=Z.map(g(n,"script"),d),i=o.length;c>u;u++)a=n,u!==p&&(a=Z.clone(a,!0,!0),i&&Z.merge(o,g(a,"script"))),t.call(this[u],a,u);if(i)for(s=o[o.length-1].ownerDocument,Z.map(o,h),u=0;i>u;u++)a=o[u],Ie.test(a.type||"")&&!ge.access(a,"globalEval")&&Z.contains(s,a)&&(a.src?Z._evalUrl&&Z._evalUrl(a.src):Z.globalEval(a.textContent.replace(Le,"")))}return this}}),Z.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){Z.fn[e]=function(e){for(var n,r=[],o=Z(e),i=o.length-1,a=0;i>=a;a++)n=a===i?this:this.clone(!0),Z(o[a])[t](n),K.apply(r,n.get());return this.pushStack(r)}});var Ue,Fe={},Be=/^margin/,He=new RegExp("^("+Ee+")(?!px)[a-z%]+$","i"),qe=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",o.appendChild(i);var t=e.getComputedStyle(a,null);n="1%"!==t.top,r="4px"===t.width,o.removeChild(i)}var n,r,o=G.documentElement,i=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",X.clearCloneStyle="content-box"===a.style.backgroundClip,i.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",i.appendChild(a),e.getComputedStyle&&Z.extend(X,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==r&&t(),r},reliableMarginRight:function(){var t,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",o.appendChild(i),t=!parseFloat(e.getComputedStyle(n,null).marginRight),o.removeChild(i),a.removeChild(n),t}}))}(),Z.swap=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];o=n.apply(e,r||[]);for(i in t)e.style[i]=a[i];return o};var We=/^(none|table(?!-c[ea]).+)/,Ke=new RegExp("^("+Ee+")(.*)$","i"),$e=new RegExp("^([+-])=("+Ee+")","i"),ze={position:"absolute",visibility:"hidden",display:"block"},Ye={letterSpacing:"0",fontWeight:"400"},Qe=["Webkit","O","Moz","ms"];Z.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=E(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=Z.camelCase(t),u=e.style;return t=Z.cssProps[s]||(Z.cssProps[s]=O(u,s)),a=Z.cssHooks[t]||Z.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:u[t]:(i=typeof n,"string"===i&&(o=$e.exec(n))&&(n=(o[1]+1)*o[2]+parseFloat(Z.css(e,t)),i="number"),null!=n&&n===n&&("number"!==i||Z.cssNumber[s]||(n+="px"),X.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var o,i,a,s=Z.camelCase(t);return t=Z.cssProps[s]||(Z.cssProps[s]=O(e.style,s)),a=Z.cssHooks[t]||Z.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=E(e,t,r)),"normal"===o&&t in Ye&&(o=Ye[t]),""===n||n?(i=parseFloat(o),n===!0||Z.isNumeric(i)?i||0:o):o}}),Z.each(["height","width"],function(e,t){Z.cssHooks[t]={get:function(e,n,r){return n?We.test(Z.css(e,"display"))&&0===e.offsetWidth?Z.swap(e,ze,function(){return N(e,t,r)}):N(e,t,r):void 0},set:function(e,n,r){var o=r&&qe(e);return C(e,n,r?x(e,t,r,"border-box"===Z.css(e,"boxSizing",!1,o),o):0)}}}),Z.cssHooks.marginRight=w(X.reliableMarginRight,function(e,t){return t?Z.swap(e,{display:"inline-block"},E,[e,"marginRight"]):void 0}),Z.each({margin:"",padding:"",border:"Width"},function(e,t){Z.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];4>r;r++)o[e+we[r]+t]=i[r]||i[r-2]||i[0];return o}},Be.test(e)||(Z.cssHooks[e+t].set=C)}),Z.fn.extend({css:function(e,t){return me(this,function(e,t,n){var r,o,i={},a=0;if(Z.isArray(t)){for(r=qe(e),o=t.length;o>a;a++)i[t[a]]=Z.css(e,t[a],!1,r);return i}return void 0!==n?Z.style(e,t,n):Z.css(e,t)},e,t,arguments.length>1)},show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Oe(this)?Z(this).show():Z(this).hide()})}}),Z.Tween=R,R.prototype={constructor:R,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(Z.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=Z.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=Z.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){Z.fx.step[e.prop]?Z.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[Z.cssProps[e.prop]]||Z.cssHooks[e.prop])?Z.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Z.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},Z.fx=R.prototype.init,Z.fx.step={};var Xe,Ge,Je=/^(?:toggle|show|hide)$/,Ze=new RegExp("^(?:([+-])=|)("+Ee+")([a-z%]*)$","i"),et=/queueHooks$/,tt=[M],nt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),o=Ze.exec(t),i=o&&o[3]||(Z.cssNumber[e]?"":"px"),a=(Z.cssNumber[e]||"px"!==i&&+r)&&Ze.exec(Z.css(n.elem,e)),s=1,u=20;if(a&&a[3]!==i){i=i||a[3],o=o||[],a=+r||1;do s=s||".5",a/=s,Z.style(n.elem,e,a+i);while(s!==(s=n.cur()/r)&&1!==s&&--u)}return o&&(a=n.start=+a||+r||0,n.unit=i,n.end=o[1]?a+(o[1]+1)*o[2]:+o[2]),n}]};Z.Animation=Z.extend(j,{tweener:function(e,t){Z.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,o=e.length;o>r;r++)n=e[r],nt[n]=nt[n]||[],nt[n].unshift(t)},prefilter:function(e,t){t?tt.unshift(e):tt.push(e)}}),Z.speed=function(e,t,n){var r=e&&"object"==typeof e?Z.extend({},e):{complete:n||!n&&t||Z.isFunction(e)&&e,duration:e,easing:n&&t||t&&!Z.isFunction(t)&&t};return r.duration=Z.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in Z.fx.speeds?Z.fx.speeds[r.duration]:Z.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){Z.isFunction(r.old)&&r.old.call(this),r.queue&&Z.dequeue(this,r.queue)},r},Z.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Oe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=Z.isEmptyObject(e),i=Z.speed(t,n,r),a=function(){var t=j(this,Z.extend({},e),i);(o||ge.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||i.queue===!1?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=Z.timers,a=ge.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&et.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));(t||!n)&&Z.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ge.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=Z.timers,a=r?r.length:0;for(n.finish=!0,Z.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),Z.each(["toggle","show","hide"],function(e,t){var n=Z.fn[t];Z.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,r,o)}}),Z.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){Z.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),Z.timers=[],Z.fx.tick=function(){var e,t=0,n=Z.timers;for(Xe=Z.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||Z.fx.stop(),Xe=void 0},Z.fx.timer=function(e){Z.timers.push(e),e()?Z.fx.start():Z.timers.pop()},Z.fx.interval=13,Z.fx.start=function(){Ge||(Ge=setInterval(Z.fx.tick,Z.fx.interval))},Z.fx.stop=function(){clearInterval(Ge),Ge=null},Z.fx.speeds={slow:600,fast:200,_default:400},Z.fn.delay=function(e,t){return e=Z.fx?Z.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e=G.createElement("input"),t=G.createElement("select"),n=t.appendChild(G.createElement("option"));e.type="checkbox",X.checkOn=""!==e.value,X.optSelected=n.selected,t.disabled=!0,X.optDisabled=!n.disabled,e=G.createElement("input"),e.value="t",e.type="radio",X.radioValue="t"===e.value}();var rt,ot,it=Z.expr.attrHandle;Z.fn.extend({attr:function(e,t){return me(this,Z.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){Z.removeAttr(this,e)})}}),Z.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(e&&3!==i&&8!==i&&2!==i)return typeof e.getAttribute===xe?Z.prop(e,t,n):(1===i&&Z.isXMLDoc(e)||(t=t.toLowerCase(),r=Z.attrHooks[t]||(Z.expr.match.bool.test(t)?ot:rt)),void 0===n?r&&"get"in r&&null!==(o=r.get(e,t))?o:(o=Z.find.attr(e,t),null==o?void 0:o):null!==n?r&&"set"in r&&void 0!==(o=r.set(e,n,t))?o:(e.setAttribute(t,n+""),n):void Z.removeAttr(e,t))},removeAttr:function(e,t){var n,r,o=0,i=t&&t.match(de);if(i&&1===e.nodeType)for(;n=i[o++];)r=Z.propFix[n]||n,Z.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!X.radioValue&&"radio"===t&&Z.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),ot={set:function(e,t,n){return t===!1?Z.removeAttr(e,n):e.setAttribute(n,n),n}},Z.each(Z.expr.match.bool.source.match(/\w+/g),function(e,t){var n=it[t]||Z.find.attr;it[t]=function(e,t,r){var o,i;return r||(i=it[t],it[t]=o,o=null!=n(e,t,r)?t.toLowerCase():null,it[t]=i),o}});var at=/^(?:input|select|textarea|button)$/i;Z.fn.extend({prop:function(e,t){return me(this,Z.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[Z.propFix[e]||e]})}}),Z.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,o,i,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return i=1!==a||!Z.isXMLDoc(e),i&&(t=Z.propFix[t]||t,o=Z.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||at.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),X.optSelected||(Z.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),Z.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Z.propFix[this.toLowerCase()]=this});var st=/[\t\r\n\f]/g;Z.fn.extend({addClass:function(e){var t,n,r,o,i,a,s="string"==typeof e&&e,u=0,c=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).addClass(e.call(this,t,this.className))});if(s)for(t=(e||"").match(de)||[];c>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(st," "):" ")){for(i=0;o=t[i++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a=Z.trim(r),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,r,o,i,a,s=0===arguments.length||"string"==typeof e&&e,u=0,c=this.length;if(Z.isFunction(e))return this.each(function(t){Z(this).removeClass(e.call(this,t,this.className))});if(s)for(t=(e||"").match(de)||[];c>u;u++)if(n=this[u],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(st," "):"")){for(i=0;o=t[i++];)for(;r.indexOf(" "+o+" ")>=0;)r=r.replace(" "+o+" "," ");a=e?Z.trim(r):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):Z.isFunction(e)?this.each(function(n){Z(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,o=Z(this),i=e.match(de)||[];t=i[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else(n===xe||"boolean"===n)&&(this.className&&ge.set(this,"__className__",this.className),this.className=this.className||e===!1?"":ge.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(st," ").indexOf(t)>=0)return!0;return!1}});var ut=/\r/g;Z.fn.extend({val:function(e){var t,n,r,o=this[0];{if(arguments.length)return r=Z.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=r?e.call(this,n,Z(this).val()):e,null==o?o="":"number"==typeof o?o+="":Z.isArray(o)&&(o=Z.map(o,function(e){return null==e?"":e+""})),t=Z.valHooks[this.type]||Z.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return t=Z.valHooks[o.type]||Z.valHooks[o.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(ut,""):null==n?"":n)}}}),Z.extend({valHooks:{option:{get:function(e){var t=Z.find.attr(e,"value");return null!=t?t:Z.trim(Z.text(e))}},select:{get:function(e){for(var t,n,r=e.options,o=e.selectedIndex,i="select-one"===e.type||0>o,a=i?null:[],s=i?o+1:r.length,u=0>o?s:i?o:0;s>u;u++)if(n=r[u],(n.selected||u===o)&&(X.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!Z.nodeName(n.parentNode,"optgroup"))){if(t=Z(n).val(),i)return t;a.push(t)}return a},set:function(e,t){for(var n,r,o=e.options,i=Z.makeArray(t),a=o.length;a--;)r=o[a],(r.selected=Z.inArray(r.value,i)>=0)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),Z.each(["radio","checkbox"],function(){Z.valHooks[this]={set:function(e,t){return Z.isArray(t)?e.checked=Z.inArray(Z(e).val(),t)>=0:void 0}},X.checkOn||(Z.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){Z.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),Z.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var ct=Z.now(),lt=/\?/;Z.parseJSON=function(e){return JSON.parse(e+"")},Z.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(r){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&Z.error("Invalid XML: "+e),t};var pt=/#.*$/,ft=/([?&])_=[^&]*/,dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,vt=/^(?:GET|HEAD)$/,mt=/^\/\//,gt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,yt={},bt={},_t="*/".concat("*"),Et=e.location.href,wt=gt.exec(Et.toLowerCase())||[];Z.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et,type:"GET",isLocal:ht.test(wt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":Z.parseJSON,"text xml":Z.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?L(L(e,Z.ajaxSettings),t):L(Z.ajaxSettings,e)},ajaxPrefilter:I(yt),ajaxTransport:I(bt),ajax:function(e,t){function n(e,t,n,a){var u,l,g,y,_,w=t;2!==b&&(b=2,s&&clearTimeout(s),r=void 0,i=a||"",E.readyState=e>0?4:0,u=e>=200&&300>e||304===e,n&&(y=V(p,E,n)),y=U(p,y,E,u),u?(p.ifModified&&(_=E.getResponseHeader("Last-Modified"),_&&(Z.lastModified[o]=_),_=E.getResponseHeader("etag"),_&&(Z.etag[o]=_)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=y.state,l=y.data,g=y.error,u=!g)):(g=w,(e||!w)&&(w="error",0>e&&(e=0))),E.status=e,E.statusText=(t||w)+"",u?h.resolveWith(f,[l,w,E]):h.rejectWith(f,[E,w,g]),E.statusCode(m),m=void 0,c&&d.trigger(u?"ajaxSuccess":"ajaxError",[E,p,u?l:g]),v.fireWith(f,[E,w]),c&&(d.trigger("ajaxComplete",[E,p]),--Z.active||Z.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,a,s,u,c,l,p=Z.ajaxSetup({},t),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?Z(f):Z.event,h=Z.Deferred(),v=Z.Callbacks("once memory"),m=p.statusCode||{},g={},y={},b=0,_="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!a)for(a={};t=dt.exec(i);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=y[n]=y[n]||e,g[e]=t),this},overrideMimeType:function(e){return b||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>b)for(t in e)m[t]=[m[t],e[t]];else E.always(e[E.status]);return this},abort:function(e){var t=e||_;return r&&r.abort(t),n(0,t),this}};if(h.promise(E).complete=v.add,E.success=E.done,E.error=E.fail,p.url=((e||p.url||Et)+"").replace(pt,"").replace(mt,wt[1]+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=Z.trim(p.dataType||"*").toLowerCase().match(de)||[""],null==p.crossDomain&&(u=gt.exec(p.url.toLowerCase()),p.crossDomain=!(!u||u[1]===wt[1]&&u[2]===wt[2]&&(u[3]||("http:"===u[1]?"80":"443"))===(wt[3]||("http:"===wt[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=Z.param(p.data,p.traditional)),A(yt,p,t,E),2===b)return E;c=Z.event&&p.global,c&&0===Z.active++&&Z.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!vt.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(lt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=ft.test(o)?o.replace(ft,"$1_="+ct++):o+(lt.test(o)?"&":"?")+"_="+ct++)),p.ifModified&&(Z.lastModified[o]&&E.setRequestHeader("If-Modified-Since",Z.lastModified[o]),Z.etag[o]&&E.setRequestHeader("If-None-Match",Z.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||t.contentType)&&E.setRequestHeader("Content-Type",p.contentType),E.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+_t+"; q=0.01":""):p.accepts["*"]);for(l in p.headers)E.setRequestHeader(l,p.headers[l]);if(p.beforeSend&&(p.beforeSend.call(f,E,p)===!1||2===b))return E.abort();_="abort";for(l in{success:1,error:1,complete:1})E[l](p[l]);if(r=A(bt,p,t,E)){E.readyState=1,c&&d.trigger("ajaxSend",[E,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){E.abort("timeout")},p.timeout));try{b=1,r.send(g,n)}catch(w){if(!(2>b))throw w;n(-1,w)}}else n(-1,"No Transport");return E},getJSON:function(e,t,n){return Z.get(e,t,n,"json");
},getScript:function(e,t){return Z.get(e,void 0,t,"script")}}),Z.each(["get","post"],function(e,t){Z[t]=function(e,n,r,o){return Z.isFunction(n)&&(o=o||r,r=n,n=void 0),Z.ajax({url:e,type:t,dataType:o,data:n,success:r})}}),Z._evalUrl=function(e){return Z.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},Z.fn.extend({wrapAll:function(e){var t;return Z.isFunction(e)?this.each(function(t){Z(this).wrapAll(e.call(this,t))}):(this[0]&&(t=Z(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return Z.isFunction(e)?this.each(function(t){Z(this).wrapInner(e.call(this,t))}):this.each(function(){var t=Z(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=Z.isFunction(e);return this.each(function(n){Z(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){Z.nodeName(this,"body")||Z(this).replaceWith(this.childNodes)}).end()}}),Z.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},Z.expr.filters.visible=function(e){return!Z.expr.filters.hidden(e)};var Ot=/%20/g,Ct=/\[\]$/,xt=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;Z.param=function(e,t){var n,r=[],o=function(e,t){t=Z.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=Z.ajaxSettings&&Z.ajaxSettings.traditional),Z.isArray(e)||e.jquery&&!Z.isPlainObject(e))Z.each(e,function(){o(this.name,this.value)});else for(n in e)F(n,e[n],t,o);return r.join("&").replace(Ot,"+")},Z.fn.extend({serialize:function(){return Z.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Z.prop(this,"elements");return e?Z.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Z(this).is(":disabled")&&Dt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!Ce.test(e))}).map(function(e,t){var n=Z(this).val();return null==n?null:Z.isArray(n)?Z.map(n,function(e){return{name:t.name,value:e.replace(xt,"\r\n")}}):{name:t.name,value:n.replace(xt,"\r\n")}}).get()}}),Z.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var Rt=0,Tt={},Pt={0:200,1223:204},kt=Z.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Tt)Tt[e]()}),X.cors=!!kt&&"withCredentials"in kt,X.ajax=kt=!!kt,Z.ajaxTransport(function(e){var t;return X.cors||kt&&!e.crossDomain?{send:function(n,r){var o,i=e.xhr(),a=++Rt;if(i.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)i[o]=e.xhrFields[o];e.mimeType&&i.overrideMimeType&&i.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(o in n)i.setRequestHeader(o,n[o]);t=function(e){return function(){t&&(delete Tt[a],t=i.onload=i.onerror=null,"abort"===e?i.abort():"error"===e?r(i.status,i.statusText):r(Pt[i.status]||i.status,i.statusText,"string"==typeof i.responseText?{text:i.responseText}:void 0,i.getAllResponseHeaders()))}},i.onload=t(),i.onerror=t("error"),t=Tt[a]=t("abort");try{i.send(e.hasContent&&e.data||null)}catch(s){if(t)throw s}},abort:function(){t&&t()}}:void 0}),Z.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return Z.globalEval(e),e}}}),Z.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Z.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,o){t=Z("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),G.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Mt=[],St=/(=)\?(?=&|$)|\?\?/;Z.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Mt.pop()||Z.expando+"_"+ct++;return this[e]=!0,e}}),Z.ajaxPrefilter("json jsonp",function(t,n,r){var o,i,a,s=t.jsonp!==!1&&(St.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&St.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(o=t.jsonpCallback=Z.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(St,"$1"+o):t.jsonp!==!1&&(t.url+=(lt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||Z.error(o+" was not called"),a[0]},t.dataTypes[0]="json",i=e[o],e[o]=function(){a=arguments},r.always(function(){e[o]=i,t[o]&&(t.jsonpCallback=n.jsonpCallback,Mt.push(o)),a&&Z.isFunction(i)&&i(a[0]),a=i=void 0}),"script"):void 0}),Z.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||G;var r=ae.exec(e),o=!n&&[];return r?[t.createElement(r[1])]:(r=Z.buildFragment([e],t,o),o&&o.length&&Z(o).remove(),Z.merge([],r.childNodes))};var jt=Z.fn.load;Z.fn.load=function(e,t,n){if("string"!=typeof e&&jt)return jt.apply(this,arguments);var r,o,i,a=this,s=e.indexOf(" ");return s>=0&&(r=Z.trim(e.slice(s)),e=e.slice(0,s)),Z.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&Z.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?Z("<div>").append(Z.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){a.each(n,i||[e.responseText,t,e])}),this},Z.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Z.fn[t]=function(e){return this.on(t,e)}}),Z.expr.filters.animated=function(e){return Z.grep(Z.timers,function(t){return e===t.elem}).length};var It=e.document.documentElement;Z.offset={setOffset:function(e,t,n){var r,o,i,a,s,u,c,l=Z.css(e,"position"),p=Z(e),f={};"static"===l&&(e.style.position="relative"),s=p.offset(),i=Z.css(e,"top"),u=Z.css(e,"left"),c=("absolute"===l||"fixed"===l)&&(i+u).indexOf("auto")>-1,c?(r=p.position(),a=r.top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),Z.isFunction(t)&&(t=t.call(e,n,s)),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),"using"in t?t.using.call(e,f):p.css(f)}},Z.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){Z.offset.setOffset(this,e,t)});var t,n,r=this[0],o={top:0,left:0},i=r&&r.ownerDocument;if(i)return t=i.documentElement,Z.contains(t,r)?(typeof r.getBoundingClientRect!==xe&&(o=r.getBoundingClientRect()),n=B(i),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===Z.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),Z.nodeName(e[0],"html")||(r=e.offset()),r.top+=Z.css(e[0],"borderTopWidth",!0),r.left+=Z.css(e[0],"borderLeftWidth",!0)),{top:t.top-r.top-Z.css(n,"marginTop",!0),left:t.left-r.left-Z.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||It;e&&!Z.nodeName(e,"html")&&"static"===Z.css(e,"position");)e=e.offsetParent;return e||It})}}),Z.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;Z.fn[t]=function(o){return me(this,function(t,o,i){var a=B(t);return void 0===i?a?a[n]:t[o]:void(a?a.scrollTo(r?e.pageXOffset:i,r?i:e.pageYOffset):t[o]=i)},t,o,arguments.length,null)}}),Z.each(["top","left"],function(e,t){Z.cssHooks[t]=w(X.pixelPosition,function(e,n){return n?(n=E(e,t),He.test(n)?Z(e).position()[t]+"px":n):void 0})}),Z.each({Height:"height",Width:"width"},function(e,t){Z.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){Z.fn[r]=function(r,o){var i=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||o===!0?"margin":"border");return me(this,function(t,n,r){var o;return Z.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?Z.css(t,n,a):Z.style(t,n,r,a)},t,i?r:void 0,i,null)}})}),Z.fn.size=function(){return this.length},Z.fn.andSelf=Z.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return Z});var At=e.jQuery,Lt=e.$;return Z.noConflict=function(t){return e.$===Z&&(e.$=Lt),t&&e.jQuery===Z&&(e.jQuery=At),Z},typeof t===xe&&(e.jQuery=e.$=Z),Z})},{}],75:[function(e,t,n){"use strict";var r=function(e){var t,n={};if(!(e instanceof Object)||Array.isArray(e))throw new Error("keyMirror(...): Argument must be an object.");for(t in e)e.hasOwnProperty(t)&&(n[t]=t);return n};t.exports=r},{}],76:[function(e,t,n){t.exports=e("./lib/babel-transform/main.js")},{"./lib/babel-transform/main.js":77}],77:[function(e,t,n){function r(e){var t=e.filename,n=e.components,r=e.imports,a=(e.locals,i(r,1)),c=a[0],l=s(c);return function(e,r){var i=n[r],a=i.displayName,s=i.isInFunction,c=void 0===s?!1:s,p=o();if(!p||c)return e;var f=t+"$$"+r;if(!p[f]){var d=u(e);return p[f]=d,d.get()}var h=function(){console.log(" > Patch component :: ",a||r);var t=p[f],n=t.update(e);return setTimeout(function(){return n.forEach(l)},0),{v:t.get()}}();return"object"==typeof h?h.v:void 0}}function o(){try{if("undefined"!=typeof window)return window.__lrproxies$$=window.__lrproxies$$||{}}catch(e){}}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(u){o=!0,i=u}finally{try{!r&&s["return"]&&s["return"]()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();n["default"]=r;var a=e("react-proxy"),s=a.getForceUpdate,u=a.createProxy;t.exports=n["default"]},{"react-proxy":122}],78:[function(e,t,n){var r=e("../internal/baseDifference"),o=e("../internal/baseFlatten"),i=e("../internal/isArrayLike"),a=e("../internal/isObjectLike"),s=e("../function/restParam"),u=s(function(e,t){return a(e)&&i(e)?r(e,o(t,!1,!0)):[]});t.exports=u},{"../function/restParam":79,"../internal/baseDifference":86,"../internal/baseFlatten":87,"../internal/isArrayLike":98,"../internal/isObjectLike":102}],79:[function(e,t,n){function r(e,t){if("function"!=typeof e)throw new TypeError(o);return t=i(void 0===t?e.length-1:+t||0,0),function(){for(var n=arguments,r=-1,o=i(n.length-t,0),a=Array(o);++r<o;)a[r]=n[t+r];switch(t){case 0:return e.call(this,a);case 1:return e.call(this,n[0],a);case 2:return e.call(this,n[0],n[1],a)}var s=Array(t+1);for(r=-1;++r<t;)s[r]=n[r];return s[t]=a,e.apply(this,s)}}var o="Expected a function",i=Math.max;t.exports=r},{}],80:[function(e,t,n){(function(e){(function(){function r(e,t){if(e!==t){var n=null===e,r=e===x,o=e===e,i=null===t,a=t===x,s=t===t;if(e>t&&!i||!o||n&&!a&&s||r&&s)return 1;if(t>e&&!n||!s||i&&!r&&o||a&&o)return-1}return 0}function o(e,t,n){for(var r=e.length,o=n?r:-1;n?o--:++o<r;)if(t(e[o],o,e))return o;return-1}function i(e,t,n){if(t!==t)return m(e,n);for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}function a(e){return"function"==typeof e||!1}function s(e){return null==e?"":e+""}function u(e,t){for(var n=-1,r=e.length;++n<r&&t.indexOf(e.charAt(n))>-1;);return n}function c(e,t){for(var n=e.length;n--&&t.indexOf(e.charAt(n))>-1;);return n}function l(e,t){return r(e.criteria,t.criteria)||e.index-t.index}function p(e,t,n){for(var o=-1,i=e.criteria,a=t.criteria,s=i.length,u=n.length;++o<s;){var c=r(i[o],a[o]);if(c){if(o>=u)return c;var l=n[o];return c*("asc"===l||l===!0?1:-1)}}return e.index-t.index}function f(e){return We[e]}function d(e){return Ke[e]}function h(e,t,n){return t?e=Ye[e]:n&&(e=Qe[e]),"\\"+e}function v(e){return"\\"+Qe[e]}function m(e,t,n){for(var r=e.length,o=t+(n?0:-1);n?o--:++o<r;){var i=e[o];if(i!==i)return o}return-1}function g(e){return!!e&&"object"==typeof e}function y(e){return 160>=e&&e>=9&&13>=e||32==e||160==e||5760==e||6158==e||e>=8192&&(8202>=e||8232==e||8233==e||8239==e||8287==e||12288==e||65279==e)}function b(e,t){for(var n=-1,r=e.length,o=-1,i=[];++n<r;)e[n]===t&&(e[n]=W,i[++o]=n);return i}function _(e,t){for(var n,r=-1,o=e.length,i=-1,a=[];++r<o;){var s=e[r],u=t?t(s,r,e):s;r&&n===u||(n=u,a[++i]=s)}return a}function E(e){for(var t=-1,n=e.length;++t<n&&y(e.charCodeAt(t)););return t}function w(e){for(var t=e.length;t--&&y(e.charCodeAt(t)););return t}function O(e){return $e[e]}function C(e){function t(e){if(g(e)&&!Ts(e)&&!(e instanceof G)){if(e instanceof y)return e;if(ta.call(e,"__chain__")&&ta.call(e,"__wrapped__"))return dr(e)}return new y(e)}function n(){}function y(e,t,n){this.__wrapped__=e,this.__actions__=n||[],this.__chain__=!!t}function G(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=Ra,this.__views__=[]}function te(){var e=new G(this.__wrapped__);return e.__actions__=et(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=et(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=et(this.__views__),e}function re(){if(this.__filtered__){var e=new G(this);e.__dir__=-1,e.__filtered__=!0}else e=this.clone(),e.__dir__*=-1;return e}function We(){var e=this.__wrapped__.value(),t=this.__dir__,n=Ts(e),r=0>t,o=n?e.length:0,i=$n(0,o,this.__views__),a=i.start,s=i.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,p=l.length,f=0,d=Oa(u,this.__takeCount__);if(!n||F>o||o==u&&d==u)return nn(r&&n?e.reverse():e,this.__actions__);var h=[];e:for(;u--&&d>f;){c+=t;for(var v=-1,m=e[c];++v<p;){var g=l[v],y=g.iteratee,b=g.type,_=y(m);if(b==H)m=_;else if(!_){if(b==B)continue e;break e}}h[f++]=m}return h}function Ke(){this.__data__={}}function $e(e){return this.has(e)&&delete this.__data__[e]}function ze(e){return"__proto__"==e?x:this.__data__[e]}function Ye(e){return"__proto__"!=e&&ta.call(this.__data__,e)}function Qe(e,t){return"__proto__"!=e&&(this.__data__[e]=t),this}function Xe(e){var t=e?e.length:0;for(this.data={hash:ga(null),set:new pa};t--;)this.push(e[t])}function Ge(e,t){var n=e.data,r="string"==typeof t||Io(t)?n.set.has(t):n.hash[t];return r?0:-1}function Je(e){var t=this.data;"string"==typeof e||Io(e)?t.set.add(e):t.hash[e]=!0}function Ze(e,t){for(var n=-1,r=e.length,o=-1,i=t.length,a=Bi(r+i);++n<r;)a[n]=e[n];for(;++o<i;)a[n++]=t[o];return a}function et(e,t){var n=-1,r=e.length;for(t||(t=Bi(r));++n<r;)t[n]=e[n];return t}function tt(e,t){for(var n=-1,r=e.length;++n<r&&t(e[n],n,e)!==!1;);return e}function ot(e,t){for(var n=e.length;n--&&t(e[n],n,e)!==!1;);return e}function it(e,t){for(var n=-1,r=e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function at(e,t,n,r){for(var o=-1,i=e.length,a=r,s=a;++o<i;){var u=e[o],c=+t(u);n(c,a)&&(a=c,s=u)}return s}function st(e,t){for(var n=-1,r=e.length,o=-1,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[++o]=a)}return i}function ut(e,t){for(var n=-1,r=e.length,o=Bi(r);++n<r;)o[n]=t(e[n],n,e);return o}function ct(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function lt(e,t,n,r){var o=-1,i=e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function pt(e,t,n,r){var o=e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function ft(e,t){for(var n=-1,r=e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function dt(e,t){for(var n=e.length,r=0;n--;)r+=+t(e[n])||0;return r}function ht(e,t){return e===x?t:e}function vt(e,t,n,r){return e!==x&&ta.call(r,n)?e:t}function mt(e,t,n){for(var r=-1,o=Fs(t),i=o.length;++r<i;){var a=o[r],s=e[a],u=n(s,t[a],a,e,t);(u===u?u===s:s!==s)&&(s!==x||a in e)||(e[a]=u)}return e}function gt(e,t){return null==t?e:bt(t,Fs(t),e)}function yt(e,t){for(var n=-1,r=null==e,o=!r&&Gn(e),i=o?e.length:0,a=t.length,s=Bi(a);++n<a;){var u=t[n];o?s[n]=Jn(u,i)?e[u]:x:s[n]=r?x:e[u]}return s}function bt(e,t,n){n||(n={});for(var r=-1,o=t.length;++r<o;){var i=t[r];n[i]=e[i]}return n}function _t(e,t,n){var r=typeof e;return"function"==r?t===x?e:an(e,t,n):null==e?Ri:"object"==r?Ut(e):t===x?ji(e):Ft(e,t)}function Et(e,t,n,r,o,i,a){var s;if(n&&(s=o?n(e,r,o):n(e)),s!==x)return s;if(!Io(e))return e;var u=Ts(e);if(u){if(s=zn(e),!t)return et(e,s)}else{var c=ra.call(e),l=c==X;if(c!=Z&&c!=K&&(!l||o))return qe[c]?Qn(e,c,t):o?e:{};if(s=Yn(l?{}:e),!t)return gt(s,e)}i||(i=[]),a||(a=[]);for(var p=i.length;p--;)if(i[p]==e)return a[p];return i.push(e),a.push(s),(u?tt:kt)(e,function(r,o){s[o]=Et(r,t,n,o,e,i,a)}),s}function wt(e,t,n){if("function"!=typeof e)throw new Xi(q);return fa(function(){e.apply(x,n)},t)}function Ot(e,t){var n=e?e.length:0,r=[];if(!n)return r;var o=-1,a=qn(),s=a==i,u=s&&t.length>=F?vn(t):null,c=t.length;u&&(a=Ge,s=!1,t=u);e:for(;++o<n;){var l=e[o];if(s&&l===l){for(var p=c;p--;)if(t[p]===l)continue e;r.push(l)}else a(t,l,0)<0&&r.push(l)}return r}function Ct(e,t){var n=!0;return Aa(e,function(e,r,o){return n=!!t(e,r,o)}),n}function xt(e,t,n,r){var o=r,i=o;return Aa(e,function(e,a,s){var u=+t(e,a,s);(n(u,o)||u===r&&u===i)&&(o=u,i=e)}),i}function Nt(e,t,n,r){var o=e.length;for(n=null==n?0:+n||0,0>n&&(n=-n>o?0:o+n),r=r===x||r>o?o:+r||0,0>r&&(r+=o),o=n>r?0:r>>>0,n>>>=0;o>n;)e[n++]=t;return e}function Dt(e,t){var n=[];return Aa(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function Rt(e,t,n,r){var o;return n(e,function(e,n,i){return t(e,n,i)?(o=r?n:e,!1):void 0}),o}function Tt(e,t,n,r){r||(r=[]);for(var o=-1,i=e.length;++o<i;){var a=e[o];g(a)&&Gn(a)&&(n||Ts(a)||No(a))?t?Tt(a,t,n,r):ct(r,a):n||(r[r.length]=a)}return r}function Pt(e,t){return Va(e,t,ti)}function kt(e,t){return Va(e,t,Fs)}function Mt(e,t){return Ua(e,t,Fs)}function St(e,t){for(var n=-1,r=t.length,o=-1,i=[];++n<r;){var a=t[n];jo(e[a])&&(i[++o]=a)}return i}function jt(e,t,n){if(null!=e){n!==x&&n in pr(e)&&(t=[n]);for(var r=0,o=t.length;null!=e&&o>r;)e=e[t[r++]];return r&&r==o?e:x}}function It(e,t,n,r,o,i){return e===t?!0:null==e||null==t||!Io(e)&&!g(t)?e!==e&&t!==t:At(e,t,It,n,r,o,i)}function At(e,t,n,r,o,i,a){var s=Ts(e),u=Ts(t),c=$,l=$;s||(c=ra.call(e),c==K?c=Z:c!=Z&&(s=Wo(e))),u||(l=ra.call(t),l==K?l=Z:l!=Z&&(u=Wo(t)));var p=c==Z,f=l==Z,d=c==l;if(d&&!s&&!p)return Un(e,t,c);if(!o){var h=p&&ta.call(e,"__wrapped__"),v=f&&ta.call(t,"__wrapped__");if(h||v)return n(h?e.value():e,v?t.value():t,r,o,i,a)}if(!d)return!1;i||(i=[]),a||(a=[]);for(var m=i.length;m--;)if(i[m]==e)return a[m]==t;i.push(e),a.push(t);var g=(s?Vn:Fn)(e,t,n,r,o,i,a);return i.pop(),a.pop(),g}function Lt(e,t,n){var r=t.length,o=r,i=!n;if(null==e)return!o;for(e=pr(e);r--;){var a=t[r];if(i&&a[2]?a[1]!==e[a[0]]:!(a[0]in e))return!1}for(;++r<o;){a=t[r];var s=a[0],u=e[s],c=a[1];if(i&&a[2]){if(u===x&&!(s in e))return!1}else{var l=n?n(u,c,s):x;if(!(l===x?It(c,u,n,!0):l))return!1}}return!0}function Vt(e,t){var n=-1,r=Gn(e)?Bi(e.length):[];return Aa(e,function(e,o,i){r[++n]=t(e,o,i)}),r}function Ut(e){var t=Wn(e);if(1==t.length&&t[0][2]){var n=t[0][0],r=t[0][1];return function(e){return null==e?!1:e[n]===r&&(r!==x||n in pr(e))}}return function(e){return Lt(e,t)}}function Ft(e,t){var n=Ts(e),r=er(e)&&rr(t),o=e+"";return e=fr(e),function(i){if(null==i)return!1;var a=o;if(i=pr(i),(n||!r)&&!(a in i)){if(i=1==e.length?i:jt(i,Yt(e,0,-1)),null==i)return!1;a=Nr(e),i=pr(i)}return i[a]===t?t!==x||a in i:It(t,i[a],x,!0)}}function Bt(e,t,n,r,o){if(!Io(e))return e;var i=Gn(t)&&(Ts(t)||Wo(t)),a=i?x:Fs(t);return tt(a||t,function(s,u){if(a&&(u=s,s=t[u]),g(s))r||(r=[]),o||(o=[]),Ht(e,t,u,Bt,n,r,o);else{var c=e[u],l=n?n(c,s,u,e,t):x,p=l===x;p&&(l=s),l===x&&(!i||u in e)||!p&&(l===l?l===c:c!==c)||(e[u]=l)}}),e}function Ht(e,t,n,r,o,i,a){for(var s=i.length,u=t[n];s--;)if(i[s]==u)return void(e[n]=a[s]);var c=e[n],l=o?o(c,u,n,e,t):x,p=l===x;p&&(l=u,Gn(u)&&(Ts(u)||Wo(u))?l=Ts(c)?c:Gn(c)?et(c):[]:Bo(u)||No(u)?l=No(c)?Qo(c):Bo(c)?c:{}:p=!1),i.push(u),a.push(l),p?e[n]=r(l,u,o,i,a):(l===l?l!==c:c===c)&&(e[n]=l)}function qt(e){return function(t){return null==t?x:t[e]}}function Wt(e){var t=e+"";return e=fr(e),function(n){return jt(n,e,t)}}function Kt(e,t){for(var n=e?t.length:0;n--;){var r=t[n];if(r!=o&&Jn(r)){var o=r;da.call(e,r,1)}}return e}function $t(e,t){return e+ya(Na()*(t-e+1))}function zt(e,t,n,r,o){return o(e,function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)}),n}function Yt(e,t,n){var r=-1,o=e.length;t=null==t?0:+t||0,0>t&&(t=-t>o?0:o+t),n=n===x||n>o?o:+n||0,0>n&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Bi(o);++r<o;)i[r]=e[r+t];return i}function Qt(e,t){var n;return Aa(e,function(e,r,o){return n=t(e,r,o),!n}),!!n}function Xt(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function Gt(e,t,n){var r=Bn(),o=-1;t=ut(t,function(e){return r(e)});var i=Vt(e,function(e){var n=ut(t,function(t){return t(e)});return{criteria:n,index:++o,value:e}});return Xt(i,function(e,t){return p(e,t,n)})}function Jt(e,t){var n=0;return Aa(e,function(e,r,o){n+=+t(e,r,o)||0}),n}function Zt(e,t){var n=-1,r=qn(),o=e.length,a=r==i,s=a&&o>=F,u=s?vn():null,c=[];u?(r=Ge,a=!1):(s=!1,u=t?[]:c);e:for(;++n<o;){var l=e[n],p=t?t(l,n,e):l;if(a&&l===l){for(var f=u.length;f--;)if(u[f]===p)continue e;t&&u.push(p),c.push(l)}else r(u,p,0)<0&&((t||s)&&u.push(p),c.push(l))}return c}function en(e,t){for(var n=-1,r=t.length,o=Bi(r);++n<r;)o[n]=e[t[n]];return o}function tn(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?Yt(e,r?0:i,r?i+1:o):Yt(e,r?i+1:0,r?o:i)}function nn(e,t){var n=e;n instanceof G&&(n=n.value());for(var r=-1,o=t.length;++r<o;){var i=t[r];n=i.func.apply(i.thisArg,ct([n],i.args))}return n}function rn(e,t,n){var r=0,o=e?e.length:r;if("number"==typeof t&&t===t&&ka>=o){for(;o>r;){var i=r+o>>>1,a=e[i];(n?t>=a:t>a)&&null!==a?r=i+1:o=i}return o}return on(e,t,Ri,n)}function on(e,t,n,r){t=n(t);for(var o=0,i=e?e.length:0,a=t!==t,s=null===t,u=t===x;i>o;){var c=ya((o+i)/2),l=n(e[c]),p=l!==x,f=l===l;if(a)var d=f||r;else d=s?f&&p&&(r||null!=l):u?f&&(r||p):null==l?!1:r?t>=l:t>l;d?o=c+1:i=c}return Oa(i,Pa)}function an(e,t,n){if("function"!=typeof e)return Ri;if(t===x)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,o){return e.call(t,n,r,o)};case 4:return function(n,r,o,i){return e.call(t,n,r,o,i)};case 5:return function(n,r,o,i,a){return e.call(t,n,r,o,i,a)}}return function(){return e.apply(t,arguments)}}function sn(e){var t=new aa(e.byteLength),n=new ha(t);return n.set(new ha(e)),t}function un(e,t,n){for(var r=n.length,o=-1,i=wa(e.length-r,0),a=-1,s=t.length,u=Bi(s+i);++a<s;)u[a]=t[a];for(;++o<r;)u[n[o]]=e[o];for(;i--;)u[a++]=e[o++];return u}function cn(e,t,n){for(var r=-1,o=n.length,i=-1,a=wa(e.length-o,0),s=-1,u=t.length,c=Bi(a+u);++i<a;)c[i]=e[i];for(var l=i;++s<u;)c[l+s]=t[s];for(;++r<o;)c[l+n[r]]=e[i++];return c}function ln(e,t){return function(n,r,o){var i=t?t():{};if(r=Bn(r,o,3),Ts(n))for(var a=-1,s=n.length;++a<s;){var u=n[a];e(i,u,r(u,a,n),n)}else Aa(n,function(t,n,o){e(i,t,r(t,n,o),o)});return i}}function pn(e){return yo(function(t,n){var r=-1,o=null==t?0:n.length,i=o>2?n[o-2]:x,a=o>2?n[2]:x,s=o>1?n[o-1]:x;for("function"==typeof i?(i=an(i,s,5),o-=2):(i="function"==typeof s?s:x,o-=i?1:0),a&&Zn(n[0],n[1],a)&&(i=3>o?x:i,o=1);++r<o;){var u=n[r];u&&e(t,u,i)}return t})}function fn(e,t){return function(n,r){var o=n?Ha(n):0;if(!nr(o))return e(n,r);for(var i=t?o:-1,a=pr(n);(t?i--:++i<o)&&r(a[i],i,a)!==!1;);return n}}function dn(e){return function(t,n,r){for(var o=pr(t),i=r(t),a=i.length,s=e?a:-1;e?s--:++s<a;){var u=i[s];if(n(o[u],u,o)===!1)break}return t}}function hn(e,t){function n(){var o=this&&this!==nt&&this instanceof n?r:e;return o.apply(t,arguments)}var r=gn(e);return n}function vn(e){return ga&&pa?new Xe(e):null}function mn(e){return function(t){for(var n=-1,r=xi(pi(t)),o=r.length,i="";++n<o;)i=e(i,r[n],n);return i}}function gn(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Ia(e.prototype),r=e.apply(n,t);return Io(r)?r:n}}function yn(e){function t(n,r,o){o&&Zn(n,r,o)&&(r=x);var i=Ln(n,e,x,x,x,x,x,r);return i.placeholder=t.placeholder,i}return t}function bn(e,t){return yo(function(n){var r=n[0];return null==r?r:(n.push(t),e.apply(x,n))})}function _n(e,t){return function(n,r,o){if(o&&Zn(n,r,o)&&(r=x),r=Bn(r,o,3),1==r.length){n=Ts(n)?n:lr(n);var i=at(n,r,e,t);if(!n.length||i!==t)return i}return xt(n,r,e,t)}}function En(e,t){return function(n,r,i){if(r=Bn(r,i,3),Ts(n)){var a=o(n,r,t);return a>-1?n[a]:x}return Rt(n,r,e)}}function wn(e){return function(t,n,r){return t&&t.length?(n=Bn(n,r,3),o(t,n,e)):-1}}function On(e){return function(t,n,r){return n=Bn(n,r,3),Rt(t,n,e,!0)}}function Cn(e){return function(){for(var t,n=arguments.length,r=e?n:-1,o=0,i=Bi(n);e?r--:++r<n;){var a=i[o++]=arguments[r];if("function"!=typeof a)throw new Xi(q);!t&&y.prototype.thru&&"wrapper"==Hn(a)&&(t=new y([],!0))}for(r=t?-1:n;++r<n;){a=i[r];var s=Hn(a),u="wrapper"==s?Ba(a):x;t=u&&tr(u[0])&&u[1]==(j|P|M|I)&&!u[4].length&&1==u[9]?t[Hn(u[0])].apply(t,u[3]):1==a.length&&tr(a)?t[s]():t.thru(a)}return function(){var e=arguments,r=e[0];if(t&&1==e.length&&Ts(r)&&r.length>=F)return t.plant(r).value();for(var o=0,a=n?i[o].apply(this,e):r;++o<n;)a=i[o].call(this,a);return a}}}function xn(e,t){return function(n,r,o){return"function"==typeof r&&o===x&&Ts(n)?e(n,r):t(n,an(r,o,3))}}function Nn(e){return function(t,n,r){return("function"!=typeof n||r!==x)&&(n=an(n,r,3)),e(t,n,ti)}}function Dn(e){return function(t,n,r){return("function"!=typeof n||r!==x)&&(n=an(n,r,3)),e(t,n)}}function Rn(e){return function(t,n,r){var o={};return n=Bn(n,r,3),kt(t,function(t,r,i){var a=n(t,r,i);r=e?a:r,t=e?t:a,o[r]=t}),o}}function Tn(e){return function(t,n,r){return t=s(t),(e?t:"")+Sn(t,n,r)+(e?"":t)}}function Pn(e){var t=yo(function(n,r){var o=b(r,t.placeholder);return Ln(n,e,x,r,o)});return t}function kn(e,t){return function(n,r,o,i){var a=arguments.length<3;return"function"==typeof r&&i===x&&Ts(n)?e(n,r,o,a):zt(n,Bn(r,i,4),o,a,t)}}function Mn(e,t,n,r,o,i,a,s,u,c){function l(){for(var y=arguments.length,_=y,E=Bi(y);_--;)E[_]=arguments[_];if(r&&(E=un(E,r,o)),i&&(E=cn(E,i,a)),h||m){var w=l.placeholder,O=b(E,w);if(y-=O.length,c>y){var C=s?et(s):x,N=wa(c-y,0),T=h?O:x,P=h?x:O,k=h?E:x,j=h?x:E;t|=h?M:S,t&=~(h?S:M),v||(t&=~(D|R));var I=[e,t,n,k,T,j,P,C,u,N],A=Mn.apply(x,I);return tr(e)&&qa(A,I),A.placeholder=w,A}}var L=f?n:this,V=d?L[e]:e;return s&&(E=ur(E,s)),p&&u<E.length&&(E.length=u),this&&this!==nt&&this instanceof l&&(V=g||gn(e)),V.apply(L,E)}var p=t&j,f=t&D,d=t&R,h=t&P,v=t&T,m=t&k,g=d?x:gn(e);return l}function Sn(e,t,n){var r=e.length;if(t=+t,r>=t||!_a(t))return"";var o=t-r;return n=null==n?" ":n+"",gi(n,ma(o/n.length)).slice(0,o)}function jn(e,t,n,r){function o(){for(var t=-1,s=arguments.length,u=-1,c=r.length,l=Bi(c+s);++u<c;)l[u]=r[u];for(;s--;)l[u++]=arguments[++t];var p=this&&this!==nt&&this instanceof o?a:e;return p.apply(i?n:this,l)}var i=t&D,a=gn(e);return o}function In(e){var t=Ki[e];return function(e,n){return n=n===x?0:+n||0,n?(n=ca(10,n),t(e*n)/n):t(e)}}function An(e){return function(t,n,r,o){var i=Bn(r);return null==r&&i===_t?rn(t,n,e):on(t,n,i(r,o,1),e)}}function Ln(e,t,n,r,o,i,a,s){var u=t&R;if(!u&&"function"!=typeof e)throw new Xi(q);var c=r?r.length:0;if(c||(t&=~(M|S),r=o=x),c-=o?o.length:0,t&S){var l=r,p=o;r=o=x}var f=u?x:Ba(e),d=[e,t,n,r,o,l,p,i,a,s];if(f&&(or(d,f),t=d[1],s=d[9]),d[9]=null==s?u?0:e.length:wa(s-c,0)||0,t==D)var h=hn(d[0],d[2]);else h=t!=M&&t!=(D|M)||d[4].length?Mn.apply(x,d):jn.apply(x,d);var v=f?Fa:qa;return v(h,d)}function Vn(e,t,n,r,o,i,a){var s=-1,u=e.length,c=t.length;if(u!=c&&!(o&&c>u))return!1;for(;++s<u;){var l=e[s],p=t[s],f=r?r(o?p:l,o?l:p,s):x;if(f!==x){if(f)continue;return!1}if(o){if(!ft(t,function(e){return l===e||n(l,e,r,o,i,a)}))return!1}else if(l!==p&&!n(l,p,r,o,i,a))return!1}return!0}function Un(e,t,n){switch(n){case z:case Y:return+e==+t;case Q:return e.name==t.name&&e.message==t.message;case J:return e!=+e?t!=+t:e==+t;case ee:case ne:return e==t+""}return!1}function Fn(e,t,n,r,o,i,a){var s=Fs(e),u=s.length,c=Fs(t),l=c.length;if(u!=l&&!o)return!1;for(var p=u;p--;){var f=s[p];if(!(o?f in t:ta.call(t,f)))return!1}for(var d=o;++p<u;){f=s[p];var h=e[f],v=t[f],m=r?r(o?v:h,o?h:v,f):x;if(!(m===x?n(h,v,r,o,i,a):m))return!1;d||(d="constructor"==f)}if(!d){var g=e.constructor,y=t.constructor;if(g!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof g&&g instanceof g&&"function"==typeof y&&y instanceof y))return!1}return!0}function Bn(e,n,r){var o=t.callback||Ni;return o=o===Ni?_t:o,r?o(e,n,r):o}function Hn(e){for(var t=e.name,n=ja[t],r=n?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function qn(e,n,r){var o=t.indexOf||Cr;return o=o===Cr?i:o,e?o(e,n,r):o}function Wn(e){for(var t=ni(e),n=t.length;n--;)t[n][2]=rr(t[n][1]);return t}function Kn(e,t){var n=null==e?x:e[t];return Vo(n)?n:x}function $n(e,t,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=Oa(t,e+a);break;case"takeRight":e=wa(e,t-a)}}return{start:e,end:t}}function zn(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ta.call(e,"index")&&(n.index=e.index,n.input=e.input),n}function Yn(e){var t=e.constructor;return"function"==typeof t&&t instanceof t||(t=zi),new t}function Qn(e,t,n){var r=e.constructor;switch(t){case oe:return sn(e);case z:case Y:return new r(+e);case ie:case ae:case se:case ue:case ce:case le:case pe:case fe:case de:var o=e.buffer;return new r(n?sn(o):o,e.byteOffset,e.length);case J:case ne:return new r(e);case ee:var i=new r(e.source,Me.exec(e));i.lastIndex=e.lastIndex}return i}function Xn(e,t,n){null==e||er(t,e)||(t=fr(t),e=1==t.length?e:jt(e,Yt(t,0,-1)),t=Nr(t));var r=null==e?e:e[t];return null==r?x:r.apply(e,n)}function Gn(e){return null!=e&&nr(Ha(e))}function Jn(e,t){return e="number"==typeof e||Ie.test(e)?+e:-1,t=null==t?Ma:t,e>-1&&e%1==0&&t>e}function Zn(e,t,n){if(!Io(n))return!1;var r=typeof t;if("number"==r?Gn(n)&&Jn(t,n.length):"string"==r&&t in n){var o=n[t];return e===e?e===o:o!==o}return!1}function er(e,t){var n=typeof e;if("string"==n&&xe.test(e)||"number"==n)return!0;if(Ts(e))return!1;var r=!Ce.test(e);return r||null!=t&&e in pr(t)}function tr(e){var n=Hn(e);if(!(n in G.prototype))return!1;var r=t[n];if(e===r)return!0;var o=Ba(r);return!!o&&e===o[0]}function nr(e){return"number"==typeof e&&e>-1&&e%1==0&&Ma>=e}function rr(e){return e===e&&!Io(e)}function or(e,t){var n=e[1],r=t[1],o=n|r,i=j>o,a=r==j&&n==P||r==j&&n==I&&e[7].length<=t[8]||r==(j|I)&&n==P;if(!i&&!a)return e;r&D&&(e[2]=t[2],o|=n&D?0:T);var s=t[3];if(s){var u=e[3];e[3]=u?un(u,s,t[4]):et(s),e[4]=u?b(e[3],W):et(t[4])}return s=t[5],s&&(u=e[5],e[5]=u?cn(u,s,t[6]):et(s),e[6]=u?b(e[5],W):et(t[6])),s=t[7],s&&(e[7]=et(s)),r&j&&(e[8]=null==e[8]?t[8]:Oa(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o,e}function ir(e,t){return e===x?t:Ps(e,t,ir)}function ar(e,t){e=pr(e);for(var n=-1,r=t.length,o={};++n<r;){var i=t[n];i in e&&(o[i]=e[i])}return o}function sr(e,t){var n={};return Pt(e,function(e,r,o){t(e,r,o)&&(n[r]=e)}),n}function ur(e,t){for(var n=e.length,r=Oa(t.length,n),o=et(e);r--;){var i=t[r];e[r]=Jn(i,n)?o[i]:x}return e}function cr(e){for(var t=ti(e),n=t.length,r=n&&e.length,o=!!r&&nr(r)&&(Ts(e)||No(e)),i=-1,a=[];++i<n;){var s=t[i];(o&&Jn(s,r)||ta.call(e,s))&&a.push(s)}return a}function lr(e){return null==e?[]:Gn(e)?Io(e)?e:zi(e):ai(e)}function pr(e){return Io(e)?e:zi(e)}function fr(e){if(Ts(e))return e;var t=[];return s(e).replace(Ne,function(e,n,r,o){t.push(r?o.replace(Pe,"$1"):n||e)}),t}function dr(e){return e instanceof G?e.clone():new y(e.__wrapped__,e.__chain__,et(e.__actions__))}function hr(e,t,n){t=(n?Zn(e,t,n):null==t)?1:wa(ya(t)||1,1);for(var r=0,o=e?e.length:0,i=-1,a=Bi(ma(o/t));o>r;)a[++i]=Yt(e,r,r+=t);return a}function vr(e){for(var t=-1,n=e?e.length:0,r=-1,o=[];++t<n;){var i=e[t];i&&(o[++r]=i);
}return o}function mr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),Yt(e,0>t?0:t)):[]}function gr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),t=r-(+t||0),Yt(e,0,0>t?0:t)):[]}function yr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!0,!0):[]}function br(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!0):[]}function _r(e,t,n,r){var o=e?e.length:0;return o?(n&&"number"!=typeof n&&Zn(e,t,n)&&(n=0,r=o),Nt(e,t,n,r)):[]}function Er(e){return e?e[0]:x}function wr(e,t,n){var r=e?e.length:0;return n&&Zn(e,t,n)&&(t=!1),r?Tt(e,t):[]}function Or(e){var t=e?e.length:0;return t?Tt(e,!0):[]}function Cr(e,t,n){var r=e?e.length:0;if(!r)return-1;if("number"==typeof n)n=0>n?wa(r+n,0):n;else if(n){var o=rn(e,t);return r>o&&(t===t?t===e[o]:e[o]!==e[o])?o:-1}return i(e,t,n||0)}function xr(e){return gr(e,1)}function Nr(e){var t=e?e.length:0;return t?e[t-1]:x}function Dr(e,t,n){var r=e?e.length:0;if(!r)return-1;var o=r;if("number"==typeof n)o=(0>n?wa(r+n,0):Oa(n||0,r-1))+1;else if(n){o=rn(e,t,!0)-1;var i=e[o];return(t===t?t===i:i!==i)?o:-1}if(t!==t)return m(e,o,!0);for(;o--;)if(e[o]===t)return o;return-1}function Rr(){var e=arguments,t=e[0];if(!t||!t.length)return t;for(var n=0,r=qn(),o=e.length;++n<o;)for(var i=0,a=e[n];(i=r(t,a,i))>-1;)da.call(t,i,1);return t}function Tr(e,t,n){var r=[];if(!e||!e.length)return r;var o=-1,i=[],a=e.length;for(t=Bn(t,n,3);++o<a;){var s=e[o];t(s,o,e)&&(r.push(s),i.push(o))}return Kt(e,i),r}function Pr(e){return mr(e,1)}function kr(e,t,n){var r=e?e.length:0;return r?(n&&"number"!=typeof n&&Zn(e,t,n)&&(t=0,n=r),Yt(e,t,n)):[]}function Mr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),Yt(e,0,0>t?0:t)):[]}function Sr(e,t,n){var r=e?e.length:0;return r?((n?Zn(e,t,n):null==t)&&(t=1),t=r-(+t||0),Yt(e,0>t?0:t)):[]}function jr(e,t,n){return e&&e.length?tn(e,Bn(t,n,3),!1,!0):[]}function Ir(e,t,n){return e&&e.length?tn(e,Bn(t,n,3)):[]}function Ar(e,t,n,r){var o=e?e.length:0;if(!o)return[];null!=t&&"boolean"!=typeof t&&(r=n,n=Zn(e,t,r)?x:t,t=!1);var a=Bn();return(null!=n||a!==_t)&&(n=a(n,r,3)),t&&qn()==i?_(e,n):Zt(e,n)}function Lr(e){if(!e||!e.length)return[];var t=-1,n=0;e=st(e,function(e){return Gn(e)?(n=wa(e.length,n),!0):void 0});for(var r=Bi(n);++t<n;)r[t]=ut(e,qt(t));return r}function Vr(e,t,n){var r=e?e.length:0;if(!r)return[];var o=Lr(e);return null==t?o:(t=an(t,n,4),ut(o,function(e){return lt(e,t,x,!0)}))}function Ur(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(Gn(n))var r=r?ct(Ot(r,n),Ot(n,r)):n}return r?Zt(r):[]}function Fr(e,t){var n=-1,r=e?e.length:0,o={};for(!r||t||Ts(e[0])||(t=[]);++n<r;){var i=e[n];t?o[i]=t[n]:i&&(o[i[0]]=i[1])}return o}function Br(e){var n=t(e);return n.__chain__=!0,n}function Hr(e,t,n){return t.call(n,e),e}function qr(e,t,n){return t.call(n,e)}function Wr(){return Br(this)}function Kr(){return new y(this.value(),this.__chain__)}function $r(e){for(var t,r=this;r instanceof n;){var o=dr(r);t?i.__wrapped__=o:t=o;var i=o;r=r.__wrapped__}return i.__wrapped__=e,t}function zr(){var e=this.__wrapped__,t=function(e){return n&&n.__dir__<0?e:e.reverse()};if(e instanceof G){var n=e;return this.__actions__.length&&(n=new G(this)),n=n.reverse(),n.__actions__.push({func:qr,args:[t],thisArg:x}),new y(n,this.__chain__)}return this.thru(t)}function Yr(){return this.value()+""}function Qr(){return nn(this.__wrapped__,this.__actions__)}function Xr(e,t,n){var r=Ts(e)?it:Ct;return n&&Zn(e,t,n)&&(t=x),("function"!=typeof t||n!==x)&&(t=Bn(t,n,3)),r(e,t)}function Gr(e,t,n){var r=Ts(e)?st:Dt;return t=Bn(t,n,3),r(e,t)}function Jr(e,t){return os(e,Ut(t))}function Zr(e,t,n,r){var o=e?Ha(e):0;return nr(o)||(e=ai(e),o=e.length),n="number"!=typeof n||r&&Zn(t,n,r)?0:0>n?wa(o+n,0):n||0,"string"==typeof e||!Ts(e)&&qo(e)?o>=n&&e.indexOf(t,n)>-1:!!o&&qn(e,t,n)>-1}function eo(e,t,n){var r=Ts(e)?ut:Vt;return t=Bn(t,n,3),r(e,t)}function to(e,t){return eo(e,ji(t))}function no(e,t,n){var r=Ts(e)?st:Dt;return t=Bn(t,n,3),r(e,function(e,n,r){return!t(e,n,r)})}function ro(e,t,n){if(n?Zn(e,t,n):null==t){e=lr(e);var r=e.length;return r>0?e[$t(0,r-1)]:x}var o=-1,i=Yo(e),r=i.length,a=r-1;for(t=Oa(0>t?0:+t||0,r);++o<t;){var s=$t(o,a),u=i[s];i[s]=i[o],i[o]=u}return i.length=t,i}function oo(e){return ro(e,Ra)}function io(e){var t=e?Ha(e):0;return nr(t)?t:Fs(e).length}function ao(e,t,n){var r=Ts(e)?ft:Qt;return n&&Zn(e,t,n)&&(t=x),("function"!=typeof t||n!==x)&&(t=Bn(t,n,3)),r(e,t)}function so(e,t,n){if(null==e)return[];n&&Zn(e,t,n)&&(t=x);var r=-1;t=Bn(t,n,3);var o=Vt(e,function(e,n,o){return{criteria:t(e,n,o),index:++r,value:e}});return Xt(o,l)}function uo(e,t,n,r){return null==e?[]:(r&&Zn(t,n,r)&&(n=x),Ts(t)||(t=null==t?[]:[t]),Ts(n)||(n=null==n?[]:[n]),Gt(e,t,n))}function co(e,t){return Gr(e,Ut(t))}function lo(e,t){if("function"!=typeof t){if("function"!=typeof e)throw new Xi(q);var n=e;e=t,t=n}return e=_a(e=+e)?e:0,function(){return--e<1?t.apply(this,arguments):void 0}}function po(e,t,n){return n&&Zn(e,t,n)&&(t=x),t=e&&null==t?e.length:wa(+t||0,0),Ln(e,j,x,x,x,x,t)}function fo(e,t){var n;if("function"!=typeof t){if("function"!=typeof e)throw new Xi(q);var r=e;e=t,t=r}return function(){return--e>0&&(n=t.apply(this,arguments)),1>=e&&(t=x),n}}function ho(e,t,n){function r(){d&&sa(d),c&&sa(c),v=0,c=d=h=x}function o(t,n){n&&sa(n),c=d=h=x,t&&(v=vs(),l=e.apply(f,u),d||c||(u=f=x))}function i(){var e=t-(vs()-p);0>=e||e>t?o(h,c):d=fa(i,e)}function a(){o(g,d)}function s(){if(u=arguments,p=vs(),f=this,h=g&&(d||!y),m===!1)var n=y&&!d;else{c||y||(v=p);var r=m-(p-v),o=0>=r||r>m;o?(c&&(c=sa(c)),v=p,l=e.apply(f,u)):c||(c=fa(a,r))}return o&&d?d=sa(d):d||t===m||(d=fa(i,t)),n&&(o=!0,l=e.apply(f,u)),!o||d||c||(u=f=x),l}var u,c,l,p,f,d,h,v=0,m=!1,g=!0;if("function"!=typeof e)throw new Xi(q);if(t=0>t?0:+t||0,n===!0){var y=!0;g=!1}else Io(n)&&(y=!!n.leading,m="maxWait"in n&&wa(+n.maxWait||0,t),g="trailing"in n?!!n.trailing:g);return s.cancel=r,s}function vo(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new Xi(q);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a),a};return n.cache=new vo.Cache,n}function mo(e){if("function"!=typeof e)throw new Xi(q);return function(){return!e.apply(this,arguments)}}function go(e){return fo(2,e)}function yo(e,t){if("function"!=typeof e)throw new Xi(q);return t=wa(t===x?e.length-1:+t||0,0),function(){for(var n=arguments,r=-1,o=wa(n.length-t,0),i=Bi(o);++r<o;)i[r]=n[t+r];switch(t){case 0:return e.call(this,i);case 1:return e.call(this,n[0],i);case 2:return e.call(this,n[0],n[1],i)}var a=Bi(t+1);for(r=-1;++r<t;)a[r]=n[r];return a[t]=i,e.apply(this,a)}}function bo(e){if("function"!=typeof e)throw new Xi(q);return function(t){return e.apply(this,t)}}function _o(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new Xi(q);return n===!1?r=!1:Io(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ho(e,t,{leading:r,maxWait:+t,trailing:o})}function Eo(e,t){return t=null==t?Ri:t,Ln(t,M,x,[e],[])}function wo(e,t,n,r){return t&&"boolean"!=typeof t&&Zn(e,t,n)?t=!1:"function"==typeof t&&(r=n,n=t,t=!1),"function"==typeof n?Et(e,t,an(n,r,1)):Et(e,t)}function Oo(e,t,n){return"function"==typeof t?Et(e,!0,an(t,n,1)):Et(e,!0)}function Co(e,t){return e>t}function xo(e,t){return e>=t}function No(e){return g(e)&&Gn(e)&&ta.call(e,"callee")&&!la.call(e,"callee")}function Do(e){return e===!0||e===!1||g(e)&&ra.call(e)==z}function Ro(e){return g(e)&&ra.call(e)==Y}function To(e){return!!e&&1===e.nodeType&&g(e)&&!Bo(e)}function Po(e){return null==e?!0:Gn(e)&&(Ts(e)||qo(e)||No(e)||g(e)&&jo(e.splice))?!e.length:!Fs(e).length}function ko(e,t,n,r){n="function"==typeof n?an(n,r,3):x;var o=n?n(e,t):x;return o===x?It(e,t,n):!!o}function Mo(e){return g(e)&&"string"==typeof e.message&&ra.call(e)==Q}function So(e){return"number"==typeof e&&_a(e)}function jo(e){return Io(e)&&ra.call(e)==X}function Io(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ao(e,t,n,r){return n="function"==typeof n?an(n,r,3):x,Lt(e,Wn(t),n)}function Lo(e){return Fo(e)&&e!=+e}function Vo(e){return null==e?!1:jo(e)?ia.test(ea.call(e)):g(e)&&je.test(e)}function Uo(e){return null===e}function Fo(e){return"number"==typeof e||g(e)&&ra.call(e)==J}function Bo(e){var t;if(!g(e)||ra.call(e)!=Z||No(e)||!ta.call(e,"constructor")&&(t=e.constructor,"function"==typeof t&&!(t instanceof t)))return!1;var n;return Pt(e,function(e,t){n=t}),n===x||ta.call(e,n)}function Ho(e){return Io(e)&&ra.call(e)==ee}function qo(e){return"string"==typeof e||g(e)&&ra.call(e)==ne}function Wo(e){return g(e)&&nr(e.length)&&!!He[ra.call(e)]}function Ko(e){return e===x}function $o(e,t){return t>e}function zo(e,t){return t>=e}function Yo(e){var t=e?Ha(e):0;return nr(t)?t?et(e):[]:ai(e)}function Qo(e){return bt(e,ti(e))}function Xo(e,t,n){var r=Ia(e);return n&&Zn(e,t,n)&&(t=x),t?gt(r,t):r}function Go(e){return St(e,ti(e))}function Jo(e,t,n){var r=null==e?x:jt(e,fr(t),t+"");return r===x?n:r}function Zo(e,t){if(null==e)return!1;var n=ta.call(e,t);if(!n&&!er(t)){if(t=fr(t),e=1==t.length?e:jt(e,Yt(t,0,-1)),null==e)return!1;t=Nr(t),n=ta.call(e,t)}return n||nr(e.length)&&Jn(t,e.length)&&(Ts(e)||No(e))}function ei(e,t,n){n&&Zn(e,t,n)&&(t=x);for(var r=-1,o=Fs(e),i=o.length,a={};++r<i;){var s=o[r],u=e[s];t?ta.call(a,u)?a[u].push(s):a[u]=[s]:a[u]=s}return a}function ti(e){if(null==e)return[];Io(e)||(e=zi(e));var t=e.length;t=t&&nr(t)&&(Ts(e)||No(e))&&t||0;for(var n=e.constructor,r=-1,o="function"==typeof n&&n.prototype===e,i=Bi(t),a=t>0;++r<t;)i[r]=r+"";for(var s in e)a&&Jn(s,t)||"constructor"==s&&(o||!ta.call(e,s))||i.push(s);return i}function ni(e){e=pr(e);for(var t=-1,n=Fs(e),r=n.length,o=Bi(r);++t<r;){var i=n[t];o[t]=[i,e[i]]}return o}function ri(e,t,n){var r=null==e?x:e[t];return r===x&&(null==e||er(t,e)||(t=fr(t),e=1==t.length?e:jt(e,Yt(t,0,-1)),r=null==e?x:e[Nr(t)]),r=r===x?n:r),jo(r)?r.call(e):r}function oi(e,t,n){if(null==e)return e;var r=t+"";t=null!=e[r]||er(t,e)?[r]:fr(t);for(var o=-1,i=t.length,a=i-1,s=e;null!=s&&++o<i;){var u=t[o];Io(s)&&(o==a?s[u]=n:null==s[u]&&(s[u]=Jn(t[o+1])?[]:{})),s=s[u]}return e}function ii(e,t,n,r){var o=Ts(e)||Wo(e);if(t=Bn(t,r,4),null==n)if(o||Io(e)){var i=e.constructor;n=o?Ts(e)?new i:[]:Ia(jo(i)?i.prototype:x)}else n={};return(o?tt:kt)(e,function(e,r,o){return t(n,e,r,o)}),n}function ai(e){return en(e,Fs(e))}function si(e){return en(e,ti(e))}function ui(e,t,n){return t=+t||0,n===x?(n=t,t=0):n=+n||0,e>=Oa(t,n)&&e<wa(t,n)}function ci(e,t,n){n&&Zn(e,t,n)&&(t=n=x);var r=null==e,o=null==t;if(null==n&&(o&&"boolean"==typeof e?(n=e,e=1):"boolean"==typeof t&&(n=t,o=!0)),r&&o&&(t=1,o=!1),e=+e||0,o?(t=e,e=0):t=+t||0,n||e%1||t%1){var i=Na();return Oa(e+i*(t-e+ua("1e-"+((i+"").length-1))),t)}return $t(e,t)}function li(e){return e=s(e),e&&e.charAt(0).toUpperCase()+e.slice(1)}function pi(e){return e=s(e),e&&e.replace(Ae,f).replace(Te,"")}function fi(e,t,n){e=s(e),t+="";var r=e.length;return n=n===x?r:Oa(0>n?0:+n||0,r),n-=t.length,n>=0&&e.indexOf(t,n)==n}function di(e){return e=s(e),e&&_e.test(e)?e.replace(ye,d):e}function hi(e){return e=s(e),e&&Re.test(e)?e.replace(De,h):e||"(?:)"}function vi(e,t,n){e=s(e),t=+t;var r=e.length;if(r>=t||!_a(t))return e;var o=(t-r)/2,i=ya(o),a=ma(o);return n=Sn("",a,n),n.slice(0,i)+e+n}function mi(e,t,n){return(n?Zn(e,t,n):null==t)?t=0:t&&(t=+t),e=_i(e),xa(e,t||(Se.test(e)?16:10))}function gi(e,t){var n="";if(e=s(e),t=+t,1>t||!e||!_a(t))return n;do t%2&&(n+=e),t=ya(t/2),e+=e;while(t);return n}function yi(e,t,n){return e=s(e),n=null==n?0:Oa(0>n?0:+n||0,e.length),e.lastIndexOf(t,n)==n}function bi(e,n,r){var o=t.templateSettings;r&&Zn(e,n,r)&&(n=r=x),e=s(e),n=mt(gt({},r||n),o,vt);var i,a,u=mt(gt({},n.imports),o.imports,vt),c=Fs(u),l=en(u,c),p=0,f=n.interpolate||Le,d="__p += '",h=Yi((n.escape||Le).source+"|"+f.source+"|"+(f===Oe?ke:Le).source+"|"+(n.evaluate||Le).source+"|$","g"),m="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Be+"]")+"\n";e.replace(h,function(t,n,r,o,s,u){return r||(r=o),d+=e.slice(p,u).replace(Ve,v),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),p=u+t.length,t}),d+="';\n";var g=n.variable;g||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(he,""):d).replace(ve,"$1").replace(me,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var y=Gs(function(){return Wi(c,m+"return "+d).apply(x,l)});if(y.source=d,Mo(y))throw y;return y}function _i(e,t,n){var r=e;return(e=s(e))?(n?Zn(r,t,n):null==t)?e.slice(E(e),w(e)+1):(t+="",e.slice(u(e,t),c(e,t)+1)):e}function Ei(e,t,n){var r=e;return e=s(e),e?(n?Zn(r,t,n):null==t)?e.slice(E(e)):e.slice(u(e,t+"")):e}function wi(e,t,n){var r=e;return e=s(e),e?(n?Zn(r,t,n):null==t)?e.slice(0,w(e)+1):e.slice(0,c(e,t+"")+1):e}function Oi(e,t,n){n&&Zn(e,t,n)&&(t=x);var r=A,o=L;if(null!=t)if(Io(t)){var i="separator"in t?t.separator:i;r="length"in t?+t.length||0:r,o="omission"in t?s(t.omission):o}else r=+t||0;if(e=s(e),r>=e.length)return e;var a=r-o.length;if(1>a)return o;var u=e.slice(0,a);if(null==i)return u+o;if(Ho(i)){if(e.slice(a).search(i)){var c,l,p=e.slice(0,a);for(i.global||(i=Yi(i.source,(Me.exec(i)||"")+"g")),i.lastIndex=0;c=i.exec(p);)l=c.index;u=u.slice(0,null==l?a:l)}}else if(e.indexOf(i,a)!=a){var f=u.lastIndexOf(i);f>-1&&(u=u.slice(0,f))}return u+o}function Ci(e){return e=s(e),e&&be.test(e)?e.replace(ge,O):e}function xi(e,t,n){return n&&Zn(e,t,n)&&(t=x),e=s(e),e.match(t||Ue)||[]}function Ni(e,t,n){return n&&Zn(e,t,n)&&(t=x),g(e)?Ti(e):_t(e,t)}function Di(e){return function(){return e}}function Ri(e){return e}function Ti(e){return Ut(Et(e,!0))}function Pi(e,t){return Ft(e,Et(t,!0))}function ki(e,t,n){if(null==n){var r=Io(t),o=r?Fs(t):x,i=o&&o.length?St(t,o):x;(i?i.length:r)||(i=!1,n=t,t=e,e=this)}i||(i=St(t,Fs(t)));var a=!0,s=-1,u=jo(e),c=i.length;n===!1?a=!1:Io(n)&&"chain"in n&&(a=n.chain);for(;++s<c;){var l=i[s],p=t[l];e[l]=p,u&&(e.prototype[l]=function(t){return function(){var n=this.__chain__;if(a||n){var r=e(this.__wrapped__),o=r.__actions__=et(this.__actions__);return o.push({func:t,args:arguments,thisArg:e}),r.__chain__=n,r}return t.apply(e,ct([this.value()],arguments))}}(p))}return e}function Mi(){return nt._=oa,this}function Si(){}function ji(e){return er(e)?qt(e):Wt(e)}function Ii(e){return function(t){return jt(e,fr(t),t+"")}}function Ai(e,t,n){n&&Zn(e,t,n)&&(t=n=x),e=+e||0,n=null==n?1:+n||0,null==t?(t=e,e=0):t=+t||0;for(var r=-1,o=wa(ma((t-e)/(n||1)),0),i=Bi(o);++r<o;)i[r]=e,e+=n;return i}function Li(e,t,n){if(e=ya(e),1>e||!_a(e))return[];var r=-1,o=Bi(Oa(e,Ta));for(t=an(t,n,1);++r<e;)Ta>r?o[r]=t(r):t(r);return o}function Vi(e){var t=++na;return s(e)+t}function Ui(e,t){return(+e||0)+(+t||0)}function Fi(e,t,n){return n&&Zn(e,t,n)&&(t=x),t=Bn(t,n,3),1==t.length?dt(Ts(e)?e:lr(e),t):Jt(e,t)}e=e?rt.defaults(nt.Object(),e,rt.pick(nt,Fe)):nt;var Bi=e.Array,Hi=e.Date,qi=e.Error,Wi=e.Function,Ki=e.Math,$i=e.Number,zi=e.Object,Yi=e.RegExp,Qi=e.String,Xi=e.TypeError,Gi=Bi.prototype,Ji=zi.prototype,Zi=Qi.prototype,ea=Wi.prototype.toString,ta=Ji.hasOwnProperty,na=0,ra=Ji.toString,oa=nt._,ia=Yi("^"+ea.call(ta).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),aa=e.ArrayBuffer,sa=e.clearTimeout,ua=e.parseFloat,ca=Ki.pow,la=Ji.propertyIsEnumerable,pa=Kn(e,"Set"),fa=e.setTimeout,da=Gi.splice,ha=e.Uint8Array,va=Kn(e,"WeakMap"),ma=Ki.ceil,ga=Kn(zi,"create"),ya=Ki.floor,ba=Kn(Bi,"isArray"),_a=e.isFinite,Ea=Kn(zi,"keys"),wa=Ki.max,Oa=Ki.min,Ca=Kn(Hi,"now"),xa=e.parseInt,Na=Ki.random,Da=$i.NEGATIVE_INFINITY,Ra=$i.POSITIVE_INFINITY,Ta=4294967295,Pa=Ta-1,ka=Ta>>>1,Ma=9007199254740991,Sa=va&&new va,ja={};t.support={};t.templateSettings={escape:Ee,evaluate:we,interpolate:Oe,variable:"",imports:{_:t}};var Ia=function(){function e(){}return function(t){if(Io(t)){e.prototype=t;var n=new e;e.prototype=x}return n||{}}}(),Aa=fn(kt),La=fn(Mt,!0),Va=dn(),Ua=dn(!0),Fa=Sa?function(e,t){return Sa.set(e,t),e}:Ri,Ba=Sa?function(e){return Sa.get(e)}:Si,Ha=qt("length"),qa=function(){var e=0,t=0;return function(n,r){var o=vs(),i=U-(o-t);if(t=o,i>0){if(++e>=V)return n}else e=0;return Fa(n,r)}}(),Wa=yo(function(e,t){return g(e)&&Gn(e)?Ot(e,Tt(t,!1,!0)):[]}),Ka=wn(),$a=wn(!0),za=yo(function(e){for(var t=e.length,n=t,r=Bi(p),o=qn(),a=o==i,s=[];n--;){var u=e[n]=Gn(u=e[n])?u:[];r[n]=a&&u.length>=120?vn(n&&u):null}var c=e[0],l=-1,p=c?c.length:0,f=r[0];e:for(;++l<p;)if(u=c[l],(f?Ge(f,u):o(s,u,0))<0){for(var n=t;--n;){var d=r[n];if((d?Ge(d,u):o(e[n],u,0))<0)continue e}f&&f.push(u),s.push(u)}return s}),Ya=yo(function(e,t){t=Tt(t);var n=yt(e,t);return Kt(e,t.sort(r)),n}),Qa=An(),Xa=An(!0),Ga=yo(function(e){return Zt(Tt(e,!1,!0))}),Ja=yo(function(e,t){return Gn(e)?Ot(e,t):[]}),Za=yo(Lr),es=yo(function(e){var t=e.length,n=t>2?e[t-2]:x,r=t>1?e[t-1]:x;return t>2&&"function"==typeof n?t-=2:(n=t>1&&"function"==typeof r?(--t,r):x,r=x),e.length=t,Vr(e,n,r)}),ts=yo(function(e){return e=Tt(e),this.thru(function(t){return Ze(Ts(t)?t:[pr(t)],e)})}),ns=yo(function(e,t){return yt(e,Tt(t))}),rs=ln(function(e,t,n){ta.call(e,n)?++e[n]:e[n]=1}),os=En(Aa),is=En(La,!0),as=xn(tt,Aa),ss=xn(ot,La),us=ln(function(e,t,n){ta.call(e,n)?e[n].push(t):e[n]=[t]}),cs=ln(function(e,t,n){e[n]=t}),ls=yo(function(e,t,n){var r=-1,o="function"==typeof t,i=er(t),a=Gn(e)?Bi(e.length):[];return Aa(e,function(e){var s=o?t:i&&null!=e?e[t]:x;a[++r]=s?s.apply(e,n):Xn(e,t,n)}),a}),ps=ln(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]}),fs=kn(lt,Aa),ds=kn(pt,La),hs=yo(function(e,t){if(null==e)return[];var n=t[2];return n&&Zn(t[0],t[1],n)&&(t.length=1),Gt(e,Tt(t),[])}),vs=Ca||function(){return(new Hi).getTime()},ms=yo(function(e,t,n){var r=D;if(n.length){var o=b(n,ms.placeholder);r|=M}return Ln(e,r,t,n,o)}),gs=yo(function(e,t){t=t.length?Tt(t):Go(e);for(var n=-1,r=t.length;++n<r;){var o=t[n];e[o]=Ln(e[o],D,e)}return e}),ys=yo(function(e,t,n){var r=D|R;if(n.length){var o=b(n,ys.placeholder);r|=M}return Ln(t,r,e,n,o)}),bs=yn(P),_s=yn(k),Es=yo(function(e,t){return wt(e,1,t)}),ws=yo(function(e,t,n){return wt(e,t,n)}),Os=Cn(),Cs=Cn(!0),xs=yo(function(e,t){if(t=Tt(t),"function"!=typeof e||!it(t,a))throw new Xi(q);var n=t.length;return yo(function(r){for(var o=Oa(r.length,n);o--;)r[o]=t[o](r[o]);return e.apply(this,r)})}),Ns=Pn(M),Ds=Pn(S),Rs=yo(function(e,t){return Ln(e,I,x,x,x,Tt(t))}),Ts=ba||function(e){return g(e)&&nr(e.length)&&ra.call(e)==$},Ps=pn(Bt),ks=pn(function(e,t,n){return n?mt(e,t,n):gt(e,t)}),Ms=bn(ks,ht),Ss=bn(Ps,ir),js=On(kt),Is=On(Mt),As=Nn(Va),Ls=Nn(Ua),Vs=Dn(kt),Us=Dn(Mt),Fs=Ea?function(e){var t=null==e?x:e.constructor;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&Gn(e)?cr(e):Io(e)?Ea(e):[]}:cr,Bs=Rn(!0),Hs=Rn(),qs=yo(function(e,t){if(null==e)return{};if("function"!=typeof t[0]){var t=ut(Tt(t),Qi);return ar(e,Ot(ti(e),t))}var n=an(t[0],t[1],3);return sr(e,function(e,t,r){return!n(e,t,r)})}),Ws=yo(function(e,t){return null==e?{}:"function"==typeof t[0]?sr(e,an(t[0],t[1],3)):ar(e,Tt(t))}),Ks=mn(function(e,t,n){return t=t.toLowerCase(),e+(n?t.charAt(0).toUpperCase()+t.slice(1):t)}),$s=mn(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),zs=Tn(),Ys=Tn(!0),Qs=mn(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}),Xs=mn(function(e,t,n){return e+(n?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Gs=yo(function(e,t){try{return e.apply(x,t)}catch(n){return Mo(n)?n:new qi(n)}}),Js=yo(function(e,t){return function(n){return Xn(n,e,t)}}),Zs=yo(function(e,t){return function(n){return Xn(e,n,t)}}),eu=In("ceil"),tu=In("floor"),nu=_n(Co,Da),ru=_n($o,Ra),ou=In("round");return t.prototype=n.prototype,y.prototype=Ia(n.prototype),y.prototype.constructor=y,G.prototype=Ia(n.prototype),G.prototype.constructor=G,Ke.prototype["delete"]=$e,Ke.prototype.get=ze,Ke.prototype.has=Ye,Ke.prototype.set=Qe,Xe.prototype.push=Je,vo.Cache=Ke,t.after=lo,t.ary=po,t.assign=ks,t.at=ns,t.before=fo,t.bind=ms,t.bindAll=gs,t.bindKey=ys,t.callback=Ni,t.chain=Br,t.chunk=hr,t.compact=vr,t.constant=Di,t.countBy=rs,t.create=Xo,t.curry=bs,t.curryRight=_s,t.debounce=ho,t.defaults=Ms,t.defaultsDeep=Ss,t.defer=Es,t.delay=ws,t.difference=Wa,t.drop=mr,t.dropRight=gr,t.dropRightWhile=yr,t.dropWhile=br,t.fill=_r,t.filter=Gr,t.flatten=wr,t.flattenDeep=Or,t.flow=Os,t.flowRight=Cs,t.forEach=as,t.forEachRight=ss,t.forIn=As,t.forInRight=Ls,t.forOwn=Vs,t.forOwnRight=Us,t.functions=Go,t.groupBy=us,t.indexBy=cs,t.initial=xr,t.intersection=za,t.invert=ei,t.invoke=ls,t.keys=Fs,t.keysIn=ti,t.map=eo,t.mapKeys=Bs,t.mapValues=Hs,t.matches=Ti,t.matchesProperty=Pi,t.memoize=vo,t.merge=Ps,t.method=Js,t.methodOf=Zs,t.mixin=ki,t.modArgs=xs,t.negate=mo,t.omit=qs,t.once=go,t.pairs=ni,t.partial=Ns,t.partialRight=Ds,t.partition=ps,t.pick=Ws,t.pluck=to,t.property=ji,t.propertyOf=Ii,t.pull=Rr,t.pullAt=Ya,t.range=Ai,t.rearg=Rs,t.reject=no,t.remove=Tr,t.rest=Pr,t.restParam=yo,t.set=oi,t.shuffle=oo,t.slice=kr,t.sortBy=so,t.sortByAll=hs,t.sortByOrder=uo,t.spread=bo,t.take=Mr,t.takeRight=Sr,t.takeRightWhile=jr,t.takeWhile=Ir,t.tap=Hr,t.throttle=_o,t.thru=qr,t.times=Li,t.toArray=Yo,t.toPlainObject=Qo,t.transform=ii,t.union=Ga,t.uniq=Ar,t.unzip=Lr,t.unzipWith=Vr,t.values=ai,t.valuesIn=si,t.where=co,t.without=Ja,t.wrap=Eo,t.xor=Ur,t.zip=Za,t.zipObject=Fr,t.zipWith=es,t.backflow=Cs,t.collect=eo,t.compose=Cs,t.each=as,t.eachRight=ss,t.extend=ks,t.iteratee=Ni,t.methods=Go,t.object=Fr,t.select=Gr,t.tail=Pr,t.unique=Ar,ki(t,t),t.add=Ui,t.attempt=Gs,t.camelCase=Ks,t.capitalize=li,t.ceil=eu,t.clone=wo,t.cloneDeep=Oo,t.deburr=pi,t.endsWith=fi,t.escape=di,t.escapeRegExp=hi,t.every=Xr,t.find=os,t.findIndex=Ka,t.findKey=js,t.findLast=is,t.findLastIndex=$a,t.findLastKey=Is,t.findWhere=Jr,t.first=Er,t.floor=tu,t.get=Jo,t.gt=Co,t.gte=xo,t.has=Zo,t.identity=Ri,t.includes=Zr,t.indexOf=Cr,t.inRange=ui,t.isArguments=No,t.isArray=Ts,t.isBoolean=Do,t.isDate=Ro,t.isElement=To,t.isEmpty=Po,t.isEqual=ko,t.isError=Mo,t.isFinite=So,t.isFunction=jo,t.isMatch=Ao,t.isNaN=Lo,t.isNative=Vo,t.isNull=Uo,t.isNumber=Fo,t.isObject=Io,t.isPlainObject=Bo,t.isRegExp=Ho,t.isString=qo,t.isTypedArray=Wo,t.isUndefined=Ko,t.kebabCase=$s,t.last=Nr,t.lastIndexOf=Dr,t.lt=$o,t.lte=zo,t.max=nu,t.min=ru,t.noConflict=Mi,t.noop=Si,t.now=vs,t.pad=vi,t.padLeft=zs,t.padRight=Ys,t.parseInt=mi,t.random=ci,t.reduce=fs,t.reduceRight=ds,t.repeat=gi,t.result=ri,t.round=ou,t.runInContext=C,t.size=io,t.snakeCase=Qs,t.some=ao,t.sortedIndex=Qa,t.sortedLastIndex=Xa,t.startCase=Xs,t.startsWith=yi,t.sum=Fi,t.template=bi,t.trim=_i,t.trimLeft=Ei,t.trimRight=wi,t.trunc=Oi,t.unescape=Ci,t.uniqueId=Vi,t.words=xi,t.all=Xr,t.any=ao,t.contains=Zr,t.eq=ko,t.detect=os,t.foldl=fs,t.foldr=ds,t.head=Er,t.include=Zr,t.inject=fs,ki(t,function(){var e={};return kt(t,function(n,r){t.prototype[r]||(e[r]=n)}),e}(),!1),t.sample=ro,t.prototype.sample=function(e){return this.__chain__||null!=e?this.thru(function(t){return ro(t,e)}):ro(this.value())},t.VERSION=N,tt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){t[e].placeholder=t}),tt(["drop","take"],function(e,t){G.prototype[e]=function(n){var r=this.__filtered__;if(r&&!t)return new G(this);n=null==n?1:wa(ya(n)||0,0);var o=this.clone();return r?o.__takeCount__=Oa(o.__takeCount__,n):o.__views__.push({size:n,type:e+(o.__dir__<0?"Right":"")}),o},G.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),tt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n!=H;G.prototype[e]=function(e,t){var o=this.clone();return o.__iteratees__.push({iteratee:Bn(e,t,1),type:n}),o.__filtered__=o.__filtered__||r,o}}),tt(["first","last"],function(e,t){var n="take"+(t?"Right":"");G.prototype[e]=function(){return this[n](1).value()[0]}}),tt(["initial","rest"],function(e,t){var n="drop"+(t?"":"Right");G.prototype[e]=function(){return this.__filtered__?new G(this):this[n](1)}}),tt(["pluck","where"],function(e,t){var n=t?"filter":"map",r=t?Ut:ji;G.prototype[e]=function(e){return this[n](r(e))}}),G.prototype.compact=function(){return this.filter(Ri)},G.prototype.reject=function(e,t){return e=Bn(e,t,1),this.filter(function(t){return!e(t)})},G.prototype.slice=function(e,t){e=null==e?0:+e||0;var n=this;return n.__filtered__&&(e>0||0>t)?new G(n):(0>e?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==x&&(t=+t||0,n=0>t?n.dropRight(-t):n.take(t-e)),n)},G.prototype.takeRightWhile=function(e,t){return this.reverse().takeWhile(e,t).reverse()},G.prototype.toArray=function(){return this.take(Ra)},kt(G.prototype,function(e,n){var r=/^(?:filter|map|reject)|While$/.test(n),o=/^(?:first|last)$/.test(n),i=t[o?"take"+("last"==n?"Right":""):n];i&&(t.prototype[n]=function(){var t=o?[1]:arguments,n=this.__chain__,a=this.__wrapped__,s=!!this.__actions__.length,u=a instanceof G,c=t[0],l=u||Ts(a);l&&r&&"function"==typeof c&&1!=c.length&&(u=l=!1);var p=function(e){return o&&n?i(e,1)[0]:i.apply(x,ct([e],t))},f={func:qr,args:[p],thisArg:x},d=u&&!s;if(o&&!n)return d?(a=a.clone(),a.__actions__.push(f),e.call(a)):i.call(x,this.value())[0];if(!o&&l){a=d?a:new G(this);var h=e.apply(a,t);return h.__actions__.push(f),new y(h,n)}return this.thru(p)})}),tt(["join","pop","push","replace","shift","sort","splice","split","unshift"],function(e){var n=(/^(?:replace|split)$/.test(e)?Zi:Gi)[e],r=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",o=/^(?:join|pop|replace|shift)$/.test(e);t.prototype[e]=function(){var e=arguments;return o&&!this.__chain__?n.apply(this.value(),e):this[r](function(t){return n.apply(t,e)})}}),kt(G.prototype,function(e,n){var r=t[n];if(r){var o=r.name,i=ja[o]||(ja[o]=[]);i.push({name:n,func:r})}}),ja[Mn(x,R).name]=[{name:"wrapper",func:x}],G.prototype.clone=te,G.prototype.reverse=re,G.prototype.value=We,t.prototype.chain=Wr,t.prototype.commit=Kr,t.prototype.concat=ts,t.prototype.plant=$r,t.prototype.reverse=zr,t.prototype.toString=Yr,t.prototype.run=t.prototype.toJSON=t.prototype.valueOf=t.prototype.value=Qr,t.prototype.collect=t.prototype.map,t.prototype.head=t.prototype.first,t.prototype.select=t.prototype.filter,t.prototype.tail=t.prototype.rest,t}var x,N="3.10.1",D=1,R=2,T=4,P=8,k=16,M=32,S=64,j=128,I=256,A=30,L="...",V=150,U=16,F=200,B=1,H=2,q="Expected a function",W="__lodash_placeholder__",K="[object Arguments]",$="[object Array]",z="[object Boolean]",Y="[object Date]",Q="[object Error]",X="[object Function]",G="[object Map]",J="[object Number]",Z="[object Object]",ee="[object RegExp]",te="[object Set]",ne="[object String]",re="[object WeakMap]",oe="[object ArrayBuffer]",ie="[object Float32Array]",ae="[object Float64Array]",se="[object Int8Array]",ue="[object Int16Array]",ce="[object Int32Array]",le="[object Uint8Array]",pe="[object Uint8ClampedArray]",fe="[object Uint16Array]",de="[object Uint32Array]",he=/\b__p \+= '';/g,ve=/\b(__p \+=) '' \+/g,me=/(__e\(.*?\)|\b__t\)) \+\n'';/g,ge=/&(?:amp|lt|gt|quot|#39|#96);/g,ye=/[&<>"'`]/g,be=RegExp(ge.source),_e=RegExp(ye.source),Ee=/<%-([\s\S]+?)%>/g,we=/<%([\s\S]+?)%>/g,Oe=/<%=([\s\S]+?)%>/g,Ce=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,xe=/^\w*$/,Ne=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,De=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,Re=RegExp(De.source),Te=/[\u0300-\u036f\ufe20-\ufe23]/g,Pe=/\\(\\)?/g,ke=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Me=/\w*$/,Se=/^0[xX]/,je=/^\[object .+?Constructor\]$/,Ie=/^\d+$/,Ae=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Le=/($^)/,Ve=/['\n\r\u2028\u2029\\]/g,Ue=function(){var e="[A-Z\\xc0-\\xd6\\xd8-\\xde]",t="[a-z\\xdf-\\xf6\\xf8-\\xff]+";return RegExp(e+"+(?="+e+t+")|"+e+"?"+t+"|"+e+"+|[0-9]+","g")}(),Fe=["Array","ArrayBuffer","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Math","Number","Object","RegExp","Set","String","_","clearTimeout","isFinite","parseFloat","parseInt","setTimeout","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap"],Be=-1,He={};He[ie]=He[ae]=He[se]=He[ue]=He[ce]=He[le]=He[pe]=He[fe]=He[de]=!0,He[K]=He[$]=He[oe]=He[z]=He[Y]=He[Q]=He[X]=He[G]=He[J]=He[Z]=He[ee]=He[te]=He[ne]=He[re]=!1;var qe={};qe[K]=qe[$]=qe[oe]=qe[z]=qe[Y]=qe[ie]=qe[ae]=qe[se]=qe[ue]=qe[ce]=qe[J]=qe[Z]=qe[ee]=qe[ne]=qe[le]=qe[pe]=qe[fe]=qe[de]=!0,qe[Q]=qe[X]=qe[G]=qe[te]=qe[re]=!1;var We={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss"},Ke={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},$e={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},ze={"function":!0,object:!0},Ye={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},Qe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Xe=ze[typeof n]&&n&&!n.nodeType&&n,Ge=ze[typeof t]&&t&&!t.nodeType&&t,Je=Xe&&Ge&&"object"==typeof e&&e&&e.Object&&e,Ze=ze[typeof self]&&self&&self.Object&&self,et=ze[typeof window]&&window&&window.Object&&window,tt=Ge&&Ge.exports===Xe&&Xe,nt=Je||et!==(this&&this.window)&&et||Ze||this,rt=C();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(nt._=rt,define(function(){return rt})):Xe&&Ge?tt?(Ge.exports=rt)._=rt:Xe._=rt:nt._=rt}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],81:[function(e,t,n){(function(n){function r(e){var t=e?e.length:0;for(this.data={hash:s(null),set:new a};t--;)this.push(e[t])}var o=e("./cachePush"),i=e("./getNative"),a=i(n,"Set"),s=i(Object,"create");r.prototype.push=o,t.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./cachePush":92,"./getNative":96}],82:[function(e,t,n){function r(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}t.exports=r},{}],83:[function(e,t,n){function r(e,t,n){for(var r=-1,i=o(t),a=i.length;++r<a;){var s=i[r],u=e[s],c=n(u,t[s],s,e,t);(c===c?c===u:u!==u)&&(void 0!==u||s in e)||(e[s]=c)}return e}var o=e("../object/keys");t.exports=r},{"../object/keys":110}],84:[function(e,t,n){function r(e,t){return null==t?e:o(t,i(t),e)}var o=e("./baseCopy"),i=e("../object/keys");t.exports=r},{"../object/keys":110,"./baseCopy":85}],85:[function(e,t,n){function r(e,t,n){n||(n={});for(var r=-1,o=t.length;++r<o;){var i=t[r];n[i]=e[i]}return n}t.exports=r},{}],86:[function(e,t,n){function r(e,t){var n=e?e.length:0,r=[];if(!n)return r;var u=-1,c=o,l=!0,p=l&&t.length>=s?a(t):null,f=t.length;p&&(c=i,l=!1,t=p);e:for(;++u<n;){var d=e[u];if(l&&d===d){for(var h=f;h--;)if(t[h]===d)continue e;r.push(d)}else c(t,d,0)<0&&r.push(d)}return r}var o=e("./baseIndexOf"),i=e("./cacheIndexOf"),a=e("./createCache"),s=200;t.exports=r},{"./baseIndexOf":88,"./cacheIndexOf":91,"./createCache":94}],87:[function(e,t,n){function r(e,t,n,c){c||(c=[]);for(var l=-1,p=e.length;++l<p;){var f=e[l];u(f)&&s(f)&&(n||a(f)||i(f))?t?r(f,t,n,c):o(c,f):n||(c[c.length]=f)}return c}var o=e("./arrayPush"),i=e("../lang/isArguments"),a=e("../lang/isArray"),s=e("./isArrayLike"),u=e("./isObjectLike");t.exports=r},{"../lang/isArguments":104,"../lang/isArray":105,"./arrayPush":82,"./isArrayLike":98,"./isObjectLike":102}],88:[function(e,t,n){function r(e,t,n){if(t!==t)return o(e,n);for(var r=n-1,i=e.length;++r<i;)if(e[r]===t)return r;return-1}var o=e("./indexOfNaN");t.exports=r},{"./indexOfNaN":97}],89:[function(e,t,n){function r(e){return function(t){return null==t?void 0:t[e]}}t.exports=r;
},{}],90:[function(e,t,n){function r(e,t,n){if("function"!=typeof e)return o;if(void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 3:return function(n,r,o){return e.call(t,n,r,o)};case 4:return function(n,r,o,i){return e.call(t,n,r,o,i)};case 5:return function(n,r,o,i,a){return e.call(t,n,r,o,i,a)}}return function(){return e.apply(t,arguments)}}var o=e("../utility/identity");t.exports=r},{"../utility/identity":112}],91:[function(e,t,n){function r(e,t){var n=e.data,r="string"==typeof t||o(t)?n.set.has(t):n.hash[t];return r?0:-1}var o=e("../lang/isObject");t.exports=r},{"../lang/isObject":108}],92:[function(e,t,n){function r(e){var t=this.data;"string"==typeof e||o(e)?t.set.add(e):t.hash[e]=!0}var o=e("../lang/isObject");t.exports=r},{"../lang/isObject":108}],93:[function(e,t,n){function r(e){return a(function(t,n){var r=-1,a=null==t?0:n.length,s=a>2?n[a-2]:void 0,u=a>2?n[2]:void 0,c=a>1?n[a-1]:void 0;for("function"==typeof s?(s=o(s,c,5),a-=2):(s="function"==typeof c?c:void 0,a-=s?1:0),u&&i(n[0],n[1],u)&&(s=3>a?void 0:s,a=1);++r<a;){var l=n[r];l&&e(t,l,s)}return t})}var o=e("./bindCallback"),i=e("./isIterateeCall"),a=e("../function/restParam");t.exports=r},{"../function/restParam":79,"./bindCallback":90,"./isIterateeCall":100}],94:[function(e,t,n){(function(n){function r(e){return s&&a?new o(e):null}var o=e("./SetCache"),i=e("./getNative"),a=i(n,"Set"),s=i(Object,"create");t.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./SetCache":81,"./getNative":96}],95:[function(e,t,n){var r=e("./baseProperty"),o=r("length");t.exports=o},{"./baseProperty":89}],96:[function(e,t,n){function r(e,t){var n=null==e?void 0:e[t];return o(n)?n:void 0}var o=e("../lang/isNative");t.exports=r},{"../lang/isNative":107}],97:[function(e,t,n){function r(e,t,n){for(var r=e.length,o=t+(n?0:-1);n?o--:++o<r;){var i=e[o];if(i!==i)return o}return-1}t.exports=r},{}],98:[function(e,t,n){function r(e){return null!=e&&i(o(e))}var o=e("./getLength"),i=e("./isLength");t.exports=r},{"./getLength":95,"./isLength":101}],99:[function(e,t,n){function r(e,t){return e="number"==typeof e||o.test(e)?+e:-1,t=null==t?i:t,e>-1&&e%1==0&&t>e}var o=/^\d+$/,i=9007199254740991;t.exports=r},{}],100:[function(e,t,n){function r(e,t,n){if(!a(n))return!1;var r=typeof t;if("number"==r?o(n)&&i(t,n.length):"string"==r&&t in n){var s=n[t];return e===e?e===s:s!==s}return!1}var o=e("./isArrayLike"),i=e("./isIndex"),a=e("../lang/isObject");t.exports=r},{"../lang/isObject":108,"./isArrayLike":98,"./isIndex":99}],101:[function(e,t,n){function r(e){return"number"==typeof e&&e>-1&&e%1==0&&o>=e}var o=9007199254740991;t.exports=r},{}],102:[function(e,t,n){function r(e){return!!e&&"object"==typeof e}t.exports=r},{}],103:[function(e,t,n){function r(e){for(var t=u(e),n=t.length,r=n&&e.length,c=!!r&&s(r)&&(i(e)||o(e)),p=-1,f=[];++p<n;){var d=t[p];(c&&a(d,r)||l.call(e,d))&&f.push(d)}return f}var o=e("../lang/isArguments"),i=e("../lang/isArray"),a=e("./isIndex"),s=e("./isLength"),u=e("../object/keysIn"),c=Object.prototype,l=c.hasOwnProperty;t.exports=r},{"../lang/isArguments":104,"../lang/isArray":105,"../object/keysIn":111,"./isIndex":99,"./isLength":101}],104:[function(e,t,n){function r(e){return i(e)&&o(e)&&s.call(e,"callee")&&!u.call(e,"callee")}var o=e("../internal/isArrayLike"),i=e("../internal/isObjectLike"),a=Object.prototype,s=a.hasOwnProperty,u=a.propertyIsEnumerable;t.exports=r},{"../internal/isArrayLike":98,"../internal/isObjectLike":102}],105:[function(e,t,n){var r=e("../internal/getNative"),o=e("../internal/isLength"),i=e("../internal/isObjectLike"),a="[object Array]",s=Object.prototype,u=s.toString,c=r(Array,"isArray"),l=c||function(e){return i(e)&&o(e.length)&&u.call(e)==a};t.exports=l},{"../internal/getNative":96,"../internal/isLength":101,"../internal/isObjectLike":102}],106:[function(e,t,n){function r(e){return o(e)&&s.call(e)==i}var o=e("./isObject"),i="[object Function]",a=Object.prototype,s=a.toString;t.exports=r},{"./isObject":108}],107:[function(e,t,n){function r(e){return null==e?!1:o(e)?l.test(u.call(e)):i(e)&&a.test(e)}var o=e("./isFunction"),i=e("../internal/isObjectLike"),a=/^\[object .+?Constructor\]$/,s=Object.prototype,u=Function.prototype.toString,c=s.hasOwnProperty,l=RegExp("^"+u.call(c).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=r},{"../internal/isObjectLike":102,"./isFunction":106}],108:[function(e,t,n){function r(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}t.exports=r},{}],109:[function(e,t,n){var r=e("../internal/assignWith"),o=e("../internal/baseAssign"),i=e("../internal/createAssigner"),a=i(function(e,t,n){return n?r(e,t,n):o(e,t)});t.exports=a},{"../internal/assignWith":83,"../internal/baseAssign":84,"../internal/createAssigner":93}],110:[function(e,t,n){var r=e("../internal/getNative"),o=e("../internal/isArrayLike"),i=e("../lang/isObject"),a=e("../internal/shimKeys"),s=r(Object,"keys"),u=s?function(e){var t=null==e?void 0:e.constructor;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&o(e)?a(e):i(e)?s(e):[]}:a;t.exports=u},{"../internal/getNative":96,"../internal/isArrayLike":98,"../internal/shimKeys":103,"../lang/isObject":108}],111:[function(e,t,n){function r(e){if(null==e)return[];u(e)||(e=Object(e));var t=e.length;t=t&&s(t)&&(i(e)||o(e))&&t||0;for(var n=e.constructor,r=-1,c="function"==typeof n&&n.prototype===e,p=Array(t),f=t>0;++r<t;)p[r]=r+"";for(var d in e)f&&a(d,t)||"constructor"==d&&(c||!l.call(e,d))||p.push(d);return p}var o=e("../lang/isArguments"),i=e("../lang/isArray"),a=e("../internal/isIndex"),s=e("../internal/isLength"),u=e("../lang/isObject"),c=Object.prototype,l=c.hasOwnProperty;t.exports=r},{"../internal/isIndex":99,"../internal/isLength":101,"../lang/isArguments":104,"../lang/isArray":105,"../lang/isObject":108}],112:[function(e,t,n){function r(e){return e}t.exports=r},{}],113:[function(e,t,n){"use strict";function r(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=Object.assign||function(e,t){for(var n,a,s=r(e),u=1;u<arguments.length;u++){n=Object(arguments[u]);for(var c in n)o.call(n,c)&&(s[c]=n[c]);if(Object.getOwnPropertySymbols){a=Object.getOwnPropertySymbols(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},{}],114:[function(e,t,n){function r(){l=!1,s.length?c=s.concat(c):p=-1,c.length&&o()}function o(){if(!l){var e=setTimeout(r);l=!0;for(var t=c.length;t;){for(s=c,c=[];++p<t;)s&&s[p].run();p=-1,t=c.length}s=null,l=!1,clearTimeout(e)}}function i(e,t){this.fun=e,this.array=t}function a(){}var s,u=t.exports={},c=[],l=!1,p=-1;u.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new i(e,t)),1!==c.length||l||setTimeout(o,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=a,u.addListener=a,u.once=a,u.off=a,u.removeListener=a,u.removeAllListeners=a,u.emit=a,u.binding=function(e){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(e){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},{}],115:[function(e,t,n){"use strict";function r(e,t,n){if(t(e,n),e._renderedComponent)r(e._renderedComponent,t,n);else for(var o in e._renderedChildren)e._renderedChildren.hasOwnProperty(o)&&r(e._renderedChildren[o],t,n)}function o(e){e._pendingForceUpdate===!1&&(e._pendingForceUpdate=!0)}function i(e,t){if(e._pendingForceUpdate===!0){var n=e._instance;t.Component.prototype.forceUpdate.call(n)}}function a(e){return function(t){var n=t._reactInternalInstance;r(n,o),r(n,i,e)}}n.__esModule=!0,n["default"]=a,t.exports=n["default"]},{}],116:[function(e,t,n){"use strict";t.exports=e("react/lib/ReactDOM")},{"react/lib/ReactDOM":202}],117:[function(e,t,n){"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=e("react"),i={position:"absolute",visibility:"hidden",height:0,width:0,overflow:"scroll",whiteSpace:"nowrap"},a=o.createClass({displayName:"AutosizeInput",propTypes:{value:o.PropTypes.any,defaultValue:o.PropTypes.any,onChange:o.PropTypes.func,style:o.PropTypes.object,className:o.PropTypes.string,minWidth:o.PropTypes.oneOfType([o.PropTypes.number,o.PropTypes.string]),inputStyle:o.PropTypes.object,inputClassName:o.PropTypes.string},getDefaultProps:function(){return{minWidth:1}},getInitialState:function(){return{inputWidth:this.props.minWidth}},componentDidMount:function(){this.copyInputStyles(),this.updateInputWidth()},componentDidUpdate:function(){this.updateInputWidth()},copyInputStyles:function(){if(this.isMounted()&&window.getComputedStyle){var e=window.getComputedStyle(this.refs.input),t=this.refs.sizer;if(t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily,t.style.letterSpacing=e.letterSpacing,this.props.placeholder){var n=this.refs.placeholderSizer;n.style.fontSize=e.fontSize,n.style.fontFamily=e.fontFamily,n.style.letterSpacing=e.letterSpacing}}},updateInputWidth:function(){if(this.isMounted()&&"undefined"!=typeof this.refs.sizer.scrollWidth){var e;e=this.props.placeholder?Math.max(this.refs.sizer.scrollWidth,this.refs.placeholderSizer.scrollWidth)+2:this.refs.sizer.scrollWidth+2,e<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}},getInput:function(){return this.refs.input},focus:function(){this.refs.input.focus()},select:function(){this.refs.input.select()},render:function(){var e=(this.props.value||"").replace(/\&/g,"&amp;").replace(/ /g,"&nbsp;").replace(/\</g,"&lt;").replace(/\>/g,"&gt;"),t=this.props.style||{};t.display||(t.display="inline-block");var n=r({},this.props.inputStyle);n.width=this.state.inputWidth,n.boxSizing="content-box";var a=this.props.placeholder?o.createElement("div",{ref:"placeholderSizer",style:i},this.props.placeholder):null;return o.createElement("div",{className:this.props.className,style:t},o.createElement("input",r({},this.props,{ref:"input",className:this.props.inputClassName,style:n})),o.createElement("div",{ref:"sizer",style:i,dangerouslySetInnerHTML:{__html:e}}),a)}});t.exports=a},{react:295}],118:[function(e,t,n){"use strict";function r(e,t){var n=t.bind(e);n.__reactBoundContext=e,n.__reactBoundMethod=t,n.__reactBoundArguments=null;var r=e.constructor.displayName,o=n.bind;return n.bind=function(i){var a=Array.prototype.slice.call(arguments,1);if(i!==e&&null!==i)console.warn("bind(): React component methods may only be bound to the component instance. See "+r);else if(!a.length)return console.warn("bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See "+r),n;var s=o.apply(n,arguments);return s.__reactBoundContext=e,s.__reactBoundMethod=t,s.__reactBoundArguments=a,s},n}function o(e){for(var t in e.__reactAutoBindMap){if(!e.__reactAutoBindMap.hasOwnProperty(t))return;if(!e.hasOwnProperty(t)||e[t].__reactBoundContext!==e){var n=e.__reactAutoBindMap[t];e[t]=r(e,n)}}}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=o,t.exports=n["default"]},{}],119:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!e&&!t)return!0;if(!e||!t)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}function i(e){function t(e){var t=Object.getOwnPropertyDescriptor(h,e);return!o(p[e],t)}function n(e){for(var n=!0;n;){var r=e;if(o=void 0,n=!1,"function"!=typeof r)throw new Error("Expected a constructor.");if(!Object.prototype.hasOwnProperty.call(r,"__reactPatchProxy")){c=r;var o=s.update(r.prototype);return h.prototype.constructor=h,h.__proto__=r.__proto__,Object.getOwnPropertyNames(r).forEach(function(e){if(!(d.indexOf(e)>-1)){var n=a({},Object.getOwnPropertyDescriptor(r,e),{configurable:!0});t(e)||(Object.defineProperty(h,e,n),p[e]=n)}}),Object.getOwnPropertyNames(h).forEach(function(e){if(!(d.indexOf(e)>-1||r.hasOwnProperty(e))){var n=Object.getOwnPropertyDescriptor(h,e);(!n||n.configurable)&&(t(e)||(delete h[e],delete p[e]))}}),h.displayName=r.displayName||r.name,o.forEach(l["default"]),o.forEach(f["default"]),o}e=r.__reactPatchProxy.__getCurrent(),n=!0}}function r(){return h}function i(){return c}if(Object.prototype.hasOwnProperty.call(e,"__reactPatchProxy"))return e.__reactPatchProxy;var s=(0,u["default"])(),c=void 0,p={},h=void 0;try{h=new Function("getCurrentClass","return function "+(e.name||"ProxyClass")+"() {\n        return getCurrentClass().apply(this, arguments);\n      }")(function(){return c})}catch(v){h=function(){return c.apply(this,arguments)}}h.prototype=s.get(),h.toString=function(){return c.toString()},n(e);var m={get:r,update:n};return Object.defineProperty(m,"__getCurrent",{configurable:!1,writable:!1,enumerable:!1,value:i}),Object.defineProperty(h,"__reactPatchProxy",{configurable:!1,writable:!1,enumerable:!1,value:m}),m}Object.defineProperty(n,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};n["default"]=i;var s=e("./createPrototypeProxy"),u=r(s),c=e("./bindAutoBindMethods"),l=r(c),p=e("./deleteUnknownAutoBindMethods"),f=r(p),d=["length","name","arguments","caller","prototype","toString"];t.exports=n["default"]},{"./bindAutoBindMethods":118,"./createPrototypeProxy":120,"./deleteUnknownAutoBindMethods":121}],120:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){function e(e){return function(){return"function"==typeof f[e]?f[e].toString():"<method was deleted>"}}function t(t){var n=function(){return"function"==typeof f[t]?f[t].apply(this,arguments):void 0};return(0,a["default"])(n,f[t]),n.toString=e(t),n}function n(){return d.push(this),"function"==typeof f.componentDidMount?f.componentDidMount.apply(this,arguments):void 0}function r(){var e=d.indexOf(this);return-1!==e&&d.splice(e,1),"function"==typeof f.componentWillUnmount?f.componentWillUnmount.apply(this,arguments):void 0}function o(e,t){Object.defineProperty(p,e,t)}function i(e,t){var n=Object.getOwnPropertyDescriptor(f,e)||{},r=n.enumerable,i=void 0===r?!1:r,a=n.writable,s=void 0===a?!0:a;o(e,{configurable:!0,enumerable:i,writable:s,value:t})}function s(){if(f.__reactAutoBindMap){var e={};for(var t in f.__reactAutoBindMap)f.__reactAutoBindMap.hasOwnProperty(t)&&(e[t]=p[t]);return e}}function c(e){f=e;var a=Object.getOwnPropertyNames(f),c=Object.getOwnPropertyNames(p),l=((0,u["default"])(a,c),(0,u["default"])(c,a));return l.forEach(function(e){delete p[e]}),a.forEach(function(e){var n=Object.getOwnPropertyDescriptor(f,e);"function"==typeof n.value?i(e,t(e)):o(e,n)}),i("componentDidMount",n),i("componentWillUnmount",r),i("__reactAutoBindMap",s()),p.__proto__=e,d}function l(){return p}var p={},f=null,d=[];return n.toString=e("componentDidMount"),r.toString=e("componentWillUnmount"),{update:c,get:l}}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=o;var i=e("lodash/object/assign"),a=r(i),s=e("lodash/array/difference"),u=r(s);t.exports=n["default"]},{"lodash/array/difference":78,"lodash/object/assign":109}],121:[function(e,t,n){"use strict";function r(e,t){return e.__reactAutoBindMap.hasOwnProperty(t)?!1:null!==e[t].__reactBoundArguments?!1:!0}function o(e,t){var n=e.constructor.prototype,r=Object.getOwnPropertyDescriptor(n,t);return r&&r.get?r.get().length!==e[t].length?!1:!0:!1}function i(e,t){var n=Object.getOwnPropertyDescriptor(e,t);if("function"==typeof n.value)return e.__reactAutoBindMap?r(e,t):o(e,t)}function a(e){var t=Object.getOwnPropertyNames(e);t.forEach(function(t){i(e,t)&&delete e[t]})}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=a,t.exports=n["default"]},{}],122:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e["default"]:e}Object.defineProperty(n,"__esModule",{value:!0});var o=e("./createClassProxy");n.createProxy=r(o);var i=e("react-deep-force-update");n.getForceUpdate=r(i)},{"./createClassProxy":119,"react-deep-force-update":115}],123:[function(e,t,n){"use strict";function r(e,t,n){function r(){a=!0,n.apply(this,arguments)}function o(){a||(e>i?t.call(this,i++,o,r):r.apply(this,arguments))}var i=0,a=!1;o()}function o(e,t,n){function r(e,t,r){a||(t?(a=!0,n(t)):(i[e]=r,a=++s===o,a&&n(null,i)))}var o=e.length,i=[];if(0===o)return n(null,i);var a=!1,s=0;e.forEach(function(e,n){t(e,n,function(e,t){r(n,e,t)})})}n.__esModule=!0,n.loopAsync=r,n.mapAsync=o},{}],124:[function(e,t,n){"use strict";n.__esModule=!0;var r=e("./PropTypes"),o={contextTypes:{history:r.history},componentWillMount:function(){this.history=this.context.history}};n["default"]=o,t.exports=n["default"]},{"./PropTypes":131}],125:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=e("react"),u=r(s),c=e("./Link"),l=r(c),p=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.prototype.render=function(){return u["default"].createElement(l["default"],a({},this.props,{onlyActiveOnIndex:!0}))},t}(u["default"].Component);n["default"]=p,t.exports=n["default"]},{"./Link":129,react:295}],126:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("invariant"),l=r(c),p=e("warning"),f=r(p),d=e("./Redirect"),h=r(d),v=e("./PropTypes"),m=u["default"].PropTypes,g=m.string,y=m.object,b=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.createRouteFromReactElement=function(e,t){t?t.indexRoute=h["default"].createRouteFromReactElement(e):f["default"](!1,"An <IndexRedirect> does not make sense at the root of your route config")},t.prototype.render=function(){l["default"](!1,"<IndexRedirect> elements are for router configuration only and should not be rendered")},a(t,null,[{key:"propTypes",value:{to:g.isRequired,query:y,state:y,onEnter:v.falsy,children:v.falsy},enumerable:!0}]),t}(u["default"].Component);n["default"]=b,t.exports=n["default"]},{"./PropTypes":131,"./Redirect":132,invariant:73,react:295,warning:296}],127:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("invariant"),l=r(c),p=e("warning"),f=r(p),d=e("./RouteUtils"),h=e("./PropTypes"),v=u["default"].PropTypes,m=v.bool,g=v.func,y=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.createRouteFromReactElement=function(e,t){t?t.indexRoute=d.createRouteFromReactElement(e):f["default"](!1,"An <IndexRoute> does not make sense at the root of your route config")},t.prototype.render=function(){l["default"](!1,"<IndexRoute> elements are for router configuration only and should not be rendered")},a(t,null,[{key:"propTypes",value:{path:h.falsy,ignoreScrollBehavior:m,component:h.component,components:h.components,getComponents:g},enumerable:!0}]),t}(u["default"].Component);n["default"]=y,t.exports=n["default"]},{"./PropTypes":131,"./RouteUtils":135,invariant:73,react:295,warning:296}],128:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("react"),i=r(o),a=e("invariant"),s=r(a),u=i["default"].PropTypes.object,c={contextTypes:{history:u.isRequired,route:u},propTypes:{route:u},componentDidMount:function(){s["default"](this.routerWillLeave,"The Lifecycle mixin requires you to define a routerWillLeave method");var e=this.props.route||this.context.route;s["default"](e,"The Lifecycle mixin must be used on either a) a <Route component> or b) a descendant of a <Route component> that uses the RouteContext mixin"),this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(e,this.routerWillLeave)},componentWillUnmount:function(){this._unlistenBeforeLeavingRoute&&this._unlistenBeforeLeavingRoute()}};n["default"]=c,t.exports=n["default"]},{invariant:73,react:295}],129:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e){return 0===e.button}function u(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function c(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}n.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=e("react"),d=r(f),h=d["default"].PropTypes,v=h.bool,m=h.object,g=h.string,y=h.func,b=function(e){function t(){i(this,t),e.apply(this,arguments)}return a(t,e),t.prototype.handleClick=function(e){var t=!0,n=void 0;this.props.onClick&&(n=this.props.onClick(e)),!u(e)&&s(e)&&((n===!1||e.defaultPrevented===!0)&&(t=!1),e.preventDefault(),t&&this.context.history.pushState(this.props.state,this.props.to,this.props.query))},t.prototype.render=function(){var e=this,t=this.props,n=t.to,r=t.query,i=t.hash,a=(t.state,t.activeClassName),s=t.activeStyle,u=t.onlyActiveOnIndex,p=o(t,["to","query","hash","state","activeClassName","activeStyle","onlyActiveOnIndex"]);p.onClick=function(t){return e.handleClick(t)};var f=this.context.history;return f&&(p.href=f.createHref(n,r),i&&(p.href+=i),(a||null!=s&&!c(s))&&f.isActive(n,r,u)&&(a&&(p.className+=""===p.className?a:" "+a),s&&(p.style=l({},p.style,s)))),d["default"].createElement("a",p)},p(t,null,[{key:"contextTypes",value:{history:m},enumerable:!0},{key:"propTypes",value:{to:g.isRequired,query:m,hash:g,state:m,activeStyle:m,activeClassName:g,onlyActiveOnIndex:v.isRequired,onClick:y},enumerable:!0},{key:"defaultProps",value:{onlyActiveOnIndex:!1,className:"",style:{}},enumerable:!0}]),t}(d["default"].Component);n["default"]=b,t.exports=n["default"]},{react:295}],130:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function i(e){return o(e).replace(/\/+/g,"/+")}function a(e){for(var t="",n=[],r=[],o=void 0,a=0,s=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*|\(|\)/g;o=s.exec(e);)o.index!==a&&(r.push(e.slice(a,o.index)),t+=i(e.slice(a,o.index))),o[1]?(t+="([^/?#]+)",n.push(o[1])):"*"===o[0]?(t+="([\\s\\S]*?)",n.push("splat")):"("===o[0]?t+="(?:":")"===o[0]&&(t+=")?"),r.push(o[0]),a=s.lastIndex;return a!==e.length&&(r.push(e.slice(a,e.length)),t+=i(e.slice(a,e.length))),{pattern:e,regexpSource:t,paramNames:n,tokens:r}}function s(e){return e in h||(h[e]=a(e)),h[e]}function u(e,t){var n=s(e),r=n.regexpSource,o=n.paramNames,i=n.tokens;r+="/*";var a="*"!==i[i.length-1];a&&(r+="([\\s\\S]*?)");var u=t.match(new RegExp("^"+r+"$","i")),c=void 0,l=void 0;return null!=u?(l=Array.prototype.slice.call(u,1).map(function(e){return null!=e?decodeURIComponent(e.replace(/\+/g,"%20")):e}),c=a?l.pop():t.replace(u[0],"")):c=l=null,{remainingPathname:c,paramNames:o,paramValues:l}}function c(e){return s(e).paramNames}function l(e,t){var n=u(e,t),r=n.paramNames,o=n.paramValues;return null!=o?r.reduce(function(e,t,n){return e[t]=o[n],e},{}):null}function p(e,t){t=t||{};for(var n=s(e),r=n.tokens,o=0,i="",a=0,u=void 0,c=void 0,l=void 0,p=0,f=r.length;f>p;++p)u=r[p],"*"===u?(l=Array.isArray(t.splat)?t.splat[a++]:t.splat,d["default"](null!=l||o>0,'Missing splat #%s for path "%s"',a,e),null!=l&&(i+=encodeURI(l).replace(/%20/g,"+"))):"("===u?o+=1:")"===u?o-=1:":"===u.charAt(0)?(c=u.substring(1),l=t[c],d["default"](null!=l||o>0,'Missing "%s" parameter for path "%s"',c,e),null!=l&&(i+=encodeURIComponent(l).replace(/%20/g,"+"))):i+=u;return i.replace(/\/+/g,"/")}n.__esModule=!0,n.compilePattern=s,n.matchPattern=u,n.getParamNames=c,n.getParams=l,n.formatPattern=p;var f=e("invariant"),d=r(f),h={}},{invariant:73}],131:[function(e,t,n){"use strict";function r(e,t,n){return e[t]?new Error("<"+n+'> should not have a "'+t+'" prop'):void 0}n.__esModule=!0,n.falsy=r;var o=e("react"),i=o.PropTypes.func,a=o.PropTypes.object,s=o.PropTypes.arrayOf,u=o.PropTypes.oneOfType,c=o.PropTypes.element,l=o.PropTypes.shape,p=o.PropTypes.string,f=l({listen:i.isRequired,pushState:i.isRequired,replaceState:i.isRequired,go:i.isRequired});n.history=f;var d=l({pathname:p.isRequired,search:p.isRequired,state:a,action:p.isRequired,key:p});n.location=d;var h=u([i,p]);n.component=h;var v=u([h,a]);n.components=v;var m=u([a,c]);n.route=m;var g=u([m,s(m)]);n.routes=g,n["default"]={falsy:r,history:f,location:d,component:h,components:v,route:m}},{react:295}],132:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("invariant"),l=r(c),p=e("./RouteUtils"),f=e("./PatternUtils"),d=e("./PropTypes"),h=u["default"].PropTypes,v=h.string,m=h.object,g=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.createRouteFromReactElement=function(e){var n=p.createRouteFromReactElement(e);return n.from&&(n.path=n.from),n.onEnter=function(e,r){var o=e.location,i=e.params,a=void 0;if("/"===n.to.charAt(0))a=f.formatPattern(n.to,i);else if(n.to){var s=e.routes.indexOf(n),u=t.getRoutePattern(e.routes,s-1),c=u.replace(/\/*$/,"/")+n.to;a=f.formatPattern(c,i)}else a=o.pathname;r(n.state||o.state,a,n.query||o.query)},n},t.getRoutePattern=function(e,t){for(var n="",r=t;r>=0;r--){var o=e[r],i=o.path||"";if(n=i.replace(/\/*$/,"/")+n,0===i.indexOf("/"))break}return"/"+n},t.prototype.render=function(){l["default"](!1,"<Redirect> elements are for router configuration only and should not be rendered")},a(t,null,[{key:"propTypes",value:{path:v,from:v,to:v.isRequired,query:m,state:m,onEnter:d.falsy,children:d.falsy},enumerable:!0}]),t}(u["default"].Component);n["default"]=g,t.exports=n["default"]},{"./PatternUtils":130,"./PropTypes":131,"./RouteUtils":135,invariant:73,react:295}],133:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("warning"),l=r(c),p=e("invariant"),f=r(p),d=e("./RouteUtils"),h=e("./PropTypes"),v=u["default"].PropTypes,m=v.string,g=v.bool,y=v.func,b=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.createRouteFromReactElement=function(e){var t=d.createRouteFromReactElement(e);return t.handler&&(l["default"](!1,"<Route handler> is deprecated, use <Route component> instead"),t.component=t.handler,delete t.handler),t},t.prototype.render=function(){f["default"](!1,"<Route> elements are for router configuration only and should not be rendered")},a(t,null,[{key:"propTypes",value:{path:m,ignoreScrollBehavior:g,handler:h.component,component:h.component,components:h.components,getComponents:y},enumerable:!0}]),t}(u["default"].Component);n["default"]=b,t.exports=n["default"]},{"./PropTypes":131,"./RouteUtils":135,invariant:73,react:295,warning:296}],134:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("react"),i=r(o),a=i["default"].PropTypes.object,s={propTypes:{route:a.isRequired},childContextTypes:{route:a.isRequired},getChildContext:function(){return{route:this.props.route}}};n["default"]=s,t.exports=n["default"]},{react:295}],135:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return null==e||d["default"].isValidElement(e)}function i(e){return o(e)||Array.isArray(e)&&e.every(o)}function a(e,t,n){e=e||"UnknownComponent";for(var r in t)if(t.hasOwnProperty(r)){var o=t[r](n,r,e);o instanceof Error&&v["default"](!1,o.message)}}function s(e,t){return p({},e,t)}function u(e){var t=e.type,n=s(t.defaultProps,e.props);if(t.propTypes&&a(t.displayName||t.name,t.propTypes,n),n.children){var r=c(n.children,n);r.length&&(n.childRoutes=r),delete n.children}return n}function c(e,t){var n=[];return d["default"].Children.forEach(e,function(e){if(d["default"].isValidElement(e))if(e.type.createRouteFromReactElement){
var r=e.type.createRouteFromReactElement(e,t);r&&n.push(r)}else n.push(u(e))}),n}function l(e){return i(e)?e=c(e):e&&!Array.isArray(e)&&(e=[e]),e}n.__esModule=!0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};n.isReactChildren=i,n.createRouteFromReactElement=u,n.createRoutesFromReactChildren=c,n.createRoutes=l;var f=e("react"),d=r(f),h=e("warning"),v=r(h)},{react:295,warning:296}],136:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("warning"),l=r(c),p=e("history/lib/createHashHistory"),f=r(p),d=e("./RouteUtils"),h=e("./RoutingContext"),v=r(h),m=e("./useRoutes"),g=r(m),y=e("./PropTypes"),b=u["default"].PropTypes,_=b.func,E=b.object,w=function(e){function t(n,r){o(this,t),e.call(this,n,r),this.state={location:null,routes:null,params:null,components:null}}return i(t,e),a(t,null,[{key:"propTypes",value:{history:E,children:y.routes,routes:y.routes,createElement:_,onError:_,onUpdate:_,parseQueryString:_,stringifyQuery:_},enumerable:!0}]),t.prototype.handleError=function(e){if(!this.props.onError)throw e;this.props.onError.call(this,e)},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.history,r=t.children,o=t.routes,i=t.parseQueryString,a=t.stringifyQuery,s=n?function(){return n}:f["default"];this.history=g["default"](s)({routes:d.createRoutes(o||r),parseQueryString:i,stringifyQuery:a}),this._unlisten=this.history.listen(function(t,n){t?e.handleError(t):e.setState(n,e.props.onUpdate)})},t.prototype.componentWillReceiveProps=function(e){l["default"](e.history===this.props.history,"You cannot change <Router history>; it will be ignored")},t.prototype.componentWillUnmount=function(){this._unlisten&&this._unlisten()},t.prototype.render=function(){var e=this.state,t=e.location,n=e.routes,r=e.params,o=e.components,i=this.props.createElement;return null==t?null:u["default"].createElement(v["default"],{history:this.history,createElement:i,location:t,routes:n,params:r,components:o})},t}(u["default"].Component);n["default"]=w,t.exports=n["default"]},{"./PropTypes":131,"./RouteUtils":135,"./RoutingContext":137,"./useRoutes":146,"history/lib/createHashHistory":153,react:295,warning:296}],137:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}n.__esModule=!0;var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=e("react"),u=r(s),c=e("invariant"),l=r(c),p=e("./getRouteParams"),f=r(p),d=u["default"].PropTypes,h=d.array,v=d.func,m=d.object,g=function(e){function t(){o(this,t),e.apply(this,arguments)}return i(t,e),t.prototype.getChildContext=function(){return{history:this.props.history,location:this.props.location}},t.prototype.createElement=function(e,t){return null==e?null:this.props.createElement(e,t)},t.prototype.render=function(){var e=this,t=this.props,n=t.history,r=t.location,o=t.routes,i=t.params,a=t.components,s=null;return a&&(s=a.reduceRight(function(t,a,s){if(null==a)return t;var u=o[s],c=f["default"](u,i),l={history:n,location:r,params:i,route:u,routeParams:c,routes:o};if(t&&(l.children=t),"object"==typeof a){var p={};for(var d in a)a.hasOwnProperty(d)&&(p[d]=e.createElement(a[d],l));return p}return e.createElement(a,l)},s)),l["default"](null===s||s===!1||u["default"].isValidElement(s),"The root route must render a single element"),s},a(t,null,[{key:"propTypes",value:{history:m.isRequired,createElement:v.isRequired,location:m.isRequired,routes:h.isRequired,params:m.isRequired,components:h.isRequired},enumerable:!0},{key:"defaultProps",value:{createElement:u["default"].createElement},enumerable:!0},{key:"childContextTypes",value:{history:m.isRequired,location:m.isRequired},enumerable:!0}]),t}(u["default"].Component);n["default"]=g,t.exports=n["default"]},{"./getRouteParams":141,invariant:73,react:295}],138:[function(e,t,n){"use strict";function r(e,t){return function(n,r,o){e.apply(t,arguments),e.length<3&&o()}}function o(e){return e.reduce(function(e,t){return t.onEnter&&e.push(r(t.onEnter,t)),e},[])}function i(e,t,n){function r(e,t,n){a={pathname:t,query:n,state:e}}var i=o(e);if(!i.length)return void n();var a=void 0;s.loopAsync(i.length,function(e,n,o){i[e](t,r,function(e){e||a?o(e,a):n()})},n)}function a(e){for(var t=0,n=e.length;n>t;++t)e[t].onLeave&&e[t].onLeave.call(e[t])}n.__esModule=!0,n.runEnterHooks=i,n.runLeaveHooks=a;var s=e("./AsyncUtils")},{"./AsyncUtils":123}],139:[function(e,t,n){"use strict";function r(e,t,n){if(!e.path)return!1;var r=a.getParamNames(e.path);return r.some(function(e){return t.params[e]!==n.params[e]})}function o(e,t){return e.location.search!==t.location.search}function i(e,t){var n=e&&e.routes,i=t.routes,a=void 0,s=void 0;return n?(a=n.filter(function(n){return-1===i.indexOf(n)||r(n,e,t)||o(e,t)}),a.reverse(),s=i.filter(function(e){return-1===n.indexOf(e)||-1!==a.indexOf(e)})):(a=[],s=i),{leaveRoutes:a,enterRoutes:s}}n.__esModule=!0;var a=e("./PatternUtils");n["default"]=i,t.exports=n["default"]},{"./PatternUtils":130}],140:[function(e,t,n){"use strict";function r(e,t,n){t.component||t.components?n(null,t.component||t.components):t.getComponent?t.getComponent(e,n):t.getComponents?t.getComponents(e,n):n()}function o(e,t){i.mapAsync(e.routes,function(t,n,o){r(e.location,t,o)},t)}n.__esModule=!0;var i=e("./AsyncUtils");n["default"]=o,t.exports=n["default"]},{"./AsyncUtils":123}],141:[function(e,t,n){"use strict";function r(e,t){var n={};if(!e.path)return n;var r=o.getParamNames(e.path);for(var i in t)t.hasOwnProperty(i)&&-1!==r.indexOf(i)&&(n[i]=t[i]);return n}n.__esModule=!0;var o=e("./PatternUtils");n["default"]=r,t.exports=n["default"]},{"./PatternUtils":130}],142:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var o=e("./Router"),i=r(o);n.Router=i["default"];var a=e("./Link"),s=r(a);n.Link=s["default"];var u=e("./IndexLink"),c=r(u);n.IndexLink=c["default"];var l=e("./IndexRedirect"),p=r(l);n.IndexRedirect=p["default"];var f=e("./IndexRoute"),d=r(f);n.IndexRoute=d["default"];var h=e("./Redirect"),v=r(h);n.Redirect=v["default"];var m=e("./Route"),g=r(m);n.Route=g["default"];var y=e("./History"),b=r(y);n.History=b["default"];var _=e("./Lifecycle"),E=r(_);n.Lifecycle=E["default"];var w=e("./RouteContext"),O=r(w);n.RouteContext=O["default"];var C=e("./useRoutes"),x=r(C);n.useRoutes=x["default"];var N=e("./RouteUtils");n.createRoutes=N.createRoutes;var D=e("./RoutingContext"),R=r(D);n.RoutingContext=R["default"];var T=e("./PropTypes"),P=r(T);n.PropTypes=P["default"];var k=e("./match"),M=r(k);n.match=M["default"];var S=r(o);n["default"]=S["default"]},{"./History":124,"./IndexLink":125,"./IndexRedirect":126,"./IndexRoute":127,"./Lifecycle":128,"./Link":129,"./PropTypes":131,"./Redirect":132,"./Route":133,"./RouteContext":134,"./RouteUtils":135,"./Router":136,"./RoutingContext":137,"./match":144,"./useRoutes":146}],143:[function(e,t,n){"use strict";function r(e,t){if(e==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,n){return r(e,t[n])});if("object"==typeof e){for(var n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||!r(e[n],t[n])))return!1;return!0}return String(e)===String(t)}function o(e,t,n){return e.every(function(e,r){return String(t[r])===String(n[e])})}function i(e,t,n){for(var r=void 0,i=void 0,a="",s=0,u=t.length;u>s;++s){r=t[s],i=r.path||"","/"!==i.charAt(0)&&(i=a.replace(/\/*$/,"/")+i);var l=c.matchPattern(i,e),p=l.remainingPathname,f=l.paramNames,d=l.paramValues;if(""===p&&o(f,d,n))return r;a=i}return null}function a(e,t,n,r){var o=i(e,t,n);return null==o?!1:r?t.length>1&&t[t.length-1]===o.indexRoute:!0}function s(e,t){return null==t?null==e:null==e?!0:r(e,t)}function u(e,t,n,r,o,i){return null==r?!1:a(e,o,i,n)?s(t,r.query):!1}n.__esModule=!0;var c=e("./PatternUtils");n["default"]=u,t.exports=n["default"]},{"./PatternUtils":130}],144:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n=e.routes,r=e.location,o=e.parseQueryString,a=e.stringifyQuery,u=e.basename;s["default"](r,"match needs a location");var c=v({routes:f.createRoutes(n),parseQueryString:o,stringifyQuery:a,basename:u});"string"==typeof r&&(r=c.createLocation(r)),c.match(r,function(e,n,r){t(e,n,r&&i({},r,{history:c}))})}n.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=e("invariant"),s=r(a),u=e("history/lib/createMemoryHistory"),c=r(u),l=e("history/lib/useBasename"),p=r(l),f=e("./RouteUtils"),d=e("./useRoutes"),h=r(d),v=h["default"](p["default"](c["default"]));n["default"]=o,t.exports=n["default"]},{"./RouteUtils":135,"./useRoutes":146,"history/lib/createMemoryHistory":155,"history/lib/useBasename":158,invariant:73}],145:[function(e,t,n){"use strict";function r(e,t,n){e.childRoutes?n(null,e.childRoutes):e.getChildRoutes?e.getChildRoutes(t,function(e,t){n(e,!e&&p.createRoutes(t))}):n()}function o(e,t,n){e.indexRoute?n(null,e.indexRoute):e.getIndexRoute?e.getIndexRoute(t,function(e,t){n(e,!e&&p.createRoutes(t)[0])}):n()}function i(e,t,n){return t.reduceRight(function(e,t,r){var o=n&&n[r];return Array.isArray(e[t])?e[t].unshift(o):t in e?e[t]=[o,e[t]]:e[t]=o,e},e)}function a(e,t){return i({},e,t)}function s(e,t,n,i){var s=t.path||"";"/"!==s.charAt(0)&&(s=e.replace(/\/*$/,"/")+s);var c=l.matchPattern(s,n.pathname),p=c.remainingPathname,f=c.paramNames,d=c.paramValues,h=""===p;h&&t.path?!function(){var e={routes:[t],params:a(f,d)};o(t,n,function(t,n){t?i(t):(n&&e.routes.push(n),i(null,e))})}():null!=p||t.childRoutes?r(t,n,function(e,r){e?i(e):r?u(r,n,function(e,n){e?i(e):n?(n.routes.unshift(t),i(null,n)):i()},s):i()}):i()}function u(e,t,n){var r=arguments.length<=3||void 0===arguments[3]?"":arguments[3];c.loopAsync(e.length,function(n,o,i){s(r,e[n],t,function(e,t){e||t?i(e,t):o()})},n)}n.__esModule=!0;var c=e("./AsyncUtils"),l=e("./PatternUtils"),p=e("./RouteUtils");n["default"]=u,t.exports=n["default"]},{"./AsyncUtils":123,"./PatternUtils":130,"./RouteUtils":135}],146:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){for(var t in e)if(e.hasOwnProperty(t))return!0;return!1}function a(e){return function(){function t(e,t){var n=arguments.length<=2||void 0===arguments[2]?!1:arguments[2];return g["default"](e,t,n,N.location,N.routes,N.params)}function n(e){var t=e.pathname,n=e.query,r=e.state;return x.createLocation(x.createPath(t,n),r,l.REPLACE)}function r(e,t){D&&D.location===e?a(D,t):E["default"](O,e,function(n,r){n?t(n):r?a(s({},r,{location:e}),t):t()})}function a(e,t){var r=h["default"](N,e),o=r.leaveRoutes,i=r.enterRoutes;v.runLeaveHooks(o),v.runEnterHooks(i,e,function(r,o){r?t(r):o?t(null,n(o)):b["default"](e,function(n,r){n?t(n):t(null,null,N=s({},e,{components:r}))})})}function u(e){return e.__id__||(e.__id__=R++)}function p(e){return e.reduce(function(e,t){return e.push.apply(e,T[u(t)]),e},[])}function d(e,t){E["default"](O,e,function(n,r){if(null==r)return void t();D=s({},r,{location:e});for(var o=p(h["default"](N,r).leaveRoutes),i=void 0,a=0,u=o.length;null==i&&u>a;++a)i=o[a](e);t(i)})}function m(){if(N.routes){for(var e=p(N.routes),t=void 0,n=0,r=e.length;"string"!=typeof t&&r>n;++n)t=e[n]();return t}}function y(e,t){var n=u(e),r=T[n];if(null==r){var o=!i(T);r=T[n]=[t],o&&(P=x.listenBefore(d),x.listenBeforeUnload&&(k=x.listenBeforeUnload(m)))}else-1===r.indexOf(t)&&r.push(t);return function(){var e=T[n];if(null!=e){var r=e.filter(function(e){return e!==t});0===r.length?(delete T[n],i(T)||(P&&(P(),P=null),k&&(k(),k=null))):T[n]=r}}}function _(e){return x.listen(function(t){N.location===t?e(null,N):r(t,function(n,r,o){n?e(n):r?x.transitionTo(r):o?e(null,o):c["default"](!1,'Location "%s" did not match any routes',t.pathname+t.search+t.hash)})})}var w=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],O=w.routes,C=o(w,["routes"]),x=f["default"](e)(C),N={},D=void 0,R=1,T={},P=void 0,k=void 0;return s({},x,{isActive:t,match:r,listenBeforeLeavingRoute:y,listen:_})}}n.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=e("warning"),c=r(u),l=e("history/lib/Actions"),p=e("history/lib/useQueries"),f=r(p),d=e("./computeChangedRoutes"),h=r(d),v=e("./TransitionUtils"),m=e("./isActive"),g=r(m),y=e("./getComponents"),b=r(y),_=e("./matchRoutes"),E=r(_);n["default"]=a,t.exports=n["default"]},{"./TransitionUtils":138,"./computeChangedRoutes":139,"./getComponents":140,"./isActive":143,"./matchRoutes":145,"history/lib/Actions":147,"history/lib/useQueries":159,warning:296}],147:[function(e,t,n){arguments[4][49][0].apply(n,arguments)},{dup:49}],148:[function(e,t,n){arguments[4][50][0].apply(n,arguments)},{dup:50}],149:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return c+e}function i(e,t){try{window.sessionStorage.setItem(o(e),JSON.stringify(t))}catch(n){if(n.name===l||0===window.sessionStorage.length)return void u["default"](!1,"[history] Unable to save state; sessionStorage is not available in Safari private mode");throw n}}function a(e){var t=window.sessionStorage.getItem(o(e));if(t)try{return JSON.parse(t)}catch(n){}return null}n.__esModule=!0,n.saveState=i,n.readState=a;var s=e("warning"),u=r(s),c="@@History/",l="QuotaExceededError"},{warning:296}],150:[function(e,t,n){arguments[4][52][0].apply(n,arguments)},{dup:52}],151:[function(e,t,n){arguments[4][53][0].apply(n,arguments)},{dup:53}],152:[function(e,t,n){arguments[4][55][0].apply(n,arguments)},{"./DOMUtils":150,"./ExecutionEnvironment":151,"./createHistory":154,dup:55,invariant:73}],153:[function(e,t,n){arguments[4][56][0].apply(n,arguments)},{"./Actions":147,"./DOMStateStorage":149,"./DOMUtils":150,"./ExecutionEnvironment":151,"./createDOMHistory":152,dup:56,invariant:73,warning:296}],154:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return Math.random().toString(36).substr(2,e)}function i(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:(l["default"](!1,'Location path must be pathname + query string only, not a fully qualified URL like "%s"',e),e.substring(t[0].length))}function a(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&f["default"](e.state,t.state)}function s(){function e(e){return j.push(e),function(){j=j.filter(function(t){return t!==e})}}function t(){return V&&V.action===h.POP?I.indexOf(V.key):L?I.indexOf(L.key):-1}function n(e){var n=t();L=e,L.action===h.PUSH?I=[].concat(I.slice(0,n+1),[L.key]):L.action===h.REPLACE&&(I[n]=L.key),A.forEach(function(e){e(L)})}function r(e){if(A.push(e),L)e(L);else{var t=R();I=[t.key],n(t)}return function(){A=A.filter(function(t){return t!==e})}}function s(e,t){d.loopAsync(j.length,function(t,n,r){m["default"](j[t],e,function(e){null!=e?r(e):n()})},function(e){S&&"string"==typeof e?S(e,function(e){t(e!==!1)}):t(e!==!1)})}function c(e){L&&a(L,e)||(V=e,s(e,function(t){if(V===e)if(t)T(e),n(e);else if(L&&e.action===h.POP){var r=I.indexOf(L.key),o=I.indexOf(e.key);-1!==r&&-1!==o&&k(r-o)}}))}function l(e,t){c(w(t,e,h.PUSH,g()))}function p(e,t){c(w(t,e,h.REPLACE,g()))}function f(){k(-1)}function v(){k(1)}function g(){return o(M)}function _(e){return e}function E(e){return e}function w(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?null:arguments[1],n=arguments.length<=2||void 0===arguments[2]?h.POP:arguments[2],r=arguments.length<=3||void 0===arguments[3]?g():arguments[3],o=i(e),a="",s="",u=o.indexOf("#");-1!==u&&(s=o.substring(u),o=o.substring(0,u));var c=o.indexOf("?");return-1!==c&&(a=o.substring(c),o=o.substring(0,c)),""===o&&(o="/"),{pathname:o,search:a,hash:s,state:t,action:n,key:r}}function O(e){L?(C(L,e),n(L)):C(R(),e)}function C(e,t){e.state=u({},e.state,t),P(e.key,e.state)}function x(e){-1===j.indexOf(e)&&j.push(e)}function N(e){j=j.filter(function(t){return t!==e})}var D=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],R=D.getCurrentLocation,T=D.finishTransition,P=D.saveState,k=D.go,M=D.keyLength,S=D.getUserConfirmation;"number"!=typeof M&&(M=b);var j=[],I=[],A=[],L=void 0,V=void 0;return{listenBefore:e,listen:r,transitionTo:c,pushState:l,replaceState:p,go:k,goBack:f,goForward:v,createKey:g,createPath:_,createHref:E,createLocation:w,setState:y["default"](O,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:y["default"](x,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:y["default"](N,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead")}}n.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=e("warning"),l=r(c),p=e("deep-equal"),f=r(p),d=e("./AsyncUtils"),h=e("./Actions"),v=e("./runTransitionHook"),m=r(v),g=e("./deprecate"),y=r(g),b=6;n["default"]=s,t.exports=n["default"]},{"./Actions":147,"./AsyncUtils":148,"./deprecate":156,"./runTransitionHook":157,"deep-equal":15,warning:296}],155:[function(e,t,n){arguments[4][59][0].apply(n,arguments)},{"./Actions":147,"./createHistory":154,dup:59,invariant:73}],156:[function(e,t,n){arguments[4][60][0].apply(n,arguments)},{dup:60,warning:296}],157:[function(e,t,n){arguments[4][65][0].apply(n,arguments)},{dup:65,warning:296}],158:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){return function(){function t(e){return h&&null==e.basename&&(0===e.pathname.indexOf(h)?(e.pathname=e.pathname.substring(h.length),e.basename=h,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function n(e){return h?h+e:e}function r(e){return m.listenBefore(function(n,r){u["default"](e,t(n),r)})}function i(e){return m.listen(function(n){e(t(n))})}function s(e,t){m.pushState(e,n(t))}function c(e,t){m.replaceState(e,n(t))}function l(e){return m.createPath(n(e))}function p(e){return m.createHref(n(e))}function f(){return t(m.createLocation.apply(m,arguments))}var d=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],h=d.basename,v=o(d,["basename"]),m=e(v);return a({},m,{listenBefore:r,listen:i,pushState:s,replaceState:c,createPath:l,createHref:p,createLocation:f})}}n.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=e("./runTransitionHook"),u=r(s);n["default"]=i,t.exports=n["default"]},{"./runTransitionHook":157}],159:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function i(e){return l["default"].stringify(e,{arrayFormat:"brackets"})}function a(e){return l["default"].parse(e)}function s(e){return function(){function t(e){return null==e.query&&(e.query=g(e.search.substring(1))),e}function n(e,t){var n=void 0;return t&&""!==(n=m(t))?e+(-1===e.indexOf("?")?"?":"&")+n:e}function r(e){return b.listenBefore(function(n,r){f["default"](e,t(n),r)})}function s(e){return b.listen(function(n){e(t(n))})}function c(e,t,r){return b.pushState(e,n(t,r))}function l(e,t,r){return b.replaceState(e,n(t,r))}function p(e,t){return b.createPath(n(e,t))}function d(e,t){return b.createHref(n(e,t))}function h(){return t(b.createLocation.apply(b,arguments))}var v=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],m=v.stringifyQuery,g=v.parseQueryString,y=o(v,["stringifyQuery","parseQueryString"]),b=e(y);return"function"!=typeof m&&(m=i),"function"!=typeof g&&(g=a),u({},b,{listenBefore:r,listen:s,pushState:c,replaceState:l,createPath:p,createHref:d,createLocation:h})}}n.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=e("qs"),l=r(c),p=e("./runTransitionHook"),f=r(p);n["default"]=s,t.exports=n["default"]},{"./runTransitionHook":157,qs:160}],160:[function(e,t,n){arguments[4][69][0].apply(n,arguments)},{"./parse":161,"./stringify":162,dup:69}],161:[function(e,t,n){arguments[4][70][0].apply(n,arguments)},{"./utils":163,dup:70}],162:[function(e,t,n){arguments[4][71][0].apply(n,arguments)},{"./utils":163,dup:71}],163:[function(e,t,n){arguments[4][72][0].apply(n,arguments)},{dup:72}],164:[function(e,t,n){"use strict";var r=e("react"),o=e("classnames"),i=r.createClass({displayName:"Option",propTypes:{addLabelText:r.PropTypes.string,className:r.PropTypes.string,mouseDown:r.PropTypes.func,mouseEnter:r.PropTypes.func,mouseLeave:r.PropTypes.func,option:r.PropTypes.object.isRequired,renderFunc:r.PropTypes.func},blockEvent:function(e){e.preventDefault(),"A"===e.target.tagName&&"href"in e.target&&(e.target.target?window.open(e.target.href):window.location.href=e.target.href)},render:function(){var e=this.props.option,t=this.props.renderFunc(e),n=o(this.props.className,e.className);return e.disabled?r.createElement("div",{className:n,onMouseDown:this.blockEvent,onClick:this.blockEvent},t):r.createElement("div",{className:n,style:e.style,onMouseEnter:this.props.mouseEnter,onMouseLeave:this.props.mouseLeave,onMouseDown:this.props.mouseDown,onClick:this.props.mouseDown,title:e.title},e.create?this.props.addLabelText.replace("{label}",e.label):t)}});t.exports=i},{classnames:14,react:295}],165:[function(e,t,n){"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=e("react"),i=e("react-dom"),a=e("react-input-autosize"),s=e("classnames"),u=e("./Value"),c=e("./SingleValue"),l=e("./Option"),p=0,f=o.createClass({displayName:"Select",propTypes:{addLabelText:o.PropTypes.string,allowCreate:o.PropTypes.bool,asyncOptions:o.PropTypes.func,autoload:o.PropTypes.bool,backspaceRemoves:o.PropTypes.bool,cacheAsyncResults:o.PropTypes.bool,className:o.PropTypes.string,clearAllText:o.PropTypes.string,clearValueText:o.PropTypes.string,clearable:o.PropTypes.bool,delimiter:o.PropTypes.string,disabled:o.PropTypes.bool,filterOption:o.PropTypes.func,filterOptions:o.PropTypes.func,ignoreCase:o.PropTypes.bool,inputProps:o.PropTypes.object,isLoading:o.PropTypes.bool,labelKey:o.PropTypes.string,matchPos:o.PropTypes.string,matchProp:o.PropTypes.string,multi:o.PropTypes.bool,name:o.PropTypes.string,newOptionCreator:o.PropTypes.func,noResultsText:o.PropTypes.string,onBlur:o.PropTypes.func,onChange:o.PropTypes.func,onFocus:o.PropTypes.func,onInputChange:o.PropTypes.func,onOptionLabelClick:o.PropTypes.func,optionComponent:o.PropTypes.func,optionRenderer:o.PropTypes.func,options:o.PropTypes.array,placeholder:o.PropTypes.string,searchable:o.PropTypes.bool,searchingText:o.PropTypes.string,searchPromptText:o.PropTypes.string,singleValueComponent:o.PropTypes.func,value:o.PropTypes.any,valueComponent:o.PropTypes.func,valueKey:o.PropTypes.string,valueRenderer:o.PropTypes.func},getDefaultProps:function(){return{addLabelText:'Add "{label}"?',allowCreate:!1,asyncOptions:void 0,autoload:!0,backspaceRemoves:!0,cacheAsyncResults:!0,className:void 0,clearAllText:"Clear all",clearValueText:"Clear value",clearable:!0,delimiter:",",disabled:!1,ignoreCase:!0,inputProps:{},isLoading:!1,labelKey:"label",matchPos:"any",matchProp:"any",name:void 0,newOptionCreator:void 0,noResultsText:"No results found",onChange:void 0,onInputChange:void 0,onOptionLabelClick:void 0,optionComponent:l,options:void 0,placeholder:"Select...",searchable:!0,searchingText:"Searching...",searchPromptText:"Type to search",singleValueComponent:c,value:void 0,valueComponent:u,valueKey:"value"}},getInitialState:function(){return{isFocused:!1,isLoading:!1,isOpen:!1,options:this.props.options}},componentWillMount:function(){var e=this;this._optionsCache={},this._optionsFilterString="",this._closeMenuIfClickedOutside=function(t){if(e.state.isOpen){var n=i.findDOMNode(e.refs.selectMenuContainer),r=i.findDOMNode(e.refs.control),o=e.clickedOutsideElement(n,t),a=e.clickedOutsideElement(r,t);o&&a&&e.setState({isOpen:!1},e._unbindCloseMenuIfClickedOutside)}},this._bindCloseMenuIfClickedOutside=function(){!document.addEventListener&&document.attachEvent?document.attachEvent("onclick",e._closeMenuIfClickedOutside):document.addEventListener("click",e._closeMenuIfClickedOutside)},this._unbindCloseMenuIfClickedOutside=function(){!document.removeEventListener&&document.detachEvent?document.detachEvent("onclick",e._closeMenuIfClickedOutside):document.removeEventListener("click",e._closeMenuIfClickedOutside)},this.setState(this.getStateFromValue(this.props.value))},componentDidMount:function(){this.props.asyncOptions&&this.props.autoload&&this.autoloadAsyncOptions()},componentWillUnmount:function(){clearTimeout(this._blurTimeout),clearTimeout(this._focusTimeout),this.state.isOpen&&this._unbindCloseMenuIfClickedOutside()},componentWillReceiveProps:function(e){var t=this,n=!1;if(JSON.stringify(e.options)!==JSON.stringify(this.props.options)&&(n=!0,this.setState({options:e.options,filteredOptions:this.filterOptions(e.options)})),e.value!==this.state.value||e.placeholder!==this.props.placeholder||n){var r=function(n){t.setState(t.getStateFromValue(e.value,n&&n.options||e.options,e.placeholder))};this.props.asyncOptions?this.loadAsyncOptions(e.value,{},r):r()}},componentDidUpdate:function(){var e=this;if(!this.props.disabled&&this._focusAfterUpdate&&(clearTimeout(this._blurTimeout),clearTimeout(this._focusTimeout),this._focusTimeout=setTimeout(function(){e.isMounted()&&(e.getInputNode().focus(),e._focusAfterUpdate=!1)},50)),this._focusedOptionReveal){if(this.refs.focused&&this.refs.menu){var t=i.findDOMNode(this.refs.focused),n=i.findDOMNode(this.refs.menu),r=t.getBoundingClientRect(),o=n.getBoundingClientRect();(r.bottom>o.bottom||r.top<o.top)&&(n.scrollTop=t.offsetTop+t.clientHeight-n.offsetHeight)}this._focusedOptionReveal=!1}},focus:function(){this.getInputNode().focus()},clickedOutsideElement:function(e,t){for(var n=t.target?t.target:t.srcElement;null!=n;){if(n===e)return!1;n=n.offsetParent}return!0},getStateFromValue:function(e,t,n){var r=this;t||(t=this.state.options),n||(n=this.props.placeholder),this._optionsFilterString="";var o,i=this.initValuesArray(e,t),a=this.filterOptions(t,i),s=null;return!this.props.multi&&i.length?(o=i[0],s=i[0][this.props.valueKey]):(o=this.getFirstFocusableOption(a),s=i.map(function(e){return e[r.props.valueKey]}).join(this.props.delimiter)),{value:s,values:i,inputValue:"",filteredOptions:a,placeholder:!this.props.multi&&i.length?i[0][this.props.labelKey]:n,focusedOption:o}},getFirstFocusableOption:function(e){for(var t=0;t<e.length;++t)if(!e[t].disabled)return e[t]},initValuesArray:function(e,t){var n=this;return Array.isArray(e)||(e="string"==typeof e?""===e?[]:this.props.multi?e.split(this.props.delimiter):[e]:void 0!==e&&null!==e?[e]:[]),e.map(function(e){if("string"==typeof e||"number"==typeof e){for(var r in t)if(t.hasOwnProperty(r)&&t[r]&&(t[r][n.props.valueKey]===e||"number"==typeof t[r][n.props.valueKey]&&t[r][n.props.valueKey].toString()===e))return t[r];return{value:e,label:e}}return e})},setValue:function(e,t){(t||void 0===t)&&(this._focusAfterUpdate=!0);var n=this.getStateFromValue(e);n.isOpen=!1,this.fireChangeEvent(n),this.setState(n)},selectValue:function(e){this.props.multi?e&&this.addValue(e):this.setValue(e),this._unbindCloseMenuIfClickedOutside()},addValue:function(e){this.setValue(this.state.values.concat(e))},popValue:function(){this.setValue(this.state.values.slice(0,this.state.values.length-1))},removeValue:function(e){this.setValue(this.state.values.filter(function(t){return t!==e}))},clearValue:function(e){e&&"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault(),this.setValue(null))},resetValue:function(){this.setValue(""===this.state.value?null:this.state.value)},getInputNode:function(){var e=this.refs.input;return this.props.searchable?e:i.findDOMNode(e)},fireChangeEvent:function(e){e.value!==this.state.value&&this.props.onChange&&this.props.onChange(e.value,e.values)},handleMouseDown:function(e){return this.props.disabled||"mousedown"===e.type&&0!==e.button?void 0:(e.stopPropagation(),e.preventDefault(),this.state.isOpen&&!this.props.searchable?void this.setState({isOpen:!1},this._unbindCloseMenuIfClickedOutside):void(this.state.isFocused?this.setState({isOpen:!0},this._bindCloseMenuIfClickedOutside):(this._openAfterFocus=!0,this.getInputNode().focus())))},handleMouseDownOnMenu:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||(e.stopPropagation(),e.preventDefault())},handleMouseDownOnArrow:function(e){this.props.disabled||"mousedown"===e.type&&0!==e.button||this.state.isOpen&&(e.stopPropagation(),e.preventDefault(),this.setState({isOpen:!1},this._unbindCloseMenuIfClickedOutside))},handleInputFocus:function(e){var t=this,n=this.state.isOpen||this._openAfterFocus;this.setState({isFocused:!0,isOpen:n},function(){n?t._bindCloseMenuIfClickedOutside():t._unbindCloseMenuIfClickedOutside()}),this._openAfterFocus=!1,this.props.onFocus&&this.props.onFocus(e)},handleInputBlur:function(e){var t=this;this._blurTimeout=setTimeout(function(){!t._focusAfterUpdate&&t.isMounted()&&t.setState({isFocused:!1,isOpen:!1})},50),this.props.onBlur&&this.props.onBlur(e)},handleKeyDown:function(e){if(!this.props.disabled){switch(e.keyCode){case 8:return void(!this.state.inputValue&&this.props.backspaceRemoves&&(e.preventDefault(),this.popValue()));case 9:if(e.shiftKey||!this.state.isOpen||!this.state.focusedOption)return;this.selectFocusedOption();break;case 13:if(!this.state.isOpen)return;this.selectFocusedOption();break;case 27:this.state.isOpen?this.resetValue():this.props.clearable&&this.clearValue(e);break;case 38:this.focusPreviousOption();break;case 40:this.focusNextOption();break;case 188:if(!this.props.allowCreate||!this.props.multi)return;e.preventDefault(),e.stopPropagation(),this.selectFocusedOption();break;default:return}e.preventDefault()}},_getNewFocusedOption:function(e){for(var t in e)if(e.hasOwnProperty(t)&&e[t]===this.state.focusedOption)return e[t];return this.getFirstFocusableOption(e);
},handleInputChange:function(e){if(this._optionsFilterString=e.target.value,this.props.onInputChange&&this.props.onInputChange(e.target.value),this.props.asyncOptions)this.setState({isLoading:!0,inputValue:e.target.value}),this.loadAsyncOptions(e.target.value,{isLoading:!1,isOpen:!0},this._bindCloseMenuIfClickedOutside);else{var t=this.filterOptions(this.state.options);this.setState({isOpen:!0,inputValue:e.target.value,filteredOptions:t,focusedOption:this._getNewFocusedOption(t)},this._bindCloseMenuIfClickedOutside)}},autoloadAsyncOptions:function(){var e=this;this.setState({isLoading:!0}),this.loadAsyncOptions(this.props.value||"",{isLoading:!1},function(){e.setValue(e.props.value,!1)})},loadAsyncOptions:function(e,t,n){void 0===e&&(e="");var r=this,o=this._currentRequestId=p++;if(this.props.cacheAsyncResults)for(var i=0;i<=e.length;i++){var a=e.slice(0,i);if(this._optionsCache[a]&&(e===a||this._optionsCache[a].complete)){var s=this._optionsCache[a].options,u=this.filterOptions(s),c={options:s,filteredOptions:u,focusedOption:this._getNewFocusedOption(u)};for(var l in t)t.hasOwnProperty(l)&&(c[l]=t[l]);return this.setState(c),void(n&&n.call(this,c))}}var f=function(i,a){if(i)throw i;if(r.props.cacheAsyncResults&&(r._optionsCache[e]=a),o===r._currentRequestId){var s=r.filterOptions(a.options),u={options:a.options,filteredOptions:s,focusedOption:r._getNewFocusedOption(s)};for(var c in t)t.hasOwnProperty(c)&&(u[c]=t[c]);r.setState(u),n&&n.call(r,u)}},d=this.props.asyncOptions(e,f);d&&"function"==typeof d.then&&d.then(function(e){f(null,e)},function(e){f(e)})},filterOptions:function(e,t){var n=this._optionsFilterString,r=(t||this.state.values).map(function(e){return e.value});if(this.props.filterOptions)return this.props.filterOptions.call(this,e,n,r);var o=function(e){if(this.props.multi&&r.indexOf(e[this.props.valueKey])>-1)return!1;if(this.props.filterOption)return this.props.filterOption.call(this,e,n);var t=String(e[this.props.valueKey]),o=String(e[this.props.labelKey]);return this.props.ignoreCase&&(t=t.toLowerCase(),o=o.toLowerCase(),n=n.toLowerCase()),n&&"start"!==this.props.matchPos?"label"!==this.props.matchProp&&t.indexOf(n)>=0||"value"!==this.props.matchProp&&o.indexOf(n)>=0:"label"!==this.props.matchProp&&t.substr(0,n.length)===n||"value"!==this.props.matchProp&&o.substr(0,n.length)===n};return(e||[]).filter(o,this)},selectFocusedOption:function(){return this.props.allowCreate&&!this.state.focusedOption?this.selectValue(this.state.inputValue):this.state.focusedOption?this.selectValue(this.state.focusedOption):void 0},focusOption:function(e){this.setState({focusedOption:e})},focusNextOption:function(){this.focusAdjacentOption("next")},focusPreviousOption:function(){this.focusAdjacentOption("previous")},focusAdjacentOption:function(e){this._focusedOptionReveal=!0;var t=this.state.filteredOptions.filter(function(e){return!e.disabled});if(!this.state.isOpen)return void this.setState({isOpen:!0,inputValue:"",focusedOption:this.state.focusedOption||t["next"===e?0:t.length-1]},this._bindCloseMenuIfClickedOutside);if(t.length){for(var n=-1,r=0;r<t.length;r++)if(this.state.focusedOption===t[r]){n=r;break}var o=t[0];"next"===e&&n>-1&&n<t.length-1?o=t[n+1]:"previous"===e&&(o=n>0?t[n-1]:t[t.length-1]),this.setState({focusedOption:o})}},unfocusOption:function(e){this.state.focusedOption===e&&this.setState({focusedOption:null})},buildMenu:function(){var e=this,t=this.state.focusedOption?this.state.focusedOption[this.props.valueKey]:null,n=this.props.optionRenderer;n||(n=function(t){return t[e.props.labelKey]}),this.state.filteredOptions.length>0&&(t=null==t?this.state.filteredOptions[0]:t);var r=this.state.filteredOptions;if(this.props.allowCreate&&this.state.inputValue.trim()){var i=this.state.inputValue;r=r.slice();var a=this.props.newOptionCreator?this.props.newOptionCreator(i):{value:i,label:i,create:!0};r.unshift(a)}var u=Object.keys(r).map(function(e){var i=r[e],a=this.state.value===i[this.props.valueKey],u=t===i[this.props.valueKey],c=s({"Select-option":!0,"is-selected":a,"is-focused":u,"is-disabled":i.disabled}),l=u?"focused":null,p=this.focusOption.bind(this,i),f=this.unfocusOption.bind(this,i),d=this.selectValue.bind(this,i),h=o.createElement(this.props.optionComponent,{key:"option-"+i[this.props.valueKey],className:c,renderFunc:n,mouseEnter:p,mouseLeave:f,mouseDown:d,click:d,addLabelText:this.props.addLabelText,option:i,ref:l});return h},this);if(u.length)return u;var c,l;return this.isLoading()?(l="Select-searching",c=this.props.searchingText):this.state.inputValue||!this.props.asyncOptions?(l="Select-noresults",c=this.props.noResultsText):(l="Select-search-prompt",c=this.props.searchPromptText),o.createElement("div",{className:l},c)},handleOptionLabelClick:function(e,t){this.props.onOptionLabelClick&&this.props.onOptionLabelClick(e,t)},isLoading:function(){return this.props.isLoading||this.state.isLoading},render:function(){var e=s("Select",this.props.className,{"Select--multi":this.props.multi,"is-searchable":this.props.searchable,"is-open":this.state.isOpen,"is-focused":this.state.isFocused,"is-loading":this.isLoading(),"is-disabled":this.props.disabled,"has-value":this.state.value}),t=[];if(this.props.multi&&this.state.values.forEach(function(e){var n=this.handleOptionLabelClick.bind(this,e),r=this.removeValue.bind(this,e),i=o.createElement(this.props.valueComponent,{key:e.value,option:e,renderer:this.props.valueRenderer,optionLabelClick:!!this.props.onOptionLabelClick,onOptionLabelClick:n,onRemove:r,disabled:this.props.disabled});t.push(i)},this),!(this.state.inputValue||this.props.multi&&t.length)){var n=this.state.values[0]||null;if(this.props.valueRenderer&&this.state.values.length)t.push(o.createElement(u,{key:0,option:n,renderer:this.props.valueRenderer,disabled:this.props.disabled}));else{var i=o.createElement(this.props.singleValueComponent,{key:"placeholder",value:n,placeholder:this.state.placeholder});t.push(i)}}var c,l,p=this.isLoading()?o.createElement("span",{className:"Select-loading-zone","aria-hidden":"true"},o.createElement("span",{className:"Select-loading"})):null,f=this.props.clearable&&this.state.value&&!this.props.disabled&&!this.isLoading()?o.createElement("span",{className:"Select-clear-zone",title:this.props.multi?this.props.clearAllText:this.props.clearValueText,"aria-label":this.props.multi?this.props.clearAllText:this.props.clearValueText,onMouseDown:this.clearValue,onTouchEnd:this.clearValue,onClick:this.clearValue},o.createElement("span",{className:"Select-clear",dangerouslySetInnerHTML:{__html:"&times;"}})):null,d=o.createElement("span",{className:"Select-arrow-zone",onMouseDown:this.handleMouseDownOnArrow},o.createElement("span",{className:"Select-arrow",onMouseDown:this.handleMouseDownOnArrow}));this.state.isOpen&&(l={ref:"menu",className:"Select-menu",onMouseDown:this.handleMouseDownOnMenu},c=o.createElement("div",{ref:"selectMenuContainer",className:"Select-menu-outer"},o.createElement("div",l,this.buildMenu())));var h,v={ref:"input",className:"Select-input "+(this.props.inputProps.className||""),tabIndex:this.props.tabIndex||0,onFocus:this.handleInputFocus,onBlur:this.handleInputBlur};for(var m in this.props.inputProps)this.props.inputProps.hasOwnProperty(m)&&"className"!==m&&(v[m]=this.props.inputProps[m]);return this.props.disabled?this.props.multi&&this.state.values.length||(h=o.createElement("div",{className:"Select-input"}," ")):h=this.props.searchable?o.createElement(a,r({value:this.state.inputValue,onChange:this.handleInputChange,minWidth:"5"},v)):o.createElement("div",v," "),o.createElement("div",{ref:"wrapper",className:e},o.createElement("input",{type:"hidden",ref:"value",name:this.props.name,value:this.state.value,disabled:this.props.disabled}),o.createElement("div",{className:"Select-control",ref:"control",onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},t,h,p,f,d),c)}});t.exports=f},{"./Option":164,"./SingleValue":166,"./Value":167,classnames:14,react:295,"react-dom":116,"react-input-autosize":117}],166:[function(e,t,n){"use strict";var r=e("react"),o=e("classnames"),i=r.createClass({displayName:"SingleValue",propTypes:{placeholder:r.PropTypes.string,value:r.PropTypes.object},render:function(){var e=o("Select-placeholder",this.props.value&&this.props.value.className);return r.createElement("div",{className:e,style:this.props.value&&this.props.value.style,title:this.props.value&&this.props.value.title},this.props.placeholder)}});t.exports=i},{classnames:14,react:295}],167:[function(e,t,n){"use strict";var r=e("react"),o=e("classnames"),i=r.createClass({displayName:"Value",propTypes:{disabled:r.PropTypes.bool,onOptionLabelClick:r.PropTypes.func,onRemove:r.PropTypes.func,option:r.PropTypes.object.isRequired,optionLabelClick:r.PropTypes.bool,renderer:r.PropTypes.func},blockEvent:function(e){e.stopPropagation()},handleOnRemove:function(e){this.props.disabled||this.props.onRemove(e)},render:function(){var e=this.props.option.label;return this.props.renderer&&(e=this.props.renderer(this.props.option)),this.props.onRemove||this.props.optionLabelClick?(this.props.optionLabelClick&&(e=r.createElement("a",{className:o("Select-item-label__a",this.props.option.className),onMouseDown:this.blockEvent,onTouchEnd:this.props.onOptionLabelClick,onClick:this.props.onOptionLabelClick,style:this.props.option.style,title:this.props.option.title},e)),r.createElement("div",{className:o("Select-item",this.props.option.className),style:this.props.option.style,title:this.props.option.title},r.createElement("span",{className:"Select-item-icon",onMouseDown:this.blockEvent,onClick:this.handleOnRemove,onTouchEnd:this.handleOnRemove},"×"),r.createElement("span",{className:"Select-item-label"},e))):r.createElement("div",{className:o("Select-value",this.props.option.className),style:this.props.option.style,title:this.props.option.title},e)}});t.exports=i},{classnames:14,react:295}],168:[function(e,t,n){"use strict";var r=e("./ReactMount"),o=e("./findDOMNode"),i=e("fbjs/lib/focusNode"),a={componentDidMount:function(){this.props.autoFocus&&i(o(this))}},s={Mixin:a,focusDOMComponent:function(){i(r.getNode(this._rootNodeID))}};t.exports=s},{"./ReactMount":232,"./findDOMNode":274,"fbjs/lib/focusNode":28}],169:[function(e,t,n){"use strict";function r(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function o(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function i(e){switch(e){case R.topCompositionStart:return T.compositionStart;case R.topCompositionEnd:return T.compositionEnd;case R.topCompositionUpdate:return T.compositionUpdate}}function a(e,t){return e===R.topKeyDown&&t.keyCode===E}function s(e,t){switch(e){case R.topKeyUp:return-1!==_.indexOf(t.keyCode);case R.topKeyDown:return t.keyCode!==E;case R.topKeyPress:case R.topMouseDown:case R.topBlur:return!0;default:return!1}}function u(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function c(e,t,n,r,o){var c,l;if(w?c=i(e):k?s(e,r)&&(c=T.compositionEnd):a(e,r)&&(c=T.compositionStart),!c)return null;x&&(k||c!==T.compositionStart?c===T.compositionEnd&&k&&(l=k.getData()):k=m.getPooled(t));var p=g.getPooled(c,n,r,o);if(l)p.data=l;else{var f=u(r);null!==f&&(p.data=f)}return h.accumulateTwoPhaseDispatches(p),p}function l(e,t){switch(e){case R.topCompositionEnd:return u(t);case R.topKeyPress:var n=t.which;return n!==N?null:(P=!0,D);case R.topTextInput:var r=t.data;return r===D&&P?null:r;default:return null}}function p(e,t){if(k){if(e===R.topCompositionEnd||s(e,t)){var n=k.getData();return m.release(k),k=null,n}return null}switch(e){case R.topPaste:return null;case R.topKeyPress:return t.which&&!o(t)?String.fromCharCode(t.which):null;case R.topCompositionEnd:return x?null:t.data;default:return null}}function f(e,t,n,r,o){var i;if(i=C?l(e,r):p(e,r),!i)return null;var a=y.getPooled(T.beforeInput,n,r,o);return a.data=i,h.accumulateTwoPhaseDispatches(a),a}var d=e("./EventConstants"),h=e("./EventPropagators"),v=e("fbjs/lib/ExecutionEnvironment"),m=e("./FallbackCompositionState"),g=e("./SyntheticCompositionEvent"),y=e("./SyntheticInputEvent"),b=e("fbjs/lib/keyOf"),_=[9,13,27,32],E=229,w=v.canUseDOM&&"CompositionEvent"in window,O=null;v.canUseDOM&&"documentMode"in document&&(O=document.documentMode);var C=v.canUseDOM&&"TextEvent"in window&&!O&&!r(),x=v.canUseDOM&&(!w||O&&O>8&&11>=O),N=32,D=String.fromCharCode(N),R=d.topLevelTypes,T={beforeInput:{phasedRegistrationNames:{bubbled:b({onBeforeInput:null}),captured:b({onBeforeInputCapture:null})},dependencies:[R.topCompositionEnd,R.topKeyPress,R.topTextInput,R.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:b({onCompositionEnd:null}),captured:b({onCompositionEndCapture:null})},dependencies:[R.topBlur,R.topCompositionEnd,R.topKeyDown,R.topKeyPress,R.topKeyUp,R.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:b({onCompositionStart:null}),captured:b({onCompositionStartCapture:null})},dependencies:[R.topBlur,R.topCompositionStart,R.topKeyDown,R.topKeyPress,R.topKeyUp,R.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:b({onCompositionUpdate:null}),captured:b({onCompositionUpdateCapture:null})},dependencies:[R.topBlur,R.topCompositionUpdate,R.topKeyDown,R.topKeyPress,R.topKeyUp,R.topMouseDown]}},P=!1,k=null,M={eventTypes:T,extractEvents:function(e,t,n,r,o){return[c(e,t,n,r,o),f(e,t,n,r,o)]}};t.exports=M},{"./EventConstants":181,"./EventPropagators":185,"./FallbackCompositionState":186,"./SyntheticCompositionEvent":257,"./SyntheticInputEvent":261,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/keyOf":38}],170:[function(e,t,n){"use strict";function r(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var o={animationIterationCount:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,stopOpacity:!0,strokeDashoffset:!0,strokeOpacity:!0,strokeWidth:!0},i=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(e){i.forEach(function(t){o[r(t,e)]=o[e]})});var a={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},s={isUnitlessNumber:o,shorthandPropertyExpansions:a};t.exports=s},{}],171:[function(e,t,n){(function(n){"use strict";var r=e("./CSSProperty"),o=e("fbjs/lib/ExecutionEnvironment"),i=e("./ReactPerf"),a=e("fbjs/lib/camelizeStyleName"),s=e("./dangerousStyleValue"),u=e("fbjs/lib/hyphenateStyleName"),c=e("fbjs/lib/memoizeStringOnly"),l=e("fbjs/lib/warning"),p=c(function(e){return u(e)}),f=!1,d="cssFloat";if(o.canUseDOM){var h=document.createElement("div").style;try{h.font=""}catch(v){f=!0}void 0===document.documentElement.style.cssFloat&&(d="styleFloat")}if("production"!==n.env.NODE_ENV)var m=/^(?:webkit|moz|o)[A-Z]/,g=/;\s*$/,y={},b={},_=function(e){y.hasOwnProperty(e)&&y[e]||(y[e]=!0,"production"!==n.env.NODE_ENV?l(!1,"Unsupported style property %s. Did you mean %s?",e,a(e)):void 0)},E=function(e){y.hasOwnProperty(e)&&y[e]||(y[e]=!0,"production"!==n.env.NODE_ENV?l(!1,"Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)):void 0)},w=function(e,t){b.hasOwnProperty(t)&&b[t]||(b[t]=!0,"production"!==n.env.NODE_ENV?l(!1,'Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(g,"")):void 0)},O=function(e,t){e.indexOf("-")>-1?_(e):m.test(e)?E(e):g.test(t)&&w(e,t)};var C={createMarkupForStyles:function(e){var t="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];"production"!==n.env.NODE_ENV&&O(r,o),null!=o&&(t+=p(r)+":",t+=s(r,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var i in t)if(t.hasOwnProperty(i)){"production"!==n.env.NODE_ENV&&O(i,t[i]);var a=s(i,t[i]);if("float"===i&&(i=d),a)o[i]=a;else{var u=f&&r.shorthandPropertyExpansions[i];if(u)for(var c in u)o[c]="";else o[i]=""}}}};i.measureMethods(C,"CSSPropertyOperations",{setValueForStyles:"setValueForStyles"}),t.exports=C}).call(this,e("_process"))},{"./CSSProperty":170,"./ReactPerf":238,"./dangerousStyleValue":271,_process:114,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/camelizeStyleName":22,"fbjs/lib/hyphenateStyleName":33,"fbjs/lib/memoizeStringOnly":40,"fbjs/lib/warning":45}],172:[function(e,t,n){(function(n){"use strict";function r(){this._callbacks=null,this._contexts=null}var o=e("./PooledClass"),i=e("./Object.assign"),a=e("fbjs/lib/invariant");i(r.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){e.length!==t.length?"production"!==n.env.NODE_ENV?a(!1,"Mismatched list of contexts in callback queue"):a(!1):void 0,this._callbacks=null,this._contexts=null;for(var r=0;r<e.length;r++)e[r].call(t[r]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r}).call(this,e("_process"))},{"./Object.assign":189,"./PooledClass":190,_process:114,"fbjs/lib/invariant":34}],173:[function(e,t,n){"use strict";function r(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function o(e){var t=O.getPooled(T.change,k,e,C(e));_.accumulateTwoPhaseDispatches(t),w.batchedUpdates(i,t)}function i(e){b.enqueueEvents(e),b.processEventQueue(!1)}function a(e,t){P=e,k=t,P.attachEvent("onchange",o)}function s(){P&&(P.detachEvent("onchange",o),P=null,k=null)}function u(e,t,n){return e===R.topChange?n:void 0}function c(e,t,n){e===R.topFocus?(s(),a(t,n)):e===R.topBlur&&s()}function l(e,t){P=e,k=t,M=e.value,S=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(P,"value",A),P.attachEvent("onpropertychange",f)}function p(){P&&(delete P.value,P.detachEvent("onpropertychange",f),P=null,k=null,M=null,S=null)}function f(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==M&&(M=t,o(e))}}function d(e,t,n){return e===R.topInput?n:void 0}function h(e,t,n){e===R.topFocus?(p(),l(t,n)):e===R.topBlur&&p()}function v(e,t,n){return e!==R.topSelectionChange&&e!==R.topKeyUp&&e!==R.topKeyDown||!P||P.value===M?void 0:(M=P.value,k)}function m(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function g(e,t,n){return e===R.topClick?n:void 0}var y=e("./EventConstants"),b=e("./EventPluginHub"),_=e("./EventPropagators"),E=e("fbjs/lib/ExecutionEnvironment"),w=e("./ReactUpdates"),O=e("./SyntheticEvent"),C=e("./getEventTarget"),x=e("./isEventSupported"),N=e("./isTextInputElement"),D=e("fbjs/lib/keyOf"),R=y.topLevelTypes,T={change:{phasedRegistrationNames:{bubbled:D({onChange:null}),captured:D({onChangeCapture:null})},dependencies:[R.topBlur,R.topChange,R.topClick,R.topFocus,R.topInput,R.topKeyDown,R.topKeyUp,R.topSelectionChange]}},P=null,k=null,M=null,S=null,j=!1;E.canUseDOM&&(j=x("change")&&(!("documentMode"in document)||document.documentMode>8));var I=!1;E.canUseDOM&&(I=x("input")&&(!("documentMode"in document)||document.documentMode>9));var A={get:function(){return S.get.call(this)},set:function(e){M=""+e,S.set.call(this,e)}},L={eventTypes:T,extractEvents:function(e,t,n,o,i){var a,s;if(r(t)?j?a=u:s=c:N(t)?I?a=d:(a=v,s=h):m(t)&&(a=g),a){var l=a(e,t,n);if(l){var p=O.getPooled(T.change,l,o,i);return p.type="change",_.accumulateTwoPhaseDispatches(p),p}}s&&s(e,t,n)}};t.exports=L},{"./EventConstants":181,"./EventPluginHub":182,"./EventPropagators":185,"./ReactUpdates":250,"./SyntheticEvent":259,"./getEventTarget":280,"./isEventSupported":285,"./isTextInputElement":286,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/keyOf":38}],174:[function(e,t,n){"use strict";var r=0,o={createReactRootIndex:function(){return r++}};t.exports=o},{}],175:[function(e,t,n){(function(n){"use strict";function r(e,t,n){var r=n>=e.childNodes.length?null:e.childNodes.item(n);e.insertBefore(t,r)}var o=e("./Danger"),i=e("./ReactMultiChildUpdateTypes"),a=e("./ReactPerf"),s=e("./setInnerHTML"),u=e("./setTextContent"),c=e("fbjs/lib/invariant"),l={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,updateTextContent:u,processUpdates:function(e,t){for(var a,l=null,p=null,f=0;f<e.length;f++)if(a=e[f],a.type===i.MOVE_EXISTING||a.type===i.REMOVE_NODE){var d=a.fromIndex,h=a.parentNode.childNodes[d],v=a.parentID;h?void 0:"production"!==n.env.NODE_ENV?c(!1,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",d,v):c(!1),l=l||{},l[v]=l[v]||[],l[v][d]=h,p=p||[],p.push(h)}var m;if(m=t.length&&"string"==typeof t[0]?o.dangerouslyRenderMarkup(t):t,p)for(var g=0;g<p.length;g++)p[g].parentNode.removeChild(p[g]);for(var y=0;y<e.length;y++)switch(a=e[y],a.type){case i.INSERT_MARKUP:r(a.parentNode,m[a.markupIndex],a.toIndex);break;case i.MOVE_EXISTING:r(a.parentNode,l[a.parentID][a.fromIndex],a.toIndex);break;case i.SET_MARKUP:s(a.parentNode,a.content);break;case i.TEXT_CONTENT:u(a.parentNode,a.content);break;case i.REMOVE_NODE:}}};a.measureMethods(l,"DOMChildrenOperations",{updateTextContent:"updateTextContent"}),t.exports=l}).call(this,e("_process"))},{"./Danger":178,"./ReactMultiChildUpdateTypes":234,"./ReactPerf":238,"./setInnerHTML":290,"./setTextContent":291,_process:114,"fbjs/lib/invariant":34}],176:[function(e,t,n){(function(n){"use strict";function r(e,t){return(e&t)===t}var o=e("fbjs/lib/invariant"),i={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=i,a=e.Properties||{},u=e.DOMAttributeNamespaces||{},c=e.DOMAttributeNames||{},l=e.DOMPropertyNames||{},p=e.DOMMutationMethods||{};e.isCustomAttribute&&s._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var f in a){s.properties.hasOwnProperty(f)?"production"!==n.env.NODE_ENV?o(!1,"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",f):o(!1):void 0;var d=f.toLowerCase(),h=a[f],v={attributeName:d,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseAttribute:r(h,t.MUST_USE_ATTRIBUTE),mustUseProperty:r(h,t.MUST_USE_PROPERTY),hasSideEffects:r(h,t.HAS_SIDE_EFFECTS),hasBooleanValue:r(h,t.HAS_BOOLEAN_VALUE),hasNumericValue:r(h,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:r(h,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:r(h,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(v.mustUseAttribute&&v.mustUseProperty?"production"!==n.env.NODE_ENV?o(!1,"DOMProperty: Cannot require using both attribute and property: %s",f):o(!1):void 0,!v.mustUseProperty&&v.hasSideEffects?"production"!==n.env.NODE_ENV?o(!1,"DOMProperty: Properties that have side effects must use property: %s",f):o(!1):void 0,v.hasBooleanValue+v.hasNumericValue+v.hasOverloadedBooleanValue<=1?void 0:"production"!==n.env.NODE_ENV?o(!1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",f):o(!1),"production"!==n.env.NODE_ENV&&(s.getPossibleStandardName[d]=f),c.hasOwnProperty(f)){var m=c[f];v.attributeName=m,"production"!==n.env.NODE_ENV&&(s.getPossibleStandardName[m]=f)}u.hasOwnProperty(f)&&(v.attributeNamespace=u[f]),l.hasOwnProperty(f)&&(v.propertyName=l[f]),p.hasOwnProperty(f)&&(v.mutationMethod=p[f]),s.properties[f]=v}}},a={},s={ID_ATTRIBUTE_NAME:"data-reactid",properties:{},getPossibleStandardName:"production"!==n.env.NODE_ENV?{}:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<s._isCustomAttributeFunctions.length;t++){var n=s._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,r=a[e];return r||(a[e]=r={}),t in r||(n=document.createElement(e),r[t]=n[t]),r[t]},injection:i};t.exports=s}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],177:[function(e,t,n){(function(n){"use strict";function r(e){return p.hasOwnProperty(e)?!0:l.hasOwnProperty(e)?!1:c.test(e)?(p[e]=!0,!0):(l[e]=!0,"production"!==n.env.NODE_ENV?u(!1,"Invalid attribute name: `%s`",e):void 0,!1)}function o(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&1>t||e.hasOverloadedBooleanValue&&t===!1}var i=e("./DOMProperty"),a=e("./ReactPerf"),s=e("./quoteAttributeValueForBrowser"),u=e("fbjs/lib/warning"),c=/^[a-zA-Z_][\w\.\-]*$/,l={},p={};if("production"!==n.env.NODE_ENV)var f={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},d={},h=function(e){if(!(f.hasOwnProperty(e)&&f[e]||d.hasOwnProperty(e)&&d[e])){d[e]=!0;var t=e.toLowerCase(),r=i.isCustomAttribute(t)?t:i.getPossibleStandardName.hasOwnProperty(t)?i.getPossibleStandardName[t]:null;"production"!==n.env.NODE_ENV?u(null==r,"Unknown DOM property %s. Did you mean %s?",e,r):void 0}};var v={createMarkupForID:function(e){return i.ID_ATTRIBUTE_NAME+"="+s(e)},setAttributeForID:function(e,t){e.setAttribute(i.ID_ATTRIBUTE_NAME,t)},createMarkupForProperty:function(e,t){var r=i.properties.hasOwnProperty(e)?i.properties[e]:null;if(r){if(o(r,t))return"";var a=r.attributeName;return r.hasBooleanValue||r.hasOverloadedBooleanValue&&t===!0?a+'=""':a+"="+s(t)}return i.isCustomAttribute(e)?null==t?"":e+"="+s(t):("production"!==n.env.NODE_ENV&&h(e),null)},createMarkupForCustomAttribute:function(e,t){return r(e)&&null!=t?e+"="+s(t):""},setValueForProperty:function(e,t,r){var a=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(a){var s=a.mutationMethod;if(s)s(e,r);else if(o(a,r))this.deleteValueForProperty(e,t);else if(a.mustUseAttribute){var u=a.attributeName,c=a.attributeNamespace;c?e.setAttributeNS(c,u,""+r):a.hasBooleanValue||a.hasOverloadedBooleanValue&&r===!0?e.setAttribute(u,""):e.setAttribute(u,""+r)}else{var l=a.propertyName;a.hasSideEffects&&""+e[l]==""+r||(e[l]=r)}}else i.isCustomAttribute(t)?v.setValueForAttribute(e,t,r):"production"!==n.env.NODE_ENV&&h(t)},setValueForAttribute:function(e,t,n){r(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))},deleteValueForProperty:function(e,t){var r=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(r){var o=r.mutationMethod;if(o)o(e,void 0);else if(r.mustUseAttribute)e.removeAttribute(r.attributeName);else{var a=r.propertyName,s=i.getDefaultValueForProperty(e.nodeName,a);r.hasSideEffects&&""+e[a]===s||(e[a]=s)}}else i.isCustomAttribute(t)?e.removeAttribute(t):"production"!==n.env.NODE_ENV&&h(t)}};a.measureMethods(v,"DOMPropertyOperations",{setValueForProperty:"setValueForProperty",setValueForAttribute:"setValueForAttribute",deleteValueForProperty:"deleteValueForProperty"}),t.exports=v}).call(this,e("_process"))},{"./DOMProperty":176,"./ReactPerf":238,"./quoteAttributeValueForBrowser":288,_process:114,"fbjs/lib/warning":45}],178:[function(e,t,n){(function(n){"use strict";function r(e){return e.substring(1,e.indexOf(" "))}var o=e("fbjs/lib/ExecutionEnvironment"),i=e("fbjs/lib/createNodesFromMarkup"),a=e("fbjs/lib/emptyFunction"),s=e("fbjs/lib/getMarkupWrap"),u=e("fbjs/lib/invariant"),c=/^(<[^ \/>]+)/,l="data-danger-index",p={dangerouslyRenderMarkup:function(e){o.canUseDOM?void 0:"production"!==n.env.NODE_ENV?u(!1,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString for server rendering."):u(!1);for(var t,p={},f=0;f<e.length;f++)e[f]?void 0:"production"!==n.env.NODE_ENV?u(!1,"dangerouslyRenderMarkup(...): Missing markup."):u(!1),t=r(e[f]),t=s(t)?t:"*",p[t]=p[t]||[],p[t][f]=e[f];var d=[],h=0;for(t in p)if(p.hasOwnProperty(t)){var v,m=p[t];for(v in m)if(m.hasOwnProperty(v)){var g=m[v];m[v]=g.replace(c,"$1 "+l+'="'+v+'" ')}for(var y=i(m.join(""),a),b=0;b<y.length;++b){var _=y[b];_.hasAttribute&&_.hasAttribute(l)?(v=+_.getAttribute(l),_.removeAttribute(l),d.hasOwnProperty(v)?"production"!==n.env.NODE_ENV?u(!1,"Danger: Assigning to an already-occupied result index."):u(!1):void 0,d[v]=_,h+=1):"production"!==n.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",_)}}return h!==d.length?"production"!==n.env.NODE_ENV?u(!1,"Danger: Did not assign to every index of resultList."):u(!1):void 0,d.length!==e.length?"production"!==n.env.NODE_ENV?u(!1,"Danger: Expected markup to render %s nodes, but rendered %s.",e.length,d.length):u(!1):void 0,d},dangerouslyReplaceNodeWithMarkup:function(e,t){o.canUseDOM?void 0:"production"!==n.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering."):u(!1),t?void 0:"production"!==n.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):u(!1),"html"===e.tagName.toLowerCase()?"production"!==n.env.NODE_ENV?u(!1,"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString()."):u(!1):void 0;var r;r="string"==typeof t?i(t,a)[0]:t,e.parentNode.replaceChild(r,e)}};t.exports=p}).call(this,e("_process"))},{_process:114,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/createNodesFromMarkup":25,"fbjs/lib/emptyFunction":26,"fbjs/lib/getMarkupWrap":30,"fbjs/lib/invariant":34}],179:[function(e,t,n){"use strict";var r=e("fbjs/lib/keyOf"),o=[r({ResponderEventPlugin:null}),r({SimpleEventPlugin:null}),r({TapEventPlugin:null}),r({EnterLeaveEventPlugin:null}),r({ChangeEventPlugin:null}),r({SelectEventPlugin:null}),r({BeforeInputEventPlugin:null})];t.exports=o},{"fbjs/lib/keyOf":38}],180:[function(e,t,n){"use strict";var r=e("./EventConstants"),o=e("./EventPropagators"),i=e("./SyntheticMouseEvent"),a=e("./ReactMount"),s=e("fbjs/lib/keyOf"),u=r.topLevelTypes,c=a.getFirstReactDOM,l={mouseEnter:{registrationName:s({onMouseEnter:null}),dependencies:[u.topMouseOut,u.topMouseOver]},mouseLeave:{registrationName:s({onMouseLeave:null}),dependencies:[u.topMouseOut,u.topMouseOver]}},p=[null,null],f={eventTypes:l,extractEvents:function(e,t,n,r,s){if(e===u.topMouseOver&&(r.relatedTarget||r.fromElement))return null;if(e!==u.topMouseOut&&e!==u.topMouseOver)return null;var f;if(t.window===t)f=t;else{var d=t.ownerDocument;f=d?d.defaultView||d.parentWindow:window}var h,v,m="",g="";if(e===u.topMouseOut?(h=t,m=n,v=c(r.relatedTarget||r.toElement),v?g=a.getID(v):v=f,v=v||f):(h=f,v=t,g=n),h===v)return null;var y=i.getPooled(l.mouseLeave,m,r,s);y.type="mouseleave",y.target=h,y.relatedTarget=v;var b=i.getPooled(l.mouseEnter,g,r,s);return b.type="mouseenter",b.target=v,b.relatedTarget=h,o.accumulateEnterLeaveDispatches(y,b,m,g),p[0]=y,p[1]=b,p}};t.exports=f},{"./EventConstants":181,"./EventPropagators":185,"./ReactMount":232,"./SyntheticMouseEvent":263,"fbjs/lib/keyOf":38
}],181:[function(e,t,n){"use strict";var r=e("fbjs/lib/keyMirror"),o=r({bubbled:null,captured:null}),i=r({topAbort:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topVolumeChange:null,topWaiting:null,topWheel:null}),a={topLevelTypes:i,PropagationPhases:o};t.exports=a},{"fbjs/lib/keyMirror":37}],182:[function(e,t,n){(function(n){"use strict";function r(){var e=m&&m.traverseTwoPhase&&m.traverseEnterLeave;"production"!==n.env.NODE_ENV?l(e,"InstanceHandle not injected before use!"):void 0}var o=e("./EventPluginRegistry"),i=e("./EventPluginUtils"),a=e("./ReactErrorUtils"),s=e("./accumulateInto"),u=e("./forEachAccumulated"),c=e("fbjs/lib/invariant"),l=e("fbjs/lib/warning"),p={},f=null,d=function(e,t){e&&(i.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},h=function(e){return d(e,!0)},v=function(e){return d(e,!1)},m=null,g={injection:{injectMount:i.injection.injectMount,injectInstanceHandle:function(e){m=e,"production"!==n.env.NODE_ENV&&r()},getInstanceHandle:function(){return"production"!==n.env.NODE_ENV&&r(),m},injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:function(e,t,r){"function"!=typeof r?"production"!==n.env.NODE_ENV?c(!1,"Expected %s listener to be a function, instead got type %s",t,typeof r):c(!1):void 0;var i=p[t]||(p[t]={});i[e]=r;var a=o.registrationNameModules[t];a&&a.didPutListener&&a.didPutListener(e,t,r)},getListener:function(e,t){var n=p[t];return n&&n[e]},deleteListener:function(e,t){var n=o.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t);var r=p[t];r&&delete r[e]},deleteAllListeners:function(e){for(var t in p)if(p[t][e]){var n=o.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t),delete p[t][e]}},extractEvents:function(e,t,n,r,i){for(var a,u=o.plugins,c=0;c<u.length;c++){var l=u[c];if(l){var p=l.extractEvents(e,t,n,r,i);p&&(a=s(a,p))}}return a},enqueueEvents:function(e){e&&(f=s(f,e))},processEventQueue:function(e){var t=f;f=null,e?u(t,h):u(t,v),f?"production"!==n.env.NODE_ENV?c(!1,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):c(!1):void 0,a.rethrowCaughtError()},__purge:function(){p={}},__getListenerBank:function(){return p}};t.exports=g}).call(this,e("_process"))},{"./EventPluginRegistry":183,"./EventPluginUtils":184,"./ReactErrorUtils":223,"./accumulateInto":269,"./forEachAccumulated":276,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],183:[function(e,t,n){(function(n){"use strict";function r(){if(s)for(var e in u){var t=u[e],r=s.indexOf(e);if(r>-1?void 0:"production"!==n.env.NODE_ENV?a(!1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):a(!1),!c.plugins[r]){t.extractEvents?void 0:"production"!==n.env.NODE_ENV?a(!1,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):a(!1),c.plugins[r]=t;var i=t.eventTypes;for(var l in i)o(i[l],t,l)?void 0:"production"!==n.env.NODE_ENV?a(!1,"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",l,e):a(!1)}}}function o(e,t,r){c.eventNameDispatchConfigs.hasOwnProperty(r)?"production"!==n.env.NODE_ENV?a(!1,"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",r):a(!1):void 0,c.eventNameDispatchConfigs[r]=e;var o=e.phasedRegistrationNames;if(o){for(var s in o)if(o.hasOwnProperty(s)){var u=o[s];i(u,t,r)}return!0}return e.registrationName?(i(e.registrationName,t,r),!0):!1}function i(e,t,r){c.registrationNameModules[e]?"production"!==n.env.NODE_ENV?a(!1,"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):a(!1):void 0,c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[r].dependencies}var a=e("fbjs/lib/invariant"),s=null,u={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){s?"production"!==n.env.NODE_ENV?a(!1,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):a(!1):void 0,s=Array.prototype.slice.call(e),r()},injectEventPluginsByName:function(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var i=e[o];u.hasOwnProperty(o)&&u[o]===i||(u[o]?"production"!==n.env.NODE_ENV?a(!1,"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",o):a(!1):void 0,u[o]=i,t=!0)}t&&r()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=c.registrationNameModules[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){s=null;for(var e in u)u.hasOwnProperty(e)&&delete u[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var r=c.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};t.exports=c}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],184:[function(e,t,n){(function(n){"use strict";function r(e){return e===y.topMouseUp||e===y.topTouchEnd||e===y.topTouchCancel}function o(e){return e===y.topMouseMove||e===y.topTouchMove}function i(e){return e===y.topMouseDown||e===y.topTouchStart}function a(e,t,n,r){var o=e.type||"unknown-event";e.currentTarget=g.Mount.getNode(r),t?h.invokeGuardedCallbackWithCatch(o,n,e,r):h.invokeGuardedCallback(o,n,e,r),e.currentTarget=null}function s(e,t){var r=e._dispatchListeners,o=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&f(e),Array.isArray(r))for(var i=0;i<r.length&&!e.isPropagationStopped();i++)a(e,t,r[i],o[i]);else r&&a(e,t,r,o);e._dispatchListeners=null,e._dispatchIDs=null}function u(e){var t=e._dispatchListeners,r=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&f(e),Array.isArray(t)){for(var o=0;o<t.length&&!e.isPropagationStopped();o++)if(t[o](e,r[o]))return r[o]}else if(t&&t(e,r))return r;return null}function c(e){var t=u(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function l(e){"production"!==n.env.NODE_ENV&&f(e);var t=e._dispatchListeners,r=e._dispatchIDs;Array.isArray(t)?"production"!==n.env.NODE_ENV?v(!1,"executeDirectDispatch(...): Invalid `event`."):v(!1):void 0;var o=t?t(e,r):null;return e._dispatchListeners=null,e._dispatchIDs=null,o}function p(e){return!!e._dispatchListeners}var f,d=e("./EventConstants"),h=e("./ReactErrorUtils"),v=e("fbjs/lib/invariant"),m=e("fbjs/lib/warning"),g={Mount:null,injectMount:function(e){g.Mount=e,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?m(e&&e.getNode&&e.getID,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode or getID."):void 0)}},y=d.topLevelTypes;"production"!==n.env.NODE_ENV&&(f=function(e){var t=e._dispatchListeners,r=e._dispatchIDs,o=Array.isArray(t),i=Array.isArray(r),a=i?r.length:r?1:0,s=o?t.length:t?1:0;"production"!==n.env.NODE_ENV?m(i===o&&a===s,"EventPluginUtils: Invalid `event`."):void 0});var b={isEndish:r,isMoveish:o,isStartish:i,executeDirectDispatch:l,executeDispatchesInOrder:s,executeDispatchesInOrderStopAtTrue:c,hasDispatches:p,getNode:function(e){return g.Mount.getNode(e)},getID:function(e){return g.Mount.getID(e)},injection:g};t.exports=b}).call(this,e("_process"))},{"./EventConstants":181,"./ReactErrorUtils":223,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],185:[function(e,t,n){(function(n){"use strict";function r(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return b(e,r)}function o(e,t,o){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?v(e,"Dispatching id must not be null"):void 0);var i=t?y.bubbled:y.captured,a=r(e,o,i);a&&(o._dispatchListeners=m(o._dispatchListeners,a),o._dispatchIDs=m(o._dispatchIDs,e))}function i(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,o,e)}function a(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(e.dispatchMarker,o,e)}function s(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=b(e,r);o&&(n._dispatchListeners=m(n._dispatchListeners,o),n._dispatchIDs=m(n._dispatchIDs,e))}}function u(e){e&&e.dispatchConfig.registrationName&&s(e.dispatchMarker,null,e)}function c(e){g(e,i)}function l(e){g(e,a)}function p(e,t,n,r){h.injection.getInstanceHandle().traverseEnterLeave(n,r,s,e,t)}function f(e){g(e,u)}var d=e("./EventConstants"),h=e("./EventPluginHub"),v=e("fbjs/lib/warning"),m=e("./accumulateInto"),g=e("./forEachAccumulated"),y=d.PropagationPhases,b=h.getListener,_={accumulateTwoPhaseDispatches:c,accumulateTwoPhaseDispatchesSkipTarget:l,accumulateDirectDispatches:f,accumulateEnterLeaveDispatches:p};t.exports=_}).call(this,e("_process"))},{"./EventConstants":181,"./EventPluginHub":182,"./accumulateInto":269,"./forEachAccumulated":276,_process:114,"fbjs/lib/warning":45}],186:[function(e,t,n){"use strict";function r(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var o=e("./PooledClass"),i=e("./Object.assign"),a=e("./getTextContentAccessor");i(r.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[a()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,r=n.length,o=this.getText(),i=o.length;for(e=0;r>e&&n[e]===o[e];e++);var a=r-e;for(t=1;a>=t&&n[r-t]===o[i-t];t++);var s=t>1?1-t:void 0;return this._fallbackText=o.slice(e,s),this._fallbackText}}),o.addPoolingTo(r),t.exports=r},{"./Object.assign":189,"./PooledClass":190,"./getTextContentAccessor":283}],187:[function(e,t,n){"use strict";var r,o=e("./DOMProperty"),i=e("fbjs/lib/ExecutionEnvironment"),a=o.injection.MUST_USE_ATTRIBUTE,s=o.injection.MUST_USE_PROPERTY,u=o.injection.HAS_BOOLEAN_VALUE,c=o.injection.HAS_SIDE_EFFECTS,l=o.injection.HAS_NUMERIC_VALUE,p=o.injection.HAS_POSITIVE_NUMERIC_VALUE,f=o.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(i.canUseDOM){var d=document.implementation;r=d&&d.hasFeature&&d.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var h={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:a|u,allowTransparency:a,alt:null,async:u,autoComplete:null,autoPlay:u,capture:a|u,cellPadding:null,cellSpacing:null,charSet:a,challenge:a,checked:s|u,classID:a,className:r?a:s,cols:a|p,colSpan:null,content:null,contentEditable:null,contextMenu:a,controls:s|u,coords:null,crossOrigin:null,data:null,dateTime:a,defer:u,dir:null,disabled:a|u,download:f,draggable:null,encType:null,form:a,formAction:a,formEncType:a,formMethod:a,formNoValidate:u,formTarget:a,frameBorder:a,headers:null,height:a,hidden:a|u,high:null,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:s,inputMode:a,is:a,keyParams:a,keyType:a,label:null,lang:null,list:a,loop:s|u,low:null,manifest:a,marginHeight:null,marginWidth:null,max:null,maxLength:a,media:a,mediaGroup:null,method:null,min:null,minLength:a,multiple:s|u,muted:s|u,name:null,noValidate:u,open:u,optimum:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:s|u,rel:null,required:u,role:a,rows:a|p,rowSpan:null,sandbox:null,scope:null,scoped:u,scrolling:null,seamless:a|u,selected:s|u,shape:null,size:a|p,sizes:a,span:p,spellCheck:null,src:null,srcDoc:s,srcSet:a,start:l,step:null,style:null,summary:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:s|c,width:a,wmode:a,wrap:null,about:a,datatype:a,inlist:a,prefix:a,property:a,resource:a,"typeof":a,vocab:a,autoCapitalize:null,autoCorrect:null,autoSave:null,itemProp:a,itemScope:a|u,itemType:a,itemID:a,itemRef:a,results:null,security:a,unselectable:a},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",autoSave:"autosave",encType:"encoding",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=h},{"./DOMProperty":176,"fbjs/lib/ExecutionEnvironment":20}],188:[function(e,t,n){(function(n){"use strict";function r(e){null!=e.checkedLink&&null!=e.valueLink?"production"!==n.env.NODE_ENV?c(!1,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):c(!1):void 0}function o(e){r(e),null!=e.value||null!=e.onChange?"production"!==n.env.NODE_ENV?c(!1,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):c(!1):void 0}function i(e){r(e),null!=e.checked||null!=e.onChange?"production"!==n.env.NODE_ENV?c(!1,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):c(!1):void 0}function a(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var s=e("./ReactPropTypes"),u=e("./ReactPropTypeLocations"),c=e("fbjs/lib/invariant"),l=e("fbjs/lib/warning"),p={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},f={value:function(e,t,n){return!e[t]||p[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:s.func},d={},h={checkPropTypes:function(e,t,r){for(var o in f){if(f.hasOwnProperty(o))var i=f[o](t,o,e,u.prop);if(i instanceof Error&&!(i.message in d)){d[i.message]=!0;var s=a(r);"production"!==n.env.NODE_ENV?l(!1,"Failed form propType: %s%s",i.message,s):void 0}}},getValue:function(e){return e.valueLink?(o(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(i(e),e.checkedLink.value):e.checked},executeOnChange:function(e,t){return e.valueLink?(o(e),e.valueLink.requestChange(t.target.value)):e.checkedLink?(i(e),e.checkedLink.requestChange(t.target.checked)):e.onChange?e.onChange.call(void 0,t):void 0}};t.exports=h}).call(this,e("_process"))},{"./ReactPropTypeLocations":240,"./ReactPropTypes":241,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],189:[function(e,t,n){"use strict";function r(e,t){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var n=Object(e),r=Object.prototype.hasOwnProperty,o=1;o<arguments.length;o++){var i=arguments[o];if(null!=i){var a=Object(i);for(var s in a)r.call(a,s)&&(n[s]=a[s])}}return n}t.exports=r},{}],190:[function(e,t,n){(function(n){"use strict";var r=e("fbjs/lib/invariant"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},a=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},s=function(e,t,n,r){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n,r),i}return new o(e,t,n,r)},u=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},c=function(e){var t=this;e instanceof t?void 0:"production"!==n.env.NODE_ENV?r(!1,"Trying to release an instance into a pool of a different type."):r(!1),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},l=10,p=o,f=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||p,n.poolSize||(n.poolSize=l),n.release=c,n},d={addPoolingTo:f,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:a,fourArgumentPooler:s,fiveArgumentPooler:u};t.exports=d}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],191:[function(e,t,n){"use strict";var r=e("./ReactDOM"),o=e("./ReactDOMServer"),i=e("./ReactIsomorphic"),a=e("./Object.assign"),s=e("./deprecated"),u={};a(u,i),a(u,{findDOMNode:s("findDOMNode","ReactDOM","react-dom",r,r.findDOMNode),render:s("render","ReactDOM","react-dom",r,r.render),unmountComponentAtNode:s("unmountComponentAtNode","ReactDOM","react-dom",r,r.unmountComponentAtNode),renderToString:s("renderToString","ReactDOMServer","react-dom/server",o,o.renderToString),renderToStaticMarkup:s("renderToStaticMarkup","ReactDOMServer","react-dom/server",o,o.renderToStaticMarkup)}),u.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=r,t.exports=u},{"./Object.assign":189,"./ReactDOM":202,"./ReactDOMServer":212,"./ReactIsomorphic":230,"./deprecated":272}],192:[function(e,t,n){(function(n){"use strict";var r=e("./ReactInstanceMap"),o=e("./findDOMNode"),i=e("fbjs/lib/warning"),a="_getDOMNodeDidWarn",s={getDOMNode:function(){return"production"!==n.env.NODE_ENV?i(this.constructor[a],"%s.getDOMNode(...) is deprecated. Please use ReactDOM.findDOMNode(instance) instead.",r.get(this).getName()||this.tagName||"Unknown"):void 0,this.constructor[a]=!0,o(this)}};t.exports=s}).call(this,e("_process"))},{"./ReactInstanceMap":229,"./findDOMNode":274,_process:114,"fbjs/lib/warning":45}],193:[function(e,t,n){"use strict";function r(e){return Object.prototype.hasOwnProperty.call(e,m)||(e[m]=h++,f[e[m]]={}),f[e[m]]}var o=e("./EventConstants"),i=e("./EventPluginHub"),a=e("./EventPluginRegistry"),s=e("./ReactEventEmitterMixin"),u=e("./ReactPerf"),c=e("./ViewportMetrics"),l=e("./Object.assign"),p=e("./isEventSupported"),f={},d=!1,h=0,v={topAbort:"abort",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},m="_reactListenersID"+String(Math.random()).slice(2),g=l({},s,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(g.handleTopLevel),g.ReactEventListener=e}},setEnabled:function(e){g.ReactEventListener&&g.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!g.ReactEventListener||!g.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,i=r(n),s=a.registrationNameDependencies[e],u=o.topLevelTypes,c=0;c<s.length;c++){var l=s[c];i.hasOwnProperty(l)&&i[l]||(l===u.topWheel?p("wheel")?g.ReactEventListener.trapBubbledEvent(u.topWheel,"wheel",n):p("mousewheel")?g.ReactEventListener.trapBubbledEvent(u.topWheel,"mousewheel",n):g.ReactEventListener.trapBubbledEvent(u.topWheel,"DOMMouseScroll",n):l===u.topScroll?p("scroll",!0)?g.ReactEventListener.trapCapturedEvent(u.topScroll,"scroll",n):g.ReactEventListener.trapBubbledEvent(u.topScroll,"scroll",g.ReactEventListener.WINDOW_HANDLE):l===u.topFocus||l===u.topBlur?(p("focus",!0)?(g.ReactEventListener.trapCapturedEvent(u.topFocus,"focus",n),g.ReactEventListener.trapCapturedEvent(u.topBlur,"blur",n)):p("focusin")&&(g.ReactEventListener.trapBubbledEvent(u.topFocus,"focusin",n),g.ReactEventListener.trapBubbledEvent(u.topBlur,"focusout",n)),i[u.topBlur]=!0,i[u.topFocus]=!0):v.hasOwnProperty(l)&&g.ReactEventListener.trapBubbledEvent(l,v[l],n),i[l]=!0)}},trapBubbledEvent:function(e,t,n){return g.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return g.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!d){var e=c.refreshScrollValues;g.ReactEventListener.monitorScrollValue(e),d=!0}},eventNameDispatchConfigs:i.eventNameDispatchConfigs,registrationNameModules:i.registrationNameModules,putListener:i.putListener,getListener:i.getListener,deleteListener:i.deleteListener,deleteAllListeners:i.deleteAllListeners});u.measureMethods(g,"ReactBrowserEventEmitter",{putListener:"putListener",deleteListener:"deleteListener"}),t.exports=g},{"./EventConstants":181,"./EventPluginHub":182,"./EventPluginRegistry":183,"./Object.assign":189,"./ReactEventEmitterMixin":224,"./ReactPerf":238,"./ViewportMetrics":268,"./isEventSupported":285}],194:[function(e,t,n){(function(n){"use strict";function r(e,t,r){var o=void 0===e[r];"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?u(o,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):void 0),null!=t&&o&&(e[r]=i(t,null))}var o=e("./ReactReconciler"),i=e("./instantiateReactComponent"),a=e("./shouldUpdateReactComponent"),s=e("./traverseAllChildren"),u=e("fbjs/lib/warning"),c={instantiateChildren:function(e,t,n){if(null==e)return null;var o={};return s(e,r,o),o},updateChildren:function(e,t,n,r){if(!t&&!e)return null;var s;for(s in t)if(t.hasOwnProperty(s)){var u=e&&e[s],c=u&&u._currentElement,l=t[s];if(null!=u&&a(c,l))o.receiveComponent(u,l,n,r),t[s]=u;else{u&&o.unmountComponent(u,s);var p=i(l,null);t[s]=p}}for(s in e)!e.hasOwnProperty(s)||t&&t.hasOwnProperty(s)||o.unmountComponent(e[s]);return t},unmountChildren:function(e){for(var t in e)if(e.hasOwnProperty(t)){var n=e[t];o.unmountComponent(n)}}};t.exports=c}).call(this,e("_process"))},{"./ReactReconciler":243,"./instantiateReactComponent":284,"./shouldUpdateReactComponent":292,"./traverseAllChildren":293,_process:114,"fbjs/lib/warning":45}],195:[function(e,t,n){"use strict";function r(e){return(""+e).replace(_,"//")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function a(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);g(e,i,r),o.release(r)}function s(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function u(e,t,n){var o=e.result,i=e.keyPrefix,a=e.func,s=e.context,u=a.call(s,t,e.count++);Array.isArray(u)?c(u,o,n,m.thatReturnsArgument):null!=u&&(v.isValidElement(u)&&(u=v.cloneAndReplaceKey(u,i+(u!==t?r(u.key||"")+"/":"")+n)),o.push(u))}function c(e,t,n,o,i){var a="";null!=n&&(a=r(n)+"/");var c=s.getPooled(t,a,o,i);g(e,u,c),s.release(c)}function l(e,t,n){if(null==e)return e;var r=[];return c(e,r,null,t,n),r}function p(e,t,n){return null}function f(e,t){return g(e,p,null)}function d(e){var t=[];return c(e,t,null,m.thatReturnsArgument),t}var h=e("./PooledClass"),v=e("./ReactElement"),m=e("fbjs/lib/emptyFunction"),g=e("./traverseAllChildren"),y=h.twoArgumentPooler,b=h.fourArgumentPooler,_=/\/(?!\/)/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(o,y),s.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(s,b);var E={forEach:a,map:l,mapIntoWithKeyPrefixInternal:c,count:f,toArray:d};t.exports=E},{"./PooledClass":190,"./ReactElement":219,"./traverseAllChildren":293,"fbjs/lib/emptyFunction":26}],196:[function(e,t,n){(function(n){"use strict";function r(){D||(D=!0,"production"!==n.env.NODE_ENV?O(!1,"setProps(...) and replaceProps(...) are deprecated. Instead, call render again at the top level."):void 0)}function o(e,t,r){for(var o in t)t.hasOwnProperty(o)&&("production"!==n.env.NODE_ENV?O("function"==typeof t[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",m[r],o):void 0)}function i(e,t){var r=R.hasOwnProperty(t)?R[t]:null;P.hasOwnProperty(t)&&(r!==x.OVERRIDE_BASE?"production"!==n.env.NODE_ENV?_(!1,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t):_(!1):void 0),e.hasOwnProperty(t)&&(r!==x.DEFINE_MANY&&r!==x.DEFINE_MANY_MERGED?"production"!==n.env.NODE_ENV?_(!1,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t):_(!1):void 0)}function a(e,t){if(t){"function"==typeof t?"production"!==n.env.NODE_ENV?_(!1,"ReactClass: You're attempting to use a component class as a mixin. Instead, just use a regular object."):_(!1):void 0,h.isValidElement(t)?"production"!==n.env.NODE_ENV?_(!1,"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."):_(!1):void 0;var r=e.prototype;t.hasOwnProperty(C)&&T.mixins(e,t.mixins);for(var o in t)if(t.hasOwnProperty(o)&&o!==C){var a=t[o];if(i(r,o),T.hasOwnProperty(o))T[o](e,a);else{var s=R.hasOwnProperty(o),u=r.hasOwnProperty(o),p="function"==typeof a,f=p&&!s&&!u&&t.autobind!==!1;if(f)r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[o]=a,r[o]=a;else if(u){var d=R[o];!s||d!==x.DEFINE_MANY_MERGED&&d!==x.DEFINE_MANY?"production"!==n.env.NODE_ENV?_(!1,"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",d,o):_(!1):void 0,d===x.DEFINE_MANY_MERGED?r[o]=c(r[o],a):d===x.DEFINE_MANY&&(r[o]=l(r[o],a))}else r[o]=a,"production"!==n.env.NODE_ENV&&"function"==typeof a&&t.displayName&&(r[o].displayName=t.displayName+"_"+o)}}}}function s(e,t){if(t)for(var r in t){var o=t[r];if(t.hasOwnProperty(r)){var i=r in T;i?"production"!==n.env.NODE_ENV?_(!1,'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',r):_(!1):void 0;var a=r in e;a?"production"!==n.env.NODE_ENV?_(!1,"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r):_(!1):void 0,e[r]=o}}}function u(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:"production"!==n.env.NODE_ENV?_(!1,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."):_(!1);for(var r in t)t.hasOwnProperty(r)&&(void 0!==e[r]?"production"!==n.env.NODE_ENV?_(!1,"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",r):_(!1):void 0,e[r]=t[r]);return e}function c(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return u(o,n),u(o,r),o}}function l(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function p(e,t){var r=t.bind(e);if("production"!==n.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=t,r.__reactBoundArguments=null;var o=e.constructor.displayName,i=r.bind;r.bind=function(a){for(var s=arguments.length,u=Array(s>1?s-1:0),c=1;s>c;c++)u[c-1]=arguments[c];if(a!==e&&null!==a)"production"!==n.env.NODE_ENV?O(!1,"bind(): React component methods may only be bound to the component instance. See %s",o):void 0;else if(!u.length)return"production"!==n.env.NODE_ENV?O(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o):void 0,r;var l=i.apply(r,arguments);return l.__reactBoundContext=e,l.__reactBoundMethod=t,l.__reactBoundArguments=u,l}}return r}function f(e){for(var t in e.__reactAutoBindMap)if(e.__reactAutoBindMap.hasOwnProperty(t)){var n=e.__reactAutoBindMap[t];e[t]=p(e,n)}}var d=e("./ReactComponent"),h=e("./ReactElement"),v=e("./ReactPropTypeLocations"),m=e("./ReactPropTypeLocationNames"),g=e("./ReactNoopUpdateQueue"),y=e("./Object.assign"),b=e("fbjs/lib/emptyObject"),_=e("fbjs/lib/invariant"),E=e("fbjs/lib/keyMirror"),w=e("fbjs/lib/keyOf"),O=e("fbjs/lib/warning"),C=w({mixins:null}),x=E({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),N=[],D=!1,R={mixins:x.DEFINE_MANY,statics:x.DEFINE_MANY,propTypes:x.DEFINE_MANY,contextTypes:x.DEFINE_MANY,childContextTypes:x.DEFINE_MANY,getDefaultProps:x.DEFINE_MANY_MERGED,getInitialState:x.DEFINE_MANY_MERGED,getChildContext:x.DEFINE_MANY_MERGED,render:x.DEFINE_ONCE,componentWillMount:x.DEFINE_MANY,componentDidMount:x.DEFINE_MANY,componentWillReceiveProps:x.DEFINE_MANY,shouldComponentUpdate:x.DEFINE_ONCE,componentWillUpdate:x.DEFINE_MANY,componentDidUpdate:x.DEFINE_MANY,componentWillUnmount:x.DEFINE_MANY,updateComponent:x.OVERRIDE_BASE},T={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)a(e,t[n])},childContextTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.childContext),e.childContextTypes=y({},e.childContextTypes,t)},contextTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.context),e.contextTypes=y({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=c(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){"production"!==n.env.NODE_ENV&&o(e,t,v.prop),e.propTypes=y({},e.propTypes,t)},statics:function(e,t){s(e,t)},autobind:function(){}},P={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t)},isMounted:function(){return this.updater.isMounted(this)},setProps:function(e,t){"production"!==n.env.NODE_ENV&&r(),this.updater.enqueueSetProps(this,e),t&&this.updater.enqueueCallback(this,t)},replaceProps:function(e,t){"production"!==n.env.NODE_ENV&&r(),this.updater.enqueueReplaceProps(this,e),t&&this.updater.enqueueCallback(this,t);
}},k=function(){};y(k.prototype,d.prototype,P);var M={createClass:function(e){var t=function(e,r,o){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?O(this instanceof t,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"):void 0),this.__reactAutoBindMap&&f(this),this.props=e,this.context=r,this.refs=b,this.updater=o||g,this.state=null;var i=this.getInitialState?this.getInitialState():null;"production"!==n.env.NODE_ENV&&"undefined"==typeof i&&this.getInitialState._isMockFunction&&(i=null),"object"!=typeof i||Array.isArray(i)?"production"!==n.env.NODE_ENV?_(!1,"%s.getInitialState(): must return an object or null",t.displayName||"ReactCompositeComponent"):_(!1):void 0,this.state=i};t.prototype=new k,t.prototype.constructor=t,N.forEach(a.bind(null,t)),a(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),"production"!==n.env.NODE_ENV&&(t.getDefaultProps&&(t.getDefaultProps.isReactClassApproved={}),t.prototype.getInitialState&&(t.prototype.getInitialState.isReactClassApproved={})),t.prototype.render?void 0:"production"!==n.env.NODE_ENV?_(!1,"createClass(...): Class specification must implement a `render` method."):_(!1),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?O(!t.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"):void 0,"production"!==n.env.NODE_ENV?O(!t.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component"):void 0);for(var r in R)t.prototype[r]||(t.prototype[r]=null);return t},injection:{injectMixin:function(e){N.push(e)}}};t.exports=M}).call(this,e("_process"))},{"./Object.assign":189,"./ReactComponent":197,"./ReactElement":219,"./ReactNoopUpdateQueue":236,"./ReactPropTypeLocationNames":239,"./ReactPropTypeLocations":240,_process:114,"fbjs/lib/emptyObject":27,"fbjs/lib/invariant":34,"fbjs/lib/keyMirror":37,"fbjs/lib/keyOf":38,"fbjs/lib/warning":45}],197:[function(e,t,n){(function(n){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||o}var o=e("./ReactNoopUpdateQueue"),i=e("fbjs/lib/emptyObject"),a=e("fbjs/lib/invariant"),s=e("fbjs/lib/warning");if(r.prototype.isReactComponent={},r.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?"production"!==n.env.NODE_ENV?a(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):a(!1):void 0,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(null!=e,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):void 0),this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t)},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e)},"production"!==n.env.NODE_ENV){var u={getDOMNode:["getDOMNode","Use ReactDOM.findDOMNode(component) instead."],isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceProps:["replaceProps","Instead, call render again at the top level."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."],setProps:["setProps","Instead, call render again at the top level."]},c=function(e,t){try{Object.defineProperty(r.prototype,e,{get:function(){return void("production"!==n.env.NODE_ENV?s(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1]):void 0)}})}catch(o){}};for(var l in u)u.hasOwnProperty(l)&&c(l,u[l])}t.exports=r}).call(this,e("_process"))},{"./ReactNoopUpdateQueue":236,_process:114,"fbjs/lib/emptyObject":27,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],198:[function(e,t,n){"use strict";var r=e("./ReactDOMIDOperations"),o=e("./ReactMount"),i={processChildrenUpdates:r.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkupByID:r.dangerouslyReplaceNodeWithMarkupByID,unmountIDFromEnvironment:function(e){o.purgeID(e)}};t.exports=i},{"./ReactDOMIDOperations":207,"./ReactMount":232}],199:[function(e,t,n){(function(n){"use strict";var r=e("fbjs/lib/invariant"),o=!1,i={unmountIDFromEnvironment:null,replaceNodeWithMarkupByID:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){o?"production"!==n.env.NODE_ENV?r(!1,"ReactCompositeComponent: injectEnvironment() can only be called once."):r(!1):void 0,i.unmountIDFromEnvironment=e.unmountIDFromEnvironment,i.replaceNodeWithMarkupByID=e.replaceNodeWithMarkupByID,i.processChildrenUpdates=e.processChildrenUpdates,o=!0}}};t.exports=i}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],200:[function(e,t,n){(function(n){"use strict";function r(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}function o(e){}var i=e("./ReactComponentEnvironment"),a=e("./ReactCurrentOwner"),s=e("./ReactElement"),u=e("./ReactInstanceMap"),c=e("./ReactPerf"),l=e("./ReactPropTypeLocations"),p=e("./ReactPropTypeLocationNames"),f=e("./ReactReconciler"),d=e("./ReactUpdateQueue"),h=e("./Object.assign"),v=e("fbjs/lib/emptyObject"),m=e("fbjs/lib/invariant"),g=e("./shouldUpdateReactComponent"),y=e("fbjs/lib/warning");o.prototype.render=function(){var e=u.get(this)._currentElement.type;return e(this.props,this.context,this.updater)};var b=1,_={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null},mountComponent:function(e,t,r){this._context=r,this._mountOrder=b++,this._rootNodeID=e;var i,c,l=this._processProps(this._currentElement.props),p=this._processContext(r),h=this._currentElement.type,g="prototype"in h;if(g)if("production"!==n.env.NODE_ENV){a.current=this;try{i=new h(l,p,d)}finally{a.current=null}}else i=new h(l,p,d);(!g||null===i||i===!1||s.isValidElement(i))&&(c=i,i=new o(h)),"production"!==n.env.NODE_ENV&&(null==i.render?"production"!==n.env.NODE_ENV?y(!1,"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`, returned null/false from a stateless component, or tried to render an element whose type is a function that isn't a React component.",h.displayName||h.name||"Component"):void 0:"production"!==n.env.NODE_ENV?y(h.prototype&&h.prototype.isReactComponent||!g||!(i instanceof h),"%s(...): React component classes must extend React.Component.",h.displayName||h.name||"Component"):void 0),i.props=l,i.context=p,i.refs=v,i.updater=d,this._instance=i,u.set(i,this),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?y(!i.getInitialState||i.getInitialState.isReactClassApproved,"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",this.getName()||"a component"):void 0,"production"!==n.env.NODE_ENV?y(!i.getDefaultProps||i.getDefaultProps.isReactClassApproved,"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",this.getName()||"a component"):void 0,"production"!==n.env.NODE_ENV?y(!i.propTypes,"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",this.getName()||"a component"):void 0,"production"!==n.env.NODE_ENV?y(!i.contextTypes,"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",this.getName()||"a component"):void 0,"production"!==n.env.NODE_ENV?y("function"!=typeof i.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",this.getName()||"A component"):void 0,"production"!==n.env.NODE_ENV?y("function"!=typeof i.componentDidUnmount,"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",this.getName()||"A component"):void 0,"production"!==n.env.NODE_ENV?y("function"!=typeof i.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",this.getName()||"A component"):void 0);var _=i.state;void 0===_&&(i.state=_=null),"object"!=typeof _||Array.isArray(_)?"production"!==n.env.NODE_ENV?m(!1,"%s.state: must be set to an object or null",this.getName()||"ReactCompositeComponent"):m(!1):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,i.componentWillMount&&(i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===c&&(c=this._renderValidatedComponent()),this._renderedComponent=this._instantiateReactComponent(c);var E=f.mountComponent(this._renderedComponent,e,t,this._processChildContext(r));return i.componentDidMount&&t.getReactMountReady().enqueue(i.componentDidMount,i),E},unmountComponent:function(){var e=this._instance;e.componentWillUnmount&&e.componentWillUnmount(),f.unmountComponent(this._renderedComponent),this._renderedComponent=null,this._instance=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,u.remove(e)},_maskContext:function(e){var t=null,n=this._currentElement.type,r=n.contextTypes;if(!r)return v;t={};for(var o in r)t[o]=e[o];return t},_processContext:function(e){var t=this._maskContext(e);if("production"!==n.env.NODE_ENV){var r=this._currentElement.type;r.contextTypes&&this._checkPropTypes(r.contextTypes,t,l.context)}return t},_processChildContext:function(e){var t=this._currentElement.type,r=this._instance,o=r.getChildContext&&r.getChildContext();if(o){"object"!=typeof t.childContextTypes?"production"!==n.env.NODE_ENV?m(!1,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",this.getName()||"ReactCompositeComponent"):m(!1):void 0,"production"!==n.env.NODE_ENV&&this._checkPropTypes(t.childContextTypes,o,l.childContext);for(var i in o)i in t.childContextTypes?void 0:"production"!==n.env.NODE_ENV?m(!1,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',this.getName()||"ReactCompositeComponent",i):m(!1);return h({},e,o)}return e},_processProps:function(e){if("production"!==n.env.NODE_ENV){var t=this._currentElement.type;t.propTypes&&this._checkPropTypes(t.propTypes,e,l.prop)}return e},_checkPropTypes:function(e,t,o){var i=this.getName();for(var a in e)if(e.hasOwnProperty(a)){var s;try{"function"!=typeof e[a]?"production"!==n.env.NODE_ENV?m(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",i||"React class",p[o],a):m(!1):void 0,s=e[a](t,a,i,o)}catch(u){s=u}if(s instanceof Error){var c=r(this);o===l.prop?"production"!==n.env.NODE_ENV?y(!1,"Failed Composite propType: %s%s",s.message,c):void 0:"production"!==n.env.NODE_ENV?y(!1,"Failed Context Types: %s%s",s.message,c):void 0}}},receiveComponent:function(e,t,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(t,r,e,o,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement&&f.receiveComponent(this,this._pendingElement||this._currentElement,e,this._context),(null!==this._pendingStateQueue||this._pendingForceUpdate)&&this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context)},updateComponent:function(e,t,r,o,i){var a,s=this._instance,u=this._context===i?s.context:this._processContext(i);t===r?a=r.props:(a=this._processProps(r.props),s.componentWillReceiveProps&&s.componentWillReceiveProps(a,u));var c=this._processPendingState(a,u),l=this._pendingForceUpdate||!s.shouldComponentUpdate||s.shouldComponentUpdate(a,c,u);"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?y("undefined"!=typeof l,"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",this.getName()||"ReactCompositeComponent"):void 0),l?(this._pendingForceUpdate=!1,this._performComponentUpdate(r,a,c,u,e,i)):(this._currentElement=r,this._context=i,s.props=a,s.state=c,s.context=u)},_processPendingState:function(e,t){var n=this._instance,r=this._pendingStateQueue,o=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(o&&1===r.length)return r[0];for(var i=h({},o?r[0]:n.state),a=o?1:0;a<r.length;a++){var s=r[a];h(i,"function"==typeof s?s.call(n,i,e,t):s)}return i},_performComponentUpdate:function(e,t,n,r,o,i){var a,s,u,c=this._instance,l=Boolean(c.componentDidUpdate);l&&(a=c.props,s=c.state,u=c.context),c.componentWillUpdate&&c.componentWillUpdate(t,n,r),this._currentElement=e,this._context=i,c.props=t,c.state=n,c.context=r,this._updateRenderedComponent(o,i),l&&o.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,s,u),c)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(g(r,o))f.receiveComponent(n,o,e,this._processChildContext(t));else{var i=this._rootNodeID,a=n._rootNodeID;f.unmountComponent(n),this._renderedComponent=this._instantiateReactComponent(o);var s=f.mountComponent(this._renderedComponent,i,e,this._processChildContext(t));this._replaceNodeWithMarkupByID(a,s)}},_replaceNodeWithMarkupByID:function(e,t){i.replaceNodeWithMarkupByID(e,t)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return"production"!==n.env.NODE_ENV&&"undefined"==typeof t&&e.render._isMockFunction&&(t=null),t},_renderValidatedComponent:function(){var e;a.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{a.current=null}return null===e||e===!1||s.isValidElement(e)?void 0:"production"!==n.env.NODE_ENV?m(!1,"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.getName()||"ReactCompositeComponent"):m(!1),e},attachRef:function(e,t){var r=this.getPublicInstance();null==r?"production"!==n.env.NODE_ENV?m(!1,"Stateless function components cannot have refs."):m(!1):void 0;var o=t.getPublicInstance();if("production"!==n.env.NODE_ENV){var i=t&&t.getName?t.getName():"a component";"production"!==n.env.NODE_ENV?y(null!=o,'Stateless function components cannot be given refs (See ref "%s" in %s created by %s). Attempts to access this ref will fail.',e,i,this.getName()):void 0}var a=r.refs===v?r.refs={}:r.refs;a[e]=o},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return e instanceof o?null:e},_instantiateReactComponent:null};c.measureMethods(_,"ReactCompositeComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent",_renderValidatedComponent:"_renderValidatedComponent"});var E={Mixin:_};t.exports=E}).call(this,e("_process"))},{"./Object.assign":189,"./ReactComponentEnvironment":199,"./ReactCurrentOwner":201,"./ReactElement":219,"./ReactInstanceMap":229,"./ReactPerf":238,"./ReactPropTypeLocationNames":239,"./ReactPropTypeLocations":240,"./ReactReconciler":243,"./ReactUpdateQueue":249,"./shouldUpdateReactComponent":292,_process:114,"fbjs/lib/emptyObject":27,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],201:[function(e,t,n){"use strict";var r={current:null};t.exports=r},{}],202:[function(e,t,n){(function(n){"use strict";var r=e("./ReactCurrentOwner"),o=e("./ReactDOMTextComponent"),i=e("./ReactDefaultInjection"),a=e("./ReactInstanceHandles"),s=e("./ReactMount"),u=e("./ReactPerf"),c=e("./ReactReconciler"),l=e("./ReactUpdates"),p=e("./ReactVersion"),f=e("./findDOMNode"),d=e("./renderSubtreeIntoContainer"),h=e("fbjs/lib/warning");i.inject();var v=u.measure("React","render",s.render),m={findDOMNode:f,render:v,unmountComponentAtNode:s.unmountComponentAtNode,version:p,unstable_batchedUpdates:l.batchedUpdates,unstable_renderSubtreeIntoContainer:d};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({CurrentOwner:r,InstanceHandles:a,Mount:s,Reconciler:c,TextComponent:o}),"production"!==n.env.NODE_ENV){var g=e("fbjs/lib/ExecutionEnvironment");if(g.canUseDOM&&window.top===window.self){"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)&&console.debug("Download the React DevTools for a better development experience: https://fb.me/react-devtools");var y=document.documentMode&&document.documentMode<8;"production"!==n.env.NODE_ENV?h(!y,'Internet Explorer is running in compatibility mode; please add the following tag to your HTML to prevent this from happening: <meta http-equiv="X-UA-Compatible" content="IE=edge" />'):void 0;for(var b=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],_=0;_<b.length;_++)if(!b[_]){console.error("One or more ES5 shim/shams expected by React are not available: https://fb.me/react-warning-polyfills");break}}}t.exports=m}).call(this,e("_process"))},{"./ReactCurrentOwner":201,"./ReactDOMTextComponent":213,"./ReactDefaultInjection":216,"./ReactInstanceHandles":228,"./ReactMount":232,"./ReactPerf":238,"./ReactReconciler":243,"./ReactUpdates":250,"./ReactVersion":251,"./findDOMNode":274,"./renderSubtreeIntoContainer":289,_process:114,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/warning":45}],203:[function(e,t,n){"use strict";var r={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},o={getNativeProps:function(e,t,n){if(!t.disabled)return t;var o={};for(var i in t)t.hasOwnProperty(i)&&!r[i]&&(o[i]=t[i]);return o}};t.exports=o},{}],204:[function(e,t,n){(function(n){"use strict";function r(e){if(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}function o(){if("production"!==n.env.NODE_ENV){var e=this._reactInternalComponent;"production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .getDOMNode() of a DOM node; instead, use the node directly.%s",r(e)):void 0}return this}function i(){var e=this._reactInternalComponent;return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .isMounted() of a DOM node.%s",r(e)):void 0),!!e}function a(){if("production"!==n.env.NODE_ENV){var e=this._reactInternalComponent;"production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .setState(), .replaceState(), or .forceUpdate() of a DOM node. This is a no-op.%s",r(e)):void 0}}function s(e,t){var o=this._reactInternalComponent;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .setProps() of a DOM node. Instead, call ReactDOM.render again at the top level.%s",r(o)):void 0),o&&(A.enqueueSetPropsInternal(o,e),t&&A.enqueueCallbackInternal(o,t))}function u(e,t){var o=this._reactInternalComponent;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .replaceProps() of a DOM node. Instead, call ReactDOM.render again at the top level.%s",r(o)):void 0),o&&(A.enqueueReplacePropsInternal(o,e),t&&A.enqueueCallbackInternal(o,t))}function c(e){if("object"==typeof e){if(Array.isArray(e))return"["+e.map(c).join(", ")+"]";var t=[];for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=/^[a-z$_][\w$_]*$/i.test(n)?n:JSON.stringify(n);t.push(r+": "+c(e[n]))}return"{"+t.join(", ")+"}"}return"string"==typeof e?JSON.stringify(e):"function"==typeof e?"[function object]":String(e)}function l(e,t,r){if(null!=e&&null!=t&&!W(e,t)){var o,i=r._tag,a=r._currentElement._owner;a&&(o=a.getName());var s=o+"|"+i;ne.hasOwnProperty(s)||(ne[s]=!0,"production"!==n.env.NODE_ENV?$(!1,"`%s` was passed a style object that has previously been mutated. Mutating `style` is deprecated. Consider cloning it beforehand. Check the `render` %s. Previous style: %s. Mutated style: %s.",i,a?"of `"+o+"`":"using <"+i+">",c(e),c(t)):void 0)}}function p(e,t){t&&("production"!==n.env.NODE_ENV&&ae[e._tag]&&("production"!==n.env.NODE_ENV?$(null==t.children&&null==t.dangerouslySetInnerHTML,"%s is a void element tag and must not have `children` or use `props.dangerouslySetInnerHTML`.%s",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":""):void 0),null!=t.dangerouslySetInnerHTML&&(null!=t.children?"production"!==n.env.NODE_ENV?U(!1,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):U(!1):void 0,"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML?void 0:"production"!==n.env.NODE_ENV?U(!1,"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information."):U(!1)),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?$(null==t.innerHTML,"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."):void 0,"production"!==n.env.NODE_ENV?$(!t.contentEditable||null==t.children,"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."):void 0),null!=t.style&&"object"!=typeof t.style?"production"!==n.env.NODE_ENV?U(!1,"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",r(e)):U(!1):void 0)}function f(e,t,r,o){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?$("onScroll"!==t||F("scroll",!0),"This browser doesn't support the `onScroll` event"):void 0);var i=S.findReactContainerForID(e);if(i){var a=i.nodeType===J?i.ownerDocument:i;Y(t,a)}o.getReactMountReady().enqueue(d,{id:e,registrationName:t,listener:r})}function d(){var e=this;N.putListener(e.id,e.registrationName,e.listener)}function h(){var e=this;e._rootNodeID?void 0:"production"!==n.env.NODE_ENV?U(!1,"Must be mounted to trap events"):U(!1);var t=S.getNode(e._rootNodeID);switch(t?void 0:"production"!==n.env.NODE_ENV?U(!1,"trapBubbledEvent(...): Requires node to be rendered."):U(!1),e._tag){case"iframe":e._wrapperState.listeners=[N.trapBubbledEvent(x.topLevelTypes.topLoad,"load",t)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var r in re)re.hasOwnProperty(r)&&e._wrapperState.listeners.push(N.trapBubbledEvent(x.topLevelTypes[r],re[r],t));break;case"img":e._wrapperState.listeners=[N.trapBubbledEvent(x.topLevelTypes.topError,"error",t),N.trapBubbledEvent(x.topLevelTypes.topLoad,"load",t)];break;case"form":e._wrapperState.listeners=[N.trapBubbledEvent(x.topLevelTypes.topReset,"reset",t),N.trapBubbledEvent(x.topLevelTypes.topSubmit,"submit",t)]}}function v(){T.mountReadyWrapper(this)}function m(){k.postUpdateWrapper(this)}function g(e){ce.call(ue,e)||(se.test(e)?void 0:"production"!==n.env.NODE_ENV?U(!1,"Invalid tag: %s",e):U(!1),ue[e]=!0)}function y(e,t){e=L({},e);var n=e[K.ancestorInfoContextKey];return e[K.ancestorInfoContextKey]=K.updatedAncestorInfo(n,t._tag,t),e}function b(e,t){return e.indexOf("-")>=0||null!=t.is}function _(e){g(e),this._tag=e.toLowerCase(),this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._rootNodeID=null,this._wrapperState=null,this._topLevelWrapper=null,this._nodeWithLegacyProperties=null,"production"!==n.env.NODE_ENV&&(this._unprocessedContextDev=null,this._processedContextDev=null)}var E=e("./AutoFocusUtils"),w=e("./CSSPropertyOperations"),O=e("./DOMProperty"),C=e("./DOMPropertyOperations"),x=e("./EventConstants"),N=e("./ReactBrowserEventEmitter"),D=e("./ReactComponentBrowserEnvironment"),R=e("./ReactDOMButton"),T=e("./ReactDOMInput"),P=e("./ReactDOMOption"),k=e("./ReactDOMSelect"),M=e("./ReactDOMTextarea"),S=e("./ReactMount"),j=e("./ReactMultiChild"),I=e("./ReactPerf"),A=e("./ReactUpdateQueue"),L=e("./Object.assign"),V=e("./escapeTextContentForBrowser"),U=e("fbjs/lib/invariant"),F=e("./isEventSupported"),B=e("fbjs/lib/keyOf"),H=e("./setInnerHTML"),q=e("./setTextContent"),W=e("fbjs/lib/shallowEqual"),K=e("./validateDOMNesting"),$=e("fbjs/lib/warning"),z=N.deleteListener,Y=N.listenTo,Q=N.registrationNameModules,X={string:!0,number:!0},G=B({style:null}),J=1,Z=!1;try{Object.defineProperty({},"test",{get:function(){}}),Z=!0}catch(ee){}var te;"production"!==n.env.NODE_ENV&&(te={props:{enumerable:!1,get:function(){var e=this._reactInternalComponent;return"production"!==n.env.NODE_ENV?$(!1,"ReactDOMComponent: Do not access .props of a DOM node; instead, recreate the props as `render` did originally or read the DOM properties/attributes directly from this node (e.g., this.refs.box.className).%s",r(e)):void 0,e._currentElement.props}}});var ne={},re={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},oe={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},ie={listing:!0,pre:!0,textarea:!0},ae=L({menuitem:!0},oe),se=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,ue={},ce={}.hasOwnProperty;_.displayName="ReactDOMComponent",_.Mixin={construct:function(e){this._currentElement=e},mountComponent:function(e,t,r){this._rootNodeID=e;var o=this._currentElement.props;switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":this._wrapperState={listeners:null},t.getReactMountReady().enqueue(h,this);break;case"button":o=R.getNativeProps(this,o,r);break;case"input":T.mountWrapper(this,o,r),o=T.getNativeProps(this,o,r);break;case"option":P.mountWrapper(this,o,r),o=P.getNativeProps(this,o,r);break;case"select":k.mountWrapper(this,o,r),o=k.getNativeProps(this,o,r),r=k.processChildContext(this,o,r);break;case"textarea":M.mountWrapper(this,o,r),o=M.getNativeProps(this,o,r)}p(this,o),"production"!==n.env.NODE_ENV&&r[K.ancestorInfoContextKey]&&K(this._tag,this,r[K.ancestorInfoContextKey]),"production"!==n.env.NODE_ENV&&(this._unprocessedContextDev=r,this._processedContextDev=y(r,this),r=this._processedContextDev);var i;if(t.useCreateElement){var a=r[S.ownerDocumentContextKey],s=a.createElement(this._currentElement.type);C.setAttributeForID(s,this._rootNodeID),S.getID(s),this._updateDOMProperties({},o,t,s),this._createInitialChildren(t,o,r,s),i=s}else{var u=this._createOpenTagMarkupAndPutListeners(t,o),c=this._createContentMarkup(t,o,r);i=!c&&oe[this._tag]?u+"/>":u+">"+c+"</"+this._currentElement.type+">"}switch(this._tag){case"input":t.getReactMountReady().enqueue(v,this);case"button":case"select":case"textarea":o.autoFocus&&t.getReactMountReady().enqueue(E.focusDOMComponent,this)}return i},_createOpenTagMarkupAndPutListeners:function(e,t){var r="<"+this._currentElement.type;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o];if(null!=i)if(Q.hasOwnProperty(o))i&&f(this._rootNodeID,o,i,e);else{o===G&&(i&&("production"!==n.env.NODE_ENV&&(this._previousStyle=i),i=this._previousStyleCopy=L({},t.style)),i=w.createMarkupForStyles(i));var a=null;a=null!=this._tag&&b(this._tag,t)?C.createMarkupForCustomAttribute(o,i):C.createMarkupForProperty(o,i),a&&(r+=" "+a)}}if(e.renderToStaticMarkup)return r;var s=C.createMarkupForID(this._rootNodeID);return r+" "+s},_createContentMarkup:function(e,t,n){var r="",o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&(r=o.__html);else{var i=X[typeof t.children]?t.children:null,a=null!=i?null:t.children;if(null!=i)r=V(i);else if(null!=a){var s=this.mountChildren(a,e,n);r=s.join("")}}return ie[this._tag]&&"\n"===r.charAt(0)?"\n"+r:r},_createInitialChildren:function(e,t,n,r){var o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&H(r,o.__html);else{var i=X[typeof t.children]?t.children:null,a=null!=i?null:t.children;if(null!=i)q(r,i);else if(null!=a)for(var s=this.mountChildren(a,e,n),u=0;u<s.length;u++)r.appendChild(s[u])}},receiveComponent:function(e,t,n){var r=this._currentElement;this._currentElement=e,this.updateComponent(t,r,e,n)},updateComponent:function(e,t,r,o){var i=t.props,a=this._currentElement.props;switch(this._tag){case"button":i=R.getNativeProps(this,i),a=R.getNativeProps(this,a);break;case"input":T.updateWrapper(this),i=T.getNativeProps(this,i),a=T.getNativeProps(this,a);break;case"option":i=P.getNativeProps(this,i),a=P.getNativeProps(this,a);break;case"select":i=k.getNativeProps(this,i),a=k.getNativeProps(this,a);break;case"textarea":M.updateWrapper(this),i=M.getNativeProps(this,i),a=M.getNativeProps(this,a)}"production"!==n.env.NODE_ENV&&(this._unprocessedContextDev!==o&&(this._unprocessedContextDev=o,this._processedContextDev=y(o,this)),o=this._processedContextDev),p(this,a),this._updateDOMProperties(i,a,e,null),this._updateDOMChildren(i,a,e,o),!Z&&this._nodeWithLegacyProperties&&(this._nodeWithLegacyProperties.props=a),"select"===this._tag&&e.getReactMountReady().enqueue(m,this)},_updateDOMProperties:function(e,t,r,o){var i,a,s;for(i in e)if(!t.hasOwnProperty(i)&&e.hasOwnProperty(i))if(i===G){var u=this._previousStyleCopy;for(a in u)u.hasOwnProperty(a)&&(s=s||{},s[a]="");this._previousStyleCopy=null}else Q.hasOwnProperty(i)?e[i]&&z(this._rootNodeID,i):(O.properties[i]||O.isCustomAttribute(i))&&(o||(o=S.getNode(this._rootNodeID)),C.deleteValueForProperty(o,i));for(i in t){var c=t[i],p=i===G?this._previousStyleCopy:e[i];if(t.hasOwnProperty(i)&&c!==p)if(i===G)if(c?("production"!==n.env.NODE_ENV&&(l(this._previousStyleCopy,this._previousStyle,this),this._previousStyle=c),c=this._previousStyleCopy=L({},c)):this._previousStyleCopy=null,p){for(a in p)!p.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(s=s||{},s[a]="");for(a in c)c.hasOwnProperty(a)&&p[a]!==c[a]&&(s=s||{},s[a]=c[a])}else s=c;else Q.hasOwnProperty(i)?c?f(this._rootNodeID,i,c,r):p&&z(this._rootNodeID,i):b(this._tag,t)?(o||(o=S.getNode(this._rootNodeID)),C.setValueForAttribute(o,i,c)):(O.properties[i]||O.isCustomAttribute(i))&&(o||(o=S.getNode(this._rootNodeID)),null!=c?C.setValueForProperty(o,i,c):C.deleteValueForProperty(o,i))}s&&(o||(o=S.getNode(this._rootNodeID)),w.setValueForStyles(o,s))},_updateDOMChildren:function(e,t,n,r){var o=X[typeof e.children]?e.children:null,i=X[typeof t.children]?t.children:null,a=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,s=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,u=null!=o?null:e.children,c=null!=i?null:t.children,l=null!=o||null!=a,p=null!=i||null!=s;null!=u&&null==c?this.updateChildren(null,n,r):l&&!p&&this.updateTextContent(""),
null!=i?o!==i&&this.updateTextContent(""+i):null!=s?a!==s&&this.updateMarkup(""+s):null!=c&&this.updateChildren(c,n,r)},unmountComponent:function(){switch(this._tag){case"iframe":case"img":case"form":case"video":case"audio":var e=this._wrapperState.listeners;if(e)for(var t=0;t<e.length;t++)e[t].remove();break;case"input":T.unmountWrapper(this);break;case"html":case"head":case"body":"production"!==n.env.NODE_ENV?U(!1,"<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this._tag):U(!1)}if(this.unmountChildren(),N.deleteAllListeners(this._rootNodeID),D.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._wrapperState=null,this._nodeWithLegacyProperties){var r=this._nodeWithLegacyProperties;r._reactInternalComponent=null,this._nodeWithLegacyProperties=null}},getPublicInstance:function(){if(!this._nodeWithLegacyProperties){var e=S.getNode(this._rootNodeID);e._reactInternalComponent=this,e.getDOMNode=o,e.isMounted=i,e.setState=a,e.replaceState=a,e.forceUpdate=a,e.setProps=s,e.replaceProps=u,"production"!==n.env.NODE_ENV&&Z?Object.defineProperties(e,te):e.props=this._currentElement.props,this._nodeWithLegacyProperties=e}return this._nodeWithLegacyProperties}},I.measureMethods(_,"ReactDOMComponent",{mountComponent:"mountComponent",updateComponent:"updateComponent"}),L(_.prototype,_.Mixin,j.Mixin),t.exports=_}).call(this,e("_process"))},{"./AutoFocusUtils":168,"./CSSPropertyOperations":171,"./DOMProperty":176,"./DOMPropertyOperations":177,"./EventConstants":181,"./Object.assign":189,"./ReactBrowserEventEmitter":193,"./ReactComponentBrowserEnvironment":198,"./ReactDOMButton":203,"./ReactDOMInput":208,"./ReactDOMOption":209,"./ReactDOMSelect":210,"./ReactDOMTextarea":214,"./ReactMount":232,"./ReactMultiChild":233,"./ReactPerf":238,"./ReactUpdateQueue":249,"./escapeTextContentForBrowser":273,"./isEventSupported":285,"./setInnerHTML":290,"./setTextContent":291,"./validateDOMNesting":294,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/keyOf":38,"fbjs/lib/shallowEqual":43,"fbjs/lib/warning":45}],205:[function(e,t,n){(function(n){"use strict";function r(e){return"production"!==n.env.NODE_ENV?i.createFactory(e):o.createFactory(e)}var o=e("./ReactElement"),i=e("./ReactElementValidator"),a=e("fbjs/lib/mapObject"),s=a({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);t.exports=s}).call(this,e("_process"))},{"./ReactElement":219,"./ReactElementValidator":220,_process:114,"fbjs/lib/mapObject":39}],206:[function(e,t,n){"use strict";var r={useCreateElement:!1};t.exports=r},{}],207:[function(e,t,n){(function(n){"use strict";var r=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactMount"),a=e("./ReactPerf"),s=e("fbjs/lib/invariant"),u={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},c={updatePropertyByID:function(e,t,r){var a=i.getNode(e);u.hasOwnProperty(t)?"production"!==n.env.NODE_ENV?s(!1,"updatePropertyByID(...): %s",u[t]):s(!1):void 0,null!=r?o.setValueForProperty(a,t,r):o.deleteValueForProperty(a,t)},dangerouslyReplaceNodeWithMarkupByID:function(e,t){var n=i.getNode(e);r.dangerouslyReplaceNodeWithMarkup(n,t)},dangerouslyProcessChildrenUpdates:function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=i.getNode(e[n].parentID);r.processUpdates(e,t)}};a.measureMethods(c,"ReactDOMIDOperations",{dangerouslyReplaceNodeWithMarkupByID:"dangerouslyReplaceNodeWithMarkupByID",dangerouslyProcessChildrenUpdates:"dangerouslyProcessChildrenUpdates"}),t.exports=c}).call(this,e("_process"))},{"./DOMChildrenOperations":175,"./DOMPropertyOperations":177,"./ReactMount":232,"./ReactPerf":238,_process:114,"fbjs/lib/invariant":34}],208:[function(e,t,n){(function(n){"use strict";function r(){this._rootNodeID&&f.updateWrapper(this)}function o(e){var t=this._currentElement.props,o=a.executeOnChange(t,e);u.asap(r,this);var i=t.name;if("radio"===t.type&&null!=i){for(var c=s.getNode(this._rootNodeID),f=c;f.parentNode;)f=f.parentNode;for(var d=f.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),h=0;h<d.length;h++){var v=d[h];if(v!==c&&v.form===c.form){var m=s.getID(v);m?void 0:"production"!==n.env.NODE_ENV?l(!1,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):l(!1);var g=p[m];g?void 0:"production"!==n.env.NODE_ENV?l(!1,"ReactDOMInput: Unknown radio button ID %s.",m):l(!1),u.asap(r,g)}}}return o}var i=e("./ReactDOMIDOperations"),a=e("./LinkedValueUtils"),s=e("./ReactMount"),u=e("./ReactUpdates"),c=e("./Object.assign"),l=e("fbjs/lib/invariant"),p={},f={getNativeProps:function(e,t,n){var r=a.getValue(t),o=a.getChecked(t),i=c({},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=r?r:e._wrapperState.initialValue,checked:null!=o?o:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return i},mountWrapper:function(e,t){"production"!==n.env.NODE_ENV&&a.checkPropTypes("input",t,e._currentElement._owner);var r=t.defaultValue;e._wrapperState={initialChecked:t.defaultChecked||!1,initialValue:null!=r?r:null,onChange:o.bind(e)}},mountReadyWrapper:function(e){p[e._rootNodeID]=e},unmountWrapper:function(e){delete p[e._rootNodeID]},updateWrapper:function(e){var t=e._currentElement.props,n=t.checked;null!=n&&i.updatePropertyByID(e._rootNodeID,"checked",n||!1);var r=a.getValue(t);null!=r&&i.updatePropertyByID(e._rootNodeID,"value",""+r)}};t.exports=f}).call(this,e("_process"))},{"./LinkedValueUtils":188,"./Object.assign":189,"./ReactDOMIDOperations":207,"./ReactMount":232,"./ReactUpdates":250,_process:114,"fbjs/lib/invariant":34}],209:[function(e,t,n){(function(n){"use strict";var r=e("./ReactChildren"),o=e("./ReactDOMSelect"),i=e("./Object.assign"),a=e("fbjs/lib/warning"),s=o.valueContextKey,u={mountWrapper:function(e,t,r){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?a(null==t.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):void 0);var o=r[s],i=null;if(null!=o)if(i=!1,Array.isArray(o)){for(var u=0;u<o.length;u++)if(""+o[u]==""+t.value){i=!0;break}}else i=""+o==""+t.value;e._wrapperState={selected:i}},getNativeProps:function(e,t,o){var s=i({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(s.selected=e._wrapperState.selected);var u="";return r.forEach(t.children,function(e){null!=e&&("string"==typeof e||"number"==typeof e?u+=e:"production"!==n.env.NODE_ENV?a(!1,"Only strings and numbers are supported as <option> children."):void 0)}),s.children=u,s}};t.exports=u}).call(this,e("_process"))},{"./Object.assign":189,"./ReactChildren":195,"./ReactDOMSelect":210,_process:114,"fbjs/lib/warning":45}],210:[function(e,t,n){(function(n){"use strict";function r(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=u.getValue(e);null!=t&&a(this,e,t)}}function o(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function i(e,t){var r=e._currentElement._owner;u.checkPropTypes("select",t,r);for(var i=0;i<h.length;i++){var a=h[i];null!=t[a]&&(t.multiple?"production"!==n.env.NODE_ENV?f(Array.isArray(t[a]),"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",a,o(r)):void 0:"production"!==n.env.NODE_ENV?f(!Array.isArray(t[a]),"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",a,o(r)):void 0)}}function a(e,t,n){var r,o,i=c.getNode(e._rootNodeID).options;if(t){for(r={},o=0;o<n.length;o++)r[""+n[o]]=!0;for(o=0;o<i.length;o++){var a=r.hasOwnProperty(i[o].value);i[o].selected!==a&&(i[o].selected=a)}}else{for(r=""+n,o=0;o<i.length;o++)if(i[o].value===r)return void(i[o].selected=!0);i.length&&(i[0].selected=!0)}}function s(e){var t=this._currentElement.props,n=u.executeOnChange(t,e);return this._wrapperState.pendingUpdate=!0,l.asap(r,this),n}var u=e("./LinkedValueUtils"),c=e("./ReactMount"),l=e("./ReactUpdates"),p=e("./Object.assign"),f=e("fbjs/lib/warning"),d="__ReactDOMSelect_value$"+Math.random().toString(36).slice(2),h=["value","defaultValue"],v={valueContextKey:d,getNativeProps:function(e,t,n){return p({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){"production"!==n.env.NODE_ENV&&i(e,t);var r=u.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=r?r:t.defaultValue,onChange:s.bind(e),wasMultiple:Boolean(t.multiple)}},processChildContext:function(e,t,n){var r=p({},n);return r[d]=e._wrapperState.initialValue,r},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var r=u.getValue(t);null!=r?(e._wrapperState.pendingUpdate=!1,a(e,Boolean(t.multiple),r)):n!==Boolean(t.multiple)&&(null!=t.defaultValue?a(e,Boolean(t.multiple),t.defaultValue):a(e,Boolean(t.multiple),t.multiple?[]:""))}};t.exports=v}).call(this,e("_process"))},{"./LinkedValueUtils":188,"./Object.assign":189,"./ReactMount":232,"./ReactUpdates":250,_process:114,"fbjs/lib/warning":45}],211:[function(e,t,n){"use strict";function r(e,t,n,r){return e===n&&t===r}function o(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var i=o.text.length,a=i+r;return{start:i,end:a}}function i(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,s=t.getRangeAt(0);try{s.startContainer.nodeType,s.endContainer.nodeType}catch(u){return null}var c=r(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),l=c?0:s.toString().length,p=s.cloneRange();p.selectNodeContents(e),p.setEnd(s.startContainer,s.startOffset);var f=r(p.startContainer,p.startOffset,p.endContainer,p.endOffset),d=f?0:p.toString().length,h=d+l,v=document.createRange();v.setStart(n,o),v.setEnd(i,a);var m=v.collapsed;return{start:m?h:d,end:m?d:h}}function a(e,t){var n,r,o=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function s(e,t){if(window.getSelection){var n=window.getSelection(),r=e[l()].length,o=Math.min(t.start,r),i="undefined"==typeof t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=c(e,o),u=c(e,i);if(s&&u){var p=document.createRange();p.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(p),n.extend(u.node,u.offset)):(p.setEnd(u.node,u.offset),n.addRange(p))}}}var u=e("fbjs/lib/ExecutionEnvironment"),c=e("./getNodeForCharacterOffset"),l=e("./getTextContentAccessor"),p=u.canUseDOM&&"selection"in document&&!("getSelection"in window),f={getOffsets:p?o:i,setOffsets:p?a:s};t.exports=f},{"./getNodeForCharacterOffset":282,"./getTextContentAccessor":283,"fbjs/lib/ExecutionEnvironment":20}],212:[function(e,t,n){"use strict";var r=e("./ReactDefaultInjection"),o=e("./ReactServerRendering"),i=e("./ReactVersion");r.inject();var a={renderToString:o.renderToString,renderToStaticMarkup:o.renderToStaticMarkup,version:i};t.exports=a},{"./ReactDefaultInjection":216,"./ReactServerRendering":247,"./ReactVersion":251}],213:[function(e,t,n){(function(n){"use strict";var r=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactComponentBrowserEnvironment"),a=e("./ReactMount"),s=e("./Object.assign"),u=e("./escapeTextContentForBrowser"),c=e("./setTextContent"),l=e("./validateDOMNesting"),p=function(e){};s(p.prototype,{construct:function(e){this._currentElement=e,this._stringText=""+e,this._rootNodeID=null,this._mountIndex=0},mountComponent:function(e,t,r){if("production"!==n.env.NODE_ENV&&r[l.ancestorInfoContextKey]&&l("span",null,r[l.ancestorInfoContextKey]),this._rootNodeID=e,t.useCreateElement){var i=r[a.ownerDocumentContextKey],s=i.createElement("span");return o.setAttributeForID(s,e),a.getID(s),c(s,this._stringText),s}var p=u(this._stringText);return t.renderToStaticMarkup?p:"<span "+o.createMarkupForID(e)+">"+p+"</span>"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var o=a.getNode(this._rootNodeID);r.updateTextContent(o,n)}}},unmountComponent:function(){i.unmountIDFromEnvironment(this._rootNodeID)}}),t.exports=p}).call(this,e("_process"))},{"./DOMChildrenOperations":175,"./DOMPropertyOperations":177,"./Object.assign":189,"./ReactComponentBrowserEnvironment":198,"./ReactMount":232,"./escapeTextContentForBrowser":273,"./setTextContent":291,"./validateDOMNesting":294,_process:114}],214:[function(e,t,n){(function(n){"use strict";function r(){this._rootNodeID&&p.updateWrapper(this)}function o(e){var t=this._currentElement.props,n=i.executeOnChange(t,e);return s.asap(r,this),n}var i=e("./LinkedValueUtils"),a=e("./ReactDOMIDOperations"),s=e("./ReactUpdates"),u=e("./Object.assign"),c=e("fbjs/lib/invariant"),l=e("fbjs/lib/warning"),p={getNativeProps:function(e,t,r){null!=t.dangerouslySetInnerHTML?"production"!==n.env.NODE_ENV?c(!1,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):c(!1):void 0;var o=u({},t,{defaultValue:void 0,value:void 0,children:e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return o},mountWrapper:function(e,t){"production"!==n.env.NODE_ENV&&i.checkPropTypes("textarea",t,e._currentElement._owner);var r=t.defaultValue,a=t.children;null!=a&&("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?l(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):void 0),null!=r?"production"!==n.env.NODE_ENV?c(!1,"If you supply `defaultValue` on a <textarea>, do not pass children."):c(!1):void 0,Array.isArray(a)&&(a.length<=1?void 0:"production"!==n.env.NODE_ENV?c(!1,"<textarea> can only have at most one child."):c(!1),a=a[0]),r=""+a),null==r&&(r="");var s=i.getValue(t);e._wrapperState={initialValue:""+(null!=s?s:r),onChange:o.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=i.getValue(t);null!=n&&a.updatePropertyByID(e._rootNodeID,"value",""+n)}};t.exports=p}).call(this,e("_process"))},{"./LinkedValueUtils":188,"./Object.assign":189,"./ReactDOMIDOperations":207,"./ReactUpdates":250,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],215:[function(e,t,n){"use strict";function r(){this.reinitializeTransaction()}var o=e("./ReactUpdates"),i=e("./Transaction"),a=e("./Object.assign"),s=e("fbjs/lib/emptyFunction"),u={initialize:s,close:function(){f.isBatchingUpdates=!1}},c={initialize:s,close:o.flushBatchedUpdates.bind(o)},l=[c,u];a(r.prototype,i.Mixin,{getTransactionWrappers:function(){return l}});var p=new r,f={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,r,o,i){var a=f.isBatchingUpdates;f.isBatchingUpdates=!0,a?e(t,n,r,o,i):p.perform(e,null,t,n,r,o,i)}};t.exports=f},{"./Object.assign":189,"./ReactUpdates":250,"./Transaction":267,"fbjs/lib/emptyFunction":26}],216:[function(e,t,n){(function(n){"use strict";function r(){if(!x&&(x=!0,g.EventEmitter.injectReactEventListener(m),g.EventPluginHub.injectEventPluginOrder(s),g.EventPluginHub.injectInstanceHandle(y),g.EventPluginHub.injectMount(b),g.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:O,EnterLeaveEventPlugin:u,ChangeEventPlugin:i,SelectEventPlugin:E,BeforeInputEventPlugin:o}),g.NativeComponent.injectGenericComponentClass(h),g.NativeComponent.injectTextComponentClass(v),g.Class.injectMixin(p),g.DOMProperty.injectDOMPropertyConfig(l),g.DOMProperty.injectDOMPropertyConfig(C),g.EmptyComponent.injectEmptyComponent("noscript"),g.Updates.injectReconcileTransaction(_),g.Updates.injectBatchingStrategy(d),g.RootIndex.injectCreateReactRootIndex(c.canUseDOM?a.createReactRootIndex:w.createReactRootIndex),g.Component.injectEnvironment(f),"production"!==n.env.NODE_ENV)){var t=c.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(t)){var r=e("./ReactDefaultPerf");r.start()}}}var o=e("./BeforeInputEventPlugin"),i=e("./ChangeEventPlugin"),a=e("./ClientReactRootIndex"),s=e("./DefaultEventPluginOrder"),u=e("./EnterLeaveEventPlugin"),c=e("fbjs/lib/ExecutionEnvironment"),l=e("./HTMLDOMPropertyConfig"),p=e("./ReactBrowserComponentMixin"),f=e("./ReactComponentBrowserEnvironment"),d=e("./ReactDefaultBatchingStrategy"),h=e("./ReactDOMComponent"),v=e("./ReactDOMTextComponent"),m=e("./ReactEventListener"),g=e("./ReactInjection"),y=e("./ReactInstanceHandles"),b=e("./ReactMount"),_=e("./ReactReconcileTransaction"),E=e("./SelectEventPlugin"),w=e("./ServerReactRootIndex"),O=e("./SimpleEventPlugin"),C=e("./SVGDOMPropertyConfig"),x=!1;t.exports={inject:r}}).call(this,e("_process"))},{"./BeforeInputEventPlugin":169,"./ChangeEventPlugin":173,"./ClientReactRootIndex":174,"./DefaultEventPluginOrder":179,"./EnterLeaveEventPlugin":180,"./HTMLDOMPropertyConfig":187,"./ReactBrowserComponentMixin":192,"./ReactComponentBrowserEnvironment":198,"./ReactDOMComponent":204,"./ReactDOMTextComponent":213,"./ReactDefaultBatchingStrategy":215,"./ReactDefaultPerf":217,"./ReactEventListener":225,"./ReactInjection":226,"./ReactInstanceHandles":228,"./ReactMount":232,"./ReactReconcileTransaction":242,"./SVGDOMPropertyConfig":252,"./SelectEventPlugin":253,"./ServerReactRootIndex":254,"./SimpleEventPlugin":255,_process:114,"fbjs/lib/ExecutionEnvironment":20}],217:[function(e,t,n){"use strict";function r(e){return Math.floor(100*e)/100}function o(e,t,n){e[t]=(e[t]||0)+n}var i=e("./DOMProperty"),a=e("./ReactDefaultPerfAnalysis"),s=e("./ReactMount"),u=e("./ReactPerf"),c=e("fbjs/lib/performanceNow"),l={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){l._injected||u.injection.injectMeasure(l.measure),l._allMeasurements.length=0,u.enableMeasure=!0},stop:function(){u.enableMeasure=!1},getLastMeasurements:function(){return l._allMeasurements},printExclusive:function(e){e=e||l._allMeasurements;var t=a.getExclusiveSummary(e);console.table(t.map(function(e){return{"Component class name":e.componentName,"Total inclusive time (ms)":r(e.inclusive),"Exclusive mount time (ms)":r(e.exclusive),"Exclusive render time (ms)":r(e.render),"Mount time per instance (ms)":r(e.exclusive/e.count),"Render time per instance (ms)":r(e.render/e.count),Instances:e.count}}))},printInclusive:function(e){e=e||l._allMeasurements;var t=a.getInclusiveSummary(e);console.table(t.map(function(e){return{"Owner > component":e.componentName,"Inclusive time (ms)":r(e.time),Instances:e.count}})),console.log("Total time:",a.getTotalTime(e).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(e){var t=a.getInclusiveSummary(e,!0);return t.map(function(e){return{"Owner > component":e.componentName,"Wasted time (ms)":e.time,Instances:e.count}})},printWasted:function(e){e=e||l._allMeasurements,console.table(l.getMeasurementsSummaryMap(e)),console.log("Total time:",a.getTotalTime(e).toFixed(2)+" ms")},printDOM:function(e){e=e||l._allMeasurements;var t=a.getDOMSummary(e);console.table(t.map(function(e){var t={};return t[i.ID_ATTRIBUTE_NAME]=e.id,t.type=e.type,t.args=JSON.stringify(e.args),t})),console.log("Total time:",a.getTotalTime(e).toFixed(2)+" ms")},_recordWrite:function(e,t,n,r){var o=l._allMeasurements[l._allMeasurements.length-1].writes;o[e]=o[e]||[],o[e].push({type:t,time:n,args:r})},measure:function(e,t,n){return function(){for(var r=arguments.length,i=Array(r),a=0;r>a;a++)i[a]=arguments[a];var u,p,f;if("_renderNewRootComponent"===t||"flushBatchedUpdates"===t)return l._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0,created:{}}),f=c(),p=n.apply(this,i),l._allMeasurements[l._allMeasurements.length-1].totalTime=c()-f,p;if("_mountImageIntoNode"===t||"ReactBrowserEventEmitter"===e||"ReactDOMIDOperations"===e||"CSSPropertyOperations"===e||"DOMChildrenOperations"===e||"DOMPropertyOperations"===e){if(f=c(),p=n.apply(this,i),u=c()-f,"_mountImageIntoNode"===t){var d=s.getID(i[1]);l._recordWrite(d,t,u,i[0])}else if("dangerouslyProcessChildrenUpdates"===t)i[0].forEach(function(e){var t={};null!==e.fromIndex&&(t.fromIndex=e.fromIndex),null!==e.toIndex&&(t.toIndex=e.toIndex),null!==e.textContent&&(t.textContent=e.textContent),null!==e.markupIndex&&(t.markup=i[1][e.markupIndex]),l._recordWrite(e.parentID,e.type,u,t)});else{var h=i[0];"object"==typeof h&&(h=s.getID(i[0])),l._recordWrite(h,t,u,Array.prototype.slice.call(i,1))}return p}if("ReactCompositeComponent"!==e||"mountComponent"!==t&&"updateComponent"!==t&&"_renderValidatedComponent"!==t)return n.apply(this,i);if(this._currentElement.type===s.TopLevelWrapper)return n.apply(this,i);var v="mountComponent"===t?i[0]:this._rootNodeID,m="_renderValidatedComponent"===t,g="mountComponent"===t,y=l._mountStack,b=l._allMeasurements[l._allMeasurements.length-1];if(m?o(b.counts,v,1):g&&(b.created[v]=!0,y.push(0)),f=c(),p=n.apply(this,i),u=c()-f,m)o(b.render,v,u);else if(g){var _=y.pop();y[y.length-1]+=u,o(b.exclusive,v,u-_),o(b.inclusive,v,u)}else o(b.inclusive,v,u);return b.displayNames[v]={current:this.getName(),owner:this._currentElement._owner?this._currentElement._owner.getName():"<root>"},p}}};t.exports=l},{"./DOMProperty":176,"./ReactDefaultPerfAnalysis":218,"./ReactMount":232,"./ReactPerf":238,"fbjs/lib/performanceNow":42}],218:[function(e,t,n){"use strict";function r(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];t+=r.totalTime}return t}function o(e){var t=[];return e.forEach(function(e){Object.keys(e.writes).forEach(function(n){e.writes[n].forEach(function(e){t.push({id:n,type:l[e.type]||e.type,args:e.args})})})}),t}function i(e){for(var t,n={},r=0;r<e.length;r++){var o=e[r],i=u({},o.exclusive,o.inclusive);for(var a in i)t=o.displayNames[a].current,n[t]=n[t]||{componentName:t,inclusive:0,exclusive:0,render:0,count:0},o.render[a]&&(n[t].render+=o.render[a]),o.exclusive[a]&&(n[t].exclusive+=o.exclusive[a]),o.inclusive[a]&&(n[t].inclusive+=o.inclusive[a]),o.counts[a]&&(n[t].count+=o.counts[a])}var s=[];for(t in n)n[t].exclusive>=c&&s.push(n[t]);return s.sort(function(e,t){return t.exclusive-e.exclusive}),s}function a(e,t){for(var n,r={},o=0;o<e.length;o++){var i,a=e[o],l=u({},a.exclusive,a.inclusive);t&&(i=s(a));for(var p in l)if(!t||i[p]){var f=a.displayNames[p];n=f.owner+" > "+f.current,r[n]=r[n]||{componentName:n,time:0,count:0},a.inclusive[p]&&(r[n].time+=a.inclusive[p]),a.counts[p]&&(r[n].count+=a.counts[p])}}var d=[];for(n in r)r[n].time>=c&&d.push(r[n]);return d.sort(function(e,t){return t.time-e.time}),d}function s(e){var t={},n=Object.keys(e.writes),r=u({},e.exclusive,e.inclusive);for(var o in r){for(var i=!1,a=0;a<n.length;a++)if(0===n[a].indexOf(o)){i=!0;break}e.created[o]&&(i=!0),!i&&e.counts[o]>0&&(t[o]=!0)}return t}var u=e("./Object.assign"),c=1.2,l={_mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",SET_MARKUP:"set innerHTML",TEXT_CONTENT:"set textContent",setValueForProperty:"update attribute",setValueForAttribute:"update attribute",deleteValueForProperty:"remove attribute",dangerouslyReplaceNodeWithMarkupByID:"replace"},p={getExclusiveSummary:i,getInclusiveSummary:a,getDOMSummary:o,getTotalTime:r};t.exports=p},{"./Object.assign":189}],219:[function(e,t,n){(function(n){"use strict";var r=e("./ReactCurrentOwner"),o=e("./Object.assign"),i="function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103,a={key:!0,ref:!0,__self:!0,__source:!0},s=!1;if("production"!==n.env.NODE_ENV)try{Object.defineProperty({},"x",{}),s=!0}catch(u){}var c=function(e,t,r,o,a,u,c){var l={$$typeof:i,type:e,key:t,ref:r,props:c,_owner:u};return"production"!==n.env.NODE_ENV&&(l._store={},s?(Object.defineProperty(l._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(l,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(l,"_source",{configurable:!1,enumerable:!1,writable:!1,value:a})):(l._store.validated=!1,l._self=o,l._source=a),Object.freeze(l.props),Object.freeze(l)),l};c.createElement=function(e,t,n){var o,i={},s=null,u=null,l=null,p=null;if(null!=t){u=void 0===t.ref?null:t.ref,s=void 0===t.key?null:""+t.key,l=void 0===t.__self?null:t.__self,p=void 0===t.__source?null:t.__source;for(o in t)t.hasOwnProperty(o)&&!a.hasOwnProperty(o)&&(i[o]=t[o])}var f=arguments.length-2;if(1===f)i.children=n;else if(f>1){for(var d=Array(f),h=0;f>h;h++)d[h]=arguments[h+2];i.children=d}if(e&&e.defaultProps){var v=e.defaultProps;for(o in v)"undefined"==typeof i[o]&&(i[o]=v[o])}return c(e,s,u,l,p,r.current,i)},c.createFactory=function(e){var t=c.createElement.bind(null,e);return t.type=e,t},c.cloneAndReplaceKey=function(e,t){var n=c(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},c.cloneAndReplaceProps=function(e,t){var r=c(e.type,e.key,e.ref,e._self,e._source,e._owner,t);return"production"!==n.env.NODE_ENV&&(r._store.validated=e._store.validated),r},c.cloneElement=function(e,t,n){var i,s=o({},e.props),u=e.key,l=e.ref,p=e._self,f=e._source,d=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,d=r.current),void 0!==t.key&&(u=""+t.key);for(i in t)t.hasOwnProperty(i)&&!a.hasOwnProperty(i)&&(s[i]=t[i])}var h=arguments.length-2;if(1===h)s.children=n;else if(h>1){for(var v=Array(h),m=0;h>m;m++)v[m]=arguments[m+2];s.children=v}return c(e.type,u,l,p,f,d,s)},c.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.exports=c}).call(this,e("_process"))},{"./Object.assign":189,"./ReactCurrentOwner":201,_process:114}],220:[function(e,t,n){(function(n){"use strict";function r(){if(f.current){var e=f.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=i("uniqueKey",e,t);null!==r&&("production"!==n.env.NODE_ENV?v(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s%s',r.parentOrOwner||"",r.childOwner||"",r.url||""):void 0)}}function i(e,t,n){var o=r();if(!o){var i="string"==typeof n?n:n.displayName||n.name;i&&(o=" Check the top-level render call using <"+i+">.")}var a=m[e]||(m[e]={});if(a[o])return null;a[o]=!0;var s={parentOrOwner:o,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return t&&t._owner&&t._owner!==f.current&&(s.childOwner=" It was passed a child from "+t._owner.getName()+"."),s}function a(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];c.isValidElement(r)&&o(r,t)}else if(c.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var i=d(e);if(i&&i!==e.entries)for(var a,s=i.call(e);!(a=s.next()).done;)c.isValidElement(a.value)&&o(a.value,t)}}function s(e,t,o,i){for(var a in t)if(t.hasOwnProperty(a)){var s;try{"function"!=typeof t[a]?"production"!==n.env.NODE_ENV?h(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e||"React class",p[i],a):h(!1):void 0,s=t[a](o,a,e,i)}catch(u){s=u}if("production"!==n.env.NODE_ENV?v(!s||s instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",e||"React class",p[i],a,typeof s):void 0,s instanceof Error&&!(s.message in g)){g[s.message]=!0;var c=r();"production"!==n.env.NODE_ENV?v(!1,"Failed propType: %s%s",s.message,c):void 0}}}function u(e){var t=e.type;if("function"==typeof t){var r=t.displayName||t.name;t.propTypes&&s(r,t.propTypes,e.props,l.prop),"function"==typeof t.getDefaultProps&&("production"!==n.env.NODE_ENV?v(t.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."):void 0)}}var c=e("./ReactElement"),l=e("./ReactPropTypeLocations"),p=e("./ReactPropTypeLocationNames"),f=e("./ReactCurrentOwner"),d=e("./getIteratorFn"),h=e("fbjs/lib/invariant"),v=e("fbjs/lib/warning"),m={},g={},y={createElement:function(e,t,o){var i="string"==typeof e||"function"==typeof e;"production"!==n.env.NODE_ENV?v(i,"React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).%s",r()):void 0;var s=c.createElement.apply(this,arguments);if(null==s)return s;if(i)for(var l=2;l<arguments.length;l++)a(arguments[l],e);return u(s),s},createFactory:function(e){var t=y.createElement.bind(null,e);if(t.type=e,"production"!==n.env.NODE_ENV)try{Object.defineProperty(t,"type",{enumerable:!1,get:function(){return"production"!==n.env.NODE_ENV?v(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."):void 0,Object.defineProperty(this,"type",{value:e}),e}})}catch(r){}return t},cloneElement:function(e,t,n){for(var r=c.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)a(arguments[o],r.type);return u(r),r}};t.exports=y}).call(this,e("_process"))},{"./ReactCurrentOwner":201,"./ReactElement":219,"./ReactPropTypeLocationNames":239,"./ReactPropTypeLocations":240,"./getIteratorFn":281,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],221:[function(e,t,n){"use strict";var r,o=e("./ReactElement"),i=e("./ReactEmptyComponentRegistry"),a=e("./ReactReconciler"),s=e("./Object.assign"),u={injectEmptyComponent:function(e){r=o.createElement(e)}},c=function(e){this._currentElement=null,this._rootNodeID=null,this._renderedComponent=e(r)};s(c.prototype,{construct:function(e){},mountComponent:function(e,t,n){return i.registerNullComponentID(e),this._rootNodeID=e,a.mountComponent(this._renderedComponent,e,t,n)},receiveComponent:function(){},unmountComponent:function(e,t,n){a.unmountComponent(this._renderedComponent),i.deregisterNullComponentID(this._rootNodeID),this._rootNodeID=null,this._renderedComponent=null}}),c.injection=u,t.exports=c},{"./Object.assign":189,"./ReactElement":219,"./ReactEmptyComponentRegistry":222,"./ReactReconciler":243}],222:[function(e,t,n){"use strict";function r(e){return!!a[e]}function o(e){
a[e]=!0}function i(e){delete a[e]}var a={},s={isNullComponentID:r,registerNullComponentID:o,deregisterNullComponentID:i};t.exports=s},{}],223:[function(e,t,n){(function(e){"use strict";function n(e,t,n,o){try{return t(n,o)}catch(i){return void(null===r&&(r=i))}}var r=null,o={invokeGuardedCallback:n,invokeGuardedCallbackWithCatch:n,rethrowCaughtError:function(){if(r){var e=r;throw r=null,e}}};if("production"!==e.env.NODE_ENV&&"undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"function"==typeof Event){var i=document.createElement("react");o.invokeGuardedCallback=function(e,t,n,r){var o=t.bind(null,n,r);i.addEventListener(e,o,!1),i.dispatchEvent(new Event(e)),i.removeEventListener(e,o,!1)}}t.exports=o}).call(this,e("_process"))},{_process:114}],224:[function(e,t,n){"use strict";function r(e){o.enqueueEvents(e),o.processEventQueue(!1)}var o=e("./EventPluginHub"),i={handleTopLevel:function(e,t,n,i,a){var s=o.extractEvents(e,t,n,i,a);r(s)}};t.exports=i},{"./EventPluginHub":182}],225:[function(e,t,n){"use strict";function r(e){var t=f.getID(e),n=p.getReactRootIDFromNodeID(t),r=f.findReactContainerForID(n),o=f.getFirstReactDOM(r);return o}function o(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function i(e){a(e)}function a(e){for(var t=f.getFirstReactDOM(v(e.nativeEvent))||window,n=t;n;)e.ancestors.push(n),n=r(n);for(var o=0;o<e.ancestors.length;o++){t=e.ancestors[o];var i=f.getID(t)||"";g._handleTopLevel(e.topLevelType,t,i,e.nativeEvent,v(e.nativeEvent))}}function s(e){var t=m(window);e(t)}var u=e("fbjs/lib/EventListener"),c=e("fbjs/lib/ExecutionEnvironment"),l=e("./PooledClass"),p=e("./ReactInstanceHandles"),f=e("./ReactMount"),d=e("./ReactUpdates"),h=e("./Object.assign"),v=e("./getEventTarget"),m=e("fbjs/lib/getUnboundedScrollPosition");h(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),l.addPoolingTo(o,l.twoArgumentPooler);var g={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:c.canUseDOM?window:null,setHandleTopLevel:function(e){g._handleTopLevel=e},setEnabled:function(e){g._enabled=!!e},isEnabled:function(){return g._enabled},trapBubbledEvent:function(e,t,n){var r=n;return r?u.listen(r,t,g.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var r=n;return r?u.capture(r,t,g.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=s.bind(null,e);u.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(g._enabled){var n=o.getPooled(e,t);try{d.batchedUpdates(i,n)}finally{o.release(n)}}}};t.exports=g},{"./Object.assign":189,"./PooledClass":190,"./ReactInstanceHandles":228,"./ReactMount":232,"./ReactUpdates":250,"./getEventTarget":280,"fbjs/lib/EventListener":19,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/getUnboundedScrollPosition":31}],226:[function(e,t,n){"use strict";var r=e("./DOMProperty"),o=e("./EventPluginHub"),i=e("./ReactComponentEnvironment"),a=e("./ReactClass"),s=e("./ReactEmptyComponent"),u=e("./ReactBrowserEventEmitter"),c=e("./ReactNativeComponent"),l=e("./ReactPerf"),p=e("./ReactRootIndex"),f=e("./ReactUpdates"),d={Component:i.injection,Class:a.injection,DOMProperty:r.injection,EmptyComponent:s.injection,EventPluginHub:o.injection,EventEmitter:u.injection,NativeComponent:c.injection,Perf:l.injection,RootIndex:p.injection,Updates:f.injection};t.exports=d},{"./DOMProperty":176,"./EventPluginHub":182,"./ReactBrowserEventEmitter":193,"./ReactClass":196,"./ReactComponentEnvironment":199,"./ReactEmptyComponent":221,"./ReactNativeComponent":235,"./ReactPerf":238,"./ReactRootIndex":245,"./ReactUpdates":250}],227:[function(e,t,n){"use strict";function r(e){return i(document.documentElement,e)}var o=e("./ReactDOMSelection"),i=e("fbjs/lib/containsNode"),a=e("fbjs/lib/focusNode"),s=e("fbjs/lib/getActiveElement"),u={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=s();return{focusedElem:e,selectionRange:u.hasSelectionCapabilities(e)?u.getSelection(e):null}},restoreSelection:function(e){var t=s(),n=e.focusedElem,o=e.selectionRange;t!==n&&r(n)&&(u.hasSelectionCapabilities(n)&&u.setSelection(n,o),a(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;if("undefined"==typeof r&&(r=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",r-n),i.select()}else o.setOffsets(e,t)}};t.exports=u},{"./ReactDOMSelection":211,"fbjs/lib/containsNode":23,"fbjs/lib/focusNode":28,"fbjs/lib/getActiveElement":29}],228:[function(e,t,n){(function(n){"use strict";function r(e){return d+e.toString(36)}function o(e,t){return e.charAt(t)===d||t===e.length}function i(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function a(e,t){return 0===t.indexOf(e)&&o(t,e.length)}function s(e){return e?e.substr(0,e.lastIndexOf(d)):""}function u(e,t){if(i(e)&&i(t)?void 0:"production"!==n.env.NODE_ENV?f(!1,"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",e,t):f(!1),a(e,t)?void 0:"production"!==n.env.NODE_ENV?f(!1,"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",e,t):f(!1),e===t)return e;var r,s=e.length+h;for(r=s;r<t.length&&!o(t,r);r++);return t.substr(0,r)}function c(e,t){var r=Math.min(e.length,t.length);if(0===r)return"";for(var a=0,s=0;r>=s;s++)if(o(e,s)&&o(t,s))a=s;else if(e.charAt(s)!==t.charAt(s))break;var u=e.substr(0,a);return i(u)?void 0:"production"!==n.env.NODE_ENV?f(!1,"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",e,t,u):f(!1),u}function l(e,t,r,o,i,c){e=e||"",t=t||"",e===t?"production"!==n.env.NODE_ENV?f(!1,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",e):f(!1):void 0;var l=a(t,e);l||a(e,t)?void 0:"production"!==n.env.NODE_ENV?f(!1,"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",e,t):f(!1);for(var p=0,d=l?s:u,h=e;;h=d(h,t)){var m;if(i&&h===e||c&&h===t||(m=r(h,l,o)),m===!1||h===t)break;p++<v?void 0:"production"!==n.env.NODE_ENV?f(!1,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",e,t,h):f(!1)}}var p=e("./ReactRootIndex"),f=e("fbjs/lib/invariant"),d=".",h=d.length,v=1e4,m={createReactRootID:function(){return r(p.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,r,o){var i=c(e,t);i!==e&&l(e,i,n,r,!1,!0),i!==t&&l(i,t,n,o,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(l("",e,t,n,!0,!1),l(e,"",t,n,!1,!0))},traverseTwoPhaseSkipTarget:function(e,t,n){e&&(l("",e,t,n,!0,!0),l(e,"",t,n,!0,!0))},traverseAncestors:function(e,t,n){l("",e,t,n,!0,!1)},getFirstCommonAncestorID:c,_getNextDescendantID:u,isAncestorIDOf:a,SEPARATOR:d};t.exports=m}).call(this,e("_process"))},{"./ReactRootIndex":245,_process:114,"fbjs/lib/invariant":34}],229:[function(e,t,n){"use strict";var r={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};t.exports=r},{}],230:[function(e,t,n){(function(n){"use strict";var r=e("./ReactChildren"),o=e("./ReactComponent"),i=e("./ReactClass"),a=e("./ReactDOMFactories"),s=e("./ReactElement"),u=e("./ReactElementValidator"),c=e("./ReactPropTypes"),l=e("./ReactVersion"),p=e("./Object.assign"),f=e("./onlyChild"),d=s.createElement,h=s.createFactory,v=s.cloneElement;"production"!==n.env.NODE_ENV&&(d=u.createElement,h=u.createFactory,v=u.cloneElement);var m={Children:{map:r.map,forEach:r.forEach,count:r.count,toArray:r.toArray,only:f},Component:o,createElement:d,cloneElement:v,isValidElement:s.isValidElement,PropTypes:c,createClass:i.createClass,createFactory:h,createMixin:function(e){return e},DOM:a,version:l,__spread:p};t.exports=m}).call(this,e("_process"))},{"./Object.assign":189,"./ReactChildren":195,"./ReactClass":196,"./ReactComponent":197,"./ReactDOMFactories":205,"./ReactElement":219,"./ReactElementValidator":220,"./ReactPropTypes":241,"./ReactVersion":251,"./onlyChild":287,_process:114}],231:[function(e,t,n){"use strict";var r=e("./adler32"),o=/\/?>/,i={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=r(e);return e.replace(o," "+i.CHECKSUM_ATTR_NAME+'="'+t+'"$&')},canReuseMarkup:function(e,t){var n=t.getAttribute(i.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var o=r(e);return o===n}};t.exports=i},{"./adler32":270}],232:[function(e,t,n){(function(n){"use strict";function r(e,t){for(var n=Math.min(e.length,t.length),r=0;n>r;r++)if(e.charAt(r)!==t.charAt(r))return r;return e.length===t.length?-1:n}function o(e){return e?e.nodeType===K?e.documentElement:e.firstChild:null}function i(e){var t=o(e);return t&&ee.getID(t)}function a(e){var t=s(e);if(t)if(q.hasOwnProperty(t)){var r=q[t];r!==e&&(p(r,t)?"production"!==n.env.NODE_ENV?L(!1,"ReactMount: Two valid but unequal nodes with the same `%s`: %s",H,t):L(!1):void 0,q[t]=e)}else q[t]=e;return t}function s(e){return e&&e.getAttribute&&e.getAttribute(H)||""}function u(e,t){var n=s(e);n!==t&&delete q[n],e.setAttribute(H,t),q[t]=e}function c(e){return q.hasOwnProperty(e)&&p(q[e],e)||(q[e]=ee.findReactNodeByID(e)),q[e]}function l(e){var t=D.get(e)._rootNodeID;return x.isNullComponentID(t)?null:(q.hasOwnProperty(t)&&p(q[t],t)||(q[t]=ee.findReactNodeByID(t)),q[t])}function p(e,t){if(e){s(e)!==t?"production"!==n.env.NODE_ENV?L(!1,"ReactMount: Unexpected modification of `%s`",H):L(!1):void 0;var r=ee.findReactContainerForID(t);if(r&&I(r,e))return!0}return!1}function f(e){delete q[e]}function d(e){var t=q[e];return t&&p(t,e)?void(J=t):!1}function h(e){J=null,N.traverseAncestors(e,d);var t=J;return J=null,t}function v(e,t,r,o,i,a){if(O.useCreateElement&&(a=S({},a),r.nodeType===K?a[z]=r:a[z]=r.ownerDocument),"production"!==n.env.NODE_ENV){a===j&&(a={});var s=r.nodeName.toLowerCase();a[F.ancestorInfoContextKey]=F.updatedAncestorInfo(null,s,null)}var u=P.mountComponent(e,t,o,a);e._renderedComponent._topLevelWrapper=e,ee._mountImageIntoNode(u,r,i,o)}function m(e,t,n,r,o){var i=M.ReactReconcileTransaction.getPooled(r);i.perform(v,null,e,t,n,i,r,o),M.ReactReconcileTransaction.release(i)}function g(e,t){for(P.unmountComponent(e),t.nodeType===K&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function y(e){var t=i(e);return t?t!==N.getReactRootIDFromNodeID(t):!1}function b(e){for(;e&&e.parentNode!==e;e=e.parentNode)if(1===e.nodeType){var t=s(e);if(t){var n,r=N.getReactRootIDFromNodeID(t),o=e;do if(n=s(o),o=o.parentNode,null==o)return null;while(n!==r);if(o===Q[r])return e}}return null}var _=e("./DOMProperty"),E=e("./ReactBrowserEventEmitter"),w=e("./ReactCurrentOwner"),O=e("./ReactDOMFeatureFlags"),C=e("./ReactElement"),x=e("./ReactEmptyComponentRegistry"),N=e("./ReactInstanceHandles"),D=e("./ReactInstanceMap"),R=e("./ReactMarkupChecksum"),T=e("./ReactPerf"),P=e("./ReactReconciler"),k=e("./ReactUpdateQueue"),M=e("./ReactUpdates"),S=e("./Object.assign"),j=e("fbjs/lib/emptyObject"),I=e("fbjs/lib/containsNode"),A=e("./instantiateReactComponent"),L=e("fbjs/lib/invariant"),V=e("./setInnerHTML"),U=e("./shouldUpdateReactComponent"),F=e("./validateDOMNesting"),B=e("fbjs/lib/warning"),H=_.ID_ATTRIBUTE_NAME,q={},W=1,K=9,$=11,z="__ReactMount_ownerDocument$"+Math.random().toString(36).slice(2),Y={},Q={};if("production"!==n.env.NODE_ENV)var X={};var G=[],J=null,Z=function(){};Z.prototype.isReactComponent={},"production"!==n.env.NODE_ENV&&(Z.displayName="TopLevelWrapper"),Z.prototype.render=function(){return this.props};var ee={TopLevelWrapper:Z,_instancesByReactRootID:Y,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,r,a){return ee.scrollMonitor(r,function(){k.enqueueElementInternal(e,t),a&&k.enqueueCallbackInternal(e,a)}),"production"!==n.env.NODE_ENV&&(X[i(r)]=o(r)),e},_registerComponent:function(e,t){!t||t.nodeType!==W&&t.nodeType!==K&&t.nodeType!==$?"production"!==n.env.NODE_ENV?L(!1,"_registerComponent(...): Target container is not a DOM element."):L(!1):void 0,E.ensureScrollValueMonitoring();var r=ee.registerContainer(t);return Y[r]=e,r},_renderNewRootComponent:function(e,t,r,i){"production"!==n.env.NODE_ENV?B(null==w.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",w.current&&w.current.getName()||"ReactCompositeComponent"):void 0;var a=A(e,null),s=ee._registerComponent(a,t);return M.batchedUpdates(m,a,s,t,r,i),"production"!==n.env.NODE_ENV&&(X[s]=o(t)),a},renderSubtreeIntoContainer:function(e,t,r,o){return null==e||null==e._reactInternalInstance?"production"!==n.env.NODE_ENV?L(!1,"parentComponent must be a valid React Component"):L(!1):void 0,ee._renderSubtreeIntoContainer(e,t,r,o)},_renderSubtreeIntoContainer:function(e,t,r,a){C.isValidElement(t)?void 0:"production"!==n.env.NODE_ENV?L(!1,"ReactDOM.render(): Invalid component element.%s","string"==typeof t?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":"function"==typeof t?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":null!=t&&void 0!==t.props?" This may be caused by unintentionally loading two independent copies of React.":""):L(!1),"production"!==n.env.NODE_ENV?B(!r||!r.tagName||"BODY"!==r.tagName.toUpperCase(),"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app."):void 0;var u=new C(Z,null,null,null,null,null,t),c=Y[i(r)];if(c){var l=c._currentElement,p=l.props;if(U(p,t))return ee._updateRootComponent(c,u,r,a)._renderedComponent.getPublicInstance();ee.unmountComponentAtNode(r)}var f=o(r),d=f&&!!s(f),h=y(r);if("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?B(!h,"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."):void 0,!d||f.nextSibling))for(var v=f;v;){if(s(v)){"production"!==n.env.NODE_ENV?B(!1,"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."):void 0;break}v=v.nextSibling}var m=d&&!c&&!h,g=ee._renderNewRootComponent(u,r,m,null!=e?e._reactInternalInstance._processChildContext(e._reactInternalInstance._context):j)._renderedComponent.getPublicInstance();return a&&a.call(g),g},render:function(e,t,n){return ee._renderSubtreeIntoContainer(null,e,t,n)},registerContainer:function(e){var t=i(e);return t&&(t=N.getReactRootIDFromNodeID(t)),t||(t=N.createReactRootID()),Q[t]=e,t},unmountComponentAtNode:function(e){"production"!==n.env.NODE_ENV?B(null==w.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate. Check the render method of %s.",w.current&&w.current.getName()||"ReactCompositeComponent"):void 0,!e||e.nodeType!==W&&e.nodeType!==K&&e.nodeType!==$?"production"!==n.env.NODE_ENV?L(!1,"unmountComponentAtNode(...): Target container is not a DOM element."):L(!1):void 0;var t=i(e),r=Y[t];if(!r){var o=y(e),a=s(e),u=a&&a===N.getReactRootIDFromNodeID(a);return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?B(!o,"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",u?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."):void 0),!1}return M.batchedUpdates(g,r,e),delete Y[t],delete Q[t],"production"!==n.env.NODE_ENV&&delete X[t],!0},findReactContainerForID:function(e){var t=N.getReactRootIDFromNodeID(e),r=Q[t];if("production"!==n.env.NODE_ENV){var o=X[t];if(o&&o.parentNode!==r){"production"!==n.env.NODE_ENV?B(s(o)===t,"ReactMount: Root element ID differed from reactRootID."):void 0;var i=r.firstChild;i&&t===s(i)?X[t]=i:"production"!==n.env.NODE_ENV?B(!1,"ReactMount: Root element has been removed from its original container. New container: %s",o.parentNode):void 0}}return r},findReactNodeByID:function(e){var t=ee.findReactContainerForID(e);return ee.findComponentRoot(t,e)},getFirstReactDOM:function(e){return b(e)},findComponentRoot:function(e,t){var r=G,o=0,i=h(t)||e;for("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?B(null!=i,"React can't find the root component node for data-reactid value `%s`. If you're seeing this message, it probably means that you've loaded two copies of React on the page. At this time, only a single copy of React can be loaded at a time.",t):void 0),r[0]=i.firstChild,r.length=1;o<r.length;){for(var a,s=r[o++];s;){var u=ee.getID(s);u?t===u?a=s:N.isAncestorIDOf(u,t)&&(r.length=o=0,r.push(s.firstChild)):r.push(s.firstChild),s=s.nextSibling}if(a)return r.length=0,a}r.length=0,"production"!==n.env.NODE_ENV?L(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",t,ee.getID(e)):L(!1)},_mountImageIntoNode:function(e,t,i,a){if(!t||t.nodeType!==W&&t.nodeType!==K&&t.nodeType!==$?"production"!==n.env.NODE_ENV?L(!1,"mountComponentIntoNode(...): Target container is not valid."):L(!1):void 0,i){var s=o(t);if(R.canReuseMarkup(e,s))return;var u=s.getAttribute(R.CHECKSUM_ATTR_NAME);s.removeAttribute(R.CHECKSUM_ATTR_NAME);var c=s.outerHTML;s.setAttribute(R.CHECKSUM_ATTR_NAME,u);var l=e;if("production"!==n.env.NODE_ENV){var p;t.nodeType===W?(p=document.createElement("div"),p.innerHTML=e,l=p.innerHTML):(p=document.createElement("iframe"),document.body.appendChild(p),p.contentDocument.write(e),l=p.contentDocument.documentElement.outerHTML,document.body.removeChild(p))}var f=r(l,c),d=" (client) "+l.substring(f-20,f+20)+"\n (server) "+c.substring(f-20,f+20);t.nodeType===K?"production"!==n.env.NODE_ENV?L(!1,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s",d):L(!1):void 0,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?B(!1,"React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n%s",d):void 0)}if(t.nodeType===K?"production"!==n.env.NODE_ENV?L(!1,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering."):L(!1):void 0,a.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);t.appendChild(e)}else V(t,e)},ownerDocumentContextKey:z,getReactRootID:i,getID:a,setID:u,getNode:c,getNodeFromInstance:l,isValid:p,purgeID:f};T.measureMethods(ee,"ReactMount",{_renderNewRootComponent:"_renderNewRootComponent",_mountImageIntoNode:"_mountImageIntoNode"}),t.exports=ee}).call(this,e("_process"))},{"./DOMProperty":176,"./Object.assign":189,"./ReactBrowserEventEmitter":193,"./ReactCurrentOwner":201,"./ReactDOMFeatureFlags":206,"./ReactElement":219,"./ReactEmptyComponentRegistry":222,"./ReactInstanceHandles":228,"./ReactInstanceMap":229,"./ReactMarkupChecksum":231,"./ReactPerf":238,"./ReactReconciler":243,"./ReactUpdateQueue":249,"./ReactUpdates":250,"./instantiateReactComponent":284,"./setInnerHTML":290,"./shouldUpdateReactComponent":292,"./validateDOMNesting":294,_process:114,"fbjs/lib/containsNode":23,"fbjs/lib/emptyObject":27,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],233:[function(e,t,n){(function(n){"use strict";function r(e,t,n){g.push({parentID:e,parentNode:null,type:p.INSERT_MARKUP,markupIndex:y.push(t)-1,content:null,fromIndex:null,toIndex:n})}function o(e,t,n){g.push({parentID:e,parentNode:null,type:p.MOVE_EXISTING,markupIndex:null,content:null,fromIndex:t,toIndex:n})}function i(e,t){g.push({parentID:e,parentNode:null,type:p.REMOVE_NODE,markupIndex:null,content:null,fromIndex:t,toIndex:null})}function a(e,t){g.push({parentID:e,parentNode:null,type:p.SET_MARKUP,markupIndex:null,content:t,fromIndex:null,toIndex:null})}function s(e,t){g.push({parentID:e,parentNode:null,type:p.TEXT_CONTENT,markupIndex:null,content:t,fromIndex:null,toIndex:null})}function u(){g.length&&(l.processChildrenUpdates(g,y),c())}function c(){g.length=0,y.length=0}var l=e("./ReactComponentEnvironment"),p=e("./ReactMultiChildUpdateTypes"),f=e("./ReactCurrentOwner"),d=e("./ReactReconciler"),h=e("./ReactChildReconciler"),v=e("./flattenChildren"),m=0,g=[],y=[],b={Mixin:{_reconcilerInstantiateChildren:function(e,t,r){if("production"!==n.env.NODE_ENV&&this._currentElement)try{return f.current=this._currentElement._owner,h.instantiateChildren(e,t,r)}finally{f.current=null}return h.instantiateChildren(e,t,r)},_reconcilerUpdateChildren:function(e,t,r,o){var i;if("production"!==n.env.NODE_ENV&&this._currentElement){try{f.current=this._currentElement._owner,i=v(t)}finally{f.current=null}return h.updateChildren(e,i,r,o)}return i=v(t),h.updateChildren(e,i,r,o)},mountChildren:function(e,t,n){var r=this._reconcilerInstantiateChildren(e,t,n);this._renderedChildren=r;var o=[],i=0;for(var a in r)if(r.hasOwnProperty(a)){var s=r[a],u=this._rootNodeID+a,c=d.mountComponent(s,u,t,n);s._mountIndex=i++,o.push(c)}return o},updateTextContent:function(e){m++;var t=!0;try{var n=this._renderedChildren;h.unmountChildren(n);for(var r in n)n.hasOwnProperty(r)&&this._unmountChild(n[r]);this.setTextContent(e),t=!1}finally{m--,m||(t?c():u())}},updateMarkup:function(e){m++;var t=!0;try{var n=this._renderedChildren;h.unmountChildren(n);for(var r in n)n.hasOwnProperty(r)&&this._unmountChildByName(n[r],r);this.setMarkup(e),t=!1}finally{m--,m||(t?c():u())}},updateChildren:function(e,t,n){m++;var r=!0;try{this._updateChildren(e,t,n),r=!1}finally{m--,m||(r?c():u())}},_updateChildren:function(e,t,n){var r=this._renderedChildren,o=this._reconcilerUpdateChildren(r,e,t,n);if(this._renderedChildren=o,o||r){var i,a=0,s=0;for(i in o)if(o.hasOwnProperty(i)){var u=r&&r[i],c=o[i];u===c?(this.moveChild(u,s,a),a=Math.max(u._mountIndex,a),u._mountIndex=s):(u&&(a=Math.max(u._mountIndex,a),this._unmountChild(u)),this._mountChildByNameAtIndex(c,i,s,t,n)),s++}for(i in r)!r.hasOwnProperty(i)||o&&o.hasOwnProperty(i)||this._unmountChild(r[i])}},unmountChildren:function(){var e=this._renderedChildren;h.unmountChildren(e),this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&o(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){r(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){i(this._rootNodeID,e._mountIndex)},setTextContent:function(e){s(this._rootNodeID,e)},setMarkup:function(e){a(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,r,o){var i=this._rootNodeID+t,a=d.mountComponent(e,i,r,o);e._mountIndex=n,this.createChild(e,a)},_unmountChild:function(e){this.removeChild(e),e._mountIndex=null}}};t.exports=b}).call(this,e("_process"))},{"./ReactChildReconciler":194,"./ReactComponentEnvironment":199,"./ReactCurrentOwner":201,"./ReactMultiChildUpdateTypes":234,"./ReactReconciler":243,"./flattenChildren":275,_process:114}],234:[function(e,t,n){"use strict";var r=e("fbjs/lib/keyMirror"),o=r({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});t.exports=o},{"fbjs/lib/keyMirror":37}],235:[function(e,t,n){(function(n){"use strict";function r(e){if("function"==typeof e.type)return e.type;var t=e.type,n=p[t];return null==n&&(p[t]=n=c(t)),n}function o(e){return l?void 0:"production"!==n.env.NODE_ENV?u(!1,"There is no registered component for the tag %s",e.type):u(!1),new l(e.type,e.props)}function i(e){return new f(e)}function a(e){return e instanceof f}var s=e("./Object.assign"),u=e("fbjs/lib/invariant"),c=null,l=null,p={},f=null,d={injectGenericComponentClass:function(e){l=e},injectTextComponentClass:function(e){f=e},injectComponentClasses:function(e){s(p,e)}},h={getComponentClassForElement:r,createInternalComponent:o,createInstanceForText:i,isTextComponent:a,injection:d};t.exports=h}).call(this,e("_process"))},{"./Object.assign":189,_process:114,"fbjs/lib/invariant":34}],236:[function(e,t,n){(function(n){"use strict";function r(e,t){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?o(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",t,t,e.constructor&&e.constructor.displayName||""):void 0)}var o=e("fbjs/lib/warning"),i={isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")},enqueueSetProps:function(e,t){r(e,"setProps")},enqueueReplaceProps:function(e,t){r(e,"replaceProps")}};t.exports=i}).call(this,e("_process"))},{_process:114,"fbjs/lib/warning":45}],237:[function(e,t,n){(function(n){"use strict";var r=e("fbjs/lib/invariant"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,i){o.isValidOwner(i)?void 0:"production"!==n.env.NODE_ENV?r(!1,"addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):r(!1),i.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,i){o.isValidOwner(i)?void 0:"production"!==n.env.NODE_ENV?r(!1,"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner)."):r(!1),i.getPublicInstance().refs[t]===e.getPublicInstance()&&i.detachRef(t)}};t.exports=o}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],238:[function(e,t,n){(function(e){"use strict";function n(e,t,n){return n}var r={enableMeasure:!1,storedMeasure:n,measureMethods:function(t,n,o){if("production"!==e.env.NODE_ENV)for(var i in o)o.hasOwnProperty(i)&&(t[i]=r.measure(n,o[i],t[i]))},measure:function(t,n,o){if("production"!==e.env.NODE_ENV){var i=null,a=function(){return r.enableMeasure?(i||(i=r.storedMeasure(t,n,o)),i.apply(this,arguments)):o.apply(this,arguments)};return a.displayName=t+"_"+n,a}return o},injection:{injectMeasure:function(e){r.storedMeasure=e}}};t.exports=r}).call(this,e("_process"))},{_process:114}],239:[function(e,t,n){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),t.exports=n}).call(this,e("_process"))},{_process:114}],240:[function(e,t,n){"use strict";var r=e("fbjs/lib/keyMirror"),o=r({prop:null,context:null,childContext:null});t.exports=o},{"fbjs/lib/keyMirror":37}],241:[function(e,t,n){"use strict";function r(e){function t(t,n,r,o,i,a){if(o=o||w,a=a||r,null==n[r]){var s=b[i];return t?new Error("Required "+s+" `"+a+"` was not specified in "+("`"+o+"`.")):null}return e(n,r,o,i,a)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function o(e){function t(t,n,r,o,i){var a=t[n],s=v(a);if(s!==e){var u=b[o],c=m(a);return new Error("Invalid "+u+" `"+i+"` of type "+("`"+c+"` supplied to `"+r+"`, expected ")+("`"+e+"`."))}return null}return r(t)}function i(){return r(_.thatReturns(null))}function a(e){function t(t,n,r,o,i){var a=t[n];if(!Array.isArray(a)){var s=b[o],u=v(a);return new Error("Invalid "+s+" `"+i+"` of type "+("`"+u+"` supplied to `"+r+"`, expected an array."))}for(var c=0;c<a.length;c++){var l=e(a,c,r,o,i+"["+c+"]");if(l instanceof Error)return l}return null}return r(t)}function s(){function e(e,t,n,r,o){if(!y.isValidElement(e[t])){var i=b[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a single ReactElement."))}return null}return r(e)}function u(e){function t(t,n,r,o,i){if(!(t[n]instanceof e)){var a=b[o],s=e.name||w,u=g(t[n]);return new Error("Invalid "+a+" `"+i+"` of type "+("`"+u+"` supplied to `"+r+"`, expected ")+("instance of `"+s+"`."))}return null}return r(t)}function c(e){function t(t,n,r,o,i){for(var a=t[n],s=0;s<e.length;s++)if(a===e[s])return null;var u=b[o],c=JSON.stringify(e);return new Error("Invalid "+u+" `"+i+"` of value `"+a+"` "+("supplied to `"+r+"`, expected one of "+c+"."))}return r(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")})}function l(e){function t(t,n,r,o,i){var a=t[n],s=v(a);if("object"!==s){var u=b[o];return new Error("Invalid "+u+" `"+i+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an object."))}for(var c in a)if(a.hasOwnProperty(c)){var l=e(a,c,r,o,i+"."+c);if(l instanceof Error)return l}return null}return r(t)}function p(e){function t(t,n,r,o,i){for(var a=0;a<e.length;a++){var s=e[a];if(null==s(t,n,r,o,i))return null}var u=b[o];return new Error("Invalid "+u+" `"+i+"` supplied to "+("`"+r+"`."))}return r(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")})}function f(){function e(e,t,n,r,o){if(!h(e[t])){var i=b[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return r(e)}function d(e){function t(t,n,r,o,i){var a=t[n],s=v(a);if("object"!==s){var u=b[o];return new Error("Invalid "+u+" `"+i+"` of type `"+s+"` "+("supplied to `"+r+"`, expected `object`."))}for(var c in e){var l=e[c];if(l){var p=l(a,c,r,o,i+"."+c);if(p)return p}}return null}return r(t)}function h(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(h);if(null===e||y.isValidElement(e))return!0;var t=E(e);if(!t)return!1;var n,r=t.call(e);if(t!==e.entries){
for(;!(n=r.next()).done;)if(!h(n.value))return!1}else for(;!(n=r.next()).done;){var o=n.value;if(o&&!h(o[1]))return!1}return!0;default:return!1}}function v(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function m(e){var t=v(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function g(e){return e.constructor&&e.constructor.name?e.constructor.name:"<<anonymous>>"}var y=e("./ReactElement"),b=e("./ReactPropTypeLocationNames"),_=e("fbjs/lib/emptyFunction"),E=e("./getIteratorFn"),w="<<anonymous>>",O={array:o("array"),bool:o("boolean"),func:o("function"),number:o("number"),object:o("object"),string:o("string"),any:i(),arrayOf:a,element:s(),instanceOf:u,node:f(),objectOf:l,oneOf:c,oneOfType:p,shape:d};t.exports=O},{"./ReactElement":219,"./ReactPropTypeLocationNames":239,"./getIteratorFn":281,"fbjs/lib/emptyFunction":26}],242:[function(e,t,n){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.useCreateElement=!e&&s.useCreateElement}var o=e("./CallbackQueue"),i=e("./PooledClass"),a=e("./ReactBrowserEventEmitter"),s=e("./ReactDOMFeatureFlags"),u=e("./ReactInputSelection"),c=e("./Transaction"),l=e("./Object.assign"),p={initialize:u.getSelectionInformation,close:u.restoreSelection},f={initialize:function(){var e=a.isEnabled();return a.setEnabled(!1),e},close:function(e){a.setEnabled(e)}},d={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},h=[p,f,d],v={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null}};l(r.prototype,c.Mixin,v),i.addPoolingTo(r),t.exports=r},{"./CallbackQueue":172,"./Object.assign":189,"./PooledClass":190,"./ReactBrowserEventEmitter":193,"./ReactDOMFeatureFlags":206,"./ReactInputSelection":227,"./Transaction":267}],243:[function(e,t,n){"use strict";function r(){o.attachRefs(this,this._currentElement)}var o=e("./ReactRef"),i={mountComponent:function(e,t,n,o){var i=e.mountComponent(t,n,o);return e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(r,e),i},unmountComponent:function(e){o.detachRefs(e,e._currentElement),e.unmountComponent()},receiveComponent:function(e,t,n,i){var a=e._currentElement;if(t!==a||i!==e._context){var s=o.shouldUpdateRefs(a,t);s&&o.detachRefs(e,a),e.receiveComponent(t,n,i),s&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(r,e)}},performUpdateIfNecessary:function(e,t){e.performUpdateIfNecessary(t)}};t.exports=i},{"./ReactRef":244}],244:[function(e,t,n){"use strict";function r(e,t,n){"function"==typeof e?e(t.getPublicInstance()):i.addComponentAsRefTo(t,e,n)}function o(e,t,n){"function"==typeof e?e(null):i.removeComponentAsRefFrom(t,e,n)}var i=e("./ReactOwner"),a={};a.attachRefs=function(e,t){if(null!==t&&t!==!1){var n=t.ref;null!=n&&r(n,e,t._owner)}},a.shouldUpdateRefs=function(e,t){var n=null===e||e===!1,r=null===t||t===!1;return n||r||t._owner!==e._owner||t.ref!==e.ref},a.detachRefs=function(e,t){if(null!==t&&t!==!1){var n=t.ref;null!=n&&o(n,e,t._owner)}},t.exports=a},{"./ReactOwner":237}],245:[function(e,t,n){"use strict";var r={injectCreateReactRootIndex:function(e){o.createReactRootIndex=e}},o={createReactRootIndex:null,injection:r};t.exports=o},{}],246:[function(e,t,n){"use strict";var r={isBatchingUpdates:!1,batchedUpdates:function(e){}};t.exports=r},{}],247:[function(e,t,n){(function(n){"use strict";function r(e){a.isValidElement(e)?void 0:"production"!==n.env.NODE_ENV?h(!1,"renderToString(): You must pass a valid ReactElement."):h(!1);var t;try{p.injection.injectBatchingStrategy(c);var r=s.createReactRootID();return t=l.getPooled(!1),t.perform(function(){var n=d(e,null),o=n.mountComponent(r,t,f);return u.addChecksumToMarkup(o)},null)}finally{l.release(t),p.injection.injectBatchingStrategy(i)}}function o(e){a.isValidElement(e)?void 0:"production"!==n.env.NODE_ENV?h(!1,"renderToStaticMarkup(): You must pass a valid ReactElement."):h(!1);var t;try{p.injection.injectBatchingStrategy(c);var r=s.createReactRootID();return t=l.getPooled(!0),t.perform(function(){var n=d(e,null);return n.mountComponent(r,t,f)},null)}finally{l.release(t),p.injection.injectBatchingStrategy(i)}}var i=e("./ReactDefaultBatchingStrategy"),a=e("./ReactElement"),s=e("./ReactInstanceHandles"),u=e("./ReactMarkupChecksum"),c=e("./ReactServerBatchingStrategy"),l=e("./ReactServerRenderingTransaction"),p=e("./ReactUpdates"),f=e("fbjs/lib/emptyObject"),d=e("./instantiateReactComponent"),h=e("fbjs/lib/invariant");t.exports={renderToString:r,renderToStaticMarkup:o}}).call(this,e("_process"))},{"./ReactDefaultBatchingStrategy":215,"./ReactElement":219,"./ReactInstanceHandles":228,"./ReactMarkupChecksum":231,"./ReactServerBatchingStrategy":246,"./ReactServerRenderingTransaction":248,"./ReactUpdates":250,"./instantiateReactComponent":284,_process:114,"fbjs/lib/emptyObject":27,"fbjs/lib/invariant":34}],248:[function(e,t,n){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=i.getPooled(null),this.useCreateElement=!1}var o=e("./PooledClass"),i=e("./CallbackQueue"),a=e("./Transaction"),s=e("./Object.assign"),u=e("fbjs/lib/emptyFunction"),c={initialize:function(){this.reactMountReady.reset()},close:u},l=[c],p={getTransactionWrappers:function(){return l},getReactMountReady:function(){return this.reactMountReady},destructor:function(){i.release(this.reactMountReady),this.reactMountReady=null}};s(r.prototype,a.Mixin,p),o.addPoolingTo(r),t.exports=r},{"./CallbackQueue":172,"./Object.assign":189,"./PooledClass":190,"./Transaction":267,"fbjs/lib/emptyFunction":26}],249:[function(e,t,n){(function(n){"use strict";function r(e){u.enqueueUpdate(e)}function o(e,t){var r=s.get(e);return r?("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?p(null==i.current,"%s(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.",t):void 0),r):("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?p(!t,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",t,t,e.constructor.displayName):void 0),null)}var i=e("./ReactCurrentOwner"),a=e("./ReactElement"),s=e("./ReactInstanceMap"),u=e("./ReactUpdates"),c=e("./Object.assign"),l=e("fbjs/lib/invariant"),p=e("fbjs/lib/warning"),f={isMounted:function(e){if("production"!==n.env.NODE_ENV){var t=i.current;null!==t&&("production"!==n.env.NODE_ENV?p(t._warnedAboutRefsInRender,"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",t.getName()||"A component"):void 0,t._warnedAboutRefsInRender=!0)}var r=s.get(e);return r?!!r._renderedComponent:!1},enqueueCallback:function(e,t){"function"!=typeof t?"production"!==n.env.NODE_ENV?l(!1,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):l(!1):void 0;var i=o(e);return i?(i._pendingCallbacks?i._pendingCallbacks.push(t):i._pendingCallbacks=[t],void r(i)):null},enqueueCallbackInternal:function(e,t){"function"!=typeof t?"production"!==n.env.NODE_ENV?l(!1,"enqueueCallback(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):l(!1):void 0,e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],r(e)},enqueueForceUpdate:function(e){var t=o(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,r(t))},enqueueReplaceState:function(e,t){var n=o(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,r(n))},enqueueSetState:function(e,t){var n=o(e,"setState");if(n){var i=n._pendingStateQueue||(n._pendingStateQueue=[]);i.push(t),r(n)}},enqueueSetProps:function(e,t){var n=o(e,"setProps");n&&f.enqueueSetPropsInternal(n,t)},enqueueSetPropsInternal:function(e,t){var o=e._topLevelWrapper;o?void 0:"production"!==n.env.NODE_ENV?l(!1,"setProps(...): You called `setProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):l(!1);var i=o._pendingElement||o._currentElement,s=i.props,u=c({},s.props,t);o._pendingElement=a.cloneAndReplaceProps(i,a.cloneAndReplaceProps(s,u)),r(o)},enqueueReplaceProps:function(e,t){var n=o(e,"replaceProps");n&&f.enqueueReplacePropsInternal(n,t)},enqueueReplacePropsInternal:function(e,t){var o=e._topLevelWrapper;o?void 0:"production"!==n.env.NODE_ENV?l(!1,"replaceProps(...): You called `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):l(!1);var i=o._pendingElement||o._currentElement,s=i.props;o._pendingElement=a.cloneAndReplaceProps(i,a.cloneAndReplaceProps(s,t)),r(o)},enqueueElementInternal:function(e,t){e._pendingElement=t,r(e)}};t.exports=f}).call(this,e("_process"))},{"./Object.assign":189,"./ReactCurrentOwner":201,"./ReactElement":219,"./ReactInstanceMap":229,"./ReactUpdates":250,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],250:[function(e,t,n){(function(n){"use strict";function r(){N.ReactReconcileTransaction&&_?void 0:"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):m(!1)}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=l.getPooled(),this.reconcileTransaction=N.ReactReconcileTransaction.getPooled(!1)}function i(e,t,n,o,i,a){r(),_.batchedUpdates(e,t,n,o,i,a)}function a(e,t){return e._mountOrder-t._mountOrder}function s(e){var t=e.dirtyComponentsLength;t!==g.length?"production"!==n.env.NODE_ENV?m(!1,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",t,g.length):m(!1):void 0,g.sort(a);for(var r=0;t>r;r++){var o=g[r],i=o._pendingCallbacks;if(o._pendingCallbacks=null,d.performUpdateIfNecessary(o,e.reconcileTransaction),i)for(var s=0;s<i.length;s++)e.callbackQueue.enqueue(i[s],o.getPublicInstance())}}function u(e){return r(),_.isBatchingUpdates?void g.push(e):void _.batchedUpdates(u,e)}function c(e,t){_.isBatchingUpdates?void 0:"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):m(!1),y.enqueue(e,t),b=!0}var l=e("./CallbackQueue"),p=e("./PooledClass"),f=e("./ReactPerf"),d=e("./ReactReconciler"),h=e("./Transaction"),v=e("./Object.assign"),m=e("fbjs/lib/invariant"),g=[],y=l.getPooled(),b=!1,_=null,E={initialize:function(){this.dirtyComponentsLength=g.length},close:function(){this.dirtyComponentsLength!==g.length?(g.splice(0,this.dirtyComponentsLength),C()):g.length=0}},w={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},O=[E,w];v(o.prototype,h.Mixin,{getTransactionWrappers:function(){return O},destructor:function(){this.dirtyComponentsLength=null,l.release(this.callbackQueue),this.callbackQueue=null,N.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return h.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),p.addPoolingTo(o);var C=function(){for(;g.length||b;){if(g.length){var e=o.getPooled();e.perform(s,null,e),o.release(e)}if(b){b=!1;var t=y;y=l.getPooled(),t.notifyAll(),l.release(t)}}};C=f.measure("ReactUpdates","flushBatchedUpdates",C);var x={injectReconcileTransaction:function(e){e?void 0:"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates: must provide a reconcile transaction class"):m(!1),N.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates: must provide a batching strategy"):m(!1),"function"!=typeof e.batchedUpdates?"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates: must provide a batchedUpdates() function"):m(!1):void 0,"boolean"!=typeof e.isBatchingUpdates?"production"!==n.env.NODE_ENV?m(!1,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):m(!1):void 0,_=e}},N={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:u,flushBatchedUpdates:C,injection:x,asap:c};t.exports=N}).call(this,e("_process"))},{"./CallbackQueue":172,"./Object.assign":189,"./PooledClass":190,"./ReactPerf":238,"./ReactReconciler":243,"./Transaction":267,_process:114,"fbjs/lib/invariant":34}],251:[function(e,t,n){"use strict";t.exports="0.14.0"},{}],252:[function(e,t,n){"use strict";var r=e("./DOMProperty"),o=r.injection.MUST_USE_ATTRIBUTE,i={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},a={Properties:{clipPath:o,cx:o,cy:o,d:o,dx:o,dy:o,fill:o,fillOpacity:o,fontFamily:o,fontSize:o,fx:o,fy:o,gradientTransform:o,gradientUnits:o,markerEnd:o,markerMid:o,markerStart:o,offset:o,opacity:o,patternContentUnits:o,patternUnits:o,points:o,preserveAspectRatio:o,r:o,rx:o,ry:o,spreadMethod:o,stopColor:o,stopOpacity:o,stroke:o,strokeDasharray:o,strokeLinecap:o,strokeOpacity:o,strokeWidth:o,textAnchor:o,transform:o,version:o,viewBox:o,x1:o,x2:o,x:o,xlinkActuate:o,xlinkArcrole:o,xlinkHref:o,xlinkRole:o,xlinkShow:o,xlinkTitle:o,xlinkType:o,xmlBase:o,xmlLang:o,xmlSpace:o,y1:o,y2:o,y:o},DOMAttributeNamespaces:{xlinkActuate:i.xlink,xlinkArcrole:i.xlink,xlinkHref:i.xlink,xlinkRole:i.xlink,xlinkShow:i.xlink,xlinkTitle:i.xlink,xlinkType:i.xlink,xmlBase:i.xml,xmlLang:i.xml,xmlSpace:i.xml},DOMAttributeNames:{clipPath:"clip-path",fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlLang:"xml:lang",xmlSpace:"xml:space"}};t.exports=a},{"./DOMProperty":176}],253:[function(e,t,n){"use strict";function r(e){if("selectionStart"in e&&u.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(e,t){if(_||null==g||g!==l())return null;var n=r(g);if(!b||!d(b,n)){b=n;var o=c.getPooled(m.select,y,e,t);return o.type="select",o.target=g,a.accumulateTwoPhaseDispatches(o),o}return null}var i=e("./EventConstants"),a=e("./EventPropagators"),s=e("fbjs/lib/ExecutionEnvironment"),u=e("./ReactInputSelection"),c=e("./SyntheticEvent"),l=e("fbjs/lib/getActiveElement"),p=e("./isTextInputElement"),f=e("fbjs/lib/keyOf"),d=e("fbjs/lib/shallowEqual"),h=i.topLevelTypes,v=s.canUseDOM&&"documentMode"in document&&document.documentMode<=11,m={select:{phasedRegistrationNames:{bubbled:f({onSelect:null}),captured:f({onSelectCapture:null})},dependencies:[h.topBlur,h.topContextMenu,h.topFocus,h.topKeyDown,h.topMouseDown,h.topMouseUp,h.topSelectionChange]}},g=null,y=null,b=null,_=!1,E=!1,w=f({onSelect:null}),O={eventTypes:m,extractEvents:function(e,t,n,r,i){if(!E)return null;switch(e){case h.topFocus:(p(t)||"true"===t.contentEditable)&&(g=t,y=n,b=null);break;case h.topBlur:g=null,y=null,b=null;break;case h.topMouseDown:_=!0;break;case h.topContextMenu:case h.topMouseUp:return _=!1,o(r,i);case h.topSelectionChange:if(v)break;case h.topKeyDown:case h.topKeyUp:return o(r,i)}return null},didPutListener:function(e,t,n){t===w&&(E=!0)}};t.exports=O},{"./EventConstants":181,"./EventPropagators":185,"./ReactInputSelection":227,"./SyntheticEvent":259,"./isTextInputElement":286,"fbjs/lib/ExecutionEnvironment":20,"fbjs/lib/getActiveElement":29,"fbjs/lib/keyOf":38,"fbjs/lib/shallowEqual":43}],254:[function(e,t,n){"use strict";var r=Math.pow(2,53),o={createReactRootIndex:function(){return Math.ceil(Math.random()*r)}};t.exports=o},{}],255:[function(e,t,n){(function(n){"use strict";var r=e("./EventConstants"),o=e("fbjs/lib/EventListener"),i=e("./EventPropagators"),a=e("./ReactMount"),s=e("./SyntheticClipboardEvent"),u=e("./SyntheticEvent"),c=e("./SyntheticFocusEvent"),l=e("./SyntheticKeyboardEvent"),p=e("./SyntheticMouseEvent"),f=e("./SyntheticDragEvent"),d=e("./SyntheticTouchEvent"),h=e("./SyntheticUIEvent"),v=e("./SyntheticWheelEvent"),m=e("fbjs/lib/emptyFunction"),g=e("./getEventCharCode"),y=e("fbjs/lib/invariant"),b=e("fbjs/lib/keyOf"),_=r.topLevelTypes,E={abort:{phasedRegistrationNames:{bubbled:b({onAbort:!0}),captured:b({onAbortCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:b({onBlur:!0}),captured:b({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:b({onCanPlay:!0}),captured:b({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:b({onCanPlayThrough:!0}),captured:b({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:b({onClick:!0}),captured:b({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:b({onContextMenu:!0}),captured:b({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:b({onCopy:!0}),captured:b({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:b({onCut:!0}),captured:b({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:b({onDoubleClick:!0}),captured:b({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:b({onDrag:!0}),captured:b({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:b({onDragEnd:!0}),captured:b({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:b({onDragEnter:!0}),captured:b({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:b({onDragExit:!0}),captured:b({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:b({onDragLeave:!0}),captured:b({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:b({onDragOver:!0}),captured:b({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:b({onDragStart:!0}),captured:b({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:b({onDrop:!0}),captured:b({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:b({onDurationChange:!0}),captured:b({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:b({onEmptied:!0}),captured:b({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:b({onEncrypted:!0}),captured:b({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:b({onEnded:!0}),captured:b({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:b({onError:!0}),captured:b({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:b({onFocus:!0}),captured:b({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:b({onInput:!0}),captured:b({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:b({onKeyDown:!0}),captured:b({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:b({onKeyPress:!0}),captured:b({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:b({onKeyUp:!0}),captured:b({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:b({onLoad:!0}),captured:b({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:b({onLoadedData:!0}),captured:b({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:b({onLoadedMetadata:!0}),captured:b({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:b({onLoadStart:!0}),captured:b({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:b({onMouseDown:!0}),captured:b({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:b({onMouseMove:!0}),captured:b({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:b({onMouseOut:!0}),captured:b({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:b({onMouseOver:!0}),captured:b({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:b({onMouseUp:!0}),captured:b({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:b({onPaste:!0}),captured:b({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:b({onPause:!0}),captured:b({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:b({onPlay:!0}),captured:b({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:b({onPlaying:!0}),captured:b({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:b({onProgress:!0}),captured:b({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:b({onRateChange:!0}),captured:b({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:b({onReset:!0}),captured:b({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:b({onScroll:!0}),captured:b({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:b({onSeeked:!0}),captured:b({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:b({onSeeking:!0}),captured:b({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:b({onStalled:!0}),captured:b({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:b({onSubmit:!0}),captured:b({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:b({onSuspend:!0}),captured:b({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:b({onTimeUpdate:!0}),captured:b({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:b({onTouchCancel:!0}),captured:b({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:b({onTouchEnd:!0}),captured:b({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:b({onTouchMove:!0}),captured:b({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:b({onTouchStart:!0}),captured:b({onTouchStartCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:b({onVolumeChange:!0}),captured:b({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:b({onWaiting:!0}),captured:b({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:b({onWheel:!0}),captured:b({onWheelCapture:!0})}}},w={topAbort:E.abort,topBlur:E.blur,topCanPlay:E.canPlay,topCanPlayThrough:E.canPlayThrough,topClick:E.click,topContextMenu:E.contextMenu,topCopy:E.copy,topCut:E.cut,topDoubleClick:E.doubleClick,topDrag:E.drag,topDragEnd:E.dragEnd,topDragEnter:E.dragEnter,topDragExit:E.dragExit,topDragLeave:E.dragLeave,topDragOver:E.dragOver,topDragStart:E.dragStart,topDrop:E.drop,topDurationChange:E.durationChange,topEmptied:E.emptied,topEncrypted:E.encrypted,topEnded:E.ended,topError:E.error,topFocus:E.focus,topInput:E.input,topKeyDown:E.keyDown,topKeyPress:E.keyPress,topKeyUp:E.keyUp,topLoad:E.load,topLoadedData:E.loadedData,topLoadedMetadata:E.loadedMetadata,topLoadStart:E.loadStart,topMouseDown:E.mouseDown,topMouseMove:E.mouseMove,topMouseOut:E.mouseOut,topMouseOver:E.mouseOver,topMouseUp:E.mouseUp,topPaste:E.paste,topPause:E.pause,topPlay:E.play,topPlaying:E.playing,topProgress:E.progress,topRateChange:E.rateChange,topReset:E.reset,topScroll:E.scroll,topSeeked:E.seeked,topSeeking:E.seeking,topStalled:E.stalled,topSubmit:E.submit,topSuspend:E.suspend,topTimeUpdate:E.timeUpdate,topTouchCancel:E.touchCancel,topTouchEnd:E.touchEnd,topTouchMove:E.touchMove,topTouchStart:E.touchStart,topVolumeChange:E.volumeChange,topWaiting:E.waiting,topWheel:E.wheel};for(var O in w)w[O].dependencies=[O];var C=b({onClick:null}),x={},N={eventTypes:E,extractEvents:function(e,t,r,o,a){var m=w[e];if(!m)return null;var b;switch(e){case _.topAbort:case _.topCanPlay:case _.topCanPlayThrough:case _.topDurationChange:case _.topEmptied:case _.topEncrypted:case _.topEnded:case _.topError:case _.topInput:case _.topLoad:case _.topLoadedData:case _.topLoadedMetadata:case _.topLoadStart:case _.topPause:case _.topPlay:case _.topPlaying:case _.topProgress:case _.topRateChange:case _.topReset:case _.topSeeked:case _.topSeeking:case _.topStalled:case _.topSubmit:case _.topSuspend:case _.topTimeUpdate:case _.topVolumeChange:case _.topWaiting:b=u;break;case _.topKeyPress:if(0===g(o))return null;case _.topKeyDown:case _.topKeyUp:b=l;break;case _.topBlur:case _.topFocus:b=c;break;case _.topClick:if(2===o.button)return null;case _.topContextMenu:case _.topDoubleClick:case _.topMouseDown:case _.topMouseMove:case _.topMouseOut:case _.topMouseOver:case _.topMouseUp:b=p;break;case _.topDrag:case _.topDragEnd:case _.topDragEnter:case _.topDragExit:case _.topDragLeave:case _.topDragOver:case _.topDragStart:case _.topDrop:b=f;break;case _.topTouchCancel:case _.topTouchEnd:case _.topTouchMove:case _.topTouchStart:b=d;break;case _.topScroll:b=h;break;case _.topWheel:b=v;break;case _.topCopy:case _.topCut:case _.topPaste:b=s}b?void 0:"production"!==n.env.NODE_ENV?y(!1,"SimpleEventPlugin: Unhandled event type, `%s`.",e):y(!1);var E=b.getPooled(m,r,o,a);return i.accumulateTwoPhaseDispatches(E),E},didPutListener:function(e,t,n){if(t===C){var r=a.getNode(e);x[e]||(x[e]=o.listen(r,"click",m))}},willDeleteListener:function(e,t){t===C&&(x[e].remove(),delete x[e])}};t.exports=N}).call(this,e("_process"))},{"./EventConstants":181,"./EventPropagators":185,"./ReactMount":232,"./SyntheticClipboardEvent":256,"./SyntheticDragEvent":258,"./SyntheticEvent":259,"./SyntheticFocusEvent":260,"./SyntheticKeyboardEvent":262,"./SyntheticMouseEvent":263,"./SyntheticTouchEvent":264,"./SyntheticUIEvent":265,"./SyntheticWheelEvent":266,"./getEventCharCode":277,_process:114,"fbjs/lib/EventListener":19,"fbjs/lib/emptyFunction":26,"fbjs/lib/invariant":34,"fbjs/lib/keyOf":38}],256:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticEvent"),i={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};o.augmentClass(r,i),t.exports=r},{"./SyntheticEvent":259}],257:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticEvent"),i={data:null};o.augmentClass(r,i),t.exports=r},{"./SyntheticEvent":259}],258:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticMouseEvent"),i={dataTransfer:null};o.augmentClass(r,i),t.exports=r},{"./SyntheticMouseEvent":263}],259:[function(e,t,n){(function(n){"use strict";function r(e,t,n,r){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n,this.target=r,this.currentTarget=r;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){var s=o[i];s?this[i]=s(n):this[i]=n[i]}var u=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;u?this.isDefaultPrevented=a.thatReturnsTrue:this.isDefaultPrevented=a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse}var o=e("./PooledClass"),i=e("./Object.assign"),a=e("fbjs/lib/emptyFunction"),s=e("fbjs/lib/warning"),u={type:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};i(r.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(e,"This synthetic event is reused for performance reasons. If you're seeing this, you're calling `preventDefault` on a released/nullified synthetic event. This is a no-op. See https://fb.me/react-event-pooling for more information."):void 0),e&&(e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(e,"This synthetic event is reused for performance reasons. If you're seeing this, you're calling `stopPropagation` on a released/nullified synthetic event. This is a no-op. See https://fb.me/react-event-pooling for more information."):void 0),e&&(e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),r.Interface=u,r.augmentClass=function(e,t){var n=this,r=Object.create(n.prototype);i(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=i({},n.Interface,t),e.augmentClass=n.augmentClass,o.addPoolingTo(e,o.fourArgumentPooler)},o.addPoolingTo(r,o.fourArgumentPooler),t.exports=r}).call(this,e("_process"))},{"./Object.assign":189,"./PooledClass":190,_process:114,"fbjs/lib/emptyFunction":26,"fbjs/lib/warning":45}],260:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticUIEvent"),i={relatedTarget:null};o.augmentClass(r,i),t.exports=r},{"./SyntheticUIEvent":265}],261:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticEvent"),i={data:null};o.augmentClass(r,i),t.exports=r},{"./SyntheticEvent":259}],262:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticUIEvent"),i=e("./getEventCharCode"),a=e("./getEventKey"),s=e("./getEventModifierState"),u={key:a,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:s,charCode:function(e){return"keypress"===e.type?i(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?i(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};o.augmentClass(r,u),t.exports=r},{"./SyntheticUIEvent":265,"./getEventCharCode":277,"./getEventKey":278,"./getEventModifierState":279}],263:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticUIEvent"),i=e("./ViewportMetrics"),a=e("./getEventModifierState"),s={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:a,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+i.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+i.currentScrollTop}};o.augmentClass(r,s),t.exports=r},{"./SyntheticUIEvent":265,"./ViewportMetrics":268,"./getEventModifierState":279}],264:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticUIEvent"),i=e("./getEventModifierState"),a={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:i};o.augmentClass(r,a),t.exports=r},{"./SyntheticUIEvent":265,"./getEventModifierState":279}],265:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticEvent"),i=e("./getEventTarget"),a={view:function(e){if(e.view)return e.view;var t=i(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window;
},detail:function(e){return e.detail||0}};o.augmentClass(r,a),t.exports=r},{"./SyntheticEvent":259,"./getEventTarget":280}],266:[function(e,t,n){"use strict";function r(e,t,n,r){o.call(this,e,t,n,r)}var o=e("./SyntheticMouseEvent"),i={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(r,i),t.exports=r},{"./SyntheticMouseEvent":263}],267:[function(e,t,n){(function(n){"use strict";var r=e("fbjs/lib/invariant"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,o,i,a,s,u,c){this.isInTransaction()?"production"!==n.env.NODE_ENV?r(!1,"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):r(!1):void 0;var l,p;try{this._isInTransaction=!0,l=!0,this.initializeAll(0),p=e.call(t,o,i,a,s,u,c),l=!1}finally{try{if(l)try{this.closeAll(0)}catch(f){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return p},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(o){}}}},closeAll:function(e){this.isInTransaction()?void 0:"production"!==n.env.NODE_ENV?r(!1,"Transaction.closeAll(): Cannot close transaction when none are open."):r(!1);for(var t=this.transactionWrappers,o=e;o<t.length;o++){var a,s=t[o],u=this.wrapperInitData[o];try{a=!0,u!==i.OBSERVED_ERROR&&s.close&&s.close.call(this,u),a=!1}finally{if(a)try{this.closeAll(o+1)}catch(c){}}}this.wrapperInitData.length=0}},i={Mixin:o,OBSERVED_ERROR:{}};t.exports=i}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],268:[function(e,t,n){"use strict";var r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){r.currentScrollLeft=e.x,r.currentScrollTop=e.y}};t.exports=r},{}],269:[function(e,t,n){(function(n){"use strict";function r(e,t){if(null==t?"production"!==n.env.NODE_ENV?o(!1,"accumulateInto(...): Accumulated items must not be null or undefined."):o(!1):void 0,null==e)return t;var r=Array.isArray(e),i=Array.isArray(t);return r&&i?(e.push.apply(e,t),e):r?(e.push(t),e):i?[e].concat(t):[e,t]}var o=e("fbjs/lib/invariant");t.exports=r}).call(this,e("_process"))},{_process:114,"fbjs/lib/invariant":34}],270:[function(e,t,n){"use strict";function r(e){for(var t=1,n=0,r=0,i=e.length,a=-4&i;a>r;){for(;r<Math.min(r+4096,a);r+=4)n+=(t+=e.charCodeAt(r))+(t+=e.charCodeAt(r+1))+(t+=e.charCodeAt(r+2))+(t+=e.charCodeAt(r+3));t%=o,n%=o}for(;i>r;r++)n+=t+=e.charCodeAt(r);return t%=o,n%=o,t|n<<16}var o=65521;t.exports=r},{}],271:[function(e,t,n){"use strict";function r(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var r=isNaN(t);return r||0===t||i.hasOwnProperty(e)&&i[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var o=e("./CSSProperty"),i=o.isUnitlessNumber;t.exports=r},{"./CSSProperty":170}],272:[function(e,t,n){(function(n){"use strict";function r(e,t,r,a,s){var u=!1;if("production"!==n.env.NODE_ENV){var c=function(){return"production"!==n.env.NODE_ENV?i(u,"React.%s is deprecated. Please use %s.%s from require('%s') instead.",e,t,e,r):void 0,u=!0,s.apply(a,arguments)};return o(c,s)}return s}var o=e("./Object.assign"),i=e("fbjs/lib/warning");t.exports=r}).call(this,e("_process"))},{"./Object.assign":189,_process:114,"fbjs/lib/warning":45}],273:[function(e,t,n){"use strict";function r(e){return i[e]}function o(e){return(""+e).replace(a,r)}var i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},a=/[&><"']/g;t.exports=o},{}],274:[function(e,t,n){(function(n){"use strict";function r(e){if("production"!==n.env.NODE_ENV){var t=o.current;null!==t&&("production"!==n.env.NODE_ENV?u(t._warnedAboutRefsInRender,"%s is accessing getDOMNode or findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",t.getName()||"A component"):void 0,t._warnedAboutRefsInRender=!0)}return null==e?null:1===e.nodeType?e:i.has(e)?a.getNodeFromInstance(e):(null!=e.render&&"function"==typeof e.render?"production"!==n.env.NODE_ENV?s(!1,"findDOMNode was called on an unmounted component."):s(!1):void 0,void("production"!==n.env.NODE_ENV?s(!1,"Element appears to be neither ReactComponent nor DOMNode (keys: %s)",Object.keys(e)):s(!1)))}var o=e("./ReactCurrentOwner"),i=e("./ReactInstanceMap"),a=e("./ReactMount"),s=e("fbjs/lib/invariant"),u=e("fbjs/lib/warning");t.exports=r}).call(this,e("_process"))},{"./ReactCurrentOwner":201,"./ReactInstanceMap":229,"./ReactMount":232,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],275:[function(e,t,n){(function(n){"use strict";function r(e,t,r){var o=e,i=void 0===o[r];"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?a(i,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):void 0),i&&null!=t&&(o[r]=t)}function o(e){if(null==e)return e;var t={};return i(e,r,t),t}var i=e("./traverseAllChildren"),a=e("fbjs/lib/warning");t.exports=o}).call(this,e("_process"))},{"./traverseAllChildren":293,_process:114,"fbjs/lib/warning":45}],276:[function(e,t,n){"use strict";var r=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=r},{}],277:[function(e,t,n){"use strict";function r(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}t.exports=r},{}],278:[function(e,t,n){"use strict";function r(e){if(e.key){var t=i[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=o(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?a[e.keyCode]||"Unidentified":""}var o=e("./getEventCharCode"),i={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},a={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=r},{"./getEventCharCode":277}],279:[function(e,t,n){"use strict";function r(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=i[e];return r?!!n[r]:!1}function o(e){return r}var i={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=o},{}],280:[function(e,t,n){"use strict";function r(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=r},{}],281:[function(e,t,n){"use strict";function r(e){var t=e&&(o&&e[o]||e[i]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";t.exports=r},{}],282:[function(e,t,n){"use strict";function r(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function o(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function i(e,t){for(var n=r(e),i=0,a=0;n;){if(3===n.nodeType){if(a=i+n.textContent.length,t>=i&&a>=t)return{node:n,offset:t-i};i=a}n=r(o(n))}}t.exports=i},{}],283:[function(e,t,n){"use strict";function r(){return!i&&o.canUseDOM&&(i="textContent"in document.documentElement?"textContent":"innerText"),i}var o=e("fbjs/lib/ExecutionEnvironment"),i=null;t.exports=r},{"fbjs/lib/ExecutionEnvironment":20}],284:[function(e,t,n){(function(n){"use strict";function r(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function o(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function i(e){var t;if(null===e||e===!1)t=new s(i);else if("object"==typeof e){var a=e;!a||"function"!=typeof a.type&&"string"!=typeof a.type?"production"!==n.env.NODE_ENV?l(!1,"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==a.type?a.type:typeof a.type,r(a._owner)):l(!1):void 0,t="string"==typeof a.type?u.createInternalComponent(a):o(a.type)?new a.type(a):new f}else"string"==typeof e||"number"==typeof e?t=u.createInstanceForText(e):"production"!==n.env.NODE_ENV?l(!1,"Encountered invalid React node of type %s",typeof e):l(!1);return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?p("function"==typeof t.construct&&"function"==typeof t.mountComponent&&"function"==typeof t.receiveComponent&&"function"==typeof t.unmountComponent,"Only React Components can be mounted."):void 0),t.construct(e),t._mountIndex=0,t._mountImage=null,"production"!==n.env.NODE_ENV&&(t._isOwnerNecessary=!1,t._warnedAboutRefsInRender=!1),"production"!==n.env.NODE_ENV&&Object.preventExtensions&&Object.preventExtensions(t),t}var a=e("./ReactCompositeComponent"),s=e("./ReactEmptyComponent"),u=e("./ReactNativeComponent"),c=e("./Object.assign"),l=e("fbjs/lib/invariant"),p=e("fbjs/lib/warning"),f=function(){};c(f.prototype,a.Mixin,{_instantiateReactComponent:i}),t.exports=i}).call(this,e("_process"))},{"./Object.assign":189,"./ReactCompositeComponent":200,"./ReactEmptyComponent":221,"./ReactNativeComponent":235,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],285:[function(e,t,n){"use strict";function r(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var a=document.createElement("div");a.setAttribute(n,"return;"),r="function"==typeof a[n]}return!r&&o&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,i=e("fbjs/lib/ExecutionEnvironment");i.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=r},{"fbjs/lib/ExecutionEnvironment":20}],286:[function(e,t,n){"use strict";function r(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&o[e.type]||"textarea"===t)}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=r},{}],287:[function(e,t,n){(function(n){"use strict";function r(e){return o.isValidElement(e)?void 0:"production"!==n.env.NODE_ENV?i(!1,"onlyChild must be passed a children with exactly one child."):i(!1),e}var o=e("./ReactElement"),i=e("fbjs/lib/invariant");t.exports=r}).call(this,e("_process"))},{"./ReactElement":219,_process:114,"fbjs/lib/invariant":34}],288:[function(e,t,n){"use strict";function r(e){return'"'+o(e)+'"'}var o=e("./escapeTextContentForBrowser");t.exports=r},{"./escapeTextContentForBrowser":273}],289:[function(e,t,n){"use strict";var r=e("./ReactMount");t.exports=r.renderSubtreeIntoContainer},{"./ReactMount":232}],290:[function(e,t,n){"use strict";var r=e("fbjs/lib/ExecutionEnvironment"),o=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,a=function(e,t){e.innerHTML=t};if("undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction&&(a=function(e,t){MSApp.execUnsafeLocalFunction(function(){e.innerHTML=t})}),r.canUseDOM){var s=document.createElement("div");s.innerHTML=" ",""===s.innerHTML&&(a=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),o.test(t)||"<"===t[0]&&i.test(t)){e.innerHTML=String.fromCharCode(65279)+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=a},{"fbjs/lib/ExecutionEnvironment":20}],291:[function(e,t,n){"use strict";var r=e("fbjs/lib/ExecutionEnvironment"),o=e("./escapeTextContentForBrowser"),i=e("./setInnerHTML"),a=function(e,t){e.textContent=t};r.canUseDOM&&("textContent"in document.documentElement||(a=function(e,t){i(e,o(t))})),t.exports=a},{"./escapeTextContentForBrowser":273,"./setInnerHTML":290,"fbjs/lib/ExecutionEnvironment":20}],292:[function(e,t,n){"use strict";function r(e,t){var n=null===e||e===!1,r=null===t||t===!1;if(n||r)return n===r;var o=typeof e,i=typeof t;return"string"===o||"number"===o?"string"===i||"number"===i:"object"===i&&e.type===t.type&&e.key===t.key}t.exports=r},{}],293:[function(e,t,n){(function(n){"use strict";function r(e){return g[e]}function o(e,t){return e&&null!=e.key?a(e.key):t.toString(36)}function i(e){return(""+e).replace(y,r)}function a(e){return"$"+i(e)}function s(e,t,r,i){var u=typeof e;if(("undefined"===u||"boolean"===u)&&(e=null),null===e||"string"===u||"number"===u||l.isValidElement(e))return r(i,e,""===t?v+o(e,0):t),1;var p,g,y=0,_=""===t?v:t+m;if(Array.isArray(e))for(var E=0;E<e.length;E++)p=e[E],g=_+o(p,E),y+=s(p,g,r,i);else{var w=f(e);if(w){var O,C=w.call(e);if(w!==e.entries)for(var x=0;!(O=C.next()).done;)p=O.value,g=_+o(p,x++),y+=s(p,g,r,i);else for("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?h(b,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead."):void 0,b=!0);!(O=C.next()).done;){var N=O.value;N&&(p=N[1],g=_+a(N[0])+m+o(p,0),y+=s(p,g,r,i))}}else if("object"===u){var D="";if("production"!==n.env.NODE_ENV&&(D=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(D=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),c.current)){var R=c.current.getName();R&&(D+=" Check the render method of `"+R+"`.")}var T=String(e);"production"!==n.env.NODE_ENV?d(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===T?"object with keys {"+Object.keys(e).join(", ")+"}":T,D):d(!1)}}return y}function u(e,t,n){return null==e?0:s(e,"",t,n)}var c=e("./ReactCurrentOwner"),l=e("./ReactElement"),p=e("./ReactInstanceHandles"),f=e("./getIteratorFn"),d=e("fbjs/lib/invariant"),h=e("fbjs/lib/warning"),v=p.SEPARATOR,m=":",g={"=":"=0",".":"=1",":":"=2"},y=/[=.:]/g,b=!1;t.exports=u}).call(this,e("_process"))},{"./ReactCurrentOwner":201,"./ReactElement":219,"./ReactInstanceHandles":228,"./getIteratorFn":281,_process:114,"fbjs/lib/invariant":34,"fbjs/lib/warning":45}],294:[function(e,t,n){(function(n){"use strict";var r=e("./Object.assign"),o=e("fbjs/lib/emptyFunction"),i=e("fbjs/lib/warning"),a=o;if("production"!==n.env.NODE_ENV){var s=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],u=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],c=u.concat(["button"]),l=["dd","dt","li","option","optgroup","p","rp","rt"],p={parentTag:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null},f=function(e,t,n){var o=r({},e||p),i={tag:t,instance:n};return-1!==u.indexOf(t)&&(o.aTagInScope=null,o.buttonTagInScope=null,o.nobrTagInScope=null),-1!==c.indexOf(t)&&(o.pTagInButtonScope=null),-1!==s.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(o.listItemTagAutoclosing=null,o.dlItemTagAutoclosing=null),o.parentTag=i,"form"===t&&(o.formTag=i),"a"===t&&(o.aTagInScope=i),"button"===t&&(o.buttonTagInScope=i),"nobr"===t&&(o.nobrTagInScope=i),"p"===t&&(o.pTagInButtonScope=i),"li"===t&&(o.listItemTagAutoclosing=i),("dd"===t||"dt"===t)&&(o.dlItemTagAutoclosing=i),o},d=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===l.indexOf(t);case"caption":case"col":case"colgroup":case"frame":case"head":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0},h=function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null},v=function(e){if(!e)return[];var t=[];do t.push(e);while(e=e._currentElement._owner);return t.reverse(),t},m={};a=function(e,t,r){r=r||p;var o=r.parentTag,a=o&&o.tag,s=d(e,a)?null:o,u=s?null:h(e,r),c=s||u;if(c){var l,f=c.tag,g=c.instance,y=t&&t._currentElement._owner,b=g&&g._currentElement._owner,_=v(y),E=v(b),w=Math.min(_.length,E.length),O=-1;for(l=0;w>l&&_[l]===E[l];l++)O=l;var C="(unknown)",x=_.slice(O+1).map(function(e){return e.getName()||C}),N=E.slice(O+1).map(function(e){return e.getName()||C}),D=[].concat(-1!==O?_[O].getName()||C:[],N,f,u?["..."]:[],x,e).join(" > "),R=!!s+"|"+e+"|"+f+"|"+D;if(m[R])return;if(m[R]=!0,s){var T="";"table"===f&&"tr"===e&&(T+=" Add a <tbody> to your code to match the DOM tree generated by the browser."),"production"!==n.env.NODE_ENV?i(!1,"validateDOMNesting(...): <%s> cannot appear as a child of <%s>. See %s.%s",e,f,D,T):void 0}else"production"!==n.env.NODE_ENV?i(!1,"validateDOMNesting(...): <%s> cannot appear as a descendant of <%s>. See %s.",e,f,D):void 0}},a.ancestorInfoContextKey="__validateDOMNesting_ancestorInfo$"+Math.random().toString(36).slice(2),a.updatedAncestorInfo=f,a.isTagValidInContext=function(e,t){t=t||p;var n=t.parentTag,r=n&&n.tag;return d(e,r)&&!h(e,t)}}t.exports=a}).call(this,e("_process"))},{"./Object.assign":189,_process:114,"fbjs/lib/emptyFunction":26,"fbjs/lib/warning":45}],295:[function(e,t,n){"use strict";t.exports=e("./lib/React")},{"./lib/React":191}],296:[function(e,t,n){(function(e){"use strict";var n=function(){};"production"!==e.env.NODE_ENV&&(n=function(e,t,n){var r=arguments.length;n=new Array(r>2?r-2:0);for(var o=2;r>o;o++)n[o-2]=arguments[o];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(t.length<10||/^[s\W]*$/.test(t))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+t);if(!e){var i=0,a="Warning: "+t.replace(/%s/g,function(){return n[i++]});"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(s){}}}),t.exports=n}).call(this,e("_process"))},{_process:114}],297:[function(e,t,n){"use strict";var r=e("react"),o=e("react-dom"),i=e("history"),a=e("react-router").Router,s=e("react-router").Route,u=e("./js/components/index-view"),c=e("./js/components/result-view"),l=i.createHashHistory();o.render(r.createElement(a,{history:l},r.createElement(s,{path:"/",component:u}),r.createElement(s,{path:"search",component:c})),document.getElementById("main"))},{"./js/components/index-view":307,"./js/components/result-view":310,history:63,react:295,"react-dom":116,"react-router":142}],298:[function(e,t,n){"use strict";var r=e("../dispatcher/dispatcher"),o=e("../constants/constants").ActionTypes;t.exports={search:function(e){r.dispatch({type:o.SEARCH,query:e})},filter:function(e){r.dispatch({type:o.FILTER,filters:e})},paging:function(e){r.dispatch({type:o.PAGING,offset:e})}}},{"../constants/constants":313,"../dispatcher/dispatcher":314}],299:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/aggregation-select.js",components:u,locals:[],imports:[s]}),l=e("lodash"),p=e("react"),f=e("react-select");e("../stores/aggregation-store");t.exports=r("_$Unknown")(p.createClass({getDefaultProps:function(){return{items:[],type:null,placeholder:"Select Options"}},getInitialState:function(){return{values:[],isLoading:!0}},componentWillReceiveProps:function(e){l.isEmpty(e.items)||this.setState({isLoading:!1})},shouldComponentUpdate:function(e,t){return t.values!==this.state.values?!0:e.items!==this.props.items?!0:!1},onChange:function(e,t){e?this.setState({values:l.compact(e.split(","))}):this.setState({values:[]}),"function"==typeof this.props.onChange&&this.props.onChange(e)},options:function(){return l.map(this.props.items,function(e){return{label:e.key,value:e.key}})},render:function(){return p.createElement(f,{isLoading:this.state.isLoading,name:"countries",multi:!0,placeholder:this.props.placeholder,options:this.options(),onChange:this.onChange,value:this.state.values})}}))},{"../stores/aggregation-store":315,"livereactload/babel-transform":76,lodash:80,react:295,"react-select":165}],300:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/article-list-item.js",components:u,locals:[],imports:[s]}),l=e("react");t.exports=r("_$Unknown")(l.createClass({render:function(){return l.createElement("article",{className:"article"},l.createElement("h1",{className:"title"},l.createElement("a",{target:"_blank",href:this.props.article.url,dangerouslySetInnerHTML:{__html:this.props.article.title}})),l.createElement("p",{className:"url"},l.createElement("a",{target:"_blank",href:this.props.article.url},this.props.article.url)),l.createElement("p",{className:"snippet",dangerouslySetInnerHTML:{__html:this.props.article.snippet}}))}}))},{"livereactload/babel-transform":76,react:295}],301:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/article-list.js",components:u,locals:[],imports:[s]}),l=e("lodash"),p=e("react"),f=e("../stores/article-store"),d=e("./article-list-item"),h=e("./spinner");t.exports=r("_$Unknown")(p.createClass({_onChange:function(){this.setState({articles:f.getArticles()}),this.setState({isLoading:!1})},componentDidMount:function(){f.addListener(this._onChange)},componentWillUnmount:function(){f.removeListener(this._onChange)},getInitialState:function(){return{articles:f.getArticles(),isLoading:!0}},render:function(){return this.state.isLoading?p.createElement(h,null):p.createElement("section",{className:"articles"},l.map(this.state.articles,function(e){return p.createElement(d,{key:e.id,article:e})}))}}))},{"../stores/article-store":316,"./article-list-item":300,"./spinner":312,"livereactload/babel-transform":76,lodash:80,react:295}],302:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/condensed-form.js",components:u,locals:[],imports:[s]}),l=e("react"),p=e("./header"),f=e("./keyword-input"),d=e("./aggregation-select");t.exports=r("_$Unknown")(l.createClass({render:function(){return l.createElement("div",{className:"row"},l.createElement("div",{className:"col-md-3"},l.createElement(p,{cssClass:"header-condensed"})),l.createElement("div",{className:"col-md-3"},l.createElement(f,{keyword:this.props.keyword,onSubmit:this.props.onSubmit,onChange:this.props.onKeywordChange,expanded:!1})),l.createElement("div",{className:"col-md-2"},l.createElement(d,{type:"countries",placeholder:"Select Country",value:this.props.countries,onChange:this.props.onCountryChange,items:this.props.aggregations.countries})),l.createElement("div",{className:"col-md-2"},l.createElement(d,{type:"industries",placeholder:"Select Industry",value:this.props.industries,onChange:this.props.onIndustryChange,items:this.props.aggregations.industries})),l.createElement("div",{className:"col-md-2"},l.createElement(d,{type:"topics",placeholder:"Select Topic",value:this.props.topics,onChange:this.props.onTopicChange,items:this.props.aggregations.topics})))}}))},{"./aggregation-select":299,"./header":306,"./keyword-input":308,"livereactload/babel-transform":76,react:295}],303:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/expanded-form.js",components:u,locals:[],imports:[s]}),l=e("react"),p=e("./header"),f=e("./keyword-input"),d=e("./aggregation-select");t.exports=r("_$Unknown")(l.createClass({render:function(){return l.createElement("div",null,l.createElement("div",{className:"row page-header"},l.createElement(p,{cssClass:"text-center"})),l.createElement("div",{className:"row"},l.createElement("div",{className:"col-md-8 keyword-input"},l.createElement("p",{className:"text-muted"},"Search by Keyword"),l.createElement(f,{keyword:this.props.keyword,onSubmit:this.props.onSubmit,onChange:this.props.onKeywordChange})),l.createElement("div",{className:"col-md-4 category-input"},l.createElement("p",{className:"text-muted"},"Search by Category"),l.createElement(d,{type:"countries",onChange:this.props.onCountryChange,placeholder:"Select Country",items:this.props.aggregations.countries}),l.createElement(d,{type:"industries",onChange:this.props.onIndustryChange,placeholder:"Select Industry",items:this.props.aggregations.industries}),l.createElement(d,{type:"topics",onChange:this.props.onTopicChange,placeholder:"Select Topic",items:this.props.aggregations.topics}))))}}))},{"./aggregation-select":299,"./header":306,"./keyword-input":308,"livereactload/babel-transform":76,react:295}],304:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/filters.js",components:u,locals:[],imports:[s]}),l=e("jquery"),p=e("lodash"),f=e("react"),d=e("../actors/article-actor"),h=e("../stores/article-store");t.exports=r("_$Unknown")(f.createClass({_onChange:function(){this.setState({filters:h.getAggregations()})},getInitialState:function(){return{filters:h.getAggregations()}},componentDidMount:function(){h.addListener(this._onChange)},componentWillUnmount:function(){h.removeListener(this._onChange)},createNestedFilterOption:function(e,t,n,r){return f.createElement("li",{className:"list-group-item checkbox",key:n},f.createElement("label",null,f.createElement("input",{onChange:this.onFilter,name:t,type:"checkbox",value:n}),n),this.createFilterList(e[n],t,this.createNestedFilterOption))},createFilterOption:function(e,t,n,r){return f.createElement("li",{className:"list-group-item checkbox",key:n},f.createElement("label",null,f.createElement("input",{onChange:this.onFilter,name:t,type:"checkbox",value:n}),n))},createFilterList:function(e,t,n){return p.isEmpty(e)?null:f.createElement("ul",{className:"list-group"},p.keys(e).map(n.bind(null,e,t)))},onFilter:function(e){var t=p.reduce(l("#filters input:checked"),function(e,t,n){switch(t.name){case"country-filter":e.countries.push(t.value);break;case"industry-filter":e.industries.push(t.value);break;case"topic-filter":e.topics.push(t.value)}return e},{countries:[],industries:[],topics:[]});d.filter(t)},render:function(){return f.createElement("div",{id:"filters"},f.createElement("section",null,f.createElement("h5",null,"Country"),f.createElement("div",{className:"overflow"},this.createFilterList(this.state.filters.countries,"country-filter",this.createFilterOption))),f.createElement("section",null,f.createElement("h5",null,"Industry"),f.createElement("div",{className:"overflow"},this.createFilterList(this.state.filters.industries,"industry-filter",this.createNestedFilterOption))),f.createElement("section",null,f.createElement("h5",null,"Topic"),f.createElement("div",{className:"overflow"},this.createFilterList(this.state.filters.topics,"topic-filter",this.createNestedFilterOption))))}}))},{"../actors/article-actor":298,"../stores/article-store":316,jquery:74,"livereactload/babel-transform":76,lodash:80,react:295}],305:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/form.js",components:u,locals:[],imports:[s]}),l=e("lodash"),p=(e("jquery"),e("react")),f=e("./expanded-form"),d=e("./condensed-form"),h=(e("../actors/article-actor"),e("../stores/article-store")),v=e("../stores/aggregation-store");t.exports=r("_$Unknown")(p.createClass({getDefaultProps:function(){return{expanded:!0}},getInitialState:function(){return{keyword:h.getQuery().q||"",countries:h.getQuery().countries||"",industries:h.getQuery().industries||"",topics:h.getQuery().topics||"",aggregations:{}}},componentWillMount:function(){v.getAll(function(e){this.setState({aggregations:e})}.bind(this))},handleSubmit:function(e){var t=l.pick({q:this.state.keyword,countries:this.state.countries,industries:this.state.industries,topics:this.state.topics},l.identity);this.props.history.pushState(t,"/search",t)},handleKeywordChange:function(e){this.setState({keyword:e.target.value})},handleCountryChange:function(e){this.setState({countries:e})},handleIndustryChange:function(e){this.setState({industries:e})},handleTopicChange:function(e){this.setState({
topics:e})},view:function(){var e={keyword:this.state.keyword,countries:this.state.countries,industries:this.state.industries,topics:this.state.topics,aggregations:this.state.aggregations,onKeywordChange:this.handleKeywordChange,onCountryChange:this.handleCountryChange,onIndustryChange:this.handleIndustryChange,onSubmit:this.handleSubmit};return this.props.expanded?p.createElement(f,e):p.createElement(d,e)},render:function(){return this.view()}}))},{"../actors/article-actor":298,"../stores/aggregation-store":315,"../stores/article-store":316,"./condensed-form":302,"./expanded-form":303,jquery:74,"livereactload/babel-transform":76,lodash:80,react:295}],306:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/header.js",components:u,locals:[],imports:[s]}),l=e("react");t.exports=r("_$Unknown")(l.createClass({getDefaultProps:function(){return{cssClass:""}},render:function(){var e="header ";return e=e.concat(this.props.cssClass),l.createElement("header",{className:e},l.createElement("a",{href:"#",onClick:this.props.onClick},"Find Market Intelligence ",l.createElement("span",{className:"phase"},"beta")))}}))},{"livereactload/babel-transform":76,react:295}],307:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/index-view.js",components:u,locals:[],imports:[s]}),l=e("react"),p=e("react-router").History,f=e("./form");t.exports=r("_$Unknown")(l.createClass({mixins:[p],handleSubmit:function(e){e.preventDefault()},render:function(){return l.createElement(f,{onSubmit:this.handleSubmit,expanded:!0,history:this.history})}}))},{"./form":305,"livereactload/babel-transform":76,react:295,"react-router":142}],308:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/keyword-input.js",components:u,locals:[],imports:[s]}),l=e("react");t.exports=r("_$Unknown")(l.createClass({getDefaultProps:function(){return{expanded:!0}},handleEnter:function(e){"keydown"===e.type&&13===e.which&&this.props.onSubmit(e)},render:function(){var e="form-control",t="btn btn-success",n="input-group";return this.props.expanded&&(e=e.concat(" input-lg"),t=t.concat(" btn-lg"),n=n.concat(" col-md-10")),l.createElement("div",{className:n},l.createElement("input",{type:"text",className:e,name:"keyword",value:this.props.keyword,onChange:this.props.onChange,onKeyDown:this.handleEnter,placeholder:"Keyword"}),l.createElement("span",{className:"input-group-btn"},l.createElement("button",{className:t,type:"button",onClick:this.props.onSubmit},l.createElement("i",{className:"fa fa-search"}))))}}))},{"livereactload/babel-transform":76,react:295}],309:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/pagination.js",components:u,locals:[],imports:[s]}),l=e("jquery"),p=e("lodash"),f=e("react"),d=(e("../actors/article-actor"),e("../stores/article-store"));t.exports=r("_$Unknown")(f.createClass({_onChange:function(){this.setState({total:Math.ceil(d.getMetadata().total/this.props.pageSize)}),this.setState({current:d.getMetadata().offset/this.props.pageSize+1})},getDefaultProps:function(){return{pageSize:10,pageRange:10}},getInitialState:function(){return{total:0,current:1}},componentDidMount:function(){d.addListener(this._onChange)},componentWillUnmount:function(){d.removeListener(this._onChange)},handleClick:function(e){e.preventDefault(),this.props.history.pushState(null,"/search",p.assign({},d.getQuery(),{offset:e.target.dataset.offset}))},pages:function(){if(this.state.total<=this.props.pageRange)return p.range(1,this.state.total+1);var e=Math.ceil((this.props.pageRange+1)/2),t=this.state.current-e+1,n=this.state.current+this.props.pageRange;return p.chain(p.range(t,n)).filter(function(e){return e>0}).take(this.props.pageRange).value()},previousPage:function(){return this.state.current-1||1},nextPage:function(){return this.state.current===this.state.total?this.state.total:this.state.current+1},offset:function(e){return(e-1)*this.props.pageSize},url:function(e){var t=d.getQuery();return t.offset=this.offset(e),"search?"+l.param(t)},createPage:function(e,t){return f.createElement("li",{key:e,className:t?"active":""},f.createElement("a",{onClick:this.handleClick,href:this.url(e),"data-offset":this.offset(e)},e))},createPageRange:function(){var e=[];return p.forEach(this.pages(),function(t){e.push(this.createPage(t,this.state.current===t))}.bind(this)),e},render:function(){return f.createElement("nav",null,f.createElement("ul",{className:"pagination"},f.createElement("li",null,f.createElement("a",{href:this.url(1),"aria-label":"First",className:"fa fa-angle-double-left"})),f.createElement("li",null,f.createElement("a",{href:this.url(this.previousPage()),"aria-label":"Previous",className:"fa fa-angle-left"})),this.createPageRange(),f.createElement("li",null,f.createElement("a",{href:this.url(this.nextPage()),"aria-label":"Next",className:"fa fa-angle-right"})),f.createElement("li",null,f.createElement("a",{href:this.url(this.state.total),"aria-label":"Last",className:"fa fa-angle-double-right"}))))}}))},{"../actors/article-actor":298,"../stores/article-store":316,jquery:74,"livereactload/babel-transform":76,lodash:80,react:295}],310:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/result-view.js",components:u,locals:[],imports:[s]}),l=e("lodash"),p=e("react"),f=e("react-router").History,d=e("./form"),h=e("./filters"),v=e("./article-list"),m=e("./search-message"),g=e("./pagination"),y=e("../actors/article-actor");t.exports=r("_$Unknown")(p.createClass({mixins:[f],componentWillMount:function(){l.isEmpty(this.props.location.query)?this.history.pushState(null,"/"):y.search(this.props.location.query)},componentWillReceiveProps:function(e){e.location.query!==this.props.location.query&&y.search(e.location.query)},result:function(){return p.createElement("div",{className:"row"},p.createElement("div",{className:"col-md-3"},p.createElement("h4",{className:"text-muted"},"Advance Options"),p.createElement(h,null)),p.createElement("div",{className:"col-md-9"},p.createElement(m,null),p.createElement(v,null),p.createElement(g,{history:this.history})))},render:function(){return p.createElement("div",null,p.createElement("div",{className:"row"},p.createElement(d,{expanded:!1,history:this.history})),this.result())}}))},{"../actors/article-actor":298,"./article-list":301,"./filters":304,"./form":305,"./pagination":309,"./search-message":311,"livereactload/babel-transform":76,lodash:80,react:295,"react-router":142}],311:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/search-message.js",components:u,locals:[],imports:[s]}),l=e("lodash"),p=e("react"),f=e("../stores/article-store");t.exports=r("_$Unknown")(p.createClass({_onChange:function(){this.setState({total:f.getMetadata().total}),this.setState({query:f.getQuery()})},getInitialState:function(){return{total:0,query:f.getQuery()}},componentDidMount:function(){f.addListener(this._onChange)},componentWillUnmount:function(){f.removeListener(this._onChange)},message:function(){if(null===this.state.total)return null;var e=this.state.total?"results":"result";return e=e.concat(" were found"),e=l.isEmpty(this.state.query.q)?e.concat("."):e.concat(" for the search for")},count:function(){return p.createElement("strong",{className:"text-danger"},this.state.total)},keyword:function(){return this.state.query.q?p.createElement("strong",{className:"text-danger"},this.state.query.q,"."):null},render:function(){return p.createElement("h6",null,this.count()," ",this.message()," ",this.keyword())}}))},{"../stores/article-store":316,"livereactload/babel-transform":76,lodash:80,react:295}],312:[function(e,t,n){"use strict";function r(e){return function(t){return c(t,e)}}function o(e){return e&&e.__esModule?e:{"default":e}}var i=e("livereactload/babel-transform"),a=o(i),s=e("react"),u={_$Unknown:{}},c=(0,a["default"])({filename:"/Users/victor/work/govwizely/backbone-explorer/src/js/components/spinner.js",components:u,locals:[],imports:[s]}),l=e("react");t.exports=r("_$Unknown")(l.createClass({render:function(){return l.createElement("div",{className:"sk-folding-cube"},l.createElement("div",{className:"sk-cube sk-cube1"}),l.createElement("div",{className:"sk-cube sk-cube2"}),l.createElement("div",{className:"sk-cube sk-cube4"}),l.createElement("div",{className:"sk-cube sk-cube3"}))}}))},{"livereactload/babel-transform":76,react:295}],313:[function(e,t,n){"use strict";var r=e("keymirror");t.exports={ActionTypes:r({SEARCH:null,FILTER:null,PAGING:null})}},{keymirror:75}],314:[function(e,t,n){"use strict";var r=e("flux").Dispatcher;t.exports=new r},{flux:46}],315:[function(e,t,n){"use strict";var r=e("lodash"),o=e("axios"),i=e("../utils/aggregation-parser"),a="https://pluto.kerits.org/v1/articles/count",s={},u={countries:function(e){s.countries=e.countries},industries:function(e){s.industries=i.parse(e.industries)},topics:function(e){s.topics=i.parse(e.topics)}};t.exports={get:function(e,t){r.isEmpty(s[e])?this.fetch().then(function(n){t(s[e])}):t(s[e])},getAll:function(e){r.isEmpty(s)?this.fetch().then(function(t){e(s)}):e(s)},fetch:function(){return o.get(a).then(function(e){r(e.data.aggregations).chain().keys().each(function(t){u[t].call(this,e.data.aggregations)}).value()})}}},{"../utils/aggregation-parser":318,axios:1,lodash:80}],316:[function(e,t,n){"use strict";var r=e("lodash"),o=e("object-assign"),i=e("axios"),a=e("../dispatcher/dispatcher"),s=e("../constants/constants").ActionTypes,u=e("./store"),c=e("../utils/aggregation-parser"),l="https://pluto.kerits.org/v1/articles/search",p={},f={},d={},h={},v=function(e){d=e},m=function(e){p=e},g=function(e){f.countries=r.reduce(e.countries,function(e,t,n){return e[t.key]=t.key,e},{}),f.industries=c.parseAsTree(e.industries),f.topics=c.parseAsTree(e.topics)},y=function(e){h=e},b=function(e){u.call(this,e)};b.prototype=o({},u.prototype,{getArticles:function(){return r.clone(p)},getAggregations:function(){return r.clone(f)},getMetadata:function(){return r.clone(d)},getQuery:function(){return r.clone(h)},__onDispatch:function(e){switch(e.type){case s.SEARCH:return r.isEmpty(e.query)?null:(y(e.query),i.get(l,{params:h}).then(function(e){m(e.data.results),v(e.data.metadata),g(e.data.aggregations),this.__emitChange()}.bind(this))["catch"](function(e){console.log(e)}));case s.FILTER:var t=r.reduce(e.filters,function(e,t,n){return t.length&&(e[n]=t.join(",")),e},{offset:0});return console.log(t),i.get(l,{params:o({},h,t)}).then(function(t){m(t.data.results),v(t.data.metadata),console.log(e.filters),console.log(t.data.results),this.__emitChange()}.bind(this))["catch"](function(e){console.log(e)});case s.PAGING:return i.get(l,{params:o({},h,{offset:0})}).then(function(e){m(e.data.results),this.__emitChange()}.bind(this));default:return null}}}),b.prototype.constructor=b;var _=new b(a);t.exports=_},{"../constants/constants":313,"../dispatcher/dispatcher":314,"../utils/aggregation-parser":318,"./store":317,axios:1,lodash:80,"object-assign":113}],317:[function(e,t,n){"use strict";var r=e("events").EventEmitter,o=(e("../dispatcher/dispatcher"),function(e){this.__changed=!1,this.__changeEvent="change",this.__dispatcher=e,this.__emitter=new r,this.__dispatchToken=e.register(function(e){this.__invokeOnDispatch(e)}.bind(this))});o.prototype={__emitChange:function(e){this.__changed=!0},__onDispatch:function(e){console.log("Store.__onDispatch must be overridden!")},__invokeOnDispatch:function(e){this.__changed=!1;var t=this.__onDispatch(e);t&&t.then(function(){this.__changed&&this.__emitter.emit(this.__changeEvent)}.bind(this))},addListener:function(e){return this.__emitter.addListener(this.__changeEvent,e)},removeListener:function(e){return this.__emitter.removeListener(this.__changeEvent,e)},getDispatchToken:function(){return this.__dispatchToken}},t.exports=o},{"../dispatcher/dispatcher":314,events:18}],318:[function(e,t,n){"use strict";var r=e("lodash");t.exports={parseAsTree:function(e){var t={},n=function(e,t){for(var n=!0;n;){var r=e,o=t;i=void 0,n=!1;var i=r.shift();if(o[i]=o[i]||{},!r.length)return o;e=r,t=o[i],n=!0}};return r.each(e,function(e){var r=e.key.substring(1).split("/");n(r,t)}),t},parse:function(e){return r.map(e,function(e){var t=e.key.substring(1).split("/");return{key:t[t.length-1],doc_count:e.doc_count}})}}},{lodash:80}]},{},[297]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2J1bmRsZS5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsMSwibW9kdWxlIiwiLi9saWIvYXhpb3MiLDIsImRlZmF1bHRzIiwidXRpbHMiLCJidWlsZFVybCIsInBhcnNlSGVhZGVycyIsInRyYW5zZm9ybURhdGEiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uZmlnIiwiZGF0YSIsImhlYWRlcnMiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwicmVxdWVzdEhlYWRlcnMiLCJtZXJnZSIsImNvbW1vbiIsIm1ldGhvZCIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJBY3RpdmVYT2JqZWN0Iiwib3BlbiIsInRvVXBwZXJDYXNlIiwidXJsIiwicGFyYW1zIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJpbmRleE9mIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2UiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsImNvb2tpZXMiLCJ1cmxJc1NhbWVPcmlnaW4iLCJ4c3JmVmFsdWUiLCJyZWFkIiwieHNyZkNvb2tpZU5hbWUiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJpc0FycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJzZW5kIiwiLi8uLi9kZWZhdWx0cyIsIi4vLi4vaGVscGVycy9idWlsZFVybCIsIi4vLi4vaGVscGVycy9jb29raWVzIiwiLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycyIsIi4vLi4vaGVscGVycy90cmFuc2Zvcm1EYXRhIiwiLi8uLi9oZWxwZXJzL3VybElzU2FtZU9yaWdpbiIsIi4vLi4vdXRpbHMiLDMsImRpc3BhdGNoUmVxdWVzdCIsIkludGVyY2VwdG9yTWFuYWdlciIsImF4aW9zIiwiYXJndW1lbnRzIiwiY2hhaW4iLCJwcm9taXNlIiwiUHJvbWlzZSIsImludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsInRoZW4iLCJzaGlmdCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiY3JlYXRlU2hvcnRNZXRob2RzIiwiY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEiLCIuL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyIiwiLi9jb3JlL2Rpc3BhdGNoUmVxdWVzdCIsIi4vZGVmYXVsdHMiLCIuL2hlbHBlcnMvc3ByZWFkIiwiLi91dGlscyIsNCwidGhpcyIsImhhbmRsZXJzIiwicHJvdG90eXBlIiwidXNlIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsNSwicHJvY2VzcyIsIi4uL2FkYXB0ZXJzL2h0dHAiLCIuLi9hZGFwdGVycy94aHIiLCJfcHJvY2VzcyIsNiwiUFJPVEVDVElPTl9QUkVGSVgiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsIkNvbnRlbnQtVHlwZSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNPYmplY3QiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1VuZGVmaW5lZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBsYWNlIiwicGFyc2UiLCJBY2NlcHQiLCJwYXRjaCIsInBvc3QiLCJwdXQiLDcsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInBhcnRzIiwiaXNBcnJheSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLDgsIndyaXRlIiwibmFtZSIsInZhbHVlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsOSwicGFyc2VkIiwic3BsaXQiLCJsaW5lIiwidHJpbSIsInN1YnN0ciIsMTAsImNhbGxiYWNrIiwiYXJyIiwiYXBwbHkiLDExLCJmbnMiLDEyLCJ1cmxSZXNvbHZlIiwiaHJlZiIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsIm9yaWdpblVybCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjcmVhdGVFbGVtZW50Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VXJsIiwxMywidG9TdHJpbmciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInN0ciIsImlzQXJndW1lbnRzIiwib2JqIiwiaXNBcnJheUxpa2UiLCJoYXNPd25Qcm9wZXJ0eSIsInJlc3VsdCIsIk9iamVjdCIsMTQsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsIkFycmF5IiwiaGFzT3duIiwiZGVmaW5lIiwiYW1kIiwxNSwiaXNVbmRlZmluZWRPck51bGwiLCJpc0J1ZmZlciIsIngiLCJjb3B5Iiwic2xpY2UiLCJvYmpFcXVpdiIsImIiLCJvcHRzIiwicFNsaWNlIiwiZGVlcEVxdWFsIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0IiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJnZXRUaW1lIiwic3RyaWN0IiwiLi9saWIvaXNfYXJndW1lbnRzLmpzIiwiLi9saWIva2V5cy5qcyIsMTYsInN1cHBvcnRlZCIsIm9iamVjdCIsInVuc3VwcG9ydGVkIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzdXBwb3J0c0FyZ3VtZW50c0NsYXNzIiwxNywic2hpbSIsImtleXMiLDE4LCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX21heExpc3RlbmVycyIsImlzRnVuY3Rpb24iLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiaXNOYU4iLCJUeXBlRXJyb3IiLCJlbWl0IiwidHlwZSIsImVyIiwiaGFuZGxlciIsImxlbiIsImFyZ3MiLCJsaXN0ZW5lcnMiLCJlcnJvciIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJtIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJjb25zb2xlIiwidHJhY2UiLCJvbiIsIm9uY2UiLCJnIiwicmVtb3ZlTGlzdGVuZXIiLCJmaXJlZCIsImxpc3QiLCJwb3NpdGlvbiIsInNwbGljZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJldCIsImxpc3RlbmVyQ291bnQiLCJlbWl0dGVyIiwxOSwiZW1wdHlGdW5jdGlvbiIsIkV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJ0YXJnZXQiLCJldmVudFR5cGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJjYXB0dXJlIiwiZW52IiwiTk9ERV9FTlYiLCJyZWdpc3RlckRlZmF1bHQiLCIuL2VtcHR5RnVuY3Rpb24iLDIwLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsMjEsImNhbWVsaXplIiwic3RyaW5nIiwiX2h5cGhlblBhdHRlcm4iLCJfIiwiY2hhcmFjdGVyIiwyMiwiY2FtZWxpemVTdHlsZU5hbWUiLCJtc1BhdHRlcm4iLCIuL2NhbWVsaXplIiwyMywiY29udGFpbnNOb2RlIiwiX3giLCJfeDIiLCJfYWdhaW4iLCJfZnVuY3Rpb24iLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJpc1RleHROb2RlIiwicGFyZW50Tm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCIuL2lzVGV4dE5vZGUiLDI0LCJoYXNBcnJheU5hdHVyZSIsIm5vZGVUeXBlIiwiY3JlYXRlQXJyYXlGcm9tTWl4ZWQiLCJ0b0FycmF5IiwiLi90b0FycmF5IiwyNSwiZ2V0Tm9kZU5hbWUiLCJtYXJrdXAiLCJub2RlTmFtZU1hdGNoIiwibm9kZU5hbWVQYXR0ZXJuIiwiY3JlYXRlTm9kZXNGcm9tTWFya3VwIiwiaGFuZGxlU2NyaXB0Iiwibm9kZSIsImR1bW15Tm9kZSIsImludmFyaWFudCIsIm5vZGVOYW1lIiwid3JhcCIsImdldE1hcmt1cFdyYXAiLCJpbm5lckhUTUwiLCJ3cmFwRGVwdGgiLCJsYXN0Q2hpbGQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsIi4vRXhlY3V0aW9uRW52aXJvbm1lbnQiLCIuL2NyZWF0ZUFycmF5RnJvbU1peGVkIiwiLi9nZXRNYXJrdXBXcmFwIiwiLi9pbnZhcmlhbnQiLDI2LCJtYWtlRW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLDI3LCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsMjgsImZvY3VzTm9kZSIsImZvY3VzIiwyOSwiZ2V0QWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwzMCwibWFya3VwV3JhcCIsInNob3VsZFdyYXAiLCJmaXJzdENoaWxkIiwic2VsZWN0V3JhcCIsInRhYmxlV3JhcCIsInRyV3JhcCIsInN2Z1dyYXAiLCIqIiwiYXJlYSIsImNvbCIsImxlZ2VuZCIsInBhcmFtIiwidHIiLCJvcHRncm91cCIsIm9wdGlvbiIsImNhcHRpb24iLCJjb2xncm91cCIsInRib2R5IiwidGZvb3QiLCJ0aGVhZCIsInRkIiwidGgiLCJzdmdFbGVtZW50cyIsMzEsImdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsYWJsZSIsInBhZ2VYT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsTGVmdCIsInkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsMzIsImh5cGhlbmF0ZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwzMywiaHlwaGVuYXRlU3R5bGVOYW1lIiwiLi9oeXBoZW5hdGUiLDM0LCJjb25kaXRpb24iLCJmb3JtYXQiLCJjIiwiZCIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLDM1LCJpc05vZGUiLCJOb2RlIiwzNiwiLi9pc05vZGUiLDM3LCJrZXlNaXJyb3IiLDM4LCJrZXlPZiIsIm9uZUtleU9iaiIsMzksIm1hcE9iamVjdCIsImNvbnRleHQiLDQwLCJtZW1vaXplU3RyaW5nT25seSIsImNhY2hlIiw0MSwicGVyZm9ybWFuY2UiLCJtc1BlcmZvcm1hbmNlIiwid2Via2l0UGVyZm9ybWFuY2UiLDQyLCJjdXJQZXJmb3JtYW5jZSIsInBlcmZvcm1hbmNlTm93IiwiYmluZCIsIi4vcGVyZm9ybWFuY2UiLDQzLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLDQ0LCJpaSIsNDUsIndhcm5pbmciLCJfbGVuIiwiX2tleSIsIm1lc3NhZ2UiLDQ2LCJEaXNwYXRjaGVyIiwiLi9saWIvRGlzcGF0Y2hlciIsNDcsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfX2VzTW9kdWxlIiwiX3ByZWZpeCIsIl9jYWxsYmFja3MiLCJfaXNEaXNwYXRjaGluZyIsIl9pc0hhbmRsZWQiLCJfaXNQZW5kaW5nIiwiX2xhc3RJRCIsInJlZ2lzdGVyIiwidW5yZWdpc3RlciIsIndhaXRGb3IiLCJpZHMiLCJfaW52b2tlQ2FsbGJhY2siLCJkaXNwYXRjaCIsInBheWxvYWQiLCJfc3RhcnREaXNwYXRjaGluZyIsIl9zdG9wRGlzcGF0Y2hpbmciLCJpc0Rpc3BhdGNoaW5nIiwiX3BlbmRpbmdQYXlsb2FkIiwiZmJqcy9saWIvaW52YXJpYW50Iiw0OCw0OSwiUFVTSCIsIlJFUExBQ0UiLCJQT1AiLDUwLCJsb29wQXN5bmMiLCJ0dXJucyIsIndvcmsiLCJkb25lIiwiaXNEb25lIiwibmV4dCIsImN1cnJlbnRUdXJuIiw1MSwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHQiLCJjcmVhdGVLZXkiLCJLZXlQcmVmaXgiLCJzYXZlU3RhdGUiLCJzdGF0ZSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsIlF1b3RhRXhjZWVkZWRFcnJvciIsIl93YXJuaW5nMiIsInJlYWRTdGF0ZSIsImpzb24iLCJnZXRJdGVtIiwiX3dhcm5pbmciLDUyLCJldmVudCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiZ2V0V2luZG93UGF0aCIsImdvIiwiaGlzdG9yeSIsImdldFVzZXJDb25maXJtYXRpb24iLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsNTMsNTQsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2V0Q3VycmVudExvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX0RPTVV0aWxzIiwiX2hpc3RvcnlTdGF0ZSIsIl9ET01TdGF0ZVN0b3JhZ2UiLCJpc1N1cHBvcnRlZCIsInJlcGxhY2VTdGF0ZSIsIl9leHRlbmRzIiwiY3JlYXRlTG9jYXRpb24iLCJzdGFydFBvcFN0YXRlTGlzdGVuZXIiLCJfcmVmIiwicG9wU3RhdGVMaXN0ZW5lciIsInRyYW5zaXRpb25UbyIsImZpbmlzaFRyYW5zaXRpb24iLCJiYXNlbmFtZSIsImFjdGlvbiIsIl9BY3Rpb25zIiwidXNlUmVmcmVzaCIsInB1c2hTdGF0ZSIsImxpc3RlbkJlZm9yZSIsInN0b3BQb3BTdGF0ZUxpc3RlbmVyIiwidW5saXN0ZW4iLCJyZWdpc3RlclRyYW5zaXRpb25Ib29rIiwiaG9vayIsInVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayIsIm9wdGlvbnMiLCJfaW52YXJpYW50MiIsIl9FeGVjdXRpb25FbnZpcm9ubWVudCIsImZvcmNlUmVmcmVzaCIsIl9jcmVhdGVET01IaXN0b3J5MiIsImFzc2lnbiIsInNvdXJjZSIsIl9pbnZhcmlhbnQiLCJfY3JlYXRlRE9NSGlzdG9yeSIsIi4vQWN0aW9ucyIsIi4vRE9NU3RhdGVTdG9yYWdlIiwiLi9ET01VdGlscyIsIi4vY3JlYXRlRE9NSGlzdG9yeSIsNTUsImNyZWF0ZURPTUhpc3RvcnkiLCJfY3JlYXRlSGlzdG9yeTIiLCJfY3JlYXRlSGlzdG9yeSIsIi4vY3JlYXRlSGlzdG9yeSIsNTYsImlzQWJzb2x1dGVQYXRoIiwiZW5zdXJlU2xhc2giLCJhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoIiwic3RyaXBRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgiLCJnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsInF1ZXJ5S2V5Iiwic3RhcnRIYXNoQ2hhbmdlTGlzdGVuZXIiLCJoYXNoQ2hhbmdlTGlzdGVuZXIiLCJzdG9wSGFzaENoYW5nZUxpc3RlbmVyIiwiZ29Jc1N1cHBvcnRlZFdpdGhvdXRSZWxvYWQiLCJjcmVhdGVIcmVmIiwiRGVmYXVsdFF1ZXJ5S2V5Iiw1NywiY3JlYXRlUmFuZG9tS2V5IiwiTWF0aCIsInJhbmRvbSIsImxvY2F0aW9uc0FyZUVxdWFsIiwiX2RlZXBFcXVhbDIiLCJjcmVhdGVIaXN0b3J5IiwidHJhbnNpdGlvbkhvb2tzIiwiZmlsdGVyIiwiaXRlbSIsImdldEN1cnJlbnQiLCJwZW5kaW5nTG9jYXRpb24iLCJhbGxLZXlzIiwidXBkYXRlTG9jYXRpb24iLCJuZXdMb2NhdGlvbiIsImN1cnJlbnQiLCJjb25jYXQiLCJjaGFuZ2VMaXN0ZW5lcnMiLCJfbG9jYXRpb24iLCJjb25maXJtVHJhbnNpdGlvblRvIiwiX0FzeW5jVXRpbHMiLCJpbmRleCIsIl9ydW5UcmFuc2l0aW9uSG9vazIiLCJvayIsIm5leHRMb2NhdGlvbiIsInByZXZJbmRleCIsIm5leHRJbmRleCIsImdvQmFjayIsImdvRm9yd2FyZCIsImtleUxlbmd0aCIsImNyZWF0ZVBhdGgiLCJfY3JlYXRlTG9jYXRpb24zIiwic2V0U3RhdGUiLCJ1cGRhdGVMb2NhdGlvblN0YXRlIiwiRGVmYXVsdEtleUxlbmd0aCIsIl9kZXByZWNhdGUyIiwiX2RlZXBFcXVhbCIsIl9jcmVhdGVMb2NhdGlvbjIiLCJfcnVuVHJhbnNpdGlvbkhvb2siLCJfZGVwcmVjYXRlIiwiLi9Bc3luY1V0aWxzIiwiLi9jcmVhdGVMb2NhdGlvbiIsIi4vZGVwcmVjYXRlIiwiLi9ydW5UcmFuc2l0aW9uSG9vayIsImRlZXAtZXF1YWwiLDU4LCJfcGFyc2VQYXRoMiIsIl9wYXJzZVBhdGgiLCIuL3BhcnNlUGF0aCIsNTksImNyZWF0ZVN0YXRlU3RvcmFnZSIsImVudHJpZXMiLCJlbnRyeSIsInJlZHVjZSIsIm1lbW8iLCJjcmVhdGVNZW1vcnlIaXN0b3J5Iiwic3RvcmFnZSIsImNhbkdvIiwiY3VycmVudExvY2F0aW9uIiwiX29wdGlvbnMiLCJtYXAiLDYwLCJkZXByZWNhdGUiLDYxLCJfdXNlQmVmb3JlVW5sb2FkIiwiX3VzZUJlZm9yZVVubG9hZDIiLCIuL3VzZUJlZm9yZVVubG9hZCIsNjIsIl91c2VRdWVyaWVzIiwiX3VzZVF1ZXJpZXMyIiwiLi91c2VRdWVyaWVzIiw2MywiX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiIsIl9jcmVhdGVIYXNoSGlzdG9yeTIiLCJfY3JlYXRlSGFzaEhpc3RvcnkzIiwiX2NyZWF0ZU1lbW9yeUhpc3RvcnkyIiwiX2NyZWF0ZU1lbW9yeUhpc3RvcnkzIiwiX3VzZUJhc2VuYW1lMiIsIl91c2VCYXNlbmFtZTMiLCJ1c2VCYXNlbmFtZSIsIl91c2VCZWZvcmVVbmxvYWQzIiwidXNlQmVmb3JlVW5sb2FkIiwiX3VzZVF1ZXJpZXMzIiwidXNlUXVlcmllcyIsIl9BY3Rpb25zMiIsIl9BY3Rpb25zMyIsIkFjdGlvbnMiLCJfZW5hYmxlQmVmb3JlVW5sb2FkMiIsIl9lbmFibGVCZWZvcmVVbmxvYWQzIiwiZW5hYmxlQmVmb3JlVW5sb2FkIiwiX2VuYWJsZVF1ZXJpZXMyIiwiX2VuYWJsZVF1ZXJpZXMzIiwiZW5hYmxlUXVlcmllcyIsIi4vY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCIuL2NyZWF0ZUhhc2hIaXN0b3J5IiwiLi9jcmVhdGVNZW1vcnlIaXN0b3J5IiwiLi9lbmFibGVCZWZvcmVVbmxvYWQiLCIuL2VuYWJsZVF1ZXJpZXMiLCIuL3VzZUJhc2VuYW1lIiw2NCwiZXh0cmFjdFBhdGgiLCJzdWJzdHJpbmciLCJwYXJzZVBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsNjUsInJ1blRyYW5zaXRpb25Ib29rIiw2NiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiYWRkQmFzZW5hbWUiLCJwcmVwZW5kQmFzZW5hbWUiLCJoaXN0b3J5T3B0aW9ucyIsNjcsInN0YXJ0QmVmb3JlVW5sb2FkTGlzdGVuZXIiLCJnZXRCZWZvcmVVbmxvYWRQcm9tcHRNZXNzYWdlIiwicmV0dXJuVmFsdWUiLCJiZWZvcmVVbmxvYWRIb29rcyIsImxpc3RlbkJlZm9yZVVubG9hZCIsInN0b3BCZWZvcmVVbmxvYWRMaXN0ZW5lciIsInJlZ2lzdGVyQmVmb3JlVW5sb2FkSG9vayIsInVucmVnaXN0ZXJCZWZvcmVVbmxvYWRIb29rIiw2OCwiZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5IiwicXVlcnkiLCJfcXMyIiwiYXJyYXlGb3JtYXQiLCJkZWZhdWx0UGFyc2VRdWVyeVN0cmluZyIsInF1ZXJ5U3RyaW5nIiwiYWRkUXVlcnkiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwiYXBwZW5kUXVlcnkiLCJzdHJpbmdpZnlRdWVyeSIsIl9xcyIsInFzIiw2OSwiU3RyaW5naWZ5IiwiUGFyc2UiLCIuL3BhcnNlIiwiLi9zdHJpbmdpZnkiLDcwLCJVdGlscyIsImludGVybmFscyIsImRlbGltaXRlciIsImRlcHRoIiwiYXJyYXlMaW1pdCIsInBhcmFtZXRlckxpbWl0Iiwic3RyaWN0TnVsbEhhbmRsaW5nIiwicGxhaW5PYmplY3RzIiwiYWxsb3dQcm90b3R5cGVzIiwicGFyc2VWYWx1ZXMiLCJJbmZpbml0eSIsImlsIiwicGFydCIsInBvcyIsImRlY29kZSIsInBhcnNlT2JqZWN0Iiwicm9vdCIsImNyZWF0ZSIsImNsZWFuUm9vdCIsInBhcnNlSW50IiwiaW5kZXhTdHJpbmciLCJwYXJzZUFycmF5cyIsInBhcnNlS2V5cyIsImFsbG93RG90cyIsInBhcmVudCIsImNoaWxkIiwic2VnbWVudCIsImV4ZWMiLCJpc1JlZ0V4cCIsInRlbXBPYmoiLCJuZXdPYmoiLCJjb21wYWN0Iiw3MSwiYXJyYXlQcmVmaXhHZW5lcmF0b3JzIiwiYnJhY2tldHMiLCJwcmVmaXgiLCJpbmRpY2VzIiwicmVwZWF0IiwiZ2VuZXJhdGVBcnJheVByZWZpeCIsInZhbHVlcyIsIm9iaktleXMiLDcyLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJrIiwia2wiLCJvdXQiLCJjaGFyQ29kZUF0IiwicmVmcyIsImxvb2t1cCIsImNvbXBhY3RlZCIsImNvbnN0cnVjdG9yIiw3Myw3NCwiZ2xvYmFsIiwiZmFjdG9yeSIsInciLCJub0dsb2JhbCIsImlzQXJyYXlsaWtlIiwialF1ZXJ5IiwiaXNXaW5kb3ciLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImdyZXAiLCJlbGVtIiwicmlzU2ltcGxlIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zQ2FjaGUiLCJlYWNoIiwicm5vdHdoaXRlIiwiZmxhZyIsImNvbXBsZXRlZCIsInJlYWR5IiwiRGF0YSIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZXhwYW5kbyIsInVpZCIsImRhdGFBdHRyIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsInBhcnNlSlNPTiIsImRhdGFfdXNlciIsInNldCIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwiZXJyIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImFwcGVuZENoaWxkIiwib3duZXJEb2N1bWVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImRhdGFfcHJpdiIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImFkZCIsImV4dGVuZCIsImdldEFsbCIsInRhZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsImFjdHVhbERpc3BsYXkiLCJkb2MiLCJzdHlsZSIsImFwcGVuZFRvIiwiZGlzcGxheSIsImdldERlZmF1bHRDb21wdXRlZFN0eWxlIiwiY3NzIiwiZGV0YWNoIiwiZGVmYXVsdERpc3BsYXkiLCJlbGVtZGlzcGxheSIsImlmcmFtZSIsImNvbnRlbnREb2N1bWVudCIsImNsb3NlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRTdHlsZXMiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwib3JpZ05hbWUiLCJjc3NQcmVmaXhlcyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXRjaGVzIiwicm51bXNwbGl0IiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInN1cHBvcnQiLCJib3hTaXppbmdSZWxpYWJsZSIsInBhcnNlRmxvYXQiLCJzaG93SGlkZSIsInNob3ciLCJoaWRkZW4iLCJpc0hpZGRlbiIsIlR3ZWVuIiwicHJvcCIsImVuZCIsImVhc2luZyIsImluaXQiLCJjcmVhdGVGeE5vdyIsInNldFRpbWVvdXQiLCJmeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImhlaWdodCIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsInR3ZWVuIiwiY29sbGVjdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsInByb3BzIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwiY2hlY2tEaXNwbGF5IiwiYW5pbSIsIm9yaWciLCJkYXRhU2hvdyIsInF1ZXVlIiwiX3F1ZXVlSG9va3MiLCJ1bnF1ZXVlZCIsImVtcHR5IiwiZmlyZSIsImFsd2F5cyIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicmZ4dHlwZXMiLCJpc0VtcHR5T2JqZWN0IiwiaGlkZSIsInN0YXJ0IiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJjYW1lbENhc2UiLCJjc3NIb29rcyIsImV4cGFuZCIsIkFuaW1hdGlvbiIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwiYW5pbWF0aW9uUHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJ0aWNrIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInRlbXAiLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwiZngiLCJ0aW1lciIsInByb2dyZXNzIiwiY29tcGxldGUiLCJmYWlsIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZnVuYyIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImNvbnRlbnRzIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsImlzU3VjY2VzcyIsImNvbnYyIiwiY29udiIsInRtcCIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicmJyYWNrZXQiLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsImNsYXNzMnR5cGUiLCJ2ZXJzaW9uIiwic2VsZWN0b3IiLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwibGV0dGVyIiwianF1ZXJ5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiaiIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJnbG9iYWxFdmFsIiwic2NyaXB0IiwiaW5kaXJlY3QiLCJldmFsIiwidGV4dCIsImhlYWQiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsImNhbGxiYWNrSW52ZXJzZSIsImNhbGxiYWNrRXhwZWN0IiwiZ3VpZCIsInByb3h5IiwiU2l6emxlIiwic2VlZCIsImdyb3VwcyIsIm9sZCIsIm5pZCIsIm5ld0NvbnRleHQiLCJuZXdTZWxlY3RvciIsInByZWZlcnJlZERvYyIsInNldERvY3VtZW50IiwiZG9jdW1lbnRJc0hUTUwiLCJycXVpY2tFeHByIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwicmJ1Z2d5UVNBIiwidG9rZW5pemUiLCJyZXNjYXBlIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZGl2IiwiYWRkSGFuZGxlIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImRpZmYiLCJzb3VyY2VJbmRleCIsIk1BWF9ORUdBVElWRSIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiYmFzZSIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInBvcCIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImNoYXJhY3RlckVuY29kaW5nIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkIiwiZXNjYXBlZFdoaXRlc3BhY2UiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidW5sb2FkSGFuZGxlciIsImVscyIsImhhc0NvbXBhcmUiLCJ0b3AiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzRm9jdXMiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJkaXNhYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInRva2VuIiwiY29tcGlsZWQiLCJkaXYxIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInNlbGYiLCJpcyIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJ1bnRpbCIsInRydW5jYXRlIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwic2libGluZ3MiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwibWVtb3J5IiwiZmlyaW5nIiwiZmlyaW5nU3RhcnQiLCJmaXJpbmdMZW5ndGgiLCJmaXJpbmdJbmRleCIsInN0YWNrIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwidHVwbGVzIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwibm90aWZ5IiwicGlwZSIsInN0YXRlU3RyaW5nIiwid2hlbiIsInN1Ym9yZGluYXRlIiwicHJvZ3Jlc3NWYWx1ZXMiLCJwcm9ncmVzc0NvbnRleHRzIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInVwZGF0ZUZ1bmMiLCJyZWFkeUxpc3QiLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJob2xkIiwid2FpdCIsInRyaWdnZXJIYW5kbGVyIiwib2ZmIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiYWNjZXB0cyIsImRlc2NyaXB0b3IiLCJ1bmxvY2siLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3RvcmVkIiwiY2FtZWwiLCJkaXNjYXJkIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJjYW1lbEtleSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsImVsIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwic3RydW5kZWZpbmVkIiwiZm9jdXNpbkJ1YmJsZXMiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJmb2N1c01vcnBoIiwicnR5cGVuYW1lc3BhY2UiLCJ0eXBlcyIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJzcGVjaWFsIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsInRyaWdnZXIiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiRXZlbnQiLCJpc1RyaWdnZXIiLCJuYW1lc3BhY2VfcmUiLCJub0J1YmJsZSIsInBhcmVudFdpbmRvdyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfZGVmYXVsdCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJzZWwiLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb3VzZUhvb2tzIiwiZXZlbnREb2MiLCJwYWdlWCIsImNsaWVudFgiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwiY2xpZW50VG9wIiwib3JpZ2luYWxFdmVudCIsImZpeEhvb2siLCJsb2FkIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwic2ltdWxhdGUiLCJidWJibGUiLCJpc1NpbXVsYXRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0aW1lU3RhbXAiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiYXR0YWNoZXMiLCJvbmUiLCJvcmlnRm4iLCJyeGh0bWxUYWciLCJydGFnTmFtZSIsInJodG1sIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZSIsInJjbGVhblNjcmlwdCIsIndyYXBNYXAiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImJ1aWxkRnJhZ21lbnQiLCJzZWxlY3Rpb24iLCJjcmVhdGVUZXh0Tm9kZSIsImNsZWFuRGF0YSIsImFwcGVuZCIsImRvbU1hbmlwIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwia2VlcERhdGEiLCJodG1sIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJfZXZhbFVybCIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5SaWdodCIsIm1hcmdpbkRpdiIsIm1hcmdpblJpZ2h0Iiwic3dhcCIsInJkaXNwbGF5c3dhcCIsInJyZWxOdW0iLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzTnVtYmVyIiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiY3NzUHJvcHMiLCJmbG9hdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInVuaXQiLCJwcm9wSG9va3MiLCJlYXNlZCIsInN0ZXAiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsInRpbWVySWQiLCJyZnhudW0iLCJycnVuIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsIm5vZGVIb29rIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJwcm9wTmFtZSIsImF0dHJOYW1lcyIsInByb3BGaXgiLCJnZXR0ZXIiLCJyZm9jdXNhYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwibm90eG1sIiwiaGFzQXR0cmlidXRlIiwicmNsYXNzIiwiYWRkQ2xhc3MiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJwcm9jZWVkIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJoYXNoIiwicnRzIiwicmhlYWRlcnMiLCJybG9jYWxQcm90b2NvbCIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJydXJsIiwicHJlZmlsdGVycyIsImFsbFR5cGVzIiwiYWpheExvY2F0aW9uIiwiYWpheExvY1BhcnRzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwibmF0aXZlU3RhdHVzVGV4dCIsInN1Y2Nlc3MiLCJtb2RpZmllZCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGhyb3dzIiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJ4aHJJZCIsInhockNhbGxiYWNrcyIsInhoclN1Y2Nlc3NTdGF0dXMiLDAsMTIyMywieGhyU3VwcG9ydGVkIiwiY29ycyIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwia2VlcFNjcmlwdHMiLCJfbG9hZCIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiY3VyRWxlbSIsImxlZnQiLCJ1c2luZyIsIndpbiIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInNpemUiLCJhbmRTZWxmIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLDc1LDc2LCIuL2xpYi9iYWJlbC10cmFuc2Zvcm0vbWFpbi5qcyIsNzcsImJhYmVsUGx1Z2luTGl2ZVJlYWN0bG9hZCIsImZpbGVuYW1lIiwiY29tcG9uZW50cyIsImltcG9ydHMiLCJfaW1wb3J0cyIsImxvY2FscyIsIl9zbGljZWRUb0FycmF5IiwiUmVhY3QiLCJmb3JjZVVwZGF0ZSIsImdldEZvcmNlVXBkYXRlIiwiQ29tcG9uZW50IiwidW5pcXVlSWQiLCJfY29tcG9uZW50cyR1bmlxdWVJZCIsImRpc3BsYXlOYW1lIiwiX2NvbXBvbmVudHMkdW5pcXVlSWQkaXNJbkZ1bmN0aW9uIiwiaXNJbkZ1bmN0aW9uIiwicHJveGllcyIsImdldFByb3hpZXMiLCJjcmVhdGVQcm94eSIsIl9yZXQiLCJsb2ciLCJpbnN0YW5jZXMiLCJ1cGRhdGUiLCJfX2xycHJveGllcyQkIiwiaWdub3JlIiwic2xpY2VJdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcmVxdWlyZSIsInJlYWN0LXByb3h5Iiw3OCwiYmFzZURpZmZlcmVuY2UiLCJiYXNlRmxhdHRlbiIsImlzT2JqZWN0TGlrZSIsInJlc3RQYXJhbSIsImRpZmZlcmVuY2UiLCJhcnJheSIsIi4uL2Z1bmN0aW9uL3Jlc3RQYXJhbSIsIi4uL2ludGVybmFsL2Jhc2VEaWZmZXJlbmNlIiwiLi4vaW50ZXJuYWwvYmFzZUZsYXR0ZW4iLCIuLi9pbnRlcm5hbC9pc0FycmF5TGlrZSIsIi4uL2ludGVybmFsL2lzT2JqZWN0TGlrZSIsNzksIkZVTkNfRVJST1JfVEVYVCIsIm5hdGl2ZU1heCIsInJlc3QiLCJvdGhlckFyZ3MiLDgwLCJiYXNlQ29tcGFyZUFzY2VuZGluZyIsIm90aGVyIiwidmFsSXNOdWxsIiwidmFsSXNVbmRlZiIsInZhbElzUmVmbGV4aXZlIiwib3RoSXNOdWxsIiwib3RoSXNVbmRlZiIsIm90aElzUmVmbGV4aXZlIiwiYmFzZUZpbmRJbmRleCIsInByZWRpY2F0ZSIsImZyb21SaWdodCIsImJhc2VJbmRleE9mIiwiZnJvbUluZGV4IiwiaW5kZXhPZk5hTiIsImJhc2VJc0Z1bmN0aW9uIiwiYmFzZVRvU3RyaW5nIiwiY2hhcnNMZWZ0SW5kZXgiLCJjaGFycyIsImNoYXJzUmlnaHRJbmRleCIsImNvbXBhcmVBc2NlbmRpbmciLCJjcml0ZXJpYSIsImNvbXBhcmVNdWx0aXBsZSIsIm9yZGVycyIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJkZWJ1cnJMZXR0ZXIiLCJkZWJ1cnJlZExldHRlcnMiLCJlc2NhcGVIdG1sQ2hhciIsImNociIsImh0bWxFc2NhcGVzIiwiZXNjYXBlUmVnRXhwQ2hhciIsImxlYWRpbmdDaGFyIiwid2hpdGVzcGFjZUNoYXIiLCJyZWdleHBFc2NhcGVzIiwic3RyaW5nRXNjYXBlcyIsImVzY2FwZVN0cmluZ0NoYXIiLCJpc1NwYWNlIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInJlc0luZGV4IiwiUExBQ0VIT0xERVIiLCJzb3J0ZWRVbmlxIiwiaXRlcmF0ZWUiLCJzZWVuIiwidHJpbW1lZExlZnRJbmRleCIsInRyaW1tZWRSaWdodEluZGV4IiwidW5lc2NhcGVIdG1sQ2hhciIsImh0bWxVbmVzY2FwZXMiLCJydW5JbkNvbnRleHQiLCJsb2Rhc2giLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJhY3Rpb25zIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIlBPU0lUSVZFX0lORklOSVRZIiwiX192aWV3c19fIiwibGF6eUNsb25lIiwiYXJyYXlDb3B5IiwibGF6eVJldmVyc2UiLCJsYXp5VmFsdWUiLCJpc0FyciIsImlzUmlnaHQiLCJhcnJMZW5ndGgiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJhdGVlcyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJuYXRpdmVNaW4iLCJMQVJHRV9BUlJBWV9TSVpFIiwiYmFzZVdyYXBwZXJWYWx1ZSIsIm91dGVyIiwiaXRlckluZGV4IiwiTEFaWV9NQVBfRkxBRyIsIkxBWllfRklMVEVSX0ZMQUciLCJNYXBDYWNoZSIsIl9fZGF0YV9fIiwibWFwRGVsZXRlIiwibWFwR2V0IiwibWFwSGFzIiwibWFwU2V0IiwiU2V0Q2FjaGUiLCJuYXRpdmVDcmVhdGUiLCJTZXQiLCJjYWNoZUluZGV4T2YiLCJjYWNoZVB1c2giLCJhcnJheUNvbmNhdCIsIm90aEluZGV4Iiwib3RoTGVuZ3RoIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwiYXJyYXlFeHRyZW11bSIsImNvbXBhcmF0b3IiLCJleFZhbHVlIiwiYXJyYXlGaWx0ZXIiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsImFycmF5UmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpbml0RnJvbUFycmF5IiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFycmF5U3VtIiwiYXNzaWduRGVmYXVsdHMiLCJvYmplY3RWYWx1ZSIsInNvdXJjZVZhbHVlIiwiYXNzaWduT3duRGVmYXVsdHMiLCJhc3NpZ25XaXRoIiwiY3VzdG9taXplciIsImJhc2VBc3NpZ24iLCJiYXNlQ29weSIsImJhc2VBdCIsImlzTmlsIiwicHJvcHNMZW5ndGgiLCJpc0luZGV4IiwiYmFzZUNhbGxiYWNrIiwidGhpc0FyZyIsImFyZ0NvdW50IiwiYmluZENhbGxiYWNrIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlcyIsInByb3BlcnR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VDbG9uZSIsImlzRGVlcCIsInN0YWNrQSIsInN0YWNrQiIsImluaXRDbG9uZUFycmF5Iiwib2JqVG9TdHJpbmciLCJpc0Z1bmMiLCJmdW5jVGFnIiwib2JqZWN0VGFnIiwiYXJnc1RhZyIsImNsb25lYWJsZVRhZ3MiLCJpbml0Q2xvbmVCeVRhZyIsImluaXRDbG9uZU9iamVjdCIsImJhc2VGb3JPd24iLCJzdWJWYWx1ZSIsImJhc2VEZWxheSIsImdldEluZGV4T2YiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsInZhbHVlc0luZGV4IiwiYmFzZUV2ZXJ5IiwiYmFzZUVhY2giLCJiYXNlRXh0cmVtdW0iLCJiYXNlRmlsbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmluZCIsImVhY2hGdW5jIiwicmV0S2V5IiwiaXNTdHJpY3QiLCJiYXNlRm9ySW4iLCJiYXNlRm9yIiwia2V5c0luIiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImJhc2VHZXQiLCJwYXRoS2V5IiwidG9PYmplY3QiLCJiYXNlSXNFcXVhbCIsImlzTG9vc2UiLCJiYXNlSXNFcXVhbERlZXAiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwiYXJyYXlUYWciLCJvdGhUYWciLCJpc1R5cGVkQXJyYXkiLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsImVxdWFsQXJyYXlzIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiYmFzZU1hcCIsImdldE1hdGNoRGF0YSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwidG9QYXRoIiwiYmFzZVNsaWNlIiwiYmFzZU1lcmdlIiwiaXNTcmNBcnIiLCJiYXNlTWVyZ2VEZWVwIiwibWVyZ2VGdW5jIiwidG9QbGFpbk9iamVjdCIsImJhc2VQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eURlZXAiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVJhbmRvbSIsIm1pbiIsIm5hdGl2ZUZsb29yIiwibmF0aXZlUmFuZG9tIiwiYmFzZVJlZHVjZSIsImluaXRGcm9tQ29sbGVjdGlvbiIsImJhc2VTb21lIiwiYmFzZVNvcnRCeSIsImNvbXBhcmVyIiwiYmFzZVNvcnRCeU9yZGVyIiwiZ2V0Q2FsbGJhY2siLCJiYXNlU3VtIiwiYmFzZVVuaXEiLCJpc0xhcmdlIiwic2VlbkluZGV4IiwiYmFzZVZhbHVlcyIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJpbmFyeUluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsIkhBTEZfTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsImJpbmFyeUluZGV4QnkiLCJ2YWxJc05hTiIsImlzRGVmIiwiaXNSZWZsZXhpdmUiLCJzZXRMb3ciLCJNQVhfQVJSQVlfSU5ERVgiLCJidWZmZXJDbG9uZSIsImJ5dGVMZW5ndGgiLCJVaW50OEFycmF5IiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJob2xkZXJzTGVuZ3RoIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiY3JlYXRlQmFzZUVhY2giLCJnZXRMZW5ndGgiLCJpc0xlbmd0aCIsIml0ZXJhYmxlIiwiY3JlYXRlQmFzZUZvciIsImtleXNGdW5jIiwiY3JlYXRlQmluZFdyYXBwZXIiLCJ3cmFwcGVyIiwiQ3RvciIsImNyZWF0ZUN0b3JXcmFwcGVyIiwiY3JlYXRlQ29tcG91bmRlciIsIndvcmRzIiwiZGVidXJyIiwidGhpc0JpbmRpbmciLCJiYXNlQ3JlYXRlIiwiY3JlYXRlQ3VycnkiLCJjdXJyeUZ1bmMiLCJhcml0eSIsImNyZWF0ZVdyYXBwZXIiLCJjcmVhdGVEZWZhdWx0cyIsImNyZWF0ZUV4dHJlbXVtIiwidG9JdGVyYWJsZSIsImNyZWF0ZUZpbmQiLCJjcmVhdGVGaW5kSW5kZXgiLCJjcmVhdGVGaW5kS2V5Iiwib2JqZWN0RnVuYyIsImNyZWF0ZUZsb3ciLCJmdW5jcyIsInRocnUiLCJnZXRGdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwiQVJZX0ZMQUciLCJDVVJSWV9GTEFHIiwiUEFSVElBTF9GTEFHIiwiUkVBUkdfRkxBRyIsInBsYW50IiwiY3JlYXRlRm9yRWFjaCIsImFycmF5RnVuYyIsImNyZWF0ZUZvckluIiwiY3JlYXRlRm9yT3duIiwiY3JlYXRlT2JqZWN0TWFwcGVyIiwiaXNNYXBLZXlzIiwiY3JlYXRlUGFkRGlyIiwiY3JlYXRlUGFkZGluZyIsImNyZWF0ZVBhcnRpYWwiLCJwYXJ0aWFsRnVuYyIsImNyZWF0ZVJlZHVjZSIsImNyZWF0ZUh5YnJpZFdyYXBwZXIiLCJiaXRtYXNrIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImlzQ3VycnkiLCJpc0N1cnJ5UmlnaHQiLCJhcmdzSG9sZGVycyIsIm5ld0FyZ1BvcyIsIm5ld0FyaXR5IiwibmV3c0hvbGRlcnMiLCJuZXdIb2xkZXJzUmlnaHQiLCJuZXdQYXJ0aWFscyIsIm5ld1BhcnRpYWxzUmlnaHQiLCJQQVJUSUFMX1JJR0hUX0ZMQUciLCJpc0N1cnJ5Qm91bmQiLCJCSU5EX0ZMQUciLCJCSU5EX0tFWV9GTEFHIiwibmV3RGF0YSIsInNldERhdGEiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJyZW9yZGVyIiwiaXNBcnkiLCJDVVJSWV9CT1VORF9GTEFHIiwiQ1VSUllfUklHSFRfRkxBRyIsInN0ckxlbmd0aCIsIm5hdGl2ZUlzRmluaXRlIiwicGFkTGVuZ3RoIiwibmF0aXZlQ2VpbCIsImNyZWF0ZVBhcnRpYWxXcmFwcGVyIiwiY3JlYXRlUm91bmQiLCJtZXRob2ROYW1lIiwibnVtYmVyIiwicHJlY2lzaW9uIiwicG93IiwiY3JlYXRlU29ydGVkSW5kZXgiLCJtZXJnZURhdGEiLCJiYXNlU2V0RGF0YSIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwibnVtYmVyVGFnIiwicmVnZXhwVGFnIiwic3RyaW5nVGFnIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvdGhQcm9wcyIsInNraXBDdG9yIiwib2JqQ3RvciIsIm90aEN0b3IiLCJyZWFsTmFtZXMiLCJvdGhlckZ1bmMiLCJwYWlycyIsImdldE5hdGl2ZSIsImlzTmF0aXZlIiwidHJhbnNmb3JtcyIsImFycmF5QnVmZmVyVGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwiYnl0ZU9mZnNldCIsInJlRmxhZ3MiLCJsYXN0SW5kZXgiLCJpbnZva2VQYXRoIiwicmVJc1VpbnQiLCJNQVhfU0FGRV9JTlRFR0VSIiwicmVJc1BsYWluUHJvcCIsInJlSXNEZWVwUHJvcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGVmYXVsdHMiLCJwaWNrQnlBcnJheSIsInBpY2tCeUNhbGxiYWNrIiwib2xkQXJyYXkiLCJzaGltS2V5cyIsImFsbG93SW5kZXhlcyIsInJlUHJvcE5hbWUiLCJxdW90ZSIsInJlRXNjYXBlQ2hhciIsImNodW5rIiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImZsYXR0ZW4iLCJmbGF0dGVuRGVlcCIsImluaXRpYWwiLCJsYXN0SW5kZXhPZiIsInB1bGwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ1bmlxIiwiaXNTb3J0ZWQiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwieG9yIiwiemlwT2JqZWN0IiwidGFwIiwid3JhcHBlckNoYWluIiwid3JhcHBlckNvbW1pdCIsIndyYXBwZXJQbGFudCIsIndyYXBwZXJSZXZlcnNlIiwid3JhcHBlZCIsIndyYXBwZXJUb1N0cmluZyIsIndyYXBwZXJWYWx1ZSIsImV2ZXJ5IiwiZmluZFdoZXJlIiwiaW5jbHVkZXMiLCJwbHVjayIsInNhbXBsZSIsInJhbmQiLCJzaHVmZmxlIiwic29tZSIsInNvcnRCeSIsInNvcnRCeU9yZGVyIiwid2hlcmUiLCJkZWJvdW5jZSIsImNhbmNlbCIsInRpbWVvdXRJZCIsIm1heFRpbWVvdXRJZCIsImxhc3RDYWxsZWQiLCJ0cmFpbGluZ0NhbGwiLCJpc0NhbGxlZCIsImRlbGF5ZWQiLCJzdGFtcCIsIm1heERlbGF5ZWQiLCJ0cmFpbGluZyIsImRlYm91bmNlZCIsImxlYWRpbmciLCJtYXhXYWl0IiwibGVhZGluZ0NhbGwiLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwidGhyb3R0bGUiLCJjbG9uZURlZXAiLCJndGUiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXJyb3IiLCJpc0Zpbml0ZSIsImlzTWF0Y2giLCJyZUlzTmF0aXZlIiwiZm5Ub1N0cmluZyIsInJlSXNIb3N0Q3RvciIsImlzTnVsbCIsInR5cGVkQXJyYXlUYWdzIiwibHRlIiwiZnVuY3Rpb25zIiwibXVsdGlWYWx1ZSIsImlzUHJvdG8iLCJza2lwSW5kZXhlcyIsIm5lc3RlZCIsInRyYW5zZm9ybSIsInZhbHVlc0luIiwiaW5SYW5nZSIsImZsb2F0aW5nIiwibm9NaW4iLCJub01heCIsImNhcGl0YWxpemUiLCJyZUxhdGluMSIsInJlQ29tYm9NYXJrIiwiZW5kc1dpdGgiLCJlc2NhcGUiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJlc2NhcGVSZWdFeHAiLCJyZUhhc1JlZ0V4cENoYXJzIiwicmVSZWdFeHBDaGFycyIsInBhZCIsInJhZGl4IiwibmF0aXZlUGFyc2VJbnQiLCJyZUhhc0hleFByZWZpeCIsInN0YXJ0c1dpdGgiLCJ0ZW1wbGF0ZSIsIm90aGVyT3B0aW9ucyIsInRlbXBsYXRlU2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZU5vTWF0Y2giLCJyZURlbGltaXRlcnMiLCJyZUludGVycG9sYXRlIiwicmVFc1RlbXBsYXRlIiwiZXZhbHVhdGUiLCJzb3VyY2VVUkwiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwicmVVbmVzY2FwZWRTdHJpbmciLCJ2YXJpYWJsZSIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsImF0dGVtcHQiLCJGdW5jdGlvbiIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwidHJ1bmMiLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIm9taXNzaW9uIiwiREVGQVVMVF9UUlVOQ19PTUlTU0lPTiIsInNlcGFyYXRvciIsIm5ld0VuZCIsInVuZXNjYXBlIiwicmVIYXNFc2NhcGVkSHRtbCIsInJlRXNjYXBlZEh0bWwiLCJyZVdvcmRzIiwiY29uc3RhbnQiLCJtYXRjaGVzUHJvcGVydHkiLCJtaXhpbiIsImlzT2JqIiwibWV0aG9kTmFtZXMiLCJvbGREYXNoIiwicHJvcGVydHlPZiIsInJhbmdlIiwidGltZXMiLCJNQVhfQVJSQVlfTEVOR1RIIiwiaWRDb3VudGVyIiwiYXVnZW5kIiwiYWRkZW5kIiwic3VtIiwicGljayIsImNvbnRleHRQcm9wcyIsIk51bWJlciIsImFycmF5UHJvdG8iLCJvYmplY3RQcm90byIsInN0cmluZ1Byb3RvIiwiV2Vha01hcCIsImNlaWwiLCJmbG9vciIsIm5hdGl2ZUlzQXJyYXkiLCJuYXRpdmVLZXlzIiwibmF0aXZlTm93IiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJtZXRhTWFwIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwiYmFzZUVhY2hSaWdodCIsIkhPVF9TUEFOIiwiSE9UX0NPVU5UIiwiZmluZEluZGV4IiwiZmluZExhc3RJbmRleCIsImludGVyc2VjdGlvbiIsImFycmF5cyIsImNhY2hlcyIsInB1bGxBdCIsInNvcnRlZEluZGV4Iiwic29ydGVkTGFzdEluZGV4IiwidW5pb24iLCJ3aXRob3V0IiwiemlwIiwiemlwV2l0aCIsIndyYXBwZXJDb25jYXQiLCJhdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbmRleEJ5IiwiaW52b2tlIiwiaXNQcm9wIiwicGFydGl0aW9uIiwicmVkdWNlUmlnaHQiLCJzb3J0QnlBbGwiLCJiaW5kQWxsIiwiYmluZEtleSIsImN1cnJ5IiwiY3VycnlSaWdodCIsImZsb3ciLCJmbG93UmlnaHQiLCJtb2RBcmdzIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZGVmYXVsdHNEZWVwIiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwib21pdCIsIndvcmQiLCJrZWJhYkNhc2UiLCJwYWRMZWZ0IiwicGFkUmlnaHQiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJtZXRob2RPZiIsInJvdW5kIiwiYmFja2Zsb3ciLCJjb2xsZWN0IiwiY29tcG9zZSIsImVhY2hSaWdodCIsIm1ldGhvZHMiLCJ0YWlsIiwiYW55IiwiZGV0ZWN0IiwiZm9sZGwiLCJmb2xkciIsImluY2x1ZGUiLCJpbmplY3QiLCJWRVJTSU9OIiwiZmlsdGVyZWQiLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJvcGVyYXRpb25OYW1lIiwiY3JlYXRlQ2FsbGJhY2siLCJjaGVja0l0ZXJhdGVlIiwicmV0VW53cmFwcGVkIiwibG9kYXNoRnVuYyIsImlzSHlicmlkIiwiaXNMYXp5IiwidXNlTGF6eSIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwibmFtZXMiLCJjb21taXQiLCJ0b0pTT04iLCJ2YWx1ZU9mIiwibWFwVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsInVwcGVyIiwibG93ZXIiLCLDgCIsIsOBIiwiw4IiLCLDgyIsIsOEIiwiw4UiLCLDoCIsIsOhIiwiw6IiLCLDoyIsIsOkIiwiw6UiLCLDhyIsIsOnIiwiw5AiLCLDsCIsIsOIIiwiw4kiLCLDiiIsIsOLIiwiw6giLCLDqSIsIsOqIiwiw6siLCLDjCIsIsONIiwiw44iLCLDjyIsIsOsIiwiw60iLCLDriIsIsOvIiwiw5EiLCLDsSIsIsOSIiwiw5MiLCLDlCIsIsOVIiwiw5YiLCLDmCIsIsOyIiwiw7MiLCLDtCIsIsO1Iiwiw7YiLCLDuCIsIsOZIiwiw5oiLCLDmyIsIsOcIiwiw7kiLCLDuiIsIsO7Iiwiw7wiLCLDnSIsIsO9Iiwiw78iLCLDhiIsIsOmIiwiw54iLCLDviIsIsOfIiwiJiIsIjwiLCJcIiIsIiciLCJgIiwiJmFtcDsiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiYjMzk7IiwiJiM5NjsiLCJvYmplY3RUeXBlcyIsImZ1bmN0aW9uIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiXFwiLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZUV4cG9ydHMiLCJmcmVlTW9kdWxlIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwiZnJlZVdpbmRvdyIsIm1vZHVsZUV4cG9ydHMiLDgxLCIuL2NhY2hlUHVzaCIsIi4vZ2V0TmF0aXZlIiw4Miw4MywiLi4vb2JqZWN0L2tleXMiLDg0LCIuL2Jhc2VDb3B5Iiw4NSw4NiwiLi9iYXNlSW5kZXhPZiIsIi4vY2FjaGVJbmRleE9mIiwiLi9jcmVhdGVDYWNoZSIsODcsIi4uL2xhbmcvaXNBcmd1bWVudHMiLCIuLi9sYW5nL2lzQXJyYXkiLCIuL2FycmF5UHVzaCIsIi4vaXNBcnJheUxpa2UiLCIuL2lzT2JqZWN0TGlrZSIsODgsIi4vaW5kZXhPZk5hTiIsODksOTAsIi4uL3V0aWxpdHkvaWRlbnRpdHkiLDkxLCIuLi9sYW5nL2lzT2JqZWN0Iiw5Miw5MywiLi9iaW5kQ2FsbGJhY2siLCIuL2lzSXRlcmF0ZWVDYWxsIiw5NCwiLi9TZXRDYWNoZSIsOTUsIi4vYmFzZVByb3BlcnR5Iiw5NiwiLi4vbGFuZy9pc05hdGl2ZSIsOTcsOTgsIi4vZ2V0TGVuZ3RoIiwiLi9pc0xlbmd0aCIsOTksMTAwLCIuL2lzSW5kZXgiLDEwMSwxMDIsMTAzLCIuLi9vYmplY3Qva2V5c0luIiwxMDQsMTA1LCIuLi9pbnRlcm5hbC9nZXROYXRpdmUiLCIuLi9pbnRlcm5hbC9pc0xlbmd0aCIsMTA2LCIuL2lzT2JqZWN0IiwxMDcsIi4vaXNGdW5jdGlvbiIsMTA4LDEwOSwiLi4vaW50ZXJuYWwvYXNzaWduV2l0aCIsIi4uL2ludGVybmFsL2Jhc2VBc3NpZ24iLCIuLi9pbnRlcm5hbC9jcmVhdGVBc3NpZ25lciIsMTEwLCIuLi9pbnRlcm5hbC9zaGltS2V5cyIsMTExLCIuLi9pbnRlcm5hbC9pc0luZGV4IiwxMTIsMTEzLCJwcm9wSXNFbnVtZXJhYmxlIiwiZnJvbSIsInN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLDExNCwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsIkl0ZW0iLCJmdW4iLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwxMTUsInRyYXZlcnNlUmVuZGVyZWRDaGlsZHJlbiIsImludGVybmFsSW5zdGFuY2UiLCJfcmVuZGVyZWRDb21wb25lbnQiLCJfcmVuZGVyZWRDaGlsZHJlbiIsInNldFBlbmRpbmdGb3JjZVVwZGF0ZSIsIl9wZW5kaW5nRm9yY2VVcGRhdGUiLCJmb3JjZVVwZGF0ZUlmUGVuZGluZyIsInB1YmxpY0luc3RhbmNlIiwiX2luc3RhbmNlIiwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsMTE2LCJyZWFjdC9saWIvUmVhY3RET00iLDExNywic2l6ZXJTdHlsZSIsIndoaXRlU3BhY2UiLCJBdXRvc2l6ZUlucHV0IiwiY3JlYXRlQ2xhc3MiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvbkNoYW5nZSIsIm9uZU9mVHlwZSIsImlucHV0U3R5bGUiLCJpbnB1dENsYXNzTmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldEluaXRpYWxTdGF0ZSIsImlucHV0V2lkdGgiLCJjb21wb25lbnREaWRNb3VudCIsImNvcHlJbnB1dFN0eWxlcyIsInVwZGF0ZUlucHV0V2lkdGgiLCJjb21wb25lbnREaWRVcGRhdGUiLCJpc01vdW50ZWQiLCJ3aWR0aE5vZGUiLCJzaXplciIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsInBsYWNlaG9sZGVyTm9kZSIsInBsYWNlaG9sZGVyU2l6ZXIiLCJzY3JvbGxXaWR0aCIsIm5ld0lucHV0V2lkdGgiLCJnZXRJbnB1dCIsInJlbmRlciIsImVzY2FwZWRWYWx1ZSIsIndyYXBwZXJTdHlsZSIsImJveFNpemluZyIsInJlZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwicmVhY3QiLDExOCwiYmluZEF1dG9CaW5kTWV0aG9kIiwiY29tcG9uZW50IiwiYm91bmRNZXRob2QiLCJfX3JlYWN0Qm91bmRDb250ZXh0IiwiX19yZWFjdEJvdW5kTWV0aG9kIiwiX19yZWFjdEJvdW5kQXJndW1lbnRzIiwiY29tcG9uZW50TmFtZSIsIl9iaW5kIiwibmV3VGhpcyIsIndhcm4iLCJyZWJvdW5kTWV0aG9kIiwiYmluZEF1dG9CaW5kTWV0aG9kcyIsImF1dG9CaW5kS2V5IiwiX19yZWFjdEF1dG9CaW5kTWFwIiwxMTksImlzRXF1YWxEZXNjcmlwdG9yIiwicHJveHlDbGFzcyIsIkluaXRpYWxDbGFzcyIsIndhc1N0YXRpY01vZGlmaWVkQnlVc2VyIiwiY3VycmVudERlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJQcm94eUNsYXNzIiwic3RhdGljRGVzY3JpcHRvcnMiLCJOZXh0Q2xhc3MiLCJtb3VudGVkSW5zdGFuY2VzIiwiQ3VycmVudENsYXNzIiwicHJvdG90eXBlUHJveHkiLCJfX3Byb3RvX18iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiUkVTRVJWRURfU1RBVElDUyIsInN0YXRpY0Rlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJfYmluZEF1dG9CaW5kTWV0aG9kczIiLCJfZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kczIiLCJfX3JlYWN0UGF0Y2hQcm94eSIsIl9fZ2V0Q3VycmVudCIsIl9jcmVhdGVQcm90b3R5cGVQcm94eTIiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJfY3JlYXRlUHJvdG90eXBlUHJveHkiLCJfYmluZEF1dG9CaW5kTWV0aG9kcyIsIl9kZWxldGVVbmtub3duQXV0b0JpbmRNZXRob2RzIiwiLi9iaW5kQXV0b0JpbmRNZXRob2RzIiwiLi9jcmVhdGVQcm90b3R5cGVQcm94eSIsIi4vZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kcyIsMTIwLCJjcmVhdGVQcm90b3R5cGVQcm94eSIsInByb3h5VG9TdHJpbmciLCJwcm94eU1ldGhvZCIsInByb3hpZWRNZXRob2QiLCJfbG9kYXNoT2JqZWN0QXNzaWduMiIsInByb3hpZWRDb21wb25lbnREaWRNb3VudCIsInByb3hpZWRDb21wb25lbnRXaWxsVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZGVmaW5lUHJveHlQcm9wZXJ0eSIsImRlZmluZVByb3h5UHJvcGVydHlXaXRoVmFsdWUiLCJfcmVmJGVudW1lcmFibGUiLCJfcmVmJHdyaXRhYmxlIiwiY3JlYXRlQXV0b0JpbmRNYXAiLCJfbmFtZSIsImN1cnJlbnROYW1lcyIsInByZXZpb3VzTmFtZSIsInJlbW92ZWROYW1lcyIsIl9sb2Rhc2hBcnJheURpZmZlcmVuY2UyIiwiX2xvZGFzaE9iamVjdEFzc2lnbiIsIl9sb2Rhc2hBcnJheURpZmZlcmVuY2UiLCJsb2Rhc2gvYXJyYXkvZGlmZmVyZW5jZSIsImxvZGFzaC9vYmplY3QvYXNzaWduIiwxMjEsInNob3VsZERlbGV0ZUNsYXNzaWNJbnN0YW5jZU1ldGhvZCIsInNob3VsZERlbGV0ZU1vZGVybkluc3RhbmNlTWV0aG9kIiwicHJvdG90eXBlRGVzY3JpcHRvciIsInNob3VsZERlbGV0ZUluc3RhbmNlTWV0aG9kIiwiZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kcyIsMTIyLCJfaW50ZXJvcFJlcXVpcmUiLCJfY3JlYXRlQ2xhc3NQcm94eSIsIl9yZWFjdERlZXBGb3JjZVVwZGF0ZSIsIi4vY3JlYXRlQ2xhc3NQcm94eSIsInJlYWN0LWRlZXAtZm9yY2UtdXBkYXRlIiwxMjMsIm1hcEFzeW5jIiwiZG9uZUNvdW50IiwxMjQsIl9Qcm9wVHlwZXMiLCJIaXN0b3J5IiwiY29udGV4dFR5cGVzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiLi9Qcm9wVHlwZXMiLDEyNSwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX0xpbmsiLCJfTGluazIiLCJJbmRleExpbmsiLCJfUmVhY3QkQ29tcG9uZW50Iiwib25seUFjdGl2ZU9uSW5kZXgiLCIuL0xpbmsiLDEyNiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX1JlZGlyZWN0IiwiX1JlZGlyZWN0MiIsIl9SZWFjdCRQcm9wVHlwZXMiLCJJbmRleFJlZGlyZWN0IiwiY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50IiwiZWxlbWVudCIsInBhcmVudFJvdXRlIiwiaW5kZXhSb3V0ZSIsImlzUmVxdWlyZWQiLCJvbkVudGVyIiwiZmFsc3kiLCIuL1JlZGlyZWN0IiwxMjcsIl9Sb3V0ZVV0aWxzIiwiSW5kZXhSb3V0ZSIsImlnbm9yZVNjcm9sbEJlaGF2aW9yIiwiZ2V0Q29tcG9uZW50cyIsIi4vUm91dGVVdGlscyIsMTI4LCJMaWZlY3ljbGUiLCJyb3V0ZSIsInJvdXRlcldpbGxMZWF2ZSIsIl91bmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSIsImxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSIsMTI5LCJpc0xlZnRDbGlja0V2ZW50IiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmsiLCJoYW5kbGVDbGljayIsImFsbG93VHJhbnNpdGlvbiIsImNsaWNrUmVzdWx0Iiwib25DbGljayIsIl90aGlzIiwiX3Byb3BzIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJpc0FjdGl2ZSIsMTMwLCJlc2NhcGVTb3VyY2UiLCJfY29tcGlsZVBhdHRlcm4iLCJyZWdleHBTb3VyY2UiLCJwYXJhbU5hbWVzIiwiY29tcGlsZVBhdHRlcm4iLCJDb21waWxlZFBhdHRlcm5zQ2FjaGUiLCJtYXRjaFBhdHRlcm4iLCJfY29tcGlsZVBhdHRlcm4yIiwiY2FwdHVyZVJlbWFpbmluZyIsInJlbWFpbmluZ1BhdGhuYW1lIiwicGFyYW1WYWx1ZXMiLCJnZXRQYXJhbU5hbWVzIiwiZ2V0UGFyYW1zIiwiX21hdGNoUGF0dGVybiIsInBhcmFtTmFtZSIsImZvcm1hdFBhdHRlcm4iLCJfY29tcGlsZVBhdHRlcm4zIiwicGFyZW5Db3VudCIsInNwbGF0SW5kZXgiLCJwYXJhbVZhbHVlIiwic3BsYXQiLCJlbmNvZGVVUkkiLDEzMSwiYXJyYXlPZiIsInNoYXBlIiwicm91dGVzIiwxMzIsIl9QYXR0ZXJuVXRpbHMiLCJSZWRpcmVjdCIsIm5leHRTdGF0ZSIsInJvdXRlSW5kZXgiLCJwYXJlbnRQYXR0ZXJuIiwiZ2V0Um91dGVQYXR0ZXJuIiwiLi9QYXR0ZXJuVXRpbHMiLDEzMywiUm91dGUiLDEzNCwiUm91dGVDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJnZXRDaGlsZENvbnRleHQiLDEzNSwiaXNWYWxpZENoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJpc1JlYWN0Q2hpbGRyZW4iLCJjaGVja1Byb3BUeXBlcyIsImNyZWF0ZVJvdXRlIiwiZGVmYXVsdFByb3BzIiwiY2hpbGRSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiIsIkNoaWxkcmVuIiwiY3JlYXRlUm91dGVzIiwxMzYsIl9oaXN0b3J5TGliQ3JlYXRlSGFzaEhpc3RvcnkiLCJfaGlzdG9yeUxpYkNyZWF0ZUhhc2hIaXN0b3J5MiIsIl9Sb3V0aW5nQ29udGV4dCIsIl9Sb3V0aW5nQ29udGV4dDIiLCJfdXNlUm91dGVzIiwiX3VzZVJvdXRlczIiLCJSb3V0ZXIiLCJvbkVycm9yIiwib25VcGRhdGUiLCJoYW5kbGVFcnJvciIsIl91bmxpc3RlbiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJfc3RhdGUiLCIuL1JvdXRpbmdDb250ZXh0IiwiLi91c2VSb3V0ZXMiLCJoaXN0b3J5L2xpYi9jcmVhdGVIYXNoSGlzdG9yeSIsMTM3LCJfZ2V0Um91dGVQYXJhbXMiLCJfZ2V0Um91dGVQYXJhbXMyIiwiUm91dGluZ0NvbnRleHQiLCJyb3V0ZVBhcmFtcyIsIi4vZ2V0Um91dGVQYXJhbXMiLDEzOCwiY3JlYXRlRW50ZXJIb29rIiwiZ2V0RW50ZXJIb29rcyIsInJ1bkVudGVySG9va3MiLCJyZWRpcmVjdEluZm8iLCJydW5MZWF2ZUhvb2tzIiwib25MZWF2ZSIsMTM5LCJyb3V0ZVBhcmFtc0NoYW5nZWQiLCJwcmV2U3RhdGUiLCJyb3V0ZVF1ZXJ5Q2hhbmdlZCIsImNvbXB1dGVDaGFuZ2VkUm91dGVzIiwicHJldlJvdXRlcyIsIm5leHRSb3V0ZXMiLCJsZWF2ZVJvdXRlcyIsImVudGVyUm91dGVzIiwxNDAsImdldENvbXBvbmVudHNGb3JSb3V0ZSIsImdldENvbXBvbmVudCIsMTQxLCJnZXRSb3V0ZVBhcmFtcyIsMTQyLCJfUm91dGVyMiIsIl9Sb3V0ZXIzIiwiX0xpbmszIiwiX0luZGV4TGluazIiLCJfSW5kZXhMaW5rMyIsIl9JbmRleFJlZGlyZWN0MiIsIl9JbmRleFJlZGlyZWN0MyIsIl9JbmRleFJvdXRlMiIsIl9JbmRleFJvdXRlMyIsIl9SZWRpcmVjdDMiLCJfUm91dGUyIiwiX1JvdXRlMyIsIl9IaXN0b3J5MiIsIl9IaXN0b3J5MyIsIl9MaWZlY3ljbGUyIiwiX0xpZmVjeWNsZTMiLCJfUm91dGVDb250ZXh0MiIsIl9Sb3V0ZUNvbnRleHQzIiwiX3VzZVJvdXRlczMiLCJ1c2VSb3V0ZXMiLCJfUm91dGluZ0NvbnRleHQzIiwiX1Byb3BUeXBlczIiLCJfUHJvcFR5cGVzMyIsIl9tYXRjaDIiLCJfbWF0Y2gzIiwiX1JvdXRlcjQiLCIuL0hpc3RvcnkiLCIuL0luZGV4TGluayIsIi4vSW5kZXhSZWRpcmVjdCIsIi4vSW5kZXhSb3V0ZSIsIi4vTGlmZWN5Y2xlIiwiLi9Sb3V0ZSIsIi4vUm91dGVDb250ZXh0IiwiLi9Sb3V0ZXIiLCIuL21hdGNoIiwxNDMsInBhcmFtc0FyZUFjdGl2ZSIsImFjdGl2ZVBhcmFtcyIsImdldE1hdGNoaW5nUm91dGUiLCJhY3RpdmVSb3V0ZXMiLCJyb3V0ZUlzQWN0aXZlIiwiaW5kZXhPbmx5IiwicXVlcnlJc0FjdGl2ZSIsImFjdGl2ZVF1ZXJ5IiwxNDQsInJlZGlyZWN0TG9jYXRpb24iLCJfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkyIiwiX2hpc3RvcnlMaWJVc2VCYXNlbmFtZSIsIl9oaXN0b3J5TGliVXNlQmFzZW5hbWUyIiwiaGlzdG9yeS9saWIvY3JlYXRlTWVtb3J5SGlzdG9yeSIsImhpc3RvcnkvbGliL3VzZUJhc2VuYW1lIiwxNDUsImdldENoaWxkUm91dGVzIiwiZ2V0SW5kZXhSb3V0ZSIsImFzc2lnblBhcmFtcyIsImNyZWF0ZVBhcmFtcyIsIm1hdGNoUm91dGVEZWVwIiwiaXNFeGFjdE1hdGNoIiwibWF0Y2hSb3V0ZXMiLDE0NiwiaGFzQW55UHJvcGVydGllcyIsIl9pc0FjdGl2ZTMiLCJjcmVhdGVMb2NhdGlvbkZyb21SZWRpcmVjdEluZm8iLCJfaGlzdG9yeUxpYkFjdGlvbnMiLCJwYXJ0aWFsTmV4dFN0YXRlIiwiZmluaXNoTWF0Y2giLCJfbWF0Y2hSb3V0ZXMyIiwiX2NvbXB1dGVDaGFuZ2VkUm91dGVzIiwiX2NvbXB1dGVDaGFuZ2VkUm91dGVzMyIsIl9UcmFuc2l0aW9uVXRpbHMiLCJfZ2V0Q29tcG9uZW50czIiLCJnZXRSb3V0ZUlEIiwiX19pZF9fIiwiUm91dGVHdWlkIiwiZ2V0Um91dGVIb29rc0ZvclJvdXRlcyIsIlJvdXRlSG9va3MiLCJ0cmFuc2l0aW9uSG9vayIsImJlZm9yZVVubG9hZEhvb2siLCJyb3V0ZUlEIiwidGhlcmVXZXJlTm9Sb3V0ZUhvb2tzIiwidW5saXN0ZW5CZWZvcmUiLCJ1bmxpc3RlbkJlZm9yZVVubG9hZCIsIm5ld0hvb2tzIiwiX2hpc3RvcnlMaWJVc2VRdWVyaWVzMiIsIl9oaXN0b3J5TGliVXNlUXVlcmllcyIsIl9jb21wdXRlQ2hhbmdlZFJvdXRlczIiLCJfaXNBY3RpdmUyIiwiX2dldENvbXBvbmVudHMiLCJfbWF0Y2hSb3V0ZXMiLCIuL1RyYW5zaXRpb25VdGlscyIsIi4vY29tcHV0ZUNoYW5nZWRSb3V0ZXMiLCIuL2dldENvbXBvbmVudHMiLCIuL2lzQWN0aXZlIiwiLi9tYXRjaFJvdXRlcyIsImhpc3RvcnkvbGliL0FjdGlvbnMiLCJoaXN0b3J5L2xpYi91c2VRdWVyaWVzIiwxNDcsImR1cCIsMTQ4LDE0OSwxNTAsMTUxLDE1MiwxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksMTYwLDE2MSwxNjIsMTYzLDE2NCwiT3B0aW9uIiwiYWRkTGFiZWxUZXh0IiwibW91c2VEb3duIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJyZW5kZXJGdW5jIiwiYmxvY2tFdmVudCIsInRhZ05hbWUiLCJyZW5kZXJlZExhYmVsIiwib3B0aW9uQ2xhc3NlcyIsIm9uTW91c2VEb3duIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwibGFiZWwiLCJjbGFzc25hbWVzIiwxNjUsIlJlYWN0RE9NIiwiSW5wdXQiLCJWYWx1ZSIsIlNpbmdsZVZhbHVlIiwicmVxdWVzdElkIiwiU2VsZWN0IiwiYWxsb3dDcmVhdGUiLCJhc3luY09wdGlvbnMiLCJhdXRvbG9hZCIsImJhY2tzcGFjZVJlbW92ZXMiLCJjYWNoZUFzeW5jUmVzdWx0cyIsImNsZWFyQWxsVGV4dCIsImNsZWFyVmFsdWVUZXh0IiwiY2xlYXJhYmxlIiwiZmlsdGVyT3B0aW9uIiwiZmlsdGVyT3B0aW9ucyIsImlnbm9yZUNhc2UiLCJpbnB1dFByb3BzIiwiaXNMb2FkaW5nIiwibGFiZWxLZXkiLCJtYXRjaFBvcyIsIm1hdGNoUHJvcCIsIm11bHRpIiwibmV3T3B0aW9uQ3JlYXRvciIsIm5vUmVzdWx0c1RleHQiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25JbnB1dENoYW5nZSIsIm9uT3B0aW9uTGFiZWxDbGljayIsIm9wdGlvbkNvbXBvbmVudCIsIm9wdGlvblJlbmRlcmVyIiwic2VhcmNoYWJsZSIsInNlYXJjaGluZ1RleHQiLCJzZWFyY2hQcm9tcHRUZXh0Iiwic2luZ2xlVmFsdWVDb21wb25lbnQiLCJ2YWx1ZUNvbXBvbmVudCIsInZhbHVlS2V5IiwidmFsdWVSZW5kZXJlciIsImlzRm9jdXNlZCIsImlzT3BlbiIsIl9vcHRpb25zQ2FjaGUiLCJfb3B0aW9uc0ZpbHRlclN0cmluZyIsIl9jbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlIiwibWVudUVsZW0iLCJmaW5kRE9NTm9kZSIsInNlbGVjdE1lbnVDb250YWluZXIiLCJjb250cm9sRWxlbSIsImNvbnRyb2wiLCJldmVudE9jY3VyZWRPdXRzaWRlTWVudSIsImNsaWNrZWRPdXRzaWRlRWxlbWVudCIsImV2ZW50T2NjdXJlZE91dHNpZGVDb250cm9sIiwiX3VuYmluZENsb3NlTWVudUlmQ2xpY2tlZE91dHNpZGUiLCJfYmluZENsb3NlTWVudUlmQ2xpY2tlZE91dHNpZGUiLCJnZXRTdGF0ZUZyb21WYWx1ZSIsImF1dG9sb2FkQXN5bmNPcHRpb25zIiwiX2JsdXJUaW1lb3V0IiwiX2ZvY3VzVGltZW91dCIsIm5ld1Byb3BzIiwiX3RoaXMyIiwib3B0aW9uc0NoYW5nZWQiLCJmaWx0ZXJlZE9wdGlvbnMiLCJuZXdTdGF0ZSIsImxvYWRBc3luY09wdGlvbnMiLCJfdGhpczMiLCJfZm9jdXNBZnRlclVwZGF0ZSIsImdldElucHV0Tm9kZSIsIl9mb2N1c2VkT3B0aW9uUmV2ZWFsIiwiZm9jdXNlZCIsIm1lbnUiLCJmb2N1c2VkRE9NIiwibWVudURPTSIsImZvY3VzZWRSZWN0IiwibWVudVJlY3QiLCJib3R0b20iLCJvZmZzZXRUb3AiLCJjbGllbnRIZWlnaHQiLCJldmVudFRhcmdldCIsInNyY0VsZW1lbnQiLCJfdGhpczQiLCJmb2N1c2VkT3B0aW9uIiwiaW5pdFZhbHVlc0FycmF5IiwidmFsdWVGb3JTdGF0ZSIsImdldEZpcnN0Rm9jdXNhYmxlT3B0aW9uIiwiaW5wdXRWYWx1ZSIsIm9wdGlvbkluZGV4IiwiX3RoaXM1Iiwic2V0VmFsdWUiLCJmb2N1c0FmdGVyVXBkYXRlIiwiZmlyZUNoYW5nZUV2ZW50Iiwic2VsZWN0VmFsdWUiLCJhZGRWYWx1ZSIsInBvcFZhbHVlIiwicmVtb3ZlVmFsdWUiLCJ2YWx1ZVRvUmVtb3ZlIiwiY2xlYXJWYWx1ZSIsInJlc2V0VmFsdWUiLCJoYW5kbGVNb3VzZURvd24iLCJfb3BlbkFmdGVyRm9jdXMiLCJoYW5kbGVNb3VzZURvd25Pbk1lbnUiLCJoYW5kbGVNb3VzZURvd25PbkFycm93IiwiaGFuZGxlSW5wdXRGb2N1cyIsIl90aGlzNiIsIm5ld0lzT3BlbiIsImhhbmRsZUlucHV0Qmx1ciIsIl90aGlzNyIsImhhbmRsZUtleURvd24iLCJzZWxlY3RGb2N1c2VkT3B0aW9uIiwiZm9jdXNQcmV2aW91c09wdGlvbiIsImZvY3VzTmV4dE9wdGlvbiIsIl9nZXROZXdGb2N1c2VkT3B0aW9uIiwiaGFuZGxlSW5wdXRDaGFuZ2UiLCJfdGhpczgiLCJfdGhpczkiLCJ0aGlzUmVxdWVzdElkIiwiX2N1cnJlbnRSZXF1ZXN0SWQiLCJjYWNoZUtleSIsIm9wdGlvbnNSZXNwb25zZUhhbmRsZXIiLCJhc3luY09wdHMiLCJmaWx0ZXJWYWx1ZSIsImV4Y2x1ZGUiLCJvcCIsInZhbHVlVGVzdCIsImxhYmVsVGVzdCIsImZvY3VzT3B0aW9uIiwiZm9jdXNBZGphY2VudE9wdGlvbiIsIm9wcyIsImZvY3VzZWRJbmRleCIsInVuZm9jdXNPcHRpb24iLCJidWlsZE1lbnUiLCJfdGhpczEwIiwiZm9jdXNlZFZhbHVlIiwicmVuZGVyTGFiZWwiLCJuZXdPcHRpb24iLCJpc1NlbGVjdGVkIiwib3B0aW9uQ2xhc3MiLCJTZWxlY3Qtb3B0aW9uIiwiaXMtc2VsZWN0ZWQiLCJpcy1mb2N1c2VkIiwiaXMtZGlzYWJsZWQiLCJvcHRpb25SZXN1bHQiLCJwcm9tcHRDbGFzcyIsImhhbmRsZU9wdGlvbkxhYmVsQ2xpY2siLCJzZWxlY3RDbGFzcyIsIlNlbGVjdC0tbXVsdGkiLCJpcy1zZWFyY2hhYmxlIiwiaXMtb3BlbiIsImlzLWxvYWRpbmciLCJoYXMtdmFsdWUiLCJvblJlbW92ZSIsInJlbmRlcmVyIiwib3B0aW9uTGFiZWxDbGljayIsIm1lbnVQcm9wcyIsImxvYWRpbmciLCJhcmlhLWhpZGRlbiIsImNsZWFyIiwiYXJpYS1sYWJlbCIsIm9uVG91Y2hFbmQiLCJhcnJvdyIsIm9uS2V5RG93biIsIi4vT3B0aW9uIiwiLi9TaW5nbGVWYWx1ZSIsIi4vVmFsdWUiLCJyZWFjdC1kb20iLCJyZWFjdC1pbnB1dC1hdXRvc2l6ZSIsMTY2LDE2NywiaGFuZGxlT25SZW1vdmUiLDE2OCwiUmVhY3RNb3VudCIsIk1peGluIiwiYXV0b0ZvY3VzIiwiQXV0b0ZvY3VzVXRpbHMiLCJmb2N1c0RPTUNvbXBvbmVudCIsImdldE5vZGUiLCJfcm9vdE5vZGVJRCIsIi4vUmVhY3RNb3VudCIsIi4vZmluZERPTU5vZGUiLCJmYmpzL2xpYi9mb2N1c05vZGUiLDE2OSwiaXNQcmVzdG8iLCJvcGVyYSIsImlzS2V5cHJlc3NDb21tYW5kIiwibmF0aXZlRXZlbnQiLCJnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSIsInRvcExldmVsVHlwZSIsInRvcExldmVsVHlwZXMiLCJ0b3BDb21wb3NpdGlvblN0YXJ0IiwiZXZlbnRUeXBlcyIsImNvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25VcGRhdGUiLCJjb21wb3NpdGlvblVwZGF0ZSIsImlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0IiwidG9wS2V5RG93biIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJ0b3BLZXlVcCIsIkVORF9LRVlDT0RFUyIsInRvcEtleVByZXNzIiwidG9wTW91c2VEb3duIiwidG9wQmx1ciIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsInRvcExldmVsVGFyZ2V0IiwidG9wTGV2ZWxUYXJnZXRJRCIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwiZmFsbGJhY2tEYXRhIiwiY2FuVXNlQ29tcG9zaXRpb25FdmVudCIsImN1cnJlbnRDb21wb3NpdGlvbiIsInVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhIiwiRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwiZ2V0UG9vbGVkIiwiU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsImN1c3RvbURhdGEiLCJFdmVudFByb3BhZ2F0b3JzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCJTUEFDRUJBUl9DT0RFIiwiaGFzU3BhY2VLZXlwcmVzcyIsIlNQQUNFQkFSX0NIQVIiLCJ0b3BUZXh0SW5wdXQiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJyZWxlYXNlIiwidG9wUGFzdGUiLCJleHRyYWN0QmVmb3JlSW5wdXRFdmVudCIsImNhblVzZVRleHRJbnB1dEV2ZW50IiwiU3ludGhldGljSW5wdXRFdmVudCIsImJlZm9yZUlucHV0IiwiRXZlbnRDb25zdGFudHMiLCJkb2N1bWVudE1vZGUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImJ1YmJsZWQiLCJvbkJlZm9yZUlucHV0IiwiY2FwdHVyZWQiLCJvbkJlZm9yZUlucHV0Q2FwdHVyZSIsImRlcGVuZGVuY2llcyIsIm9uQ29tcG9zaXRpb25FbmQiLCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmUiLCJvbkNvbXBvc2l0aW9uVXBkYXRlIiwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmUiLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZXh0cmFjdEV2ZW50cyIsIi4vRXZlbnRDb25zdGFudHMiLCIuL0V2ZW50UHJvcGFnYXRvcnMiLCIuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSIsIi4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsIi4vU3ludGhldGljSW5wdXRFdmVudCIsImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50IiwiZmJqcy9saWIva2V5T2YiLDE3MCwicHJlZml4S2V5IiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImZsZXgiLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJsaW5lQ2xhbXAiLCJ0YWJTaXplIiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4ZXMiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJvdXRsaW5lIiwib3V0bGluZVdpZHRoIiwib3V0bGluZVN0eWxlIiwib3V0bGluZUNvbG9yIiwiQ1NTUHJvcGVydHkiLDE3MSwiUmVhY3RQZXJmIiwiZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyIsInN0eWxlRmxvYXRBY2Nlc3NvciIsInRlbXBTdHlsZSIsImNzc0Zsb2F0IiwiYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuIiwiYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuIiwid2FybmVkU3R5bGVOYW1lcyIsIndhcm5lZFN0eWxlVmFsdWVzIiwid2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUiLCJ3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUiLCJ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24iLCJ3YXJuVmFsaWRTdHlsZSIsIkNTU1Byb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvclN0eWxlcyIsInNlcmlhbGl6ZWQiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJleHBhbnNpb24iLCJpbmRpdmlkdWFsU3R5bGVOYW1lIiwibWVhc3VyZU1ldGhvZHMiLCIuL0NTU1Byb3BlcnR5IiwiLi9SZWFjdFBlcmYiLCIuL2Rhbmdlcm91c1N0eWxlVmFsdWUiLCJmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZSIsImZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZSIsImZianMvbGliL21lbW9pemVTdHJpbmdPbmx5IiwiZmJqcy9saWIvd2FybmluZyIsMTcyLCJDYWxsYmFja1F1ZXVlIiwiX2NvbnRleHRzIiwiUG9vbGVkQ2xhc3MiLCJlbnF1ZXVlIiwibm90aWZ5QWxsIiwiY2FsbGJhY2tzIiwiZGVzdHJ1Y3RvciIsImFkZFBvb2xpbmdUbyIsIi4vT2JqZWN0LmFzc2lnbiIsIi4vUG9vbGVkQ2xhc3MiLDE3Mywic2hvdWxkVXNlQ2hhbmdlRXZlbnQiLCJtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50IiwiU3ludGhldGljRXZlbnQiLCJjaGFuZ2UiLCJhY3RpdmVFbGVtZW50SUQiLCJnZXRFdmVudFRhcmdldCIsIlJlYWN0VXBkYXRlcyIsImJhdGNoZWRVcGRhdGVzIiwicnVuRXZlbnRJbkJhdGNoIiwiRXZlbnRQbHVnaW5IdWIiLCJlbnF1ZXVlRXZlbnRzIiwicHJvY2Vzc0V2ZW50UXVldWUiLCJzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJ0YXJnZXRJRCIsInN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwiZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudCIsInRvcENoYW5nZSIsImhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4IiwidG9wRm9jdXMiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJhY3RpdmVFbGVtZW50VmFsdWUiLCJhY3RpdmVFbGVtZW50VmFsdWVQcm9wIiwibmV3VmFsdWVQcm9wIiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsInByb3BlcnR5TmFtZSIsImdldFRhcmdldElERm9ySW5wdXRFdmVudCIsInRvcElucHV0IiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFIiwiZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUiLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJzaG91bGRVc2VDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50IiwidG9wQ2xpY2siLCJpc0V2ZW50U3VwcG9ydGVkIiwiaXNUZXh0SW5wdXRFbGVtZW50Iiwib25DaGFuZ2VDYXB0dXJlIiwiZG9lc0NoYW5nZUV2ZW50QnViYmxlIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJnZXRUYXJnZXRJREZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCIuL0V2ZW50UGx1Z2luSHViIiwiLi9SZWFjdFVwZGF0ZXMiLCIuL1N5bnRoZXRpY0V2ZW50IiwiLi9nZXRFdmVudFRhcmdldCIsIi4vaXNFdmVudFN1cHBvcnRlZCIsIi4vaXNUZXh0SW5wdXRFbGVtZW50IiwxNzQsIm5leHRSZWFjdFJvb3RJbmRleCIsIkNsaWVudFJlYWN0Um9vdEluZGV4IiwiY3JlYXRlUmVhY3RSb290SW5kZXgiLDE3NSwiaW5zZXJ0Q2hpbGRBdCIsImNoaWxkTm9kZSIsImJlZm9yZUNoaWxkIiwiRGFuZ2VyIiwiUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMiLCJzZXRJbm5lckhUTUwiLCJzZXRUZXh0Q29udGVudCIsIkRPTUNoaWxkcmVuT3BlcmF0aW9ucyIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwIiwidXBkYXRlVGV4dENvbnRlbnQiLCJwcm9jZXNzVXBkYXRlcyIsInVwZGF0ZXMiLCJtYXJrdXBMaXN0IiwiaW5pdGlhbENoaWxkcmVuIiwidXBkYXRlZENoaWxkcmVuIiwiTU9WRV9FWElTVElORyIsIlJFTU9WRV9OT0RFIiwidXBkYXRlZEluZGV4IiwidXBkYXRlZENoaWxkIiwicGFyZW50SUQiLCJyZW5kZXJlZE1hcmt1cCIsImRhbmdlcm91c2x5UmVuZGVyTWFya3VwIiwiSU5TRVJUX01BUktVUCIsIm1hcmt1cEluZGV4IiwidG9JbmRleCIsIlNFVF9NQVJLVVAiLCJURVhUX0NPTlRFTlQiLCIuL0RhbmdlciIsIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMiLCIuL3NldElubmVySFRNTCIsIi4vc2V0VGV4dENvbnRlbnQiLDE3NiwiY2hlY2tNYXNrIiwiRE9NUHJvcGVydHlJbmplY3Rpb24iLCJNVVNUX1VTRV9BVFRSSUJVVEUiLCJNVVNUX1VTRV9QUk9QRVJUWSIsIkhBU19TSURFX0VGRkVDVFMiLCJIQVNfQk9PTEVBTl9WQUxVRSIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiaW5qZWN0RE9NUHJvcGVydHlDb25maWciLCJkb21Qcm9wZXJ0eUNvbmZpZyIsIkluamVjdGlvbiIsIlByb3BlcnRpZXMiLCJET01BdHRyaWJ1dGVOYW1lc3BhY2VzIiwiRE9NQXR0cmlidXRlTmFtZXMiLCJET01Qcm9wZXJ0eU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwiaXNDdXN0b21BdHRyaWJ1dGUiLCJET01Qcm9wZXJ0eSIsIl9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucyIsImxvd2VyQ2FzZWQiLCJwcm9wQ29uZmlnIiwicHJvcGVydHlJbmZvIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11dGF0aW9uTWV0aG9kIiwibXVzdFVzZUF0dHJpYnV0ZSIsIm11c3RVc2VQcm9wZXJ0eSIsImhhc1NpZGVFZmZlY3RzIiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUiLCJkZWZhdWx0VmFsdWVDYWNoZSIsIklEX0FUVFJJQlVURV9OQU1FIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsImdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5IiwidGVzdEVsZW1lbnQiLCJub2RlRGVmYXVsdHMiLCJpbmplY3Rpb24iLDE3NywiaXNBdHRyaWJ1dGVOYW1lU2FmZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsInNob3VsZElnbm9yZVZhbHVlIiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJyZWFjdFByb3BzIiwid2FybmVkUHJvcGVydGllcyIsIndhcm5Vbmtub3duUHJvcGVydHkiLCJsb3dlckNhc2VkTmFtZSIsInN0YW5kYXJkTmFtZSIsIkRPTVByb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvcklEIiwic2V0QXR0cmlidXRlRm9ySUQiLCJjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eSIsImNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZSIsInNldFZhbHVlRm9yUHJvcGVydHkiLCJkZWxldGVWYWx1ZUZvclByb3BlcnR5Iiwic2V0QXR0cmlidXRlTlMiLCJzZXRWYWx1ZUZvckF0dHJpYnV0ZSIsIi4vRE9NUHJvcGVydHkiLCIuL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyIiwxNzgsIk9QRU5fVEFHX05BTUVfRVhQIiwiUkVTVUxUX0lOREVYX0FUVFIiLCJtYXJrdXBCeU5vZGVOYW1lIiwicmVzdWx0TGlzdCIsInJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQiLCJyZXN1bHRJbmRleCIsIm1hcmt1cExpc3RCeU5vZGVOYW1lIiwicmVuZGVyTm9kZXMiLCJyZW5kZXJOb2RlIiwib2xkQ2hpbGQiLCJuZXdDaGlsZCIsImZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsImZianMvbGliL2VtcHR5RnVuY3Rpb24iLCJmYmpzL2xpYi9nZXRNYXJrdXBXcmFwIiwxNzksIkRlZmF1bHRFdmVudFBsdWdpbk9yZGVyIiwiUmVzcG9uZGVyRXZlbnRQbHVnaW4iLCJTaW1wbGVFdmVudFBsdWdpbiIsIlRhcEV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLDE4MCwiU3ludGhldGljTW91c2VFdmVudCIsImdldEZpcnN0UmVhY3RET00iLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wTW91c2VPdXQiLCJ0b3BNb3VzZU92ZXIiLCJleHRyYWN0ZWRFdmVudHMiLCJmcm9tRWxlbWVudCIsImZyb21JRCIsInRvSUQiLCJ0b0VsZW1lbnQiLCJnZXRJRCIsImxlYXZlIiwiZW50ZXIiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCIuL1N5bnRoZXRpY01vdXNlRXZlbnQiLDE4MSwiUHJvcGFnYXRpb25QaGFzZXMiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkIiwidG9wTG9hZGVkRGF0YSIsInRvcExvYWRlZE1ldGFkYXRhIiwidG9wTG9hZFN0YXJ0IiwidG9wTW91c2VNb3ZlIiwidG9wTW91c2VVcCIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BSZXNldCIsInRvcFNjcm9sbCIsInRvcFNlZWtlZCIsInRvcFNlZWtpbmciLCJ0b3BTdGFsbGVkIiwidG9wU3VibWl0IiwidG9wU3VzcGVuZCIsInRvcFRpbWVVcGRhdGUiLCJ0b3BUb3VjaENhbmNlbCIsInRvcFRvdWNoRW5kIiwidG9wVG91Y2hNb3ZlIiwidG9wVG91Y2hTdGFydCIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJ0b3BXaGVlbCIsImZianMvbGliL2tleU1pcnJvciIsMTgyLCJ2YWxpZGF0ZUluc3RhbmNlSGFuZGxlIiwidmFsaWQiLCJJbnN0YW5jZUhhbmRsZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQbHVnaW5VdGlscyIsIlJlYWN0RXJyb3JVdGlscyIsImFjY3VtdWxhdGVJbnRvIiwiZm9yRWFjaEFjY3VtdWxhdGVkIiwibGlzdGVuZXJCYW5rIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsInNpbXVsYXRlZCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImlzUGVyc2lzdGVudCIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsIiwiaW5qZWN0TW91bnQiLCJpbmplY3RJbnN0YW5jZUhhbmRsZSIsIkluamVjdGVkSW5zdGFuY2VIYW5kbGUiLCJnZXRJbnN0YW5jZUhhbmRsZSIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInB1dExpc3RlbmVyIiwiYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUiLCJQbHVnaW5Nb2R1bGUiLCJkaWRQdXRMaXN0ZW5lciIsImdldExpc3RlbmVyIiwiZGVsZXRlTGlzdGVuZXIiLCJ3aWxsRGVsZXRlTGlzdGVuZXIiLCJkZWxldGVBbGxMaXN0ZW5lcnMiLCJwbHVnaW5zIiwicG9zc2libGVQbHVnaW4iLCJwcm9jZXNzaW5nRXZlbnRRdWV1ZSIsInJldGhyb3dDYXVnaHRFcnJvciIsIl9fcHVyZ2UiLCJfX2dldExpc3RlbmVyQmFuayIsIi4vRXZlbnRQbHVnaW5SZWdpc3RyeSIsIi4vRXZlbnRQbHVnaW5VdGlscyIsIi4vUmVhY3RFcnJvclV0aWxzIiwiLi9hY2N1bXVsYXRlSW50byIsIi4vZm9yRWFjaEFjY3VtdWxhdGVkIiwxODMsInJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nIiwiRXZlbnRQbHVnaW5PcmRlciIsInBsdWdpbk5hbWUiLCJuYW1lc1RvUGx1Z2lucyIsInBsdWdpbkluZGV4IiwicHVibGlzaGVkRXZlbnRzIiwiZXZlbnROYW1lIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZGlzcGF0Y2hDb25maWciLCJwaGFzZU5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lIiwicHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwiSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyIsImlzT3JkZXJpbmdEaXJ0eSIsImdldFBsdWdpbk1vZHVsZUZvckV2ZW50IiwicGhhc2UiLCJfcmVzZXRFdmVudFBsdWdpbnMiLDE4NCwiaXNFbmRpc2giLCJpc01vdmVpc2giLCJpc1N0YXJ0aXNoIiwiZXhlY3V0ZURpc3BhdGNoIiwiZG9tSUQiLCJNb3VudCIsImludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaCIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImRpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiZGlzcGF0Y2hJRHMiLCJfZGlzcGF0Y2hJRHMiLCJ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsIiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSIsImV4ZWN1dGVEaXJlY3REaXNwYXRjaCIsImRpc3BhdGNoTGlzdGVuZXIiLCJkaXNwYXRjaElEIiwicmVzIiwiaGFzRGlzcGF0Y2hlcyIsIkluamVjdGVkTW91bnQiLCJsaXN0ZW5lcnNJc0FyciIsImlkc0lzQXJyIiwiSURzTGVuIiwibGlzdGVuZXJzTGVuIiwxODUsImxpc3RlbmVyQXRQaGFzZSIsInByb3BhZ2F0aW9uUGhhc2UiLCJhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzIiwidXB3YXJkcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUiLCJkaXNwYXRjaE1hcmtlciIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0IiwidHJhdmVyc2VUd29QaGFzZVNraXBUYXJnZXQiLCJhY2N1bXVsYXRlRGlzcGF0Y2hlcyIsImlnbm9yZWREaXJlY3Rpb24iLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLDE4NiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsImdldFRleHRDb250ZW50QWNjZXNzb3IiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmRMZW5ndGgiLCJtaW5FbmQiLCJzbGljZVRhaWwiLCIuL2dldFRleHRDb250ZW50QWNjZXNzb3IiLDE4NywiaGFzU1ZHIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwiSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiYWNjZXB0IiwiYWNjZXB0Q2hhcnNldCIsImFjY2Vzc0tleSIsImFsbG93RnVsbFNjcmVlbiIsImFsbG93VHJhbnNwYXJlbmN5IiwiYWx0IiwiYXV0b0NvbXBsZXRlIiwiYXV0b1BsYXkiLCJjZWxsUGFkZGluZyIsImNlbGxTcGFjaW5nIiwiY2hhclNldCIsImNoYWxsZW5nZSIsImNsYXNzSUQiLCJjb2xzIiwiY29sU3BhbiIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRleHRNZW51IiwiY29udHJvbHMiLCJjb29yZHMiLCJjcm9zc09yaWdpbiIsImRhdGVUaW1lIiwiZG93bmxvYWQiLCJkcmFnZ2FibGUiLCJlbmNUeXBlIiwiZm9ybSIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1NZXRob2QiLCJmb3JtTm9WYWxpZGF0ZSIsImZvcm1UYXJnZXQiLCJmcmFtZUJvcmRlciIsImhyZWZMYW5nIiwiaHRtbEZvciIsImh0dHBFcXVpdiIsImljb24iLCJpbnB1dE1vZGUiLCJrZXlQYXJhbXMiLCJrZXlUeXBlIiwibG9vcCIsIm1hbmlmZXN0IiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luV2lkdGgiLCJtYXhMZW5ndGgiLCJtZWRpYSIsIm1lZGlhR3JvdXAiLCJtaW5MZW5ndGgiLCJtdWx0aXBsZSIsIm11dGVkIiwibm9WYWxpZGF0ZSIsIm9wdGltdW0iLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmFkaW9Hcm91cCIsInJlYWRPbmx5IiwicmVsIiwicmVxdWlyZWQiLCJyb2xlIiwicm93cyIsInJvd1NwYW4iLCJzYW5kYm94Iiwic2NvcGUiLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemVzIiwic3BhbiIsInNwZWxsQ2hlY2siLCJzcmNEb2MiLCJzcmNTZXQiLCJzdW1tYXJ5IiwidXNlTWFwIiwid21vZGUiLCJhYm91dCIsImRhdGF0eXBlIiwiaW5saXN0IiwicmVzb3VyY2UiLCJ0eXBlb2YiLCJ2b2NhYiIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvcnJlY3QiLCJhdXRvU2F2ZSIsIml0ZW1Qcm9wIiwiaXRlbVNjb3BlIiwiaXRlbVR5cGUiLCJpdGVtSUQiLCJpdGVtUmVmIiwic2VjdXJpdHkiLCJ1bnNlbGVjdGFibGUiLDE4OCwiX2Fzc2VydFNpbmdsZUxpbmsiLCJjaGVja2VkTGluayIsInZhbHVlTGluayIsIl9hc3NlcnRWYWx1ZUxpbmsiLCJfYXNzZXJ0Q2hlY2tlZExpbmsiLCJnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0iLCJnZXROYW1lIiwiUmVhY3RQcm9wVHlwZXMiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiaGFzUmVhZE9ubHlWYWx1ZSIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsIkxpbmtlZFZhbHVlVXRpbHMiLCJhZGRlbmR1bSIsImdldFZhbHVlIiwiZ2V0Q2hlY2tlZCIsImV4ZWN1dGVPbkNoYW5nZSIsInJlcXVlc3RDaGFuZ2UiLCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMiLCIuL1JlYWN0UHJvcFR5cGVzIiwxODksIm5leHRTb3VyY2UiLDE5MCwib25lQXJndW1lbnRQb29sZXIiLCJjb3B5RmllbGRzRnJvbSIsIktsYXNzIiwiaW5zdGFuY2VQb29sIiwidHdvQXJndW1lbnRQb29sZXIiLCJhMSIsImEyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImEzIiwiZm91ckFyZ3VtZW50UG9vbGVyIiwiYTQiLCJmaXZlQXJndW1lbnRQb29sZXIiLCJhNSIsInN0YW5kYXJkUmVsZWFzZXIiLCJwb29sU2l6ZSIsIkRFRkFVTFRfUE9PTF9TSVpFIiwiREVGQVVMVF9QT09MRVIiLCJDb3B5Q29uc3RydWN0b3IiLCJwb29sZXIiLCJOZXdLbGFzcyIsMTkxLCJSZWFjdERPTVNlcnZlciIsIlJlYWN0SXNvbW9ycGhpYyIsImRlcHJlY2F0ZWQiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVuZGVyVG9TdHJpbmciLCJyZW5kZXJUb1N0YXRpY01hcmt1cCIsIl9fU0VDUkVUX0RPTV9ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiLi9SZWFjdERPTSIsIi4vUmVhY3RET01TZXJ2ZXIiLCIuL1JlYWN0SXNvbW9ycGhpYyIsIi4vZGVwcmVjYXRlZCIsMTkyLCJSZWFjdEluc3RhbmNlTWFwIiwiZGlkV2FybktleSIsIlJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluIiwiZ2V0RE9NTm9kZSIsIi4vUmVhY3RJbnN0YW5jZU1hcCIsMTkzLCJnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudCIsIm1vdW50QXQiLCJ0b3BMaXN0ZW5lcnNJREtleSIsInJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciIsImFscmVhZHlMaXN0ZW5pbmdUbyIsIlJlYWN0RXZlbnRFbWl0dGVyTWl4aW4iLCJWaWV3cG9ydE1ldHJpY3MiLCJpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSIsInRvcEV2ZW50TWFwcGluZyIsIlJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciIsIlJlYWN0RXZlbnRMaXN0ZW5lciIsImluamVjdFJlYWN0RXZlbnRMaXN0ZW5lciIsInNldEhhbmRsZVRvcExldmVsIiwiaGFuZGxlVG9wTGV2ZWwiLCJzZXRFbmFibGVkIiwiaXNFbmFibGVkIiwibGlzdGVuVG8iLCJjb250ZW50RG9jdW1lbnRIYW5kbGUiLCJpc0xpc3RlbmluZyIsImRlcGVuZGVuY3kiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJXSU5ET1dfSEFORExFIiwiaGFuZGxlckJhc2VOYW1lIiwiZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nIiwicmVmcmVzaCIsInJlZnJlc2hTY3JvbGxWYWx1ZXMiLCJtb25pdG9yU2Nyb2xsVmFsdWUiLCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW4iLCIuL1ZpZXdwb3J0TWV0cmljcyIsMTk0LCJpbnN0YW50aWF0ZUNoaWxkIiwiY2hpbGRJbnN0YW5jZXMiLCJrZXlVbmlxdWUiLCJpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IiwiUmVhY3RSZWNvbmNpbGVyIiwic2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuIiwiUmVhY3RDaGlsZFJlY29uY2lsZXIiLCJpbnN0YW50aWF0ZUNoaWxkcmVuIiwibmVzdGVkQ2hpbGROb2RlcyIsInRyYW5zYWN0aW9uIiwidXBkYXRlQ2hpbGRyZW4iLCJwcmV2Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCJwcmV2Q2hpbGQiLCJwcmV2RWxlbWVudCIsIl9jdXJyZW50RWxlbWVudCIsIm5leHRFbGVtZW50IiwicmVjZWl2ZUNvbXBvbmVudCIsInVubW91bnRDb21wb25lbnQiLCJuZXh0Q2hpbGRJbnN0YW5jZSIsInVubW91bnRDaGlsZHJlbiIsInJlbmRlcmVkQ2hpbGRyZW4iLCJyZW5kZXJlZENoaWxkIiwiLi9SZWFjdFJlY29uY2lsZXIiLCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IiwiLi90cmF2ZXJzZUFsbENoaWxkcmVuIiwxOTUsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwiRm9yRWFjaEJvb2tLZWVwaW5nIiwiZm9yRWFjaEZ1bmN0aW9uIiwiZm9yRWFjaENvbnRleHQiLCJmb3JFYWNoU2luZ2xlQ2hpbGQiLCJib29rS2VlcGluZyIsImZvckVhY2hDaGlsZHJlbiIsImZvckVhY2hGdW5jIiwidHJhdmVyc2VDb250ZXh0IiwiTWFwQm9va0tlZXBpbmciLCJtYXBSZXN1bHQiLCJrZXlQcmVmaXgiLCJtYXBGdW5jdGlvbiIsIm1hcENvbnRleHQiLCJtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0IiwiY2hpbGRLZXkiLCJtYXBwZWRDaGlsZCIsIm1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwiLCJSZWFjdEVsZW1lbnQiLCJjbG9uZUFuZFJlcGxhY2VLZXkiLCJlc2NhcGVkUHJlZml4IiwibWFwQ2hpbGRyZW4iLCJmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSIsImNvdW50Q2hpbGRyZW4iLCJSZWFjdENoaWxkcmVuIiwiLi9SZWFjdEVsZW1lbnQiLDE5Niwid2FyblNldFByb3BzIiwid2FybmVkU2V0UHJvcHMiLCJ2YWxpZGF0ZVR5cGVEZWYiLCJ0eXBlRGVmIiwiUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJ2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlIiwicHJvdG8iLCJzcGVjUG9saWN5IiwiUmVhY3RDbGFzc0ludGVyZmFjZSIsIlJlYWN0Q2xhc3NNaXhpbiIsIlNwZWNQb2xpY3kiLCJPVkVSUklERV9CQVNFIiwiREVGSU5FX01BTlkiLCJERUZJTkVfTUFOWV9NRVJHRUQiLCJtaXhTcGVjSW50b0NvbXBvbmVudCIsInNwZWMiLCJNSVhJTlNfS0VZIiwiUkVTRVJWRURfU1BFQ19LRVlTIiwibWl4aW5zIiwiaXNSZWFjdENsYXNzTWV0aG9kIiwiaXNBbHJlYWR5RGVmaW5lZCIsInNob3VsZEF1dG9CaW5kIiwiYXV0b2JpbmQiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50Iiwic3RhdGljcyIsImlzUmVzZXJ2ZWQiLCJpc0luaGVyaXRlZCIsIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMiLCJ0d28iLCJSZWFjdENvbXBvbmVudCIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiREVGSU5FX09OQ0UiLCJpbmplY3RlZE1peGlucyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJjaGlsZENvbnRleHQiLCJ1cGRhdGVyIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVDYWxsYmFjayIsInNldFByb3BzIiwicGFydGlhbFByb3BzIiwiZW5xdWV1ZVNldFByb3BzIiwicmVwbGFjZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VQcm9wcyIsIlJlYWN0Q2xhc3NDb21wb25lbnQiLCJSZWFjdENsYXNzIiwiaW5pdGlhbFN0YXRlIiwiX2lzTW9ja0Z1bmN0aW9uIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJjb21wb25lbnRTaG91bGRVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiaW5qZWN0TWl4aW4iLCIuL1JlYWN0Q29tcG9uZW50IiwiLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZSIsIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMiLCJmYmpzL2xpYi9lbXB0eU9iamVjdCIsMTk3LCJpc1JlYWN0Q29tcG9uZW50IiwicGFydGlhbFN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZGVwcmVjYXRlZEFQSXMiLCJkZWZpbmVEZXByZWNhdGlvbldhcm5pbmciLCJpbmZvIiwiZm5OYW1lIiwxOTgsIlJlYWN0RE9NSURPcGVyYXRpb25zIiwiUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCJwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwiZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwicmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsInVubW91bnRJREZyb21FbnZpcm9ubWVudCIsInJvb3ROb2RlSUQiLCJwdXJnZUlEIiwiLi9SZWFjdERPTUlET3BlcmF0aW9ucyIsMTk5LCJpbmplY3RlZCIsIlJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQiLCJpbmplY3RFbnZpcm9ubWVudCIsImVudmlyb25tZW50IiwyMDAsIl9vd25lciIsIlN0YXRlbGVzc0NvbXBvbmVudCIsIlJlYWN0Q3VycmVudE93bmVyIiwiUmVhY3RVcGRhdGVRdWV1ZSIsIm5leHRNb3VudElEIiwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiIsImNvbnN0cnVjdCIsIl9wZW5kaW5nRWxlbWVudCIsIl9wZW5kaW5nU3RhdGVRdWV1ZSIsIl9wZW5kaW5nUmVwbGFjZVN0YXRlIiwiX2NvbnRleHQiLCJfbW91bnRPcmRlciIsIl90b3BMZXZlbFdyYXBwZXIiLCJfcGVuZGluZ0NhbGxiYWNrcyIsIm1vdW50Q29tcG9uZW50Iiwicm9vdElEIiwiaW5zdCIsInJlbmRlcmVkRWxlbWVudCIsInB1YmxpY1Byb3BzIiwiX3Byb2Nlc3NQcm9wcyIsInB1YmxpY0NvbnRleHQiLCJfcHJvY2Vzc0NvbnRleHQiLCJjYW5JbnN0YW50aWF0ZSIsImNvbXBvbmVudERpZFVubW91bnQiLCJfcHJvY2Vzc1BlbmRpbmdTdGF0ZSIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQiLCJfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIl9wcm9jZXNzQ2hpbGRDb250ZXh0IiwiZ2V0UmVhY3RNb3VudFJlYWR5IiwiX21hc2tDb250ZXh0IiwibWFza2VkQ29udGV4dCIsImNvbnRleHROYW1lIiwiX2NoZWNrUHJvcFR5cGVzIiwiY3VycmVudENvbnRleHQiLCJleCIsIm5leHRDb250ZXh0IiwicHJldkNvbnRleHQiLCJwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkiLCJwcmV2UGFyZW50RWxlbWVudCIsIm5leHRQYXJlbnRFbGVtZW50IiwicHJldlVubWFza2VkQ29udGV4dCIsIm5leHRVbm1hc2tlZENvbnRleHQiLCJzaG91bGRVcGRhdGUiLCJfcGVyZm9ybUNvbXBvbmVudFVwZGF0ZSIsInVubWFza2VkQ29udGV4dCIsInByZXZQcm9wcyIsImhhc0NvbXBvbmVudERpZFVwZGF0ZSIsIkJvb2xlYW4iLCJfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQiLCJwcmV2Q29tcG9uZW50SW5zdGFuY2UiLCJwcmV2UmVuZGVyZWRFbGVtZW50IiwibmV4dFJlbmRlcmVkRWxlbWVudCIsInRoaXNJRCIsInByZXZDb21wb25lbnRJRCIsIm5leHRNYXJrdXAiLCJfcmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsIl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQiLCJyZW5kZXJlZENvbXBvbmVudCIsImF0dGFjaFJlZiIsImdldFB1YmxpY0luc3RhbmNlIiwicHVibGljQ29tcG9uZW50SW5zdGFuY2UiLCJkZXRhY2hSZWYiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCIsIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsIi4vUmVhY3RDdXJyZW50T3duZXIiLCIuL1JlYWN0VXBkYXRlUXVldWUiLDIwMSwyMDIsIlJlYWN0RE9NVGV4dENvbXBvbmVudCIsIlJlYWN0RGVmYXVsdEluamVjdGlvbiIsIlJlYWN0SW5zdGFuY2VIYW5kbGVzIiwiUmVhY3RWZXJzaW9uIiwicmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJtZWFzdXJlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIkN1cnJlbnRPd25lciIsIkluc3RhbmNlSGFuZGxlcyIsIlJlY29uY2lsZXIiLCJUZXh0Q29tcG9uZW50IiwiZGVidWciLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiZXhwZWN0ZWRGZWF0dXJlcyIsIi4vUmVhY3RET01UZXh0Q29tcG9uZW50IiwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb24iLCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzIiwiLi9SZWFjdFZlcnNpb24iLCIuL3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwyMDMsIm1vdXNlTGlzdGVuZXJOYW1lcyIsIm9uRG91YmxlQ2xpY2siLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIm9uQ2xpY2tDYXB0dXJlIiwib25Eb3VibGVDbGlja0NhcHR1cmUiLCJvbk1vdXNlRG93bkNhcHR1cmUiLCJvbk1vdXNlTW92ZUNhcHR1cmUiLCJvbk1vdXNlVXBDYXB0dXJlIiwiUmVhY3RET01CdXR0b24iLCJnZXROYXRpdmVQcm9wcyIsIm5hdGl2ZVByb3BzIiwyMDQsImxlZ2FjeUdldERPTU5vZGUiLCJfcmVhY3RJbnRlcm5hbENvbXBvbmVudCIsImxlZ2FjeUlzTW91bnRlZCIsImxlZ2FjeVNldFN0YXRlRXRjIiwibGVnYWN5U2V0UHJvcHMiLCJlbnF1ZXVlU2V0UHJvcHNJbnRlcm5hbCIsImVucXVldWVDYWxsYmFja0ludGVybmFsIiwibGVnYWN5UmVwbGFjZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VQcm9wc0ludGVybmFsIiwiZnJpZW5kbHlTdHJpbmdpZnkiLCJrZXlFc2NhcGVkIiwiY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFN0eWxlIiwic3R5bGUxIiwic3R5bGUyIiwib3duZXJOYW1lIiwiX3RhZyIsInN0eWxlTXV0YXRpb25XYXJuaW5nIiwiYXNzZXJ0VmFsaWRQcm9wcyIsInZvaWRFbGVtZW50VGFncyIsImVucXVldWVQdXRMaXN0ZW5lciIsImZpbmRSZWFjdENvbnRhaW5lckZvcklEIiwiRUxFTUVOVF9OT0RFX1RZUEUiLCJsaXN0ZW5lclRvUHV0IiwidHJhcEJ1YmJsZWRFdmVudHNMb2NhbCIsIl93cmFwcGVyU3RhdGUiLCJtZWRpYUV2ZW50cyIsIm1vdW50UmVhZHlJbnB1dFdyYXBwZXIiLCJSZWFjdERPTUlucHV0IiwibW91bnRSZWFkeVdyYXBwZXIiLCJwb3N0VXBkYXRlU2VsZWN0V3JhcHBlciIsIlJlYWN0RE9NU2VsZWN0IiwicG9zdFVwZGF0ZVdyYXBwZXIiLCJ2YWxpZGF0ZURhbmdlcm91c1RhZyIsInZhbGlkYXRlZFRhZ0NhY2hlIiwiVkFMSURfVEFHX1JFR0VYIiwicHJvY2Vzc0NoaWxkQ29udGV4dERldiIsInZhbGlkYXRlRE9NTmVzdGluZyIsImFuY2VzdG9ySW5mb0NvbnRleHRLZXkiLCJ1cGRhdGVkQW5jZXN0b3JJbmZvIiwiaXNDdXN0b21Db21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudCIsIl9wcmV2aW91c1N0eWxlIiwiX3ByZXZpb3VzU3R5bGVDb3B5IiwiX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcyIsIl91bnByb2Nlc3NlZENvbnRleHREZXYiLCJfcHJvY2Vzc2VkQ29udGV4dERldiIsIlJlYWN0RE9NT3B0aW9uIiwiUmVhY3RET01UZXh0YXJlYSIsIlJlYWN0TXVsdGlDaGlsZCIsImVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciIsIkNPTlRFTlRfVFlQRVMiLCJTVFlMRSIsImNhbkRlZmluZVByb3BlcnR5IiwibGVnYWN5UHJvcHNEZXNjcmlwdG9yIiwib21pdHRlZENsb3NlVGFncyIsImJyIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwidHJhY2siLCJ3YnIiLCJuZXdsaW5lRWF0aW5nVGFncyIsImxpc3RpbmciLCJwcmUiLCJ0ZXh0YXJlYSIsIm1lbnVpdGVtIiwibW91bnRXcmFwcGVyIiwicHJvY2Vzc0NoaWxkQ29udGV4dCIsIm1vdW50SW1hZ2UiLCJ1c2VDcmVhdGVFbGVtZW50Iiwib3duZXJEb2N1bWVudENvbnRleHRLZXkiLCJfdXBkYXRlRE9NUHJvcGVydGllcyIsIl9jcmVhdGVJbml0aWFsQ2hpbGRyZW4iLCJ0YWdPcGVuIiwiX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnMiLCJ0YWdDb250ZW50IiwiX2NyZWF0ZUNvbnRlbnRNYXJrdXAiLCJwcm9wS2V5IiwicHJvcFZhbHVlIiwibWFya3VwRm9ySUQiLCJjb250ZW50VG9Vc2UiLCJjaGlsZHJlblRvVXNlIiwibW91bnRJbWFnZXMiLCJtb3VudENoaWxkcmVuIiwibGFzdFByb3BzIiwidXBkYXRlV3JhcHBlciIsIl91cGRhdGVET01DaGlsZHJlbiIsInN0eWxlVXBkYXRlcyIsImxhc3RTdHlsZSIsIm5leHRQcm9wIiwibGFzdFByb3AiLCJsYXN0Q29udGVudCIsIm5leHRDb250ZW50IiwibGFzdEh0bWwiLCJuZXh0SHRtbCIsImxhc3RDaGlsZHJlbiIsImxhc3RIYXNDb250ZW50T3JIdG1sIiwibmV4dEhhc0NvbnRlbnRPckh0bWwiLCJ1cGRhdGVNYXJrdXAiLCJ1bm1vdW50V3JhcHBlciIsIi4vQXV0b0ZvY3VzVXRpbHMiLCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucyIsIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zIiwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIiLCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50IiwiLi9SZWFjdERPTUJ1dHRvbiIsIi4vUmVhY3RET01JbnB1dCIsIi4vUmVhY3RET01PcHRpb24iLCIuL1JlYWN0RE9NU2VsZWN0IiwiLi9SZWFjdERPTVRleHRhcmVhIiwiLi9SZWFjdE11bHRpQ2hpbGQiLCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciIsIi4vdmFsaWRhdGVET01OZXN0aW5nIiwiZmJqcy9saWIvc2hhbGxvd0VxdWFsIiwyMDUsImNyZWF0ZURPTUZhY3RvcnkiLCJSZWFjdEVsZW1lbnRWYWxpZGF0b3IiLCJjcmVhdGVGYWN0b3J5IiwiUmVhY3RET01GYWN0b3JpZXMiLCJhYmJyIiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImNhbnZhcyIsImNpdGUiLCJkYXRhbGlzdCIsImRkIiwiZGVsIiwiZGV0YWlscyIsImRmbiIsImRpYWxvZyIsImRsIiwiZHQiLCJlbSIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhncm91cCIsImlucyIsImtiZCIsImxpIiwibWFpbiIsIm1hcmsiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvdXRwdXQiLCJwaWN0dXJlIiwicSIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNlY3Rpb24iLCJzbWFsbCIsInN0cm9uZyIsInN1YiIsInN1cCIsInRhYmxlIiwidWwiLCJ2YXIiLCJ2aWRlbyIsImNpcmNsZSIsImNsaXBQYXRoIiwiZGVmcyIsImVsbGlwc2UiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdmciLCJ0c3BhbiIsIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yIiwiZmJqcy9saWIvbWFwT2JqZWN0IiwyMDYsIlJlYWN0RE9NRmVhdHVyZUZsYWdzIiwyMDcsIklOVkFMSURfUFJPUEVSVFlfRVJST1JTIiwidXBkYXRlUHJvcGVydHlCeUlEIiwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMiLDIwOCwiZm9yY2VVcGRhdGVJZk1vdW50ZWQiLCJfaGFuZGxlQ2hhbmdlIiwiYXNhcCIsInJvb3ROb2RlIiwicXVlcnlSb290Iiwib3RoZXJOb2RlIiwib3RoZXJJRCIsIm90aGVySW5zdGFuY2UiLCJpbnN0YW5jZXNCeVJlYWN0SUQiLCJkZWZhdWx0Q2hlY2tlZCIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxDaGVja2VkIiwiLi9MaW5rZWRWYWx1ZVV0aWxzIiwyMDksInZhbHVlQ29udGV4dEtleSIsIi4vUmVhY3RDaGlsZHJlbiIsMjEwLCJ1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCIsInBlbmRpbmdVcGRhdGUiLCJ1cGRhdGVPcHRpb25zIiwiY2hlY2tTZWxlY3RQcm9wVHlwZXMiLCJ2YWx1ZVByb3BOYW1lcyIsInNlbGVjdGVkVmFsdWUiLCJ3YXNNdWx0aXBsZSIsMjExLCJpc0NvbGxhcHNlZCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsImdldElFT2Zmc2V0cyIsInNlbGVjdGVkUmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNlbGVjdGVkTGVuZ3RoIiwiZnJvbVN0YXJ0IiwiZHVwbGljYXRlIiwibW92ZVRvRWxlbWVudFRleHQiLCJzZXRFbmRQb2ludCIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwiZ2V0TW9kZXJuT2Zmc2V0cyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJjdXJyZW50UmFuZ2UiLCJnZXRSYW5nZUF0Iiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsInJhbmdlTGVuZ3RoIiwidGVtcFJhbmdlIiwiY2xvbmVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsInNldEVuZCIsImlzVGVtcFJhbmdlQ29sbGFwc2VkIiwiZGV0ZWN0aW9uUmFuZ2UiLCJzZXRTdGFydCIsImlzQmFja3dhcmQiLCJjb2xsYXBzZWQiLCJzZXRJRU9mZnNldHMiLCJvZmZzZXRzIiwibW92ZVN0YXJ0IiwibW92ZUVuZCIsInNldE1vZGVybk9mZnNldHMiLCJzdGFydE1hcmtlciIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJlbmRNYXJrZXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInVzZUlFT2Zmc2V0cyIsIlJlYWN0RE9NU2VsZWN0aW9uIiwiZ2V0T2Zmc2V0cyIsInNldE9mZnNldHMiLCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLDIxMiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmciLCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nIiwyMTMsIl9zdHJpbmdUZXh0IiwiX21vdW50SW5kZXgiLCJlc2NhcGVkVGV4dCIsIm5leHRUZXh0IiwibmV4dFN0cmluZ1RleHQiLDIxNCwyMTUsIlJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbiIsInJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uIiwiVHJhbnNhY3Rpb24iLCJSRVNFVF9CQVRDSEVEX1VQREFURVMiLCJpbml0aWFsaXplIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiRkxVU0hfQkFUQ0hFRF9VUERBVEVTIiwiZmx1c2hCYXRjaGVkVXBkYXRlcyIsIlRSQU5TQUNUSU9OX1dSQVBQRVJTIiwiZ2V0VHJhbnNhY3Rpb25XcmFwcGVycyIsImFscmVhZHlCYXRjaGluZ1VwZGF0ZXMiLCJwZXJmb3JtIiwiLi9UcmFuc2FjdGlvbiIsMjE2LCJhbHJlYWR5SW5qZWN0ZWQiLCJSZWFjdEluamVjdGlvbiIsIk5hdGl2ZUNvbXBvbmVudCIsImluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyIsImluamVjdFRleHRDb21wb25lbnRDbGFzcyIsIkNsYXNzIiwiU1ZHRE9NUHJvcGVydHlDb25maWciLCJFbXB0eUNvbXBvbmVudCIsImluamVjdEVtcHR5Q29tcG9uZW50IiwiVXBkYXRlcyIsImluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uIiwiUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsImluamVjdEJhdGNoaW5nU3RyYXRlZ3kiLCJSb290SW5kZXgiLCJpbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleCIsIlNlcnZlclJlYWN0Um9vdEluZGV4IiwiUmVhY3REZWZhdWx0UGVyZiIsIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIi4vQ2hhbmdlRXZlbnRQbHVnaW4iLCIuL0NsaWVudFJlYWN0Um9vdEluZGV4IiwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlciIsIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiLi9IVE1MRE9NUHJvcGVydHlDb25maWciLCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluIiwiLi9SZWFjdERPTUNvbXBvbmVudCIsIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsIi4vUmVhY3REZWZhdWx0UGVyZiIsIi4vUmVhY3RFdmVudExpc3RlbmVyIiwiLi9SZWFjdEluamVjdGlvbiIsIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIi4vU1ZHRE9NUHJvcGVydHlDb25maWciLCIuL1NlbGVjdEV2ZW50UGx1Z2luIiwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIi4vU2ltcGxlRXZlbnRQbHVnaW4iLDIxNywicm91bmRGbG9hdCIsIlJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyIsIl9hbGxNZWFzdXJlbWVudHMiLCJfbW91bnRTdGFjayIsIl9pbmplY3RlZCIsImluamVjdE1lYXN1cmUiLCJlbmFibGVNZWFzdXJlIiwiZ2V0TGFzdE1lYXN1cmVtZW50cyIsInByaW50RXhjbHVzaXZlIiwibWVhc3VyZW1lbnRzIiwiZ2V0RXhjbHVzaXZlU3VtbWFyeSIsIkNvbXBvbmVudCBjbGFzcyBuYW1lIiwiVG90YWwgaW5jbHVzaXZlIHRpbWUgKG1zKSIsImluY2x1c2l2ZSIsIkV4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcykiLCJleGNsdXNpdmUiLCJFeGNsdXNpdmUgcmVuZGVyIHRpbWUgKG1zKSIsIk1vdW50IHRpbWUgcGVyIGluc3RhbmNlIChtcykiLCJSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSIsIkluc3RhbmNlcyIsInByaW50SW5jbHVzaXZlIiwiZ2V0SW5jbHVzaXZlU3VtbWFyeSIsIk93bmVyID4gY29tcG9uZW50IiwiSW5jbHVzaXZlIHRpbWUgKG1zKSIsImdldFRvdGFsVGltZSIsInRvRml4ZWQiLCJnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwIiwiV2FzdGVkIHRpbWUgKG1zKSIsInByaW50V2FzdGVkIiwicHJpbnRET00iLCJnZXRET01TdW1tYXJ5IiwiX3JlY29yZFdyaXRlIiwidG90YWxUaW1lIiwid3JpdGVzIiwibW9kdWxlTmFtZSIsInJ2IiwiY291bnRzIiwiZGlzcGxheU5hbWVzIiwiY3JlYXRlZCIsIm1vdW50SUQiLCJ3cml0ZUFyZ3MiLCJUb3BMZXZlbFdyYXBwZXIiLCJpc1JlbmRlciIsImlzTW91bnQiLCJtb3VudFN0YWNrIiwic3ViTW91bnRUaW1lIiwiLi9SZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMiLCJmYmpzL2xpYi9wZXJmb3JtYW5jZU5vdyIsMjE4LCJtZWFzdXJlbWVudCIsIml0ZW1zIiwiRE9NX09QRVJBVElPTl9UWVBFUyIsImNhbmRpZGF0ZXMiLCJhbGxJRHMiLCJET05UX0NBUkVfVEhSRVNIT0xEIiwib25seUNsZWFuIiwiaW5jbHVzaXZlS2V5IiwiY2xlYW5Db21wb25lbnRzIiwiZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyIsImRpcnR5TGVhZklEcyIsImlzRGlydHkiLCJfbW91bnRJbWFnZUludG9Ob2RlIiwyMTksIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlJFU0VSVkVEX1BST1BTIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9zdG9yZSIsInZhbGlkYXRlZCIsIl9zZWxmIiwiX3NvdXJjZSIsImNoaWxkcmVuTGVuZ3RoIiwiY2hpbGRBcnJheSIsIm9sZEVsZW1lbnQiLCJuZXdLZXkiLCJuZXdFbGVtZW50IiwiY2xvbmVBbmRSZXBsYWNlUHJvcHMiLCJjbG9uZUVsZW1lbnQiLDIyMCwidmFsaWRhdGVFeHBsaWNpdEtleSIsInBhcmVudFR5cGUiLCJhZGRlbmRhIiwiZ2V0QWRkZW5kYUZvcktleVVzZSIsInBhcmVudE9yT3duZXIiLCJjaGlsZE93bmVyIiwibWVzc2FnZVR5cGUiLCJwYXJlbnROYW1lIiwibWVtb2l6ZXIiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsIml0ZXJhdG9yRm4iLCJnZXRJdGVyYXRvckZuIiwidmFsaWRhdGVQcm9wVHlwZXMiLCJjb21wb25lbnRDbGFzcyIsInZhbGlkVHlwZSIsInZhbGlkYXRlZEZhY3RvcnkiLCIuL2dldEl0ZXJhdG9yRm4iLDIyMSwicGxhY2Vob2xkZXJFbGVtZW50IiwiUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5IiwiUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiIsIlJlYWN0RW1wdHlDb21wb25lbnQiLCJpbnN0YW50aWF0ZSIsInJlZ2lzdGVyTnVsbENvbXBvbmVudElEIiwiZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCIsIi4vUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5IiwyMjIsImlzTnVsbENvbXBvbmVudElEIiwibnVsbENvbXBvbmVudElEc1JlZ2lzdHJ5IiwyMjMsImNhdWdodEVycm9yIiwiZGlzcGF0Y2hFdmVudCIsImZha2VOb2RlIiwiYm91bmRGdW5jIiwyMjQsInJ1bkV2ZW50UXVldWVJbkJhdGNoIiwyMjUsImZpbmRQYXJlbnQiLCJub2RlSUQiLCJnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQiLCJUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmciLCJhbmNlc3RvcnMiLCJoYW5kbGVUb3BMZXZlbEltcGwiLCJoYW5kbGVUb3BMZXZlbFdpdGhvdXRQYXRoIiwiYW5jZXN0b3IiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzY3JvbGxWYWx1ZU1vbml0b3IiLCJjYiIsInNjcm9sbFBvc2l0aW9uIiwiX2VuYWJsZWQiLCJmYmpzL2xpYi9FdmVudExpc3RlbmVyIiwiZmJqcy9saWIvZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24iLDIyNiwiUmVhY3ROYXRpdmVDb21wb25lbnQiLCJSZWFjdFJvb3RJbmRleCIsIlBlcmYiLCIuL1JlYWN0Q2xhc3MiLCIuL1JlYWN0RW1wdHlDb21wb25lbnQiLCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50IiwiLi9SZWFjdFJvb3RJbmRleCIsMjI3LCJpc0luRG9jdW1lbnQiLCJSZWFjdElucHV0U2VsZWN0aW9uIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwiZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24iLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwicmVzdG9yZVNlbGVjdGlvbiIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsInByaW9yRm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwic2V0U2VsZWN0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJwYXJlbnRFbGVtZW50IiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCIuL1JlYWN0RE9NU2VsZWN0aW9uIiwiZmJqcy9saWIvY29udGFpbnNOb2RlIiwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCIsMjI4LCJnZXRSZWFjdFJvb3RJRFN0cmluZyIsIlNFUEFSQVRPUiIsImlzQm91bmRhcnkiLCJpc1ZhbGlkSUQiLCJpc0FuY2VzdG9ySURPZiIsImFuY2VzdG9ySUQiLCJkZXNjZW5kYW50SUQiLCJnZXRQYXJlbnRJRCIsImdldE5leHREZXNjZW5kYW50SUQiLCJkZXN0aW5hdGlvbklEIiwiU0VQQVJBVE9SX0xFTkdUSCIsImdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCIsIm9uZUlEIiwidHdvSUQiLCJsYXN0Q29tbW9uTWFya2VySW5kZXgiLCJsb25nZXN0Q29tbW9uSUQiLCJ0cmF2ZXJzZVBhcmVudFBhdGgiLCJza2lwRmlyc3QiLCJza2lwTGFzdCIsInRyYXZlcnNlVXAiLCJ0cmF2ZXJzZSIsIk1BWF9UUkVFX0RFUFRIIiwiY3JlYXRlUmVhY3RSb290SUQiLCJjcmVhdGVSZWFjdElEIiwibGVhdmVJRCIsImVudGVySUQiLCJ1cEFyZyIsImRvd25BcmciLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsIl9nZXROZXh0RGVzY2VuZGFudElEIiwyMjksMjMwLCJvbmx5Q2hpbGQiLCJvbmx5IiwiY3JlYXRlTWl4aW4iLCJET00iLCJfX3NwcmVhZCIsIi4vUmVhY3RET01GYWN0b3JpZXMiLCIuL29ubHlDaGlsZCIsMjMxLCJhZGxlcjMyIiwiVEFHX0VORCIsIlJlYWN0TWFya3VwQ2hlY2tzdW0iLCJDSEVDS1NVTV9BVFRSX05BTUUiLCJhZGRDaGVja3N1bVRvTWFya3VwIiwiY2hlY2tzdW0iLCJjYW5SZXVzZU1hcmt1cCIsImV4aXN0aW5nQ2hlY2tzdW0iLCJtYXJrdXBDaGVja3N1bSIsIi4vYWRsZXIzMiIsMjMyLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsInN0cmluZzEiLCJzdHJpbmcyIiwibWluTGVuIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwiRE9DX05PREVfVFlQRSIsImdldFJlYWN0Um9vdElEIiwicm9vdEVsZW1lbnQiLCJpbnRlcm5hbEdldElEIiwibm9kZUNhY2hlIiwiaXNWYWxpZCIsIkFUVFJfTkFNRSIsInNldElEIiwib2xkSUQiLCJmaW5kUmVhY3ROb2RlQnlJRCIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbCIsImRlZXBlc3ROb2RlU29GYXIiLCJmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yIiwiZm91bmROb2RlIiwibW91bnRDb21wb25lbnRJbnRvTm9kZSIsImNvbXBvbmVudEluc3RhbmNlIiwic2hvdWxkUmV1c2VNYXJrdXAiLCJiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSIsInVubW91bnRDb21wb25lbnRGcm9tTm9kZSIsImhhc05vblJvb3RSZWFjdENoaWxkIiwicmVhY3RSb290SUQiLCJmaW5kRmlyc3RSZWFjdERPTUltcGwiLCJsYXN0SUQiLCJjb250YWluZXJzQnlSZWFjdFJvb3RJRCIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSIsImluc3RhbmNlc0J5UmVhY3RSb290SUQiLCJyb290RWxlbWVudHNCeVJlYWN0Um9vdElEIiwiZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IiwiX2luc3RhbmNlc0J5UmVhY3RSb290SUQiLCJzY3JvbGxNb25pdG9yIiwicmVuZGVyQ2FsbGJhY2siLCJfdXBkYXRlUm9vdENvbXBvbmVudCIsInByZXZDb21wb25lbnQiLCJlbnF1ZXVlRWxlbWVudEludGVybmFsIiwiX3JlZ2lzdGVyQ29tcG9uZW50IiwibmV4dENvbXBvbmVudCIsInJlZ2lzdGVyQ29udGFpbmVyIiwiX3JlbmRlck5ld1Jvb3RDb21wb25lbnQiLCJwYXJlbnRDb21wb25lbnQiLCJfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJuZXh0V3JhcHBlZEVsZW1lbnQiLCJwcmV2V3JhcHBlZEVsZW1lbnQiLCJyZWFjdFJvb3RFbGVtZW50IiwiY29udGFpbmVySGFzUmVhY3RNYXJrdXAiLCJjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCIsInJvb3RFbGVtZW50U2libGluZyIsImNvbnRhaW5lcklEIiwiaXNDb250YWluZXJSZWFjdFJvb3QiLCJjb250YWluZXJDaGlsZCIsInJlYWN0Um9vdCIsImZpbmRDb21wb25lbnRSb290IiwiYW5jZXN0b3JOb2RlIiwiZmlyc3RDaGlsZHJlbiIsImNoaWxkSW5kZXgiLCJkZWVwZXN0QW5jZXN0b3IiLCJ0YXJnZXRDaGlsZCIsImNoaWxkSUQiLCJyb290TWFya3VwIiwib3V0ZXJIVE1MIiwibm9ybWFsaXplZE1hcmt1cCIsIm5vcm1hbGl6ZXIiLCJkaWZmSW5kZXgiLCIuL1JlYWN0RE9NRmVhdHVyZUZsYWdzIiwiLi9SZWFjdE1hcmt1cENoZWNrc3VtIiwyMzMsImVucXVldWVJbnNlcnRNYXJrdXAiLCJ1cGRhdGVRdWV1ZSIsIm1hcmt1cFF1ZXVlIiwiZW5xdWV1ZU1vdmUiLCJlbnF1ZXVlUmVtb3ZlIiwiZW5xdWV1ZVNldE1hcmt1cCIsImVucXVldWVUZXh0Q29udGVudCIsInByb2Nlc3NRdWV1ZSIsImZsYXR0ZW5DaGlsZHJlbiIsInVwZGF0ZURlcHRoIiwiX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuIiwibmVzdGVkQ2hpbGRyZW4iLCJfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuIiwibmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMiLCJlcnJvclRocm93biIsIl91bm1vdW50Q2hpbGQiLCJfdW5tb3VudENoaWxkQnlOYW1lIiwic2V0TWFya3VwIiwiX3VwZGF0ZUNoaWxkcmVuIiwibmV4dENoaWxkIiwibW92ZUNoaWxkIiwiX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4IiwiY3JlYXRlQ2hpbGQiLCIuL1JlYWN0Q2hpbGRSZWNvbmNpbGVyIiwiLi9mbGF0dGVuQ2hpbGRyZW4iLDIzNCwyMzUsImdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCIsInRhZ1RvQ29tcG9uZW50Q2xhc3MiLCJhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MiLCJjcmVhdGVJbnRlcm5hbENvbXBvbmVudCIsImdlbmVyaWNDb21wb25lbnRDbGFzcyIsImNyZWF0ZUluc3RhbmNlRm9yVGV4dCIsInRleHRDb21wb25lbnRDbGFzcyIsImlzVGV4dENvbXBvbmVudCIsIlJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uIiwiaW5qZWN0Q29tcG9uZW50Q2xhc3NlcyIsImNvbXBvbmVudENsYXNzZXMiLDIzNiwid2FyblREWiIsImNhbGxlck5hbWUiLCJjb21wbGV0ZVN0YXRlIiwyMzcsIlJlYWN0T3duZXIiLCJpc1ZhbGlkT3duZXIiLCJhZGRDb21wb25lbnRBc1JlZlRvIiwicmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tIiwyMzgsIl9ub01lYXN1cmUiLCJvYmpOYW1lIiwic3RvcmVkTWVhc3VyZSIsIm9iamVjdE5hbWUiLCJtZWFzdXJlZEZ1bmMiLDIzOSwyNDAsMjQxLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwiY2hlY2tUeXBlIiwicHJvcEZ1bGxOYW1lIiwiQU5PTllNT1VTIiwibG9jYXRpb25OYW1lIiwiY2hhaW5lZENoZWNrVHlwZSIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJjcmVhdGVBbnlUeXBlQ2hlY2tlciIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsInR5cGVDaGVja2VyIiwiY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyIiwiY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlciIsImV4cGVjdGVkQ2xhc3MiLCJleHBlY3RlZENsYXNzTmFtZSIsImFjdHVhbENsYXNzTmFtZSIsImdldENsYXNzTmFtZSIsImNyZWF0ZUVudW1UeXBlQ2hlY2tlciIsImV4cGVjdGVkVmFsdWVzIiwidmFsdWVzU3RyaW5nIiwiY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlciIsImNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIiLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsImNyZWF0ZU5vZGVDaGVja2VyIiwiY3JlYXRlU2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsMjQyLCJmb3JjZUhUTUwiLCJyZWFjdE1vdW50UmVhZHkiLCJTRUxFQ1RJT05fUkVTVE9SQVRJT04iLCJFVkVOVF9TVVBQUkVTU0lPTiIsImN1cnJlbnRseUVuYWJsZWQiLCJwcmV2aW91c2x5RW5hYmxlZCIsIk9OX0RPTV9SRUFEWV9RVUVVRUlORyIsIi4vQ2FsbGJhY2tRdWV1ZSIsIi4vUmVhY3RJbnB1dFNlbGVjdGlvbiIsMjQzLCJhdHRhY2hSZWZzIiwiUmVhY3RSZWYiLCJkZXRhY2hSZWZzIiwicmVmc0NoYW5nZWQiLCJzaG91bGRVcGRhdGVSZWZzIiwiLi9SZWFjdFJlZiIsMjQ0LCJwcmV2RW1wdHkiLCJuZXh0RW1wdHkiLCIuL1JlYWN0T3duZXIiLDI0NSwiUmVhY3RSb290SW5kZXhJbmplY3Rpb24iLCJfY3JlYXRlUmVhY3RSb290SW5kZXgiLDI0NiwiUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5IiwyNDcsIlJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24iLCIuL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSIsIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsMjQ4LDI0OSwiZW5xdWV1ZVVwZGF0ZSIsImdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZSIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsInRvcExldmVsV3JhcHBlciIsIndyYXBFbGVtZW50IiwyNTAsImVuc3VyZUluamVjdGVkIiwiYmF0Y2hpbmdTdHJhdGVneSIsIlJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24iLCJkaXJ0eUNvbXBvbmVudHNMZW5ndGgiLCJjYWxsYmFja1F1ZXVlIiwicmVjb25jaWxlVHJhbnNhY3Rpb24iLCJtb3VudE9yZGVyQ29tcGFyYXRvciIsImMxIiwiYzIiLCJydW5CYXRjaGVkVXBkYXRlcyIsImRpcnR5Q29tcG9uZW50cyIsImFzYXBDYWxsYmFja1F1ZXVlIiwiYXNhcEVucXVldWVkIiwiTkVTVEVEX1VQREFURVMiLCJVUERBVEVfUVVFVUVJTkciLCJSZWFjdFVwZGF0ZXNJbmplY3Rpb24iLCJSZWNvbmNpbGVUcmFuc2FjdGlvbiIsIl9iYXRjaGluZ1N0cmF0ZWd5IiwyNTEsMjUyLCJOUyIsInhsaW5rIiwiY3giLCJjeSIsImR4IiwiZHkiLCJmeSIsImdyYWRpZW50VHJhbnNmb3JtIiwiZ3JhZGllbnRVbml0cyIsIm1hcmtlckVuZCIsIm1hcmtlck1pZCIsIm1hcmtlclN0YXJ0IiwicGF0dGVybkNvbnRlbnRVbml0cyIsInBhdHRlcm5Vbml0cyIsInBvaW50cyIsInByZXNlcnZlQXNwZWN0UmF0aW8iLCJyeCIsInJ5Iiwic3ByZWFkTWV0aG9kIiwic3RvcENvbG9yIiwic3Ryb2tlIiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlTGluZWNhcCIsInRleHRBbmNob3IiLCJ2aWV3Qm94IiwieDEiLCJ4MiIsInhsaW5rQWN0dWF0ZSIsInhsaW5rQXJjcm9sZSIsInhsaW5rSHJlZiIsInhsaW5rUm9sZSIsInhsaW5rU2hvdyIsInhsaW5rVGl0bGUiLCJ4bGlua1R5cGUiLCJ4bWxCYXNlIiwieG1sTGFuZyIsInhtbFNwYWNlIiwieTEiLCJ5MiIsMjUzLCJib3VuZGluZ1RvcCIsImJvdW5kaW5nTGVmdCIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwiY3VycmVudFNlbGVjdGlvbiIsImxhc3RTZWxlY3Rpb24iLCJzeW50aGV0aWNFdmVudCIsInNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCIsIm9uU2VsZWN0Iiwib25TZWxlY3RDYXB0dXJlIiwiaGFzTGlzdGVuZXIiLCJPTl9TRUxFQ1RfS0VZIiwyNTQsIkdMT0JBTF9NT1VOVF9QT0lOVF9NQVgiLDI1NSwiU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCJTeW50aGV0aWNGb2N1c0V2ZW50IiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIlN5bnRoZXRpY0RyYWdFdmVudCIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJTeW50aGV0aWNVSUV2ZW50IiwiU3ludGhldGljV2hlZWxFdmVudCIsImdldEV2ZW50Q2hhckNvZGUiLCJvbkFib3J0Iiwib25BYm9ydENhcHR1cmUiLCJvbkJsdXJDYXB0dXJlIiwiY2FuUGxheSIsIm9uQ2FuUGxheSIsIm9uQ2FuUGxheUNhcHR1cmUiLCJjYW5QbGF5VGhyb3VnaCIsIm9uQ2FuUGxheVRocm91Z2giLCJvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZSIsIm9uQ29udGV4dE1lbnUiLCJvbkNvbnRleHRNZW51Q2FwdHVyZSIsIm9uQ29weSIsIm9uQ29weUNhcHR1cmUiLCJjdXQiLCJvbkN1dCIsIm9uQ3V0Q2FwdHVyZSIsImRvdWJsZUNsaWNrIiwiZHJhZyIsIm9uRHJhZyIsIm9uRHJhZ0NhcHR1cmUiLCJkcmFnRW5kIiwib25EcmFnRW5kIiwib25EcmFnRW5kQ2FwdHVyZSIsImRyYWdFbnRlciIsIm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXJDYXB0dXJlIiwiZHJhZ0V4aXQiLCJvbkRyYWdFeGl0Iiwib25EcmFnRXhpdENhcHR1cmUiLCJkcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlQ2FwdHVyZSIsImRyYWdPdmVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ092ZXJDYXB0dXJlIiwiZHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnQiLCJvbkRyYWdTdGFydENhcHR1cmUiLCJvbkRyb3AiLCJvbkRyb3BDYXB0dXJlIiwiZHVyYXRpb25DaGFuZ2UiLCJvbkR1cmF0aW9uQ2hhbmdlIiwib25EdXJhdGlvbkNoYW5nZUNhcHR1cmUiLCJlbXB0aWVkIiwib25FbXB0aWVkIiwib25FbXB0aWVkQ2FwdHVyZSIsImVuY3J5cHRlZCIsIm9uRW5jcnlwdGVkIiwib25FbmNyeXB0ZWRDYXB0dXJlIiwiZW5kZWQiLCJvbkVuZGVkIiwib25FbmRlZENhcHR1cmUiLCJvbkVycm9yQ2FwdHVyZSIsIm9uRm9jdXNDYXB0dXJlIiwib25JbnB1dCIsIm9uSW5wdXRDYXB0dXJlIiwia2V5RG93biIsIm9uS2V5RG93bkNhcHR1cmUiLCJrZXlQcmVzcyIsIm9uS2V5UHJlc3MiLCJvbktleVByZXNzQ2FwdHVyZSIsImtleVVwIiwib25LZXlVcCIsIm9uS2V5VXBDYXB0dXJlIiwib25Mb2FkIiwib25Mb2FkQ2FwdHVyZSIsImxvYWRlZERhdGEiLCJvbkxvYWRlZERhdGEiLCJvbkxvYWRlZERhdGFDYXB0dXJlIiwibG9hZGVkTWV0YWRhdGEiLCJvbkxvYWRlZE1ldGFkYXRhIiwib25Mb2FkZWRNZXRhZGF0YUNhcHR1cmUiLCJsb2FkU3RhcnQiLCJvbkxvYWRTdGFydCIsIm9uTG9hZFN0YXJ0Q2FwdHVyZSIsIm1vdXNlTW92ZSIsIm1vdXNlT3V0Iiwib25Nb3VzZU91dCIsIm9uTW91c2VPdXRDYXB0dXJlIiwibW91c2VPdmVyIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3ZlckNhcHR1cmUiLCJtb3VzZVVwIiwicGFzdGUiLCJvblBhc3RlIiwib25QYXN0ZUNhcHR1cmUiLCJwYXVzZSIsIm9uUGF1c2UiLCJvblBhdXNlQ2FwdHVyZSIsInBsYXkiLCJvblBsYXkiLCJvblBsYXlDYXB0dXJlIiwicGxheWluZyIsIm9uUGxheWluZyIsIm9uUGxheWluZ0NhcHR1cmUiLCJvblByb2dyZXNzIiwib25Qcm9ncmVzc0NhcHR1cmUiLCJyYXRlQ2hhbmdlIiwib25SYXRlQ2hhbmdlIiwib25SYXRlQ2hhbmdlQ2FwdHVyZSIsIm9uUmVzZXQiLCJvblJlc2V0Q2FwdHVyZSIsInNjcm9sbCIsIm9uU2Nyb2xsIiwib25TY3JvbGxDYXB0dXJlIiwic2Vla2VkIiwib25TZWVrZWQiLCJvblNlZWtlZENhcHR1cmUiLCJzZWVraW5nIiwib25TZWVraW5nIiwib25TZWVraW5nQ2FwdHVyZSIsInN0YWxsZWQiLCJvblN0YWxsZWQiLCJvblN0YWxsZWRDYXB0dXJlIiwib25TdWJtaXQiLCJvblN1Ym1pdENhcHR1cmUiLCJzdXNwZW5kIiwib25TdXNwZW5kIiwib25TdXNwZW5kQ2FwdHVyZSIsInRpbWVVcGRhdGUiLCJvblRpbWVVcGRhdGUiLCJvblRpbWVVcGRhdGVDYXB0dXJlIiwidG91Y2hDYW5jZWwiLCJvblRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbENhcHR1cmUiLCJ0b3VjaEVuZCIsIm9uVG91Y2hFbmRDYXB0dXJlIiwidG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoTW92ZUNhcHR1cmUiLCJ0b3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Q2FwdHVyZSIsInZvbHVtZUNoYW5nZSIsIm9uVm9sdW1lQ2hhbmdlIiwib25Wb2x1bWVDaGFuZ2VDYXB0dXJlIiwid2FpdGluZyIsIm9uV2FpdGluZyIsIm9uV2FpdGluZ0NhcHR1cmUiLCJ3aGVlbCIsIm9uV2hlZWwiLCJvbldoZWVsQ2FwdHVyZSIsInRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyIsIk9OX0NMSUNLX0tFWSIsIm9uQ2xpY2tMaXN0ZW5lcnMiLCJFdmVudENvbnN0cnVjdG9yIiwiLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIi4vU3ludGhldGljRHJhZ0V2ZW50IiwiLi9TeW50aGV0aWNGb2N1c0V2ZW50IiwiLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiLi9TeW50aGV0aWNUb3VjaEV2ZW50IiwiLi9TeW50aGV0aWNVSUV2ZW50IiwiLi9TeW50aGV0aWNXaGVlbEV2ZW50IiwiLi9nZXRFdmVudENoYXJDb2RlIiwyNTYsIkNsaXBib2FyZEV2ZW50SW50ZXJmYWNlIiwiY2xpcGJvYXJkRGF0YSIsImF1Z21lbnRDbGFzcyIsMjU3LCJDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlIiwyNTgsIkRyYWdFdmVudEludGVyZmFjZSIsImRhdGFUcmFuc2ZlciIsMjU5LCJJbnRlcmZhY2UiLCJub3JtYWxpemUiLCJFdmVudEludGVyZmFjZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImlzVHJ1c3RlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJTdXBlciIsMjYwLCJGb2N1c0V2ZW50SW50ZXJmYWNlIiwyNjEsIklucHV0RXZlbnRJbnRlcmZhY2UiLDI2MiwiZ2V0RXZlbnRLZXkiLCJnZXRFdmVudE1vZGlmaWVyU3RhdGUiLCJLZXlib2FyZEV2ZW50SW50ZXJmYWNlIiwibG9jYWxlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIi4vZ2V0RXZlbnRLZXkiLCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZSIsMjYzLCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJidXR0b25zIiwiY3VycmVudFNjcm9sbExlZnQiLCJjdXJyZW50U2Nyb2xsVG9wIiwyNjQsIlRvdWNoRXZlbnRJbnRlcmZhY2UiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwyNjUsIlVJRXZlbnRJbnRlcmZhY2UiLDI2NiwiV2hlZWxFdmVudEludGVyZmFjZSIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwyNjcsInRyYW5zYWN0aW9uV3JhcHBlcnMiLCJ3cmFwcGVySW5pdERhdGEiLCJfaXNJblRyYW5zYWN0aW9uIiwiaXNJblRyYW5zYWN0aW9uIiwiaW5pdGlhbGl6ZUFsbCIsImNsb3NlQWxsIiwic3RhcnRJbmRleCIsIk9CU0VSVkVEX0VSUk9SIiwiaW5pdERhdGEiLDI2OCwyNjksImN1cnJlbnRJc0FycmF5IiwibmV4dElzQXJyYXkiLDI3MCwiTU9EIiwyNzEsImlzTm9uTnVtZXJpYyIsMjcyLCJuZXdNb2R1bGUiLCJuZXdQYWNrYWdlIiwiY3R4IiwibmV3Rm4iLDI3MywiZXNjYXBlciIsIkVTQ0FQRV9MT09LVVAiLCJFU0NBUEVfUkVHRVgiLDI3NCwiY29tcG9uZW50T3JFbGVtZW50IiwyNzUsImZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0IiwyNzYsMjc3LDI3OCwibm9ybWFsaXplS2V5IiwidHJhbnNsYXRlVG9LZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwyNzksIm1vZGlmaWVyU3RhdGVHZXR0ZXIiLCJrZXlBcmciLCJrZXlQcm9wIiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwyODAsMjgxLCJtYXliZUl0ZXJhYmxlIiwiSVRFUkFUT1JfU1lNQk9MIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLDI4MiwiZ2V0TGVhZk5vZGUiLCJnZXRTaWJsaW5nTm9kZSIsIm5vZGVTdGFydCIsIm5vZGVFbmQiLDI4MywiY29udGVudEtleSIsMjg0LCJpc0ludGVybmFsQ29tcG9uZW50VHlwZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciIsIl9tb3VudEltYWdlIiwiX2lzT3duZXJOZWNlc3NhcnkiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQiLDI4NSwiZXZlbnROYW1lU3VmZml4IiwidXNlSGFzRmVhdHVyZSIsMjg2LCJzdXBwb3J0ZWRJbnB1dFR5cGVzIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJ0ZWwiLCJ3ZWVrIiwyODcsMjg4LDI4OSwyOTAsIldISVRFU1BBQ0VfVEVTVCIsIk5PTlZJU0lCTEVfVEVTVCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJ0ZXh0Tm9kZSIsImRlbGV0ZURhdGEiLDI5MSwyOTIsInByZXZUeXBlIiwibmV4dFR5cGUiLDI5MywidXNlclByb3ZpZGVkS2V5RXNjYXBlciIsInVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXAiLCJnZXRDb21wb25lbnRLZXkiLCJ3cmFwVXNlclByb3ZpZGVkS2V5IiwidHJhdmVyc2VBbGxDaGlsZHJlbkltcGwiLCJuYW1lU29GYXIiLCJuZXh0TmFtZSIsInN1YnRyZWVDb3VudCIsIm5leHROYW1lUHJlZml4IiwiU1VCU0VQQVJBVE9SIiwiZGlkV2FybkFib3V0TWFwcyIsIl9pc1JlYWN0RWxlbWVudCIsImNoaWxkcmVuU3RyaW5nIiwiPSIsIi4iLCI6IiwyOTQsInNwZWNpYWxUYWdzIiwiaW5TY29wZVRhZ3MiLCJidXR0b25TY29wZVRhZ3MiLCJpbXBsaWVkRW5kVGFncyIsImVtcHR5QW5jZXN0b3JJbmZvIiwicGFyZW50VGFnIiwiZm9ybVRhZyIsImFUYWdJblNjb3BlIiwiYnV0dG9uVGFnSW5TY29wZSIsIm5vYnJUYWdJblNjb3BlIiwicFRhZ0luQnV0dG9uU2NvcGUiLCJsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nIiwiZGxJdGVtVGFnQXV0b2Nsb3NpbmciLCJvbGRJbmZvIiwiYW5jZXN0b3JJbmZvIiwiaXNUYWdWYWxpZFdpdGhQYXJlbnQiLCJmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnIiwiZmluZE93bmVyU3RhY2siLCJkaWRXYXJuIiwiY2hpbGRUYWciLCJjaGlsZEluc3RhbmNlIiwicGFyZW50SW5mbyIsImludmFsaWRQYXJlbnQiLCJpbnZhbGlkQW5jZXN0b3IiLCJwcm9ibGVtYXRpYyIsImFuY2VzdG9yVGFnIiwiYW5jZXN0b3JJbnN0YW5jZSIsImFuY2VzdG9yT3duZXIiLCJjaGlsZE93bmVycyIsImFuY2VzdG9yT3duZXJzIiwibWluU3RhY2tMZW4iLCJkZWVwZXN0Q29tbW9uIiwiVU5LTk9XTiIsImNoaWxkT3duZXJOYW1lcyIsImFuY2VzdG9yT3duZXJOYW1lcyIsIm93bmVySW5mbyIsIndhcm5LZXkiLCJpc1RhZ1ZhbGlkSW5Db250ZXh0IiwyOTUsIi4vbGliL1JlYWN0IiwyOTYsMjk3LCJJbmRleFZpZXciLCJSZXN1bHRWaWV3IiwiLi9qcy9jb21wb25lbnRzL2luZGV4LXZpZXciLCIuL2pzL2NvbXBvbmVudHMvcmVzdWx0LXZpZXciLCJyZWFjdC1yb3V0ZXIiLDI5OCwiQWN0aW9uVHlwZXMiLCJTRUFSQ0giLCJGSUxURVIiLCJwYWdpbmciLCJQQUdJTkciLCIuLi9jb25zdGFudHMvY29uc3RhbnRzIiwiLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyIiwyOTksIl93cmFwQ29tcG9uZW50IiwiX3JlYWN0Q29tcG9uZW50V3JhcHBlciIsIl9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yIiwiX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMiLCJfY29tcG9uZW50cyIsIl8kVW5rbm93biIsIl9fIiwiLi4vc3RvcmVzL2FnZ3JlZ2F0aW9uLXN0b3JlIiwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm0iLCJyZWFjdC1zZWxlY3QiLDMwMCwic25pcHBldCIsMzAxLCJBcnRpY2xlU3RvcmUiLCJBcnRpY2xlTGlzdEl0ZW0iLCJTcGlubmVyIiwiX29uQ2hhbmdlIiwiYXJ0aWNsZXMiLCJnZXRBcnRpY2xlcyIsIi4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlIiwiLi9hcnRpY2xlLWxpc3QtaXRlbSIsIi4vc3Bpbm5lciIsMzAyLCJIZWFkZXIiLCJLZXl3b3JkSW5wdXQiLCJjc3NDbGFzcyIsImtleXdvcmQiLCJvbktleXdvcmRDaGFuZ2UiLCJjb3VudHJpZXMiLCJvbkNvdW50cnlDaGFuZ2UiLCJhZ2dyZWdhdGlvbnMiLCJpbmR1c3RyaWVzIiwib25JbmR1c3RyeUNoYW5nZSIsInRvcGljcyIsIm9uVG9waWNDaGFuZ2UiLCIuL2FnZ3JlZ2F0aW9uLXNlbGVjdCIsIi4vaGVhZGVyIiwiLi9rZXl3b3JkLWlucHV0IiwzMDMsMzA0LCJBcnRpY2xlQWN0b3IiLCJnZXRBZ2dyZWdhdGlvbnMiLCJjcmVhdGVOZXN0ZWRGaWx0ZXJPcHRpb24iLCJvbkZpbHRlciIsImNyZWF0ZUZpbHRlckxpc3QiLCJjcmVhdGVGaWx0ZXJPcHRpb24iLCIuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvciIsMzA1LCJFeHBhbmRlZEZvcm0iLCJDb25kZW5zZWRGb3JtIiwiQWdncmVnYXRpb25TdG9yZSIsImdldFF1ZXJ5IiwiaGFuZGxlU3VibWl0IiwiaGFuZGxlS2V5d29yZENoYW5nZSIsImhhbmRsZUNvdW50cnlDaGFuZ2UiLCJoYW5kbGVJbmR1c3RyeUNoYW5nZSIsImhhbmRsZVRvcGljQ2hhbmdlIiwiLi9jb25kZW5zZWQtZm9ybSIsIi4vZXhwYW5kZWQtZm9ybSIsMzA2LDMwNywiRm9ybSIsIi4vZm9ybSIsMzA4LCJoYW5kbGVFbnRlciIsImlucHV0Q2xhc3MiLCJidXR0b25DbGFzcyIsImNvbnRhaW5lckNsYXNzIiwzMDksInRvdGFsIiwiZ2V0TWV0YWRhdGEiLCJwYWdlU2l6ZSIsInBhZ2VSYW5nZSIsImRhdGFzZXQiLCJwYWdlcyIsInBpdm90IiwicHJldmlvdXNQYWdlIiwibmV4dFBhZ2UiLCJjcmVhdGVQYWdlIiwiZGF0YS1vZmZzZXQiLCJjcmVhdGVQYWdlUmFuZ2UiLDMxMCwiRmlsdGVycyIsIkFydGljbGVMaXN0IiwiTWVzc2FnZXMiLCJQYWdpbmF0aW9uIiwiLi9hcnRpY2xlLWxpc3QiLCIuL2ZpbHRlcnMiLCIuL3BhZ2luYXRpb24iLCIuL3NlYXJjaC1tZXNzYWdlIiwzMTEsMzEyLDMxMywia2V5bWlycm9yIiwzMTQsImZsdXgiLDMxNSwicGFyc2VyIiwiRU5EUE9JTlQiLCJfYWdncmVnYXRpb25zIiwiX3NldHRlcnMiLCJmZXRjaCIsIi4uL3V0aWxzL2FnZ3JlZ2F0aW9uLXBhcnNlciIsMzE2LCJTdG9yZSIsIl9hcnRpY2xlcyIsIl9tZXRhZGF0YSIsIl9xdWVyeSIsIl9zZXRNZXRhZGF0YSIsIm1ldGFkYXRhIiwiX3NldEFydGljbGVzIiwiX3NldEFnZ3JlZ2F0aW9ucyIsImNvdW50cnkiLCJwYXJzZUFzVHJlZSIsIl9zZXRRdWVyeSIsImRpc3BhdGNoZXIiLCJfX29uRGlzcGF0Y2giLCJfX2VtaXRDaGFuZ2UiLCJmaWx0ZXJQYXJhbXMiLCJzdG9yZSIsIi4vc3RvcmUiLCJvYmplY3QtYXNzaWduIiwzMTcsIl9fY2hhbmdlZCIsIl9fY2hhbmdlRXZlbnQiLCJfX2Rpc3BhdGNoZXIiLCJfX2VtaXR0ZXIiLCJfX2Rpc3BhdGNoVG9rZW4iLCJfX2ludm9rZU9uRGlzcGF0Y2giLCJsb2wiLCJnZXREaXNwYXRjaFRva2VuIiwzMTgsInJlY29yZHMiLCJzdWJkaXZpZGUiLCJyZWNvcmQiLCJkb2NfY291bnQiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR1MsUUFBa0QsSUFBSSxHQUExQ0wsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxHQUFJLE9BQU9ELEtBQUthLEdBQUcsU0FBU1QsRUFBUVUsRUFBT0osR0FDdmRJLEVBQU9KLFFBQVVOLEVBQVEsaUJBQ3RCVyxjQUFjLElBQUlDLEdBQUcsU0FBU1osRUFBUVUsRUFBT0osR0FDaEQsWUFJQSxJQUFJTyxHQUFXYixFQUFRLGlCQUNuQmMsRUFBUWQsRUFBUSxjQUNoQmUsRUFBV2YsRUFBUSx5QkFDbkJnQixFQUFlaEIsRUFBUSw2QkFDdkJpQixFQUFnQmpCLEVB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ckgsR0FBUW1ySCxFQUFPOTFLLElBQUlxbkIsVUFBVSxHQUFHL2dCLE1BQU0sSUFDMUN1dkssR0FBVWxySCxFQUFPL3NCLEtBRVpBLEdBRVR6NUIsTUFBTyxTQUFleXhLLEdBQ3BCLE1BQU9wbUssR0FBRW1WLElBQUlpeEosRUFBUyxTQUFVRSxHQUM5QixHQUFJbnJILEdBQVFtckgsRUFBTzkxSyxJQUFJcW5CLFVBQVUsR0FBRy9nQixNQUFNLElBQzFDLFFBQVN0RyxJQUFLMnFELEVBQU1BLEVBQU05dEQsT0FBUyxHQUFJazVLLFVBQVdELEVBQU9DLGlCQUs1RHRuSCxPQUFTLFVBQVUiLCJmaWxlIjoianMvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpO1xufSx7XCIuL2xpYi9heGlvc1wiOjN9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLypnbG9iYWwgQWN0aXZlWE9iamVjdDp0cnVlKi9cblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVXJsID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVXJsJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvdHJhbnNmb3JtRGF0YScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIocmVzb2x2ZSwgcmVqZWN0LCBjb25maWcpIHtcbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICB2YXIgZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBNZXJnZSBoZWFkZXJzXG4gIHZhciByZXF1ZXN0SGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLFxuICAgIGRlZmF1bHRzLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgfVxuXG4gIC8vIENyZWF0ZSB0aGUgcmVxdWVzdFxuICB2YXIgcmVxdWVzdCA9IG5ldyAoWE1MSHR0cFJlcXVlc3QgfHwgQWN0aXZlWE9iamVjdCkoJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpLCB0cnVlKTtcblxuICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXF1ZXN0ICYmIHJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gWyd0ZXh0JywgJyddLmluZGV4T2YoY29uZmlnLnJlc3BvbnNlVHlwZSB8fCAnJykgIT09IC0xID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlc3BvbnNlRGF0YSxcbiAgICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICksXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgfTtcblxuICAgICAgLy8gUmVzb2x2ZSBvciByZWplY3QgdGhlIFByb21pc2UgYmFzZWQgb24gdGhlIHN0YXR1c1xuICAgICAgKHJlcXVlc3Quc3RhdHVzID49IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyA8IDMwMCA/XG4gICAgICAgIHJlc29sdmUgOlxuICAgICAgICByZWplY3QpKHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCB4c3JmIGhlYWRlclxuICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG4gICAgdmFyIHVybElzU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy91cmxJc1NhbWVPcmlnaW4nKTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybCkgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lIHx8IGRlZmF1bHRzLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIGlmICghZGF0YSAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgIGVsc2Uge1xuICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gIH1cblxuICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocmVxdWVzdC5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpKSB7XG4gICAgZGF0YSA9IG5ldyBEYXRhVmlldyhkYXRhKTtcbiAgfVxuXG4gIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgcmVxdWVzdC5zZW5kKGRhdGEpO1xufTtcblxufSx7XCIuLy4uL2RlZmF1bHRzXCI6NixcIi4vLi4vaGVscGVycy9idWlsZFVybFwiOjcsXCIuLy4uL2hlbHBlcnMvY29va2llc1wiOjgsXCIuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzXCI6OSxcIi4vLi4vaGVscGVycy90cmFuc2Zvcm1EYXRhXCI6MTEsXCIuLy4uL2hlbHBlcnMvdXJsSXNTYW1lT3JpZ2luXCI6MTIsXCIuLy4uL3V0aWxzXCI6MTN9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vY29yZS9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG5cbnZhciBheGlvcyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICBtZXRob2Q6ICdnZXQnLFxuICAgIGhlYWRlcnM6IHt9LFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRzLnRpbWVvdXQsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCxcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VcbiAgfSwgY29uZmlnKTtcblxuICAvLyBEb24ndCBhbGxvdyBvdmVycmlkaW5nIGRlZmF1bHRzLndpdGhDcmVkZW50aWFsc1xuICBjb25maWcud2l0aENyZWRlbnRpYWxzID0gY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIGF4aW9zLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgYXhpb3MuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIEV4cG9zZSBkZWZhdWx0c1xuYXhpb3MuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGludGVyY2VwdG9yc1xuYXhpb3MuaW50ZXJjZXB0b3JzID0ge1xuICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzKCkge1xuICAgIHV0aWxzLmZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICBheGlvc1ttZXRob2RdID0gZnVuY3Rpb24gKHVybCwgY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBheGlvcyh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9KSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoKSB7XG4gICAgdXRpbHMuZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIGF4aW9zW21ldGhvZF0gPSBmdW5jdGlvbiAodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zKHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSkpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVNob3J0TWV0aG9kcygnZGVsZXRlJywgJ2dldCcsICdoZWFkJyk7XG4gIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcsICdwYXRjaCcpO1xufSkoKTtcblxufSx7XCIuL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyXCI6NCxcIi4vY29yZS9kaXNwYXRjaFJlcXVlc3RcIjo1LFwiLi9kZWZhdWx0c1wiOjYsXCIuL2hlbHBlcnMvc3ByZWFkXCI6MTAsXCIuL3V0aWxzXCI6MTN9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGByZW1vdmVgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIChoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxufSx7XCIuLy4uL3V0aWxzXCI6MTN9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgd2hpY2hldmVyIGFkYXB0ZXJcbiAqIGlzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB0cnkge1xuICAgICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgICAgaWYgKCh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB8fCAodHlwZW9mIEFjdGl2ZVhPYmplY3QgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICByZXF1aXJlKCcuLi9hZGFwdGVycy94aHInKShyZXNvbHZlLCByZWplY3QsIGNvbmZpZyk7XG4gICAgICB9XG4gICAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgICBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpKHJlc29sdmUsIHJlamVjdCwgY29uZmlnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICB9KTtcbn07XG5cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4uL2FkYXB0ZXJzL2h0dHBcIjoyLFwiLi4vYWRhcHRlcnMveGhyXCI6MixcIl9wcm9jZXNzXCI6MTE0fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIFBST1RFQ1RJT05fUFJFRklYID0gL15cXClcXF1cXH0nLD9cXG4vO1xudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gKGRhdGEsIGhlYWRlcnMpIHtcbiAgICBpZih1dGlscy5pc0Zvcm1EYXRhKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpICYmICF1dGlscy5pc0ZpbGUoZGF0YSkgJiYgIXV0aWxzLmlzQmxvYihkYXRhKSkge1xuICAgICAgLy8gU2V0IGFwcGxpY2F0aW9uL2pzb24gaWYgbm8gQ29udGVudC1UeXBlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSkge1xuICAgICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKFBST1RFQ1RJT05fUFJFRklYLCAnJyk7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH0sXG4gICAgcGF0Y2g6IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKSxcbiAgICBwb3N0OiB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSksXG4gICAgcHV0OiB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSlcbiAgfSxcblxuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJ1xufTtcblxufSx7XCIuL3V0aWxzXCI6MTN9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gW107XG5cbiAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICB2YWwgPSBbdmFsXTtcbiAgICB9XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgIH1cbiAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgIH0pO1xuICB9KTtcblxuICBpZiAocGFydHMubGVuZ3RoID4gMCkge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cbn0se1wiLi8uLi91dGlsc1wiOjEzfV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogV0FSTklORzpcbiAqICBUaGlzIGZpbGUgbWFrZXMgcmVmZXJlbmNlcyB0byBvYmplY3RzIHRoYXQgYXJlbid0IHNhZmUgaW4gYWxsIGVudmlyb25tZW50cy5cbiAqICBQbGVhc2Ugc2VlIGxpYi91dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudiBiZWZvcmUgaW5jbHVkaW5nIHRoaXMgZmlsZS5cbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgIH1cblxuICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgfSxcblxuICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gIH1cbn07XG5cbn0se1wiLi8uLi91dGlsc1wiOjEzfV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge30sIGtleSwgdmFsLCBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxufSx7XCIuLy4uL3V0aWxzXCI6MTN9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcblxufSx7fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cbn0se1wiLi8uLi91dGlsc1wiOjEzfV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdBUk5JTkc6XG4gKiAgVGhpcyBmaWxlIG1ha2VzIHJlZmVyZW5jZXMgdG8gb2JqZWN0cyB0aGF0IGFyZW4ndCBzYWZlIGluIGFsbCBlbnZpcm9ubWVudHMuXG4gKiAgUGxlYXNlIHNlZSBsaWIvdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYgYmVmb3JlIGluY2x1ZGluZyB0aGlzIGZpbGUuXG4gKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xudmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xudmFyIG9yaWdpblVybDtcblxuLyoqXG4gKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHVybCkge1xuICB2YXIgaHJlZiA9IHVybDtcblxuICBpZiAobXNpZSkge1xuICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgfVxuXG4gIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgcmV0dXJuIHtcbiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgfTtcbn1cblxub3JpZ2luVXJsID0gdXJsUmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cmxJc1NhbWVPcmlnaW4ocmVxdWVzdFVybCkge1xuICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVcmwpKSA/IHVybFJlc29sdmUocmVxdWVzdFVybCkgOiByZXF1ZXN0VXJsO1xuICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmXG4gICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7XG59O1xuXG59LHtcIi4vLi4vdXRpbHNcIjoxM31dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcmd1bWVudHMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJndW1lbnRzIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlZWxlbWVudCAtPiB1bmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBvciBhcmd1bWVudHMgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgb2JqIGlzIGFycmF5LWxpa2VcbiAgdmFyIGlzQXJyYXlMaWtlID0gaXNBcnJheShvYmopIHx8IGlzQXJndW1lbnRzKG9iaik7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiAhaXNBcnJheUxpa2UpIHtcbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgaWYgKGlzQXJyYXlMaWtlKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH1cbiAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gIGVsc2Uge1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qb2JqMSwgb2JqMiwgb2JqMywgLi4uKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24gKG9iaikge1xuICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbiAodmFsLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgdHJpbTogdHJpbVxufTtcblxufSx7fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gIENvcHlyaWdodCAoYykgMjAxNSBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gJyc7XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3NlcyArPSAnICcgKyBhcmc7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzICs9ICcgJyArIGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMgKz0gJyAnICsga2V5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLnN1YnN0cigxKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcblxufSx7fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi9saWIva2V5cy5qcycpO1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cblxufSx7XCIuL2xpYi9pc19hcmd1bWVudHMuanNcIjoxNixcIi4vbGliL2tleXMuanNcIjoxN31dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG5cbn0se31dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbn0se31dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICB2YXIgbTtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2Uge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IDA7XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cblxufSx7fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQXR0ZW1wdGVkIHRvIGxpc3RlbiB0byBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlIG9uIGEgJyArICdicm93c2VyIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgY2FwdHVyZSBwaGFzZS4gWW91ciBhcHBsaWNhdGlvbiAnICsgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGVtcHR5RnVuY3Rpb25cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24gKCkge31cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRMaXN0ZW5lcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2VtcHR5RnVuY3Rpb25cIjoyNixcIl9wcm9jZXNzXCI6MTE0fV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xufSx7fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTtcbn0se31dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjYW1lbGl6ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbW96LXRyYW5zaXRpb24nKVxuICogICA8IFwiTW96VHJhbnNpdGlvblwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tcy10cmFuc2l0aW9uJylcbiAqICAgPCBcIm1zVHJhbnNpdGlvblwiXG4gKlxuICogQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICogKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7XG59LHtcIi4vY2FtZWxpemVcIjoyMX1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBjb250YWluc05vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICpcbiAqIEBwYXJhbSB7P0RPTU5vZGV9IG91dGVyTm9kZSBPdXRlciBET00gbm9kZS5cbiAqIEBwYXJhbSB7P0RPTU5vZGV9IGlubmVyTm9kZSBJbm5lciBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG91dGVyTm9kZWAgY29udGFpbnMgb3IgaXMgYGlubmVyTm9kZWAuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShfeCwgX3gyKSB7XG4gIHZhciBfYWdhaW4gPSB0cnVlO1xuXG4gIF9mdW5jdGlvbjogd2hpbGUgKF9hZ2Fpbikge1xuICAgIHZhciBvdXRlck5vZGUgPSBfeCxcbiAgICAgICAgaW5uZXJOb2RlID0gX3gyO1xuICAgIF9hZ2FpbiA9IGZhbHNlO1xuXG4gICAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICAgIF94ID0gb3V0ZXJOb2RlO1xuICAgICAgX3gyID0gaW5uZXJOb2RlLnBhcmVudE5vZGU7XG4gICAgICBfYWdhaW4gPSB0cnVlO1xuICAgICAgY29udGludWUgX2Z1bmN0aW9uO1xuICAgIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbnRhaW5zKSB7XG4gICAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gICAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcbn0se1wiLi9pc1RleHROb2RlXCI6MzZ9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlQXJyYXlGcm9tTWl4ZWRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9BcnJheSA9IHJlcXVpcmUoJy4vdG9BcnJheScpO1xuXG4vKipcbiAqIFBlcmZvcm0gYSBoZXVyaXN0aWMgdGVzdCB0byBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIFwiYXJyYXktbGlrZVwiLlxuICpcbiAqICAgQSBtb25rIGFza2VkIEpvc2h1LCBhIFplbiBtYXN0ZXIsIFwiSGFzIGEgZG9nIEJ1ZGRoYSBuYXR1cmU/XCJcbiAqICAgSm9zaHUgcmVwbGllZDogXCJNdS5cIlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiBpdHMgYXJndW1lbnQgaGFzIFwiYXJyYXkgbmF0dXJlXCI6IGl0IHJldHVybnNcbiAqIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFjdHVhbCBhcnJheSwgYW4gYGFyZ3VtZW50cycgb2JqZWN0LCBvciBhblxuICogSFRNTENvbGxlY3Rpb24gKGUuZy4gbm9kZS5jaGlsZE5vZGVzIG9yIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSkuXG4gKlxuICogSXQgd2lsbCByZXR1cm4gZmFsc2UgZm9yIG90aGVyIGFycmF5LWxpa2Ugb2JqZWN0cyBsaWtlIEZpbGVsaXN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNBcnJheU5hdHVyZShvYmopIHtcbiAgcmV0dXJuKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiYgKFxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG4gICAgLy8gcXVhY2tzIGxpa2UgYW4gYXJyYXlcbiAgICAnbGVuZ3RoJyBpbiBvYmogJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoXG4gICAgLy8gYSByZWFsIGFycmF5XG4gICAgQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgLy8gYXJndW1lbnRzXG4gICAgJ2NhbGxlZScgaW4gb2JqIHx8XG4gICAgLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAnaXRlbScgaW4gb2JqKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkO1xufSx7XCIuL3RvQXJyYXlcIjo0NH1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlTm9kZXNGcm9tTWFya3VwXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qZXNsaW50LWRpc2FibGUgZmItd3d3L3Vuc2FmZS1odG1sKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJy4vY3JlYXRlQXJyYXlGcm9tTWl4ZWQnKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZSgnLi9nZXRNYXJrdXBXcmFwJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBEdW1teSBjb250YWluZXIgdXNlZCB0byByZW5kZXIgYWxsIG1hcmt1cC5cbiAqL1xudmFyIGR1bW15Tm9kZSA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDogbnVsbDtcblxuLyoqXG4gKiBQYXR0ZXJuIHVzZWQgYnkgYGdldE5vZGVOYW1lYC5cbiAqL1xudmFyIG5vZGVOYW1lUGF0dGVybiA9IC9eXFxzKjwoXFx3KykvO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBgbm9kZU5hbWVgIG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIFN0cmluZyBvZiBtYXJrdXAuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHZhciBub2RlTmFtZU1hdGNoID0gbWFya3VwLm1hdGNoKG5vZGVOYW1lUGF0dGVybik7XG4gIHJldHVybiBub2RlTmFtZU1hdGNoICYmIG5vZGVOYW1lTWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG5vZGVzIHJlbmRlcmVkIGZyb20gdGhlIHN1cHBsaWVkIG1hcmt1cC4gVGhlXG4gKiBvcHRpb25hbGx5IHN1cHBsaWVkIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGZvciBlYWNoXG4gKiA8c2NyaXB0PiBlbGVtZW50IHRoYXQgaXMgcmVuZGVyZWQuIElmIG5vIGBoYW5kbGVTY3JpcHRgIGZ1bmN0aW9uIGlzIHN1cHBsaWVkLFxuICogYW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiBhbnkgPHNjcmlwdD4gZWxlbWVudHMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgQSBzdHJpbmcgb2YgdmFsaWQgSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gaGFuZGxlU2NyaXB0IEludm9rZWQgb25jZSBmb3IgZWFjaCByZW5kZXJlZCA8c2NyaXB0Pi5cbiAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnR8RE9NVGV4dE5vZGU+fSBBbiBhcnJheSBvZiByZW5kZXJlZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgaGFuZGxlU2NyaXB0KSB7XG4gIHZhciBub2RlID0gZHVtbXlOb2RlO1xuICAhISFkdW1teU5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlTm9kZXNGcm9tTWFya3VwIGR1bW15IG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcblxuICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuICBpZiAod3JhcCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gd3JhcFsxXSArIG1hcmt1cCArIHdyYXBbMl07XG5cbiAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICB3aGlsZSAod3JhcERlcHRoLS0pIHtcbiAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gIH1cblxuICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAhaGFuZGxlU2NyaXB0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIGNyZWF0ZUFycmF5RnJvbU1peGVkKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcbiAgfVxuXG4gIHZhciBub2RlcyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkKG5vZGUuY2hpbGROb2Rlcyk7XG4gIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXA7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjIwLFwiLi9jcmVhdGVBcnJheUZyb21NaXhlZFwiOjI0LFwiLi9nZXRNYXJrdXBXcmFwXCI6MzAsXCIuL2ludmFyaWFudFwiOjM0LFwiX3Byb2Nlc3NcIjoxMTR9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW1wdHlGdW5jdGlvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcbn0se31dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZW1wdHlPYmplY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjExNH1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7XG59LHt9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0QWN0aXZlRWxlbWVudFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdCB5ZXQgZGVmaW5lZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkgLyo/RE9NRWxlbWVudCove1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50O1xufSx7fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRNYXJrdXBXcmFwXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBmYi13d3cvdW5zYWZlLWh0bWwgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMCxcIi4vaW52YXJpYW50XCI6MzQsXCJfcHJvY2Vzc1wiOjExNH1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuZnVuY3Rpb24gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZSkge1xuICBpZiAoc2Nyb2xsYWJsZSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcbiAgICB5OiBzY3JvbGxhYmxlLnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uO1xufSx7fV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xufSx7fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcbn0se1wiLi9oeXBoZW5hdGVcIjozMn1dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignSW52YXJpYW50IFZpb2xhdGlvbjogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxMTR9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlO1xufSx7fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzVGV4dE5vZGVcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xufSx7XCIuL2lzTm9kZVwiOjM1fV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBrZXlNaXJyb3JcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGFuIGVudW1lcmF0aW9uIHdpdGgga2V5cyBlcXVhbCB0byB0aGVpciB2YWx1ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgIHZhciBDT0xPUlMgPSBrZXlNaXJyb3Ioe2JsdWU6IG51bGwsIHJlZDogbnVsbH0pO1xuICogICB2YXIgbXlDb2xvciA9IENPTE9SUy5ibHVlO1xuICogICB2YXIgaXNDb2xvclZhbGlkID0gISFDT0xPUlNbbXlDb2xvcl07XG4gKlxuICogVGhlIGxhc3QgbGluZSBjb3VsZCBub3QgYmUgcGVyZm9ybWVkIGlmIHRoZSB2YWx1ZXMgb2YgdGhlIGdlbmVyYXRlZCBlbnVtIHdlcmVcbiAqIG5vdCBlcXVhbCB0byB0aGVpciBrZXlzLlxuICpcbiAqICAgSW5wdXQ6ICB7a2V5MTogdmFsMSwga2V5MjogdmFsMn1cbiAqICAgT3V0cHV0OiB7a2V5MToga2V5MSwga2V5Mjoga2V5Mn1cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbnZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXQgPSB7fTtcbiAgdmFyIGtleTtcbiAgIShvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAna2V5TWlycm9yKC4uLik6IEFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjM0LFwiX3Byb2Nlc3NcIjoxMTR9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5T2ZcbiAqL1xuXG4vKipcbiAqIEFsbG93cyBleHRyYWN0aW9uIG9mIGEgbWluaWZpZWQga2V5LiBMZXQncyB0aGUgYnVpbGQgc3lzdGVtIG1pbmlmeSBrZXlzXG4gKiB3aXRob3V0IGxvc2luZyB0aGUgYWJpbGl0eSB0byBkeW5hbWljYWxseSB1c2Uga2V5IHN0cmluZ3MgYXMgdmFsdWVzXG4gKiB0aGVtc2VsdmVzLiBQYXNzIGluIGFuIG9iamVjdCB3aXRoIGEgc2luZ2xlIGtleS92YWwgcGFpciBhbmQgaXQgd2lsbCByZXR1cm5cbiAqIHlvdSB0aGUgc3RyaW5nIGtleSBvZiB0aGF0IHNpbmdsZSByZWNvcmQuIFN1cHBvc2UgeW91IHdhbnQgdG8gZ3JhYiB0aGVcbiAqIHZhbHVlIGZvciBhIGtleSAnY2xhc3NOYW1lJyBpbnNpZGUgb2YgYW4gb2JqZWN0LiBLZXkvdmFsIG1pbmlmaWNhdGlvbiBtYXlcbiAqIGhhdmUgYWxpYXNlZCB0aGF0IGtleSB0byBiZSAneGExMicuIGtleU9mKHtjbGFzc05hbWU6IG51bGx9KSB3aWxsIHJldHVyblxuICogJ3hhMTInIGluIHRoYXQgY2FzZS4gUmVzb2x2ZSBrZXlzIHlvdSB3YW50IHRvIHVzZSBvbmNlIGF0IHN0YXJ0dXAgdGltZSwgdGhlblxuICogcmV1c2UgdGhvc2UgcmVzb2x1dGlvbnMuXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5T2YgPSBmdW5jdGlvbiAob25lS2V5T2JqKSB7XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIG9uZUtleU9iaikge1xuICAgIGlmICghb25lS2V5T2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlPZjtcbn0se31dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtYXBPYmplY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGBjYWxsYmFja2Agb25jZSBmb3IgZWFjaCBlbnVtZXJhYmxlIG93biBwcm9wZXJ0eSBpbiB0aGVcbiAqIG9iamVjdCBhbmQgY29uc3RydWN0cyBhIG5ldyBvYmplY3QgZnJvbSB0aGUgcmVzdWx0cy4gVGhlIGBjYWxsYmFja2AgaXNcbiAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKlxuICogIC0gdGhlIHByb3BlcnR5IHZhbHVlXG4gKiAgLSB0aGUgcHJvcGVydHkgbmFtZVxuICogIC0gdGhlIG9iamVjdCBiZWluZyB0cmF2ZXJzZWRcbiAqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGFkZGVkIGFmdGVyIHRoZSBjYWxsIHRvIGBtYXBPYmplY3RgIHdpbGwgbm90IGJlIHZpc2l0ZWRcbiAqIGJ5IGBjYWxsYmFja2AuIElmIHRoZSB2YWx1ZXMgb2YgZXhpc3RpbmcgcHJvcGVydGllcyBhcmUgY2hhbmdlZCwgdGhlIHZhbHVlXG4gKiBwYXNzZWQgdG8gYGNhbGxiYWNrYCB3aWxsIGJlIHRoZSB2YWx1ZSBhdCB0aGUgdGltZSBgbWFwT2JqZWN0YCB2aXNpdHMgdGhlbS5cbiAqIFByb3BlcnRpZXMgdGhhdCBhcmUgZGVsZXRlZCBiZWZvcmUgYmVpbmcgdmlzaXRlZCBhcmUgbm90IHZpc2l0ZWQuXG4gKlxuICogQGdyZXAgZnVuY3Rpb24gb2JqZWN0TWFwKClcbiAqIEBncmVwIGZ1bmN0aW9uIG9iak1hcCgpXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0geyp9IGNvbnRleHRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCwgb2JqZWN0W25hbWVdLCBuYW1lLCBvYmplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdDtcbn0se31dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBtZW1vaXplU3RyaW5nT25seVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcbn0se31dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIHBlcmZvcm1hbmNlO1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlIHx8IHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8IHdpbmRvdy53ZWJraXRQZXJmb3JtYW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZSB8fCB7fTtcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjIwfV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHBlcmZvcm1hbmNlTm93XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHBlcmZvcm1hbmNlID0gcmVxdWlyZSgnLi9wZXJmb3JtYW5jZScpO1xudmFyIGN1clBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG5cbi8qKlxuICogRGV0ZWN0IGlmIHdlIGNhbiB1c2UgYHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKWAgYW5kIGdyYWNlZnVsbHkgZmFsbGJhY2sgdG9cbiAqIGBEYXRlLm5vdygpYCBpZiBpdCBkb2Vzbid0IGV4aXN0LiBXZSBuZWVkIHRvIHN1cHBvcnQgRmlyZWZveCA8IDE1IGZvciBub3dcbiAqIGJlY2F1c2Ugb2YgRmFjZWJvb2sncyB0ZXN0aW5nIGluZnJhc3RydWN0dXJlLlxuICovXG5pZiAoIWN1clBlcmZvcm1hbmNlIHx8ICFjdXJQZXJmb3JtYW5jZS5ub3cpIHtcbiAgY3VyUGVyZm9ybWFuY2UgPSBEYXRlO1xufVxuXG52YXIgcGVyZm9ybWFuY2VOb3cgPSBjdXJQZXJmb3JtYW5jZS5ub3cuYmluZChjdXJQZXJmb3JtYW5jZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2VOb3c7XG59LHtcIi4vcGVyZm9ybWFuY2VcIjo0MX1dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzaGFsbG93RXF1YWxcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICB2YXIgYkhhc093blByb3BlcnR5ID0gaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleXNBW2ldKSB8fCBvYmpBW2tleXNBW2ldXSAhPT0gb2JqQltrZXlzQVtpXV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG59LHt9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHRvQXJyYXlcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byBhcnJheXMuXG4gKlxuICogVGhpcyBBUEkgYXNzdW1lcyB0aGUgY2FsbGVyIGtub3dzIHRoZSBjb250ZW50cyBvZiB0aGUgZGF0YSB0eXBlLiBGb3IgbGVzc1xuICogd2VsbCBkZWZpbmVkIGlucHV0cyB1c2UgY3JlYXRlQXJyYXlGcm9tTWl4ZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlIGJ1aWx0aW4gb2JqZWN0cyBjYW4gcmVwb3J0IHR5cGVvZiAnZnVuY3Rpb24nIChlLmcuIE5vZGVMaXN0IGluXG4gIC8vIG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkpLlxuICAhKCFBcnJheS5pc0FycmF5KG9iaikgJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAhKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHknKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgIShsZW5ndGggPT09IDAgfHwgbGVuZ3RoIC0gMSBpbiBvYmopID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjozNCxcIl9wcm9jZXNzXCI6MTE0fV0sNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vZW1wdHlGdW5jdGlvblwiOjI2LFwiX3Byb2Nlc3NcIjoxMTR9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vbGliL0Rpc3BhdGNoZXInKTtcblxufSx7XCIuL2xpYi9EaXNwYXRjaGVyXCI6NDd9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEaXNwYXRjaGVyXG4gKiBcbiAqIEBwcmV2ZW50TXVuZ2VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBfcHJlZml4ID0gJ0lEXyc7XG5cbi8qKlxuICogRGlzcGF0Y2hlciBpcyB1c2VkIHRvIGJyb2FkY2FzdCBwYXlsb2FkcyB0byByZWdpc3RlcmVkIGNhbGxiYWNrcy4gVGhpcyBpc1xuICogZGlmZmVyZW50IGZyb20gZ2VuZXJpYyBwdWItc3ViIHN5c3RlbXMgaW4gdHdvIHdheXM6XG4gKlxuICogICAxKSBDYWxsYmFja3MgYXJlIG5vdCBzdWJzY3JpYmVkIHRvIHBhcnRpY3VsYXIgZXZlbnRzLiBFdmVyeSBwYXlsb2FkIGlzXG4gKiAgICAgIGRpc3BhdGNoZWQgdG8gZXZlcnkgcmVnaXN0ZXJlZCBjYWxsYmFjay5cbiAqICAgMikgQ2FsbGJhY2tzIGNhbiBiZSBkZWZlcnJlZCBpbiB3aG9sZSBvciBwYXJ0IHVudGlsIG90aGVyIGNhbGxiYWNrcyBoYXZlXG4gKiAgICAgIGJlZW4gZXhlY3V0ZWQuXG4gKlxuICogRm9yIGV4YW1wbGUsIGNvbnNpZGVyIHRoaXMgaHlwb3RoZXRpY2FsIGZsaWdodCBkZXN0aW5hdGlvbiBmb3JtLCB3aGljaFxuICogc2VsZWN0cyBhIGRlZmF1bHQgY2l0eSB3aGVuIGEgY291bnRyeSBpcyBzZWxlY3RlZDpcbiAqXG4gKiAgIHZhciBmbGlnaHREaXNwYXRjaGVyID0gbmV3IERpc3BhdGNoZXIoKTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoaWNoIGNvdW50cnkgaXMgc2VsZWN0ZWRcbiAqICAgdmFyIENvdW50cnlTdG9yZSA9IHtjb3VudHJ5OiBudWxsfTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoaWNoIGNpdHkgaXMgc2VsZWN0ZWRcbiAqICAgdmFyIENpdHlTdG9yZSA9IHtjaXR5OiBudWxsfTtcbiAqXG4gKiAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBiYXNlIGZsaWdodCBwcmljZSBvZiB0aGUgc2VsZWN0ZWQgY2l0eVxuICogICB2YXIgRmxpZ2h0UHJpY2VTdG9yZSA9IHtwcmljZTogbnVsbH1cbiAqXG4gKiBXaGVuIGEgdXNlciBjaGFuZ2VzIHRoZSBzZWxlY3RlZCBjaXR5LCB3ZSBkaXNwYXRjaCB0aGUgcGF5bG9hZDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICogICAgIGFjdGlvblR5cGU6ICdjaXR5LXVwZGF0ZScsXG4gKiAgICAgc2VsZWN0ZWRDaXR5OiAncGFyaXMnXG4gKiAgIH0pO1xuICpcbiAqIFRoaXMgcGF5bG9hZCBpcyBkaWdlc3RlZCBieSBgQ2l0eVN0b3JlYDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjaXR5LXVwZGF0ZScpIHtcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gcGF5bG9hZC5zZWxlY3RlZENpdHk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBXaGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBjb3VudHJ5LCB3ZSBkaXNwYXRjaCB0aGUgcGF5bG9hZDpcbiAqXG4gKiAgIGZsaWdodERpc3BhdGNoZXIuZGlzcGF0Y2goe1xuICogICAgIGFjdGlvblR5cGU6ICdjb3VudHJ5LXVwZGF0ZScsXG4gKiAgICAgc2VsZWN0ZWRDb3VudHJ5OiAnYXVzdHJhbGlhJ1xuICogICB9KTtcbiAqXG4gKiBUaGlzIHBheWxvYWQgaXMgZGlnZXN0ZWQgYnkgYm90aCBzdG9yZXM6XG4gKlxuICogICBDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIENvdW50cnlTdG9yZS5jb3VudHJ5ID0gcGF5bG9hZC5zZWxlY3RlZENvdW50cnk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBXaGVuIHRoZSBjYWxsYmFjayB0byB1cGRhdGUgYENvdW50cnlTdG9yZWAgaXMgcmVnaXN0ZXJlZCwgd2Ugc2F2ZSBhIHJlZmVyZW5jZVxuICogdG8gdGhlIHJldHVybmVkIHRva2VuLiBVc2luZyB0aGlzIHRva2VuIHdpdGggYHdhaXRGb3IoKWAsIHdlIGNhbiBndWFyYW50ZWVcbiAqIHRoYXQgYENvdW50cnlTdG9yZWAgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIGNhbGxiYWNrIHRoYXQgdXBkYXRlcyBgQ2l0eVN0b3JlYFxuICogbmVlZHMgdG8gcXVlcnkgaXRzIGRhdGEuXG4gKlxuICogICBDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbiA9IGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgIGlmIChwYXlsb2FkLmFjdGlvblR5cGUgPT09ICdjb3VudHJ5LXVwZGF0ZScpIHtcbiAqICAgICAgIC8vIGBDb3VudHJ5U3RvcmUuY291bnRyeWAgbWF5IG5vdCBiZSB1cGRhdGVkLlxuICogICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDb3VudHJ5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgLy8gYENvdW50cnlTdG9yZS5jb3VudHJ5YCBpcyBub3cgZ3VhcmFudGVlZCB0byBiZSB1cGRhdGVkLlxuICpcbiAqICAgICAgIC8vIFNlbGVjdCB0aGUgZGVmYXVsdCBjaXR5IGZvciB0aGUgbmV3IGNvdW50cnlcbiAqICAgICAgIENpdHlTdG9yZS5jaXR5ID0gZ2V0RGVmYXVsdENpdHlGb3JDb3VudHJ5KENvdW50cnlTdG9yZS5jb3VudHJ5KTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSB1c2FnZSBvZiBgd2FpdEZvcigpYCBjYW4gYmUgY2hhaW5lZCwgZm9yIGV4YW1wbGU6XG4gKlxuICogICBGbGlnaHRQcmljZVN0b3JlLmRpc3BhdGNoVG9rZW4gPVxuICogICAgIGZsaWdodERpc3BhdGNoZXIucmVnaXN0ZXIoZnVuY3Rpb24ocGF5bG9hZCkge1xuICogICAgICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvblR5cGUpIHtcbiAqICAgICAgICAgY2FzZSAnY291bnRyeS11cGRhdGUnOlxuICogICAgICAgICBjYXNlICdjaXR5LXVwZGF0ZSc6XG4gKiAgICAgICAgICAgZmxpZ2h0RGlzcGF0Y2hlci53YWl0Rm9yKFtDaXR5U3RvcmUuZGlzcGF0Y2hUb2tlbl0pO1xuICogICAgICAgICAgIEZsaWdodFByaWNlU3RvcmUucHJpY2UgPVxuICogICAgICAgICAgICAgZ2V0RmxpZ2h0UHJpY2VTdG9yZShDb3VudHJ5U3RvcmUuY291bnRyeSwgQ2l0eVN0b3JlLmNpdHkpO1xuICogICAgICAgICAgIGJyZWFrO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGBjb3VudHJ5LXVwZGF0ZWAgcGF5bG9hZCB3aWxsIGJlIGd1YXJhbnRlZWQgdG8gaW52b2tlIHRoZSBzdG9yZXMnXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcyBpbiBvcmRlcjogYENvdW50cnlTdG9yZWAsIGBDaXR5U3RvcmVgLCB0aGVuXG4gKiBgRmxpZ2h0UHJpY2VTdG9yZWAuXG4gKi9cblxudmFyIERpc3BhdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEaXNwYXRjaGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXNwYXRjaGVyKTtcblxuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMuX2lzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc0hhbmRsZWQgPSB7fTtcbiAgICB0aGlzLl9pc1BlbmRpbmcgPSB7fTtcbiAgICB0aGlzLl9sYXN0SUQgPSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2l0aCBldmVyeSBkaXNwYXRjaGVkIHBheWxvYWQuIFJldHVybnNcbiAgICogYSB0b2tlbiB0aGF0IGNhbiBiZSB1c2VkIHdpdGggYHdhaXRGb3IoKWAuXG4gICAqL1xuXG4gIERpc3BhdGNoZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgaWQgPSBfcHJlZml4ICsgdGhpcy5fbGFzdElEKys7XG4gICAgdGhpcy5fY2FsbGJhY2tzW2lkXSA9IGNhbGxiYWNrO1xuICAgIHJldHVybiBpZDtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNhbGxiYWNrIGJhc2VkIG9uIGl0cyB0b2tlbi5cbiAgICovXG5cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIoaWQpIHtcbiAgICAhdGhpcy5fY2FsbGJhY2tzW2lkXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEaXNwYXRjaGVyLnVucmVnaXN0ZXIoLi4uKTogYCVzYCBkb2VzIG5vdCBtYXAgdG8gYSByZWdpc3RlcmVkIGNhbGxiYWNrLicsIGlkKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tpZF07XG4gIH07XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciB0aGUgY2FsbGJhY2tzIHNwZWNpZmllZCB0byBiZSBpbnZva2VkIGJlZm9yZSBjb250aW51aW5nIGV4ZWN1dGlvblxuICAgKiBvZiB0aGUgY3VycmVudCBjYWxsYmFjay4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBhIGNhbGxiYWNrIGluXG4gICAqIHJlc3BvbnNlIHRvIGEgZGlzcGF0Y2hlZCBwYXlsb2FkLlxuICAgKi9cblxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS53YWl0Rm9yID0gZnVuY3Rpb24gd2FpdEZvcihpZHMpIHtcbiAgICAhdGhpcy5faXNEaXNwYXRjaGluZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEaXNwYXRjaGVyLndhaXRGb3IoLi4uKTogTXVzdCBiZSBpbnZva2VkIHdoaWxlIGRpc3BhdGNoaW5nLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaWRzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIGlkID0gaWRzW2lpXTtcbiAgICAgIGlmICh0aGlzLl9pc1BlbmRpbmdbaWRdKSB7XG4gICAgICAgICF0aGlzLl9pc0hhbmRsZWRbaWRdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBDaXJjdWxhciBkZXBlbmRlbmN5IGRldGVjdGVkIHdoaWxlICcgKyAnd2FpdGluZyBmb3IgYCVzYC4nLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgICF0aGlzLl9jYWxsYmFja3NbaWRdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Rpc3BhdGNoZXIud2FpdEZvciguLi4pOiBgJXNgIGRvZXMgbm90IG1hcCB0byBhIHJlZ2lzdGVyZWQgY2FsbGJhY2suJywgaWQpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2ludm9rZUNhbGxiYWNrKGlkKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYSBwYXlsb2FkIHRvIGFsbCByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAgICovXG5cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChwYXlsb2FkKSB7XG4gICAgISF0aGlzLl9pc0Rpc3BhdGNoaW5nID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Rpc3BhdGNoLmRpc3BhdGNoKC4uLik6IENhbm5vdCBkaXNwYXRjaCBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0RGlzcGF0Y2hpbmcocGF5bG9hZCk7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICBpZiAodGhpcy5faXNQZW5kaW5nW2lkXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ludm9rZUNhbGxiYWNrKGlkKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fc3RvcERpc3BhdGNoaW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIERpc3BhdGNoZXIgY3VycmVudGx5IGRpc3BhdGNoaW5nLlxuICAgKi9cblxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5pc0Rpc3BhdGNoaW5nID0gZnVuY3Rpb24gaXNEaXNwYXRjaGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faXNEaXNwYXRjaGluZztcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbCB0aGUgY2FsbGJhY2sgc3RvcmVkIHdpdGggdGhlIGdpdmVuIGlkLiBBbHNvIGRvIHNvbWUgaW50ZXJuYWxcbiAgICogYm9va2tlZXBpbmcuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5faW52b2tlQ2FsbGJhY2sgPSBmdW5jdGlvbiBfaW52b2tlQ2FsbGJhY2soaWQpIHtcbiAgICB0aGlzLl9pc1BlbmRpbmdbaWRdID0gdHJ1ZTtcbiAgICB0aGlzLl9jYWxsYmFja3NbaWRdKHRoaXMuX3BlbmRpbmdQYXlsb2FkKTtcbiAgICB0aGlzLl9pc0hhbmRsZWRbaWRdID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0IHVwIGJvb2trZWVwaW5nIG5lZWRlZCB3aGVuIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgRGlzcGF0Y2hlci5wcm90b3R5cGUuX3N0YXJ0RGlzcGF0Y2hpbmcgPSBmdW5jdGlvbiBfc3RhcnREaXNwYXRjaGluZyhwYXlsb2FkKSB7XG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICB0aGlzLl9pc1BlbmRpbmdbaWRdID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0hhbmRsZWRbaWRdID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3BlbmRpbmdQYXlsb2FkID0gcGF5bG9hZDtcbiAgICB0aGlzLl9pc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQ2xlYXIgYm9va2tlZXBpbmcgdXNlZCBmb3IgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICBEaXNwYXRjaGVyLnByb3RvdHlwZS5fc3RvcERpc3BhdGNoaW5nID0gZnVuY3Rpb24gX3N0b3BEaXNwYXRjaGluZygpIHtcbiAgICBkZWxldGUgdGhpcy5fcGVuZGluZ1BheWxvYWQ7XG4gICAgdGhpcy5faXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiBEaXNwYXRjaGVyO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6NDh9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignSW52YXJpYW50IFZpb2xhdGlvbjogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxMTR9XSw0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEluZGljYXRlcyB0aGF0IG5hdmlnYXRpb24gd2FzIGNhdXNlZCBieSBhIGNhbGwgdG8gaGlzdG9yeS5wdXNoLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgUFVTSCA9ICdQVVNIJztcblxuZXhwb3J0cy5QVVNIID0gUFVTSDtcbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IGEgY2FsbCB0byBoaXN0b3J5LnJlcGxhY2UuXG4gKi9cbnZhciBSRVBMQUNFID0gJ1JFUExBQ0UnO1xuXG5leHBvcnRzLlJFUExBQ0UgPSBSRVBMQUNFO1xuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBuYXZpZ2F0aW9uIHdhcyBjYXVzZWQgYnkgc29tZSBvdGhlciBhY3Rpb24gc3VjaFxuICogYXMgdXNpbmcgYSBicm93c2VyJ3MgYmFjay9mb3J3YXJkIGJ1dHRvbnMgYW5kL29yIG1hbnVhbGx5IG1hbmlwdWxhdGluZ1xuICogdGhlIFVSTCBpbiBhIGJyb3dzZXIncyBsb2NhdGlvbiBiYXIuIFRoaXMgaXMgdGhlIGRlZmF1bHQuXG4gKlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dFdmVudEhhbmRsZXJzL29ucG9wc3RhdGVcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICovXG52YXIgUE9QID0gJ1BPUCc7XG5cbmV4cG9ydHMuUE9QID0gUE9QO1xuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBQVVNIOiBQVVNILFxuICBSRVBMQUNFOiBSRVBMQUNFLFxuICBQT1A6IFBPUFxufTtcbn0se31dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb29wQXN5bmMgPSBsb29wQXN5bmM7XG5cbmZ1bmN0aW9uIGxvb3BBc3luYyh0dXJucywgd29yaywgY2FsbGJhY2spIHtcbiAgdmFyIGN1cnJlbnRUdXJuID0gMDtcbiAgdmFyIGlzRG9uZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaXNEb25lID0gdHJ1ZTtcbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICBpZiAoaXNEb25lKSByZXR1cm47XG5cbiAgICBpZiAoY3VycmVudFR1cm4gPCB0dXJucykge1xuICAgICAgd29yay5jYWxsKHRoaXMsIGN1cnJlbnRUdXJuKyssIG5leHQsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgbmV4dCgpO1xufVxufSx7fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyplc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5zYXZlU3RhdGUgPSBzYXZlU3RhdGU7XG5leHBvcnRzLnJlYWRTdGF0ZSA9IHJlYWRTdGF0ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIEtleVByZWZpeCA9ICdAQEhpc3RvcnkvJztcbnZhciBRdW90YUV4Y2VlZGVkRXJyb3IgPSAnUXVvdGFFeGNlZWRlZEVycm9yJztcblxuZnVuY3Rpb24gY3JlYXRlS2V5KGtleSkge1xuICByZXR1cm4gS2V5UHJlZml4ICsga2V5O1xufVxuXG5mdW5jdGlvbiBzYXZlU3RhdGUoa2V5LCBzdGF0ZSkge1xuICB0cnkge1xuICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGNyZWF0ZUtleShrZXkpLCBKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5uYW1lID09PSBRdW90YUV4Y2VlZGVkRXJyb3IgfHwgd2luZG93LnNlc3Npb25TdG9yYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gUHJvYmFibHkgaW4gU2FmYXJpIFwicHJpdmF0ZSBtb2RlXCIgd2hlcmUgc2Vzc2lvblN0b3JhZ2UgcXVvdGEgaXMgMC4gIzQyXG4gICAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1toaXN0b3J5XSBVbmFibGUgdG8gc2F2ZSBzdGF0ZTsgc2Vzc2lvblN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSBpbiBTYWZhcmkgcHJpdmF0ZSBtb2RlJyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkU3RhdGUoa2V5KSB7XG4gIHZhciBqc29uID0gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oY3JlYXRlS2V5KGtleSkpO1xuXG4gIGlmIChqc29uKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZ25vcmUgaW52YWxpZCBKU09OLlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxufSx7XCJ3YXJuaW5nXCI6Mjk2fV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjtcbmV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IHJlbW92ZUV2ZW50TGlzdGVuZXI7XG5leHBvcnRzLmdldEhhc2hQYXRoID0gZ2V0SGFzaFBhdGg7XG5leHBvcnRzLnJlcGxhY2VIYXNoUGF0aCA9IHJlcGxhY2VIYXNoUGF0aDtcbmV4cG9ydHMuZ2V0V2luZG93UGF0aCA9IGdldFdpbmRvd1BhdGg7XG5leHBvcnRzLmdvID0gZ287XG5leHBvcnRzLmdldFVzZXJDb25maXJtYXRpb24gPSBnZXRVc2VyQ29uZmlybWF0aW9uO1xuZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBzdXBwb3J0c0hpc3Rvcnk7XG5leHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2g7XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIGlmIChub2RlLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICBpZiAobm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMV0gfHwgJyc7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93UGF0aCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDtcbn1cblxuZnVuY3Rpb24gZ28obikge1xuICBpZiAobikgd2luZG93Lmhpc3RvcnkuZ28obik7XG59XG5cbmZ1bmN0aW9uIGdldFVzZXJDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIG1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmFja3QvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICByZXR1cm4gdWEuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbn0se31dLDUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZXhwb3J0cy5jYW5Vc2VET00gPSBjYW5Vc2VET007XG59LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9BY3Rpb25zID0gcmVxdWlyZSgnLi9BY3Rpb25zJyk7XG5cbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbnZhciBfRE9NU3RhdGVTdG9yYWdlID0gcmVxdWlyZSgnLi9ET01TdGF0ZVN0b3JhZ2UnKTtcblxudmFyIF9jcmVhdGVET01IaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVET01IaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlRE9NSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVET01IaXN0b3J5KTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIEhUTUw1J3MgaGlzdG9yeSBBUElcbiAqIChwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudCkgdG8gbWFuYWdlIGhpc3RvcnkuXG4gKiBUaGlzIGlzIHRoZSByZWNvbW1lbmRlZCBtZXRob2Qgb2YgbWFuYWdpbmcgaGlzdG9yeSBpbiBicm93c2VycyBiZWNhdXNlXG4gKiBpdCBwcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqXG4gKiBOb3RlOiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBmdWxsXG4gKiBwYWdlIHJlbG9hZHMgd2lsbCBiZSB1c2VkIHRvIHByZXNlcnZlIFVSTHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBmb3JjZVJlZnJlc2ggPSBvcHRpb25zLmZvcmNlUmVmcmVzaDtcblxuICB2YXIgaXNTdXBwb3J0ZWQgPSBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciB1c2VSZWZyZXNoID0gIWlzU3VwcG9ydGVkIHx8IGZvcmNlUmVmcmVzaDtcblxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgaGlzdG9yeVN0YXRlID0gaGlzdG9yeVN0YXRlIHx8IHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuXG4gICAgdmFyIHBhdGggPSBfRE9NVXRpbHMuZ2V0V2luZG93UGF0aCgpO1xuICAgIHZhciBfaGlzdG9yeVN0YXRlID0gaGlzdG9yeVN0YXRlO1xuICAgIHZhciBrZXkgPSBfaGlzdG9yeVN0YXRlLmtleTtcblxuICAgIHZhciBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBzdGF0ZSA9IF9ET01TdGF0ZVN0b3JhZ2UucmVhZFN0YXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG5cbiAgICAgIGlmIChpc1N1cHBvcnRlZCkgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKF9leHRlbmRzKHt9LCBoaXN0b3J5U3RhdGUsIHsga2V5OiBrZXkgfSksIG51bGwsIHBhdGgpO1xuICAgIH1cblxuICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCB1bmRlZmluZWQsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydFBvcFN0YXRlTGlzdGVuZXIoX3JlZikge1xuICAgIHZhciB0cmFuc2l0aW9uVG8gPSBfcmVmLnRyYW5zaXRpb25UbztcblxuICAgIGZ1bmN0aW9uIHBvcFN0YXRlTGlzdGVuZXIoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG5cbiAgICAgIHRyYW5zaXRpb25UbyhnZXRDdXJyZW50TG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgICB9XG5cbiAgICBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdwb3BzdGF0ZScsIHBvcFN0YXRlTGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ3BvcHN0YXRlJywgcG9wU3RhdGVMaXN0ZW5lcik7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmlzaFRyYW5zaXRpb24obG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZW5hbWUgPSBsb2NhdGlvbi5iYXNlbmFtZTtcbiAgICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcbiAgICB2YXIgYWN0aW9uID0gbG9jYXRpb24uYWN0aW9uO1xuICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXk7XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHJldHVybjsgLy8gTm90aGluZyB0byBkby5cblxuICAgIF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlKGtleSwgc3RhdGUpO1xuXG4gICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHZhciBoaXN0b3J5U3RhdGUgPSB7XG4gICAgICBrZXk6IGtleVxuICAgIH07XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBpZiAodXNlUmVmcmVzaCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhdGg7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gUHJldmVudCBsb2NhdGlvbiB1cGRhdGUuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIG51bGwsIHBhdGgpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJFUExBQ0VcbiAgICAgIGlmICh1c2VSZWZyZXNoKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHBhdGgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFByZXZlbnQgbG9jYXRpb24gdXBkYXRlLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBudWxsLCBwYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZURPTUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICBnZXRDdXJyZW50TG9jYXRpb246IGdldEN1cnJlbnRMb2NhdGlvbixcbiAgICBmaW5pc2hUcmFuc2l0aW9uOiBmaW5pc2hUcmFuc2l0aW9uLFxuICAgIHNhdmVTdGF0ZTogX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGVcbiAgfSkpO1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMCxcbiAgICAgIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gc3RhcnRQb3BTdGF0ZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHVubGlzdGVuKCk7XG5cbiAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XG5cbiAgICBoaXN0b3J5LnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaGlzdG9yeS51bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XG5cbiAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wUG9wU3RhdGVMaXN0ZW5lcigpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayxcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9va1xuICB9KTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9BY3Rpb25zXCI6NDksXCIuL0RPTVN0YXRlU3RvcmFnZVwiOjUxLFwiLi9ET01VdGlsc1wiOjUyLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjUzLFwiLi9jcmVhdGVET01IaXN0b3J5XCI6NTUsXCJpbnZhcmlhbnRcIjo3M31dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG52YXIgX2NyZWF0ZUhpc3RvcnkgPSByZXF1aXJlKCcuL2NyZWF0ZUhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUhpc3RvcnkpO1xuXG5mdW5jdGlvbiBjcmVhdGVET01IaXN0b3J5KG9wdGlvbnMpIHtcbiAgdmFyIGhpc3RvcnkgPSBfY3JlYXRlSGlzdG9yeTJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7XG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogX0RPTVV0aWxzLmdldFVzZXJDb25maXJtYXRpb25cbiAgfSwgb3B0aW9ucywge1xuICAgIGdvOiBfRE9NVXRpbHMuZ29cbiAgfSkpO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSwgJ0RPTSBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfSk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZURPTUhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9ET01VdGlsc1wiOjUyLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjUzLFwiLi9jcmVhdGVIaXN0b3J5XCI6NTcsXCJpbnZhcmlhbnRcIjo3M31dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9BY3Rpb25zID0gcmVxdWlyZSgnLi9BY3Rpb25zJyk7XG5cbnZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbnZhciBfRE9NU3RhdGVTdG9yYWdlID0gcmVxdWlyZSgnLi9ET01TdGF0ZVN0b3JhZ2UnKTtcblxudmFyIF9jcmVhdGVET01IaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVET01IaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlRE9NSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVET01IaXN0b3J5KTtcblxuZnVuY3Rpb24gaXNBYnNvbHV0ZVBhdGgocGF0aCkge1xuICByZXR1cm4gdHlwZW9mIHBhdGggPT09ICdzdHJpbmcnICYmIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoKCkge1xuICB2YXIgcGF0aCA9IF9ET01VdGlscy5nZXRIYXNoUGF0aCgpO1xuXG4gIGlmIChpc0Fic29sdXRlUGF0aChwYXRoKSkgcmV0dXJuIHRydWU7XG5cbiAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aCgnLycgKyBwYXRoKTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFkZFF1ZXJ5U3RyaW5nVmFsdWVUb1BhdGgocGF0aCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gcGF0aCArIChwYXRoLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgKGtleSArICc9JyArIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc3RyaXBRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwga2V5KSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UobmV3IFJlZ0V4cCgnWz8mXT8nICsga2V5ICsgJz1bYS16QS1aMC05XSsnKSwgJycpO1xufVxuXG5mdW5jdGlvbiBnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwga2V5KSB7XG4gIHZhciBtYXRjaCA9IHBhdGgubWF0Y2gobmV3IFJlZ0V4cCgnXFxcXD8uKj9cXFxcYicgKyBrZXkgKyAnPSguKz8pXFxcXGInKSk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXTtcbn1cblxudmFyIERlZmF1bHRRdWVyeUtleSA9ICdfayc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBxdWVyeUtleSA9IG9wdGlvbnMucXVlcnlLZXk7XG5cbiAgaWYgKHF1ZXJ5S2V5ID09PSB1bmRlZmluZWQgfHwgISFxdWVyeUtleSkgcXVlcnlLZXkgPSB0eXBlb2YgcXVlcnlLZXkgPT09ICdzdHJpbmcnID8gcXVlcnlLZXkgOiBEZWZhdWx0UXVlcnlLZXk7XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gX0RPTVV0aWxzLmdldEhhc2hQYXRoKCk7XG5cbiAgICB2YXIga2V5ID0gdW5kZWZpbmVkLFxuICAgICAgICBzdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAocXVlcnlLZXkpIHtcbiAgICAgIGtleSA9IGdldFF1ZXJ5U3RyaW5nVmFsdWVGcm9tUGF0aChwYXRoLCBxdWVyeUtleSk7XG4gICAgICBwYXRoID0gc3RyaXBRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwgcXVlcnlLZXkpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHN0YXRlID0gX0RPTVN0YXRlU3RvcmFnZS5yZWFkU3RhdGUoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgICAga2V5ID0gaGlzdG9yeS5jcmVhdGVLZXkoKTtcbiAgICAgICAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aChhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIHF1ZXJ5S2V5LCBrZXkpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCB1bmRlZmluZWQsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihfcmVmKSB7XG4gICAgdmFyIHRyYW5zaXRpb25UbyA9IF9yZWYudHJhbnNpdGlvblRvO1xuXG4gICAgZnVuY3Rpb24gaGFzaENoYW5nZUxpc3RlbmVyKCkge1xuICAgICAgaWYgKCFlbnN1cmVTbGFzaCgpKSByZXR1cm47IC8vIEFsd2F5cyBtYWtlIHN1cmUgaGFzaGVzIGFyZSBwcmVjZWVkZWQgd2l0aCBhIC8uXG5cbiAgICAgIHRyYW5zaXRpb25UbyhnZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gICAgfVxuXG4gICAgZW5zdXJlU2xhc2goKTtcbiAgICBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdoYXNoY2hhbmdlJywgaGFzaENoYW5nZUxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csICdoYXNoY2hhbmdlJywgaGFzaENoYW5nZUxpc3RlbmVyKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoVHJhbnNpdGlvbihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlbmFtZSA9IGxvY2F0aW9uLmJhc2VuYW1lO1xuICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgdmFyIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG4gICAgdmFyIGFjdGlvbiA9IGxvY2F0aW9uLmFjdGlvbjtcbiAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5O1xuXG4gICAgaWYgKGFjdGlvbiA9PT0gX0FjdGlvbnMuUE9QKSByZXR1cm47IC8vIE5vdGhpbmcgdG8gZG8uXG5cbiAgICB2YXIgcGF0aCA9IChiYXNlbmFtZSB8fCAnJykgKyBwYXRobmFtZSArIHNlYXJjaDtcblxuICAgIGlmIChxdWVyeUtleSkgcGF0aCA9IGFkZFF1ZXJ5U3RyaW5nVmFsdWVUb1BhdGgocGF0aCwgcXVlcnlLZXksIGtleSk7XG5cbiAgICBpZiAocGF0aCA9PT0gX0RPTVV0aWxzLmdldEhhc2hQYXRoKCkpIHtcbiAgICAgIF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnWW91IGNhbm5vdCAlcyB0aGUgc2FtZSBwYXRoIHVzaW5nIGhhc2ggaGlzdG9yeScsIGFjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWVyeUtleSkge1xuICAgICAgICBfRE9NU3RhdGVTdG9yYWdlLnNhdmVTdGF0ZShrZXksIHN0YXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERyb3Aga2V5IGFuZCBzdGF0ZS5cbiAgICAgICAgbG9jYXRpb24ua2V5ID0gbG9jYXRpb24uc3RhdGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJFUExBQ0VcbiAgICAgICAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aChwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVET01IaXN0b3J5MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgZ2V0Q3VycmVudExvY2F0aW9uOiBnZXRDdXJyZW50TG9jYXRpb24sXG4gICAgZmluaXNoVHJhbnNpdGlvbjogZmluaXNoVHJhbnNpdGlvbixcbiAgICBzYXZlU3RhdGU6IF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlXG4gIH0pKTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDAsXG4gICAgICBzdG9wSGFzaENoYW5nZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuQmVmb3JlKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bmxpc3RlbigpO1xuXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bmxpc3RlbigpO1xuXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgIF93YXJuaW5nMlsnZGVmYXVsdCddKHF1ZXJ5S2V5IHx8IHN0YXRlID09IG51bGwsICdZb3UgY2Fubm90IHVzZSBzdGF0ZSB3aXRob3V0IGEgcXVlcnlLZXkgaXQgd2lsbCBiZSBkcm9wcGVkJyk7XG5cbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgcGF0aCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBzdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpO1xuXG4gICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpO1xuICB9XG5cbiAgdmFyIGdvSXNTdXBwb3J0ZWRXaXRob3V0UmVsb2FkID0gX0RPTVV0aWxzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIF93YXJuaW5nMlsnZGVmYXVsdCddKGdvSXNTdXBwb3J0ZWRXaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBoaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgcmV0dXJuICcjJyArIGhpc3RvcnkuY3JlYXRlSHJlZihwYXRoKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciA9IHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG4gICAgaGlzdG9yeS5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuICAgIGhpc3RvcnkudW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuXG4gICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lcigpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgcHVzaFN0YXRlOiBwdXNoU3RhdGUsXG4gICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlU3RhdGUsXG4gICAgZ286IGdvLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayxcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9va1xuICB9KTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlSGFzaEhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9BY3Rpb25zXCI6NDksXCIuL0RPTVN0YXRlU3RvcmFnZVwiOjUxLFwiLi9ET01VdGlsc1wiOjUyLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjUzLFwiLi9jcmVhdGVET01IaXN0b3J5XCI6NTUsXCJpbnZhcmlhbnRcIjo3MyxcIndhcm5pbmdcIjoyOTZ9XSw1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9kZWVwRXF1YWwgPSByZXF1aXJlKCdkZWVwLWVxdWFsJyk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9jcmVhdGVMb2NhdGlvbjIgPSByZXF1aXJlKCcuL2NyZWF0ZUxvY2F0aW9uJyk7XG5cbnZhciBfY3JlYXRlTG9jYXRpb24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlTG9jYXRpb24yKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IHJlcXVpcmUoJy4vcnVuVHJhbnNpdGlvbkhvb2snKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XG5cbnZhciBfZGVwcmVjYXRlID0gcmVxdWlyZSgnLi9kZXByZWNhdGUnKTtcblxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tS2V5KGxlbmd0aCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmXG4gIC8vYS5hY3Rpb24gPT09IGIuYWN0aW9uICYmIC8vIERpZmZlcmVudCBhY3Rpb24gIT09IGxvY2F0aW9uIGNoYW5nZS5cbiAgYS5rZXkgPT09IGIua2V5ICYmIF9kZWVwRXF1YWwyWydkZWZhdWx0J10oYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbnZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcblxuZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGdldEN1cnJlbnRMb2NhdGlvbiA9IG9wdGlvbnMuZ2V0Q3VycmVudExvY2F0aW9uO1xuICB2YXIgZmluaXNoVHJhbnNpdGlvbiA9IG9wdGlvbnMuZmluaXNoVHJhbnNpdGlvbjtcbiAgdmFyIHNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlO1xuICB2YXIgZ28gPSBvcHRpb25zLmdvO1xuICB2YXIga2V5TGVuZ3RoID0gb3B0aW9ucy5rZXlMZW5ndGg7XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gb3B0aW9ucy5nZXRVc2VyQ29uZmlybWF0aW9uO1xuXG4gIGlmICh0eXBlb2Yga2V5TGVuZ3RoICE9PSAnbnVtYmVyJykga2V5TGVuZ3RoID0gRGVmYXVsdEtleUxlbmd0aDtcblxuICB2YXIgdHJhbnNpdGlvbkhvb2tzID0gW107XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFuc2l0aW9uSG9va3MgPSB0cmFuc2l0aW9uSG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhbGxLZXlzID0gW107XG4gIHZhciBjaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnQoKSB7XG4gICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAmJiBwZW5kaW5nTG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcbiAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YocGVuZGluZ0xvY2F0aW9uLmtleSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obmV3TG9jYXRpb24pIHtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcblxuICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cbiAgICBpZiAobG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBhbGxLZXlzID0gW10uY29uY2F0KGFsbEtleXMuc2xpY2UoMCwgY3VycmVudCArIDEpLCBbbG9jYXRpb24ua2V5XSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlJFUExBQ0UpIHtcbiAgICAgIGFsbEtleXNbY3VycmVudF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgfVxuXG4gICAgY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIGxpc3RlbmVyKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9sb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgICAgYWxsS2V5cyA9IFtfbG9jYXRpb24ua2V5XTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKF9sb2NhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZUxpc3RlbmVycyA9IGNoYW5nZUxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKHRyYW5zaXRpb25Ib29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgIGRvbmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAoZ2V0VXNlckNvbmZpcm1hdGlvbiAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgICBjYWxsYmFjayhvayAhPT0gZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwZW5kaW5nTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbikge1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbnNBcmVFcXVhbChsb2NhdGlvbiwgbmV4dExvY2F0aW9uKSkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuXG4gICAgY29uZmlybVRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gbmV4dExvY2F0aW9uKSByZXR1cm47IC8vIFRyYW5zaXRpb24gd2FzIGludGVycnVwdGVkLlxuXG4gICAgICBpZiAob2spIHtcbiAgICAgICAgaWYgKGZpbmlzaFRyYW5zaXRpb24obmV4dExvY2F0aW9uKSAhPT0gZmFsc2UpIHVwZGF0ZUxvY2F0aW9uKG5leHRMb2NhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKGxvY2F0aW9uICYmIG5leHRMb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkge1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGxvY2F0aW9uLmtleSk7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSBhbGxLZXlzLmluZGV4T2YobmV4dExvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEgJiYgbmV4dEluZGV4ICE9PSAtMSkgZ28ocHJldkluZGV4IC0gbmV4dEluZGV4KTsgLy8gUmVzdG9yZSB0aGUgVVJMLlxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoKSB7XG4gICAgdHJhbnNpdGlvblRvKGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBfQWN0aW9ucy5QVVNILCBjcmVhdGVLZXkoKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVN0YXRlKHN0YXRlLCBwYXRoKSB7XG4gICAgdHJhbnNpdGlvblRvKGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBfQWN0aW9ucy5SRVBMQUNFLCBjcmVhdGVLZXkoKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gY3JlYXRlUmFuZG9tS2V5KGtleUxlbmd0aCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQYXRoKHBhdGgpIHtcbiAgICBpZiAocGF0aCA9PSBudWxsIHx8IHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcmV0dXJuIHBhdGg7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lO1xuICAgIHZhciBzZWFyY2ggPSBwYXRoLnNlYXJjaDtcbiAgICB2YXIgaGFzaCA9IHBhdGguaGFzaDtcblxuICAgIHZhciByZXN1bHQgPSBwYXRobmFtZTtcblxuICAgIGlmIChzZWFyY2gpIHJlc3VsdCArPSBzZWFyY2g7XG5cbiAgICBpZiAoaGFzaCkgcmVzdWx0ICs9IGhhc2g7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgYWN0aW9uKSB7XG4gICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IGNyZWF0ZUtleSgpIDogYXJndW1lbnRzWzNdO1xuXG4gICAgcmV0dXJuIF9jcmVhdGVMb2NhdGlvbjNbJ2RlZmF1bHQnXShwYXRoLCBzdGF0ZSwgYWN0aW9uLCBrZXkpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xuICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgdXBkYXRlTG9jYXRpb25TdGF0ZShsb2NhdGlvbiwgc3RhdGUpO1xuICAgICAgdXBkYXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVMb2NhdGlvblN0YXRlKGdldEN1cnJlbnRMb2NhdGlvbigpLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb25TdGF0ZShsb2NhdGlvbiwgc3RhdGUpIHtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IF9leHRlbmRzKHt9LCBsb2NhdGlvbi5zdGF0ZSwgc3RhdGUpO1xuICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKHRyYW5zaXRpb25Ib29rcy5pbmRleE9mKGhvb2spID09PSAtMSkgdHJhbnNpdGlvbkhvb2tzLnB1c2goaG9vayk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgdHJhbnNpdGlvbkhvb2tzID0gdHJhbnNpdGlvbkhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgIGxpc3RlbjogbGlzdGVuLFxuICAgIHRyYW5zaXRpb25UbzogdHJhbnNpdGlvblRvLFxuICAgIHB1c2hTdGF0ZTogcHVzaFN0YXRlLFxuICAgIHJlcGxhY2VTdGF0ZTogcmVwbGFjZVN0YXRlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjcmVhdGVLZXk6IGNyZWF0ZUtleSxcbiAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgc2V0U3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10oc2V0U3RhdGUsICdzZXRTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgbG9jYXRpb24ua2V5IHRvIHNhdmUgc3RhdGUgaW5zdGVhZCcpLFxuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3JlZ2lzdGVyVHJhbnNpdGlvbkhvb2sgaXMgZGVwcmVjYXRlZDsgdXNlIGxpc3RlbkJlZm9yZSBpbnN0ZWFkJyksXG4gICAgdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3VucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayBpcyBkZXByZWNhdGVkOyB1c2UgdGhlIGNhbGxiYWNrIHJldHVybmVkIGZyb20gbGlzdGVuQmVmb3JlIGluc3RlYWQnKVxuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVIaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vQWN0aW9uc1wiOjQ5LFwiLi9Bc3luY1V0aWxzXCI6NTAsXCIuL2NyZWF0ZUxvY2F0aW9uXCI6NTgsXCIuL2RlcHJlY2F0ZVwiOjYwLFwiLi9ydW5UcmFuc2l0aW9uSG9va1wiOjY1LFwiZGVlcC1lcXVhbFwiOjE1fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKCkge1xuICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICcvJyA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1sxXTtcbiAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IF9BY3Rpb25zLlBPUCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbM107XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9wYXJzZVBhdGgyWydkZWZhdWx0J10ocGF0aCk7XG5cbiAgdmFyIHBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSBwYXRoLnNlYXJjaCB8fCAnJztcbiAgdmFyIGhhc2ggPSBwYXRoLmhhc2ggfHwgJyc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAga2V5OiBrZXlcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlTG9jYXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9BY3Rpb25zXCI6NDksXCIuL3BhcnNlUGF0aFwiOjY0fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xuXG52YXIgX2NyZWF0ZUhpc3RvcnkgPSByZXF1aXJlKCcuL2NyZWF0ZUhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUhpc3RvcnkpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZVN0b3JhZ2UoZW50cmllcykge1xuICByZXR1cm4gZW50cmllcy5maWx0ZXIoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5LnN0YXRlO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGVudHJ5KSB7XG4gICAgbWVtb1tlbnRyeS5rZXldID0gZW50cnkuc3RhdGU7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7IGVudHJpZXM6IG9wdGlvbnMgfTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0geyBlbnRyaWVzOiBbb3B0aW9uc10gfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICBnZXRDdXJyZW50TG9jYXRpb246IGdldEN1cnJlbnRMb2NhdGlvbixcbiAgICBmaW5pc2hUcmFuc2l0aW9uOiBmaW5pc2hUcmFuc2l0aW9uLFxuICAgIHNhdmVTdGF0ZTogc2F2ZVN0YXRlLFxuICAgIGdvOiBnb1xuICB9KSk7XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucztcbiAgdmFyIGVudHJpZXMgPSBfb3B0aW9ucy5lbnRyaWVzO1xuICB2YXIgY3VycmVudCA9IF9vcHRpb25zLmN1cnJlbnQ7XG5cbiAgaWYgKHR5cGVvZiBlbnRyaWVzID09PSAnc3RyaW5nJykge1xuICAgIGVudHJpZXMgPSBbZW50cmllc107XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZW50cmllcykpIHtcbiAgICBlbnRyaWVzID0gWycvJ107XG4gIH1cblxuICBlbnRyaWVzID0gZW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgdmFyIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG5cbiAgICBpZiAodHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJykgcmV0dXJuIHsgcGF0aG5hbWU6IGVudHJ5LCBrZXk6IGtleSB9O1xuXG4gICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ29iamVjdCcgJiYgZW50cnkpIHJldHVybiBfZXh0ZW5kcyh7fSwgZW50cnksIHsga2V5OiBrZXkgfSk7XG5cbiAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnVW5hYmxlIHRvIGNyZWF0ZSBoaXN0b3J5IGVudHJ5IGZyb20gJXMnLCBlbnRyeSk7XG4gIH0pO1xuXG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICBjdXJyZW50ID0gZW50cmllcy5sZW5ndGggLSAxO1xuICB9IGVsc2Uge1xuICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oY3VycmVudCA+PSAwICYmIGN1cnJlbnQgPCBlbnRyaWVzLmxlbmd0aCwgJ0N1cnJlbnQgaW5kZXggbXVzdCBiZSA+PSAwIGFuZCA8ICVzLCB3YXMgJXMnLCBlbnRyaWVzLmxlbmd0aCwgY3VycmVudCk7XG4gIH1cblxuICB2YXIgc3RvcmFnZSA9IGNyZWF0ZVN0YXRlU3RvcmFnZShlbnRyaWVzKTtcblxuICBmdW5jdGlvbiBzYXZlU3RhdGUoa2V5LCBzdGF0ZSkge1xuICAgIHN0b3JhZ2Vba2V5XSA9IHN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFN0YXRlKGtleSkge1xuICAgIHJldHVybiBzdG9yYWdlW2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tjdXJyZW50XTtcbiAgICB2YXIga2V5ID0gZW50cnkua2V5O1xuICAgIHZhciBiYXNlbmFtZSA9IGVudHJ5LmJhc2VuYW1lO1xuICAgIHZhciBwYXRobmFtZSA9IGVudHJ5LnBhdGhuYW1lO1xuICAgIHZhciBzZWFyY2ggPSBlbnRyeS5zZWFyY2g7XG5cbiAgICB2YXIgcGF0aCA9IChiYXNlbmFtZSB8fCAnJykgKyBwYXRobmFtZSArIChzZWFyY2ggfHwgJycpO1xuXG4gICAgdmFyIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHN0YXRlID0gcmVhZFN0YXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG4gICAgICBlbnRyeS5rZXkgPSBrZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIHVuZGVmaW5lZCwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgaW5kZXggPSBjdXJyZW50ICsgbjtcbiAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IGVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGlmIChuKSB7XG4gICAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKGNhbkdvKG4pLCAnQ2Fubm90IGdvKCVzKSB0aGVyZSBpcyBub3QgZW5vdWdoIGhpc3RvcnknLCBuKTtcblxuICAgICAgY3VycmVudCArPSBuO1xuXG4gICAgICB2YXIgY3VycmVudExvY2F0aW9uID0gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG5cbiAgICAgIC8vIGNoYW5nZSBhY3Rpb24gdG8gUE9QXG4gICAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7IGFjdGlvbjogX0FjdGlvbnMuUE9QIH0pKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hUcmFuc2l0aW9uKGxvY2F0aW9uKSB7XG4gICAgc3dpdGNoIChsb2NhdGlvbi5hY3Rpb24pIHtcbiAgICAgIGNhc2UgX0FjdGlvbnMuUFVTSDpcbiAgICAgICAgY3VycmVudCArPSAxO1xuXG4gICAgICAgIC8vIGlmIHdlIGFyZSBub3Qgb24gdGhlIHRvcCBvZiBzdGFja1xuICAgICAgICAvLyByZW1vdmUgcmVzdCBhbmQgcHVzaCBuZXdcbiAgICAgICAgaWYgKGN1cnJlbnQgPCBlbnRyaWVzLmxlbmd0aCkgZW50cmllcy5zcGxpY2UoY3VycmVudCk7XG5cbiAgICAgICAgZW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgICAgc2F2ZVN0YXRlKGxvY2F0aW9uLmtleSwgbG9jYXRpb24uc3RhdGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgX0FjdGlvbnMuUkVQTEFDRTpcbiAgICAgICAgZW50cmllc1tjdXJyZW50XSA9IGxvY2F0aW9uO1xuICAgICAgICBzYXZlU3RhdGUobG9jYXRpb24ua2V5LCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVNZW1vcnlIaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vQWN0aW9uc1wiOjQ5LFwiLi9jcmVhdGVIaXN0b3J5XCI6NTcsXCJpbnZhcmlhbnRcIjo3M31dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtZXNzYWdlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gJyArIG1lc3NhZ2UpO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBkZXByZWNhdGU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wid2FybmluZ1wiOjI5Nn1dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2RlcHJlY2F0ZSA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlJyk7XG5cbnZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cbnZhciBfdXNlQmVmb3JlVW5sb2FkID0gcmVxdWlyZSgnLi91c2VCZWZvcmVVbmxvYWQnKTtcblxudmFyIF91c2VCZWZvcmVVbmxvYWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlQmVmb3JlVW5sb2FkKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShfdXNlQmVmb3JlVW5sb2FkMlsnZGVmYXVsdCddLCAnZW5hYmxlQmVmb3JlVW5sb2FkIGlzIGRlcHJlY2F0ZWQsIHVzZSB1c2VCZWZvcmVVbmxvYWQgaW5zdGVhZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vZGVwcmVjYXRlXCI6NjAsXCIuL3VzZUJlZm9yZVVubG9hZFwiOjY3fV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfZGVwcmVjYXRlID0gcmVxdWlyZSgnLi9kZXByZWNhdGUnKTtcblxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxudmFyIF91c2VRdWVyaWVzID0gcmVxdWlyZSgnLi91c2VRdWVyaWVzJyk7XG5cbnZhciBfdXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShfdXNlUXVlcmllczJbJ2RlZmF1bHQnXSwgJ2VuYWJsZVF1ZXJpZXMgaXMgZGVwcmVjYXRlZCwgdXNlIHVzZVF1ZXJpZXMgaW5zdGVhZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vZGVwcmVjYXRlXCI6NjAsXCIuL3VzZVF1ZXJpZXNcIjo2OH1dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVCcm93c2VySGlzdG9yeScpO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUJyb3dzZXJIaXN0b3J5KTtcblxuZXhwb3J0cy5jcmVhdGVIaXN0b3J5ID0gX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MlsnZGVmYXVsdCddO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5M1snZGVmYXVsdCddO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IF9jcmVhdGVNZW1vcnlIaXN0b3J5M1snZGVmYXVsdCddO1xuXG52YXIgX2NyZWF0ZUxvY2F0aW9uMiA9IHJlcXVpcmUoJy4vY3JlYXRlTG9jYXRpb24nKTtcblxudmFyIF9jcmVhdGVMb2NhdGlvbjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVMb2NhdGlvbjIpO1xuXG5leHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gX2NyZWF0ZUxvY2F0aW9uM1snZGVmYXVsdCddO1xuXG52YXIgX3VzZUJhc2VuYW1lMiA9IHJlcXVpcmUoJy4vdXNlQmFzZW5hbWUnKTtcblxudmFyIF91c2VCYXNlbmFtZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VCYXNlbmFtZTIpO1xuXG5leHBvcnRzLnVzZUJhc2VuYW1lID0gX3VzZUJhc2VuYW1lM1snZGVmYXVsdCddO1xuXG52YXIgX3VzZUJlZm9yZVVubG9hZDIgPSByZXF1aXJlKCcuL3VzZUJlZm9yZVVubG9hZCcpO1xuXG52YXIgX3VzZUJlZm9yZVVubG9hZDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VCZWZvcmVVbmxvYWQyKTtcblxuZXhwb3J0cy51c2VCZWZvcmVVbmxvYWQgPSBfdXNlQmVmb3JlVW5sb2FkM1snZGVmYXVsdCddO1xuXG52YXIgX3VzZVF1ZXJpZXMyID0gcmVxdWlyZSgnLi91c2VRdWVyaWVzJyk7XG5cbnZhciBfdXNlUXVlcmllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzMik7XG5cbmV4cG9ydHMudXNlUXVlcmllcyA9IF91c2VRdWVyaWVzM1snZGVmYXVsdCddO1xuXG52YXIgX0FjdGlvbnMyID0gcmVxdWlyZSgnLi9BY3Rpb25zJyk7XG5cbnZhciBfQWN0aW9uczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BY3Rpb25zMik7XG5cbmV4cG9ydHMuQWN0aW9ucyA9IF9BY3Rpb25zM1snZGVmYXVsdCddO1xuXG4vLyBkZXByZWNhdGVkXG5cbnZhciBfZW5hYmxlQmVmb3JlVW5sb2FkMiA9IHJlcXVpcmUoJy4vZW5hYmxlQmVmb3JlVW5sb2FkJyk7XG5cbnZhciBfZW5hYmxlQmVmb3JlVW5sb2FkMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuYWJsZUJlZm9yZVVubG9hZDIpO1xuXG5leHBvcnRzLmVuYWJsZUJlZm9yZVVubG9hZCA9IF9lbmFibGVCZWZvcmVVbmxvYWQzWydkZWZhdWx0J107XG5cbnZhciBfZW5hYmxlUXVlcmllczIgPSByZXF1aXJlKCcuL2VuYWJsZVF1ZXJpZXMnKTtcblxudmFyIF9lbmFibGVRdWVyaWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuYWJsZVF1ZXJpZXMyKTtcblxuZXhwb3J0cy5lbmFibGVRdWVyaWVzID0gX2VuYWJsZVF1ZXJpZXMzWydkZWZhdWx0J107XG59LHtcIi4vQWN0aW9uc1wiOjQ5LFwiLi9jcmVhdGVCcm93c2VySGlzdG9yeVwiOjU0LFwiLi9jcmVhdGVIYXNoSGlzdG9yeVwiOjU2LFwiLi9jcmVhdGVMb2NhdGlvblwiOjU4LFwiLi9jcmVhdGVNZW1vcnlIaXN0b3J5XCI6NTksXCIuL2VuYWJsZUJlZm9yZVVubG9hZFwiOjYxLFwiLi9lbmFibGVRdWVyaWVzXCI6NjIsXCIuL3VzZUJhc2VuYW1lXCI6NjYsXCIuL3VzZUJlZm9yZVVubG9hZFwiOjY3LFwiLi91c2VRdWVyaWVzXCI6Njh9XSw2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIGV4dHJhY3RQYXRoKHN0cmluZykge1xuICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goL15odHRwcz86XFwvXFwvW15cXC9dKi8pO1xuXG4gIGlmIChtYXRjaCA9PSBudWxsKSByZXR1cm4gc3RyaW5nO1xuXG4gIF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnQSBwYXRoIG11c3QgYmUgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoIG9ubHksIG5vdCBhIGZ1bGx5IHF1YWxpZmllZCBVUkwgbGlrZSBcIiVzXCInLCBzdHJpbmcpO1xuXG4gIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IGV4dHJhY3RQYXRoKHBhdGgpO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyaW5nKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHJpbmcoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHJpbmcoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgaWYgKHBhdGhuYW1lID09PSAnJykgcGF0aG5hbWUgPSAnLyc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaFxuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBwYXJzZVBhdGg7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wid2FybmluZ1wiOjI5Nn1dLDY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gcnVuVHJhbnNpdGlvbkhvb2soaG9vaywgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBob29rKGxvY2F0aW9uLCBjYWxsYmFjayk7XG5cbiAgaWYgKGhvb2subGVuZ3RoIDwgMikge1xuICAgIC8vIEFzc3VtZSB0aGUgaG9vayBydW5zIHN5bmNocm9ub3VzbHkgYW5kIGF1dG9tYXRpY2FsbHlcbiAgICAvLyBjYWxsIHRoZSBjYWxsYmFjayB3aXRoIHRoZSByZXR1cm4gdmFsdWUuXG4gICAgY2FsbGJhY2socmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShyZXN1bHQgPT09IHVuZGVmaW5lZCwgJ1lvdSBzaG91bGQgbm90IFwicmV0dXJuXCIgaW4gYSB0cmFuc2l0aW9uIGhvb2sgd2l0aCBhIGNhbGxiYWNrIGFyZ3VtZW50OyBjYWxsIHRoZSBjYWxsYmFjayBpbnN0ZWFkJyk7XG4gIH1cbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gcnVuVHJhbnNpdGlvbkhvb2s7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wid2FybmluZ1wiOjI5Nn1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSByZXF1aXJlKCcuL3J1blRyYW5zaXRpb25Ib29rJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbmZ1bmN0aW9uIHVzZUJhc2VuYW1lKGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgIHZhciBiYXNlbmFtZSA9IG9wdGlvbnMuYmFzZW5hbWU7XG5cbiAgICB2YXIgaGlzdG9yeU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydiYXNlbmFtZSddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShoaXN0b3J5T3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBhZGRCYXNlbmFtZShsb2NhdGlvbikge1xuICAgICAgaWYgKGJhc2VuYW1lICYmIGxvY2F0aW9uLmJhc2VuYW1lID09IG51bGwpIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZW5hbWUpID09PSAwKSB7XG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHJpbmcoYmFzZW5hbWUubGVuZ3RoKTtcbiAgICAgICAgICBsb2NhdGlvbi5iYXNlbmFtZSA9IGJhc2VuYW1lO1xuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSAnJykgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uYmFzZW5hbWUgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGVuZEJhc2VuYW1lKHBhdGgpIHtcbiAgICAgIGlmICghYmFzZW5hbWUpIHJldHVybiBwYXRoO1xuXG4gICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcblxuICAgICAgdmFyIHBhdGhuYW1lID0gYmFzZW5hbWUgKyBwYXRoLnBhdGhuYW1lO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHBhdGgsIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBhbGwgcmVhZCBtZXRob2RzIHdpdGggYmFzZW5hbWUtYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbkJlZm9yZShmdW5jdGlvbiAobG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIF9ydW5UcmFuc2l0aW9uSG9vazJbJ2RlZmF1bHQnXShob29rLCBhZGRCYXNlbmFtZShsb2NhdGlvbiksIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBsaXN0ZW5lcihhZGRCYXNlbmFtZShsb2NhdGlvbikpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHdyaXRlIG1ldGhvZHMgd2l0aCBiYXNlbmFtZS1hd2FyZSB2ZXJzaW9ucy5cbiAgICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCBwcmVwZW5kQmFzZW5hbWUocGF0aCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHByZXBlbmRCYXNlbmFtZShwYXRoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVQYXRoKHByZXBlbmRCYXNlbmFtZShwYXRoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVIcmVmKHByZXBlbmRCYXNlbmFtZShwYXRoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gYWRkQmFzZW5hbWUoaGlzdG9yeS5jcmVhdGVMb2NhdGlvbi5hcHBseShoaXN0b3J5LCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgICBwdXNoU3RhdGU6IHB1c2hTdGF0ZSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogcmVwbGFjZVN0YXRlLFxuICAgICAgY3JlYXRlUGF0aDogY3JlYXRlUGF0aCxcbiAgICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb25cbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gdXNlQmFzZW5hbWU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9wYXJzZVBhdGhcIjo2NCxcIi4vcnVuVHJhbnNpdGlvbkhvb2tcIjo2NX1dLDY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxudmFyIF9kZXByZWNhdGUgPSByZXF1aXJlKCcuL2RlcHJlY2F0ZScpO1xuXG52YXIgX2RlcHJlY2F0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGUpO1xuXG5mdW5jdGlvbiBzdGFydEJlZm9yZVVubG9hZExpc3RlbmVyKGdldEJlZm9yZVVubG9hZFByb21wdE1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGdldEJlZm9yZVVubG9hZFByb21wdE1lc3NhZ2UoKTtcblxuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIChldmVudCB8fCB3aW5kb3cuZXZlbnQpLnJldHVyblZhbHVlID0gbWVzc2FnZTtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JlZm9yZXVubG9hZCcsIGxpc3RlbmVyKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ2JlZm9yZXVubG9hZCcsIGxpc3RlbmVyKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNyZWF0ZUhpc3RvcnkgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGVcbiAqIGhpc3Rvcnkgb2JqZWN0cyB0aGF0IGtub3cgaG93IHRvIHVzZSB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IGluIHdlYlxuICogYnJvd3NlcnMgdG8gY2FuY2VsIG5hdmlnYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjcmVhdGVIaXN0b3J5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShvcHRpb25zKTtcblxuICAgIHZhciBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGJlZm9yZVVubG9hZEhvb2tzID0gW107XG5cbiAgICBmdW5jdGlvbiBnZXRCZWZvcmVVbmxvYWRQcm9tcHRNZXNzYWdlKCkge1xuICAgICAgdmFyIG1lc3NhZ2UgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBiZWZvcmVVbmxvYWRIb29rcy5sZW5ndGg7IG1lc3NhZ2UgPT0gbnVsbCAmJiBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgbWVzc2FnZSA9IGJlZm9yZVVubG9hZEhvb2tzW2ldLmNhbGwoKTtcbiAgICAgIH1yZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5CZWZvcmVVbmxvYWQoaG9vaykge1xuICAgICAgYmVmb3JlVW5sb2FkSG9va3MucHVzaChob29rKTtcblxuICAgICAgaWYgKGJlZm9yZVVubG9hZEhvb2tzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAoX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgICAgICAgIHN0b3BCZWZvcmVVbmxvYWRMaXN0ZW5lciA9IHN0YXJ0QmVmb3JlVW5sb2FkTGlzdGVuZXIoZ2V0QmVmb3JlVW5sb2FkUHJvbXB0TWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdsaXN0ZW5CZWZvcmVVbmxvYWQgb25seSB3b3JrcyBpbiBET00gZW52aXJvbm1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlVW5sb2FkSG9va3MgPSBiZWZvcmVVbmxvYWRIb29rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbSAhPT0gaG9vaztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGJlZm9yZVVubG9hZEhvb2tzLmxlbmd0aCA9PT0gMCAmJiBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIpIHtcbiAgICAgICAgICBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIoKTtcbiAgICAgICAgICBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBmdW5jdGlvbiByZWdpc3RlckJlZm9yZVVubG9hZEhvb2soaG9vaykge1xuICAgICAgaWYgKF9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgYmVmb3JlVW5sb2FkSG9va3MuaW5kZXhPZihob29rKSA9PT0gLTEpIHtcbiAgICAgICAgYmVmb3JlVW5sb2FkSG9va3MucHVzaChob29rKTtcblxuICAgICAgICBpZiAoYmVmb3JlVW5sb2FkSG9va3MubGVuZ3RoID09PSAxKSBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIgPSBzdGFydEJlZm9yZVVubG9hZExpc3RlbmVyKGdldEJlZm9yZVVubG9hZFByb21wdE1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBmdW5jdGlvbiB1bnJlZ2lzdGVyQmVmb3JlVW5sb2FkSG9vayhob29rKSB7XG4gICAgICBpZiAoYmVmb3JlVW5sb2FkSG9va3MubGVuZ3RoID4gMCkge1xuICAgICAgICBiZWZvcmVVbmxvYWRIb29rcyA9IGJlZm9yZVVubG9hZEhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYmVmb3JlVW5sb2FkSG9va3MubGVuZ3RoID09PSAwKSBzdG9wQmVmb3JlVW5sb2FkTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZVVubG9hZDogbGlzdGVuQmVmb3JlVW5sb2FkLFxuXG4gICAgICByZWdpc3RlckJlZm9yZVVubG9hZEhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVnaXN0ZXJCZWZvcmVVbmxvYWRIb29rLCAncmVnaXN0ZXJCZWZvcmVVbmxvYWRIb29rIGlzIGRlcHJlY2F0ZWQ7IHVzZSBsaXN0ZW5CZWZvcmVVbmxvYWQgaW5zdGVhZCcpLFxuICAgICAgdW5yZWdpc3RlckJlZm9yZVVubG9hZEhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10odW5yZWdpc3RlckJlZm9yZVVubG9hZEhvb2ssICd1bnJlZ2lzdGVyQmVmb3JlVW5sb2FkSG9vayBpcyBkZXByZWNhdGVkOyB1c2UgdGhlIGNhbGxiYWNrIHJldHVybmVkIGZyb20gbGlzdGVuQmVmb3JlVW5sb2FkIGluc3RlYWQnKVxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB1c2VCZWZvcmVVbmxvYWQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9ET01VdGlsc1wiOjUyLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjUzLFwiLi9kZXByZWNhdGVcIjo2MCxcIndhcm5pbmdcIjoyOTZ9XSw2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgX3FzID0gcmVxdWlyZSgncXMnKTtcblxudmFyIF9xczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xcyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSByZXF1aXJlKCcuL3J1blRyYW5zaXRpb25Ib29rJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG52YXIgX3BhcnNlUGF0aCA9IHJlcXVpcmUoJy4vcGFyc2VQYXRoJyk7XG5cbnZhciBfcGFyc2VQYXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhcnNlUGF0aCk7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdHJpbmdpZnlRdWVyeShxdWVyeSkge1xuICByZXR1cm4gX3FzMlsnZGVmYXVsdCddLnN0cmluZ2lmeShxdWVyeSwgeyBhcnJheUZvcm1hdDogJ2JyYWNrZXRzJyB9KTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpIHtcbiAgcmV0dXJuIF9xczJbJ2RlZmF1bHQnXS5wYXJzZShxdWVyeVN0cmluZyk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjcmVhdGVIaXN0b3J5IGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY3JlYXRlXG4gKiBoaXN0b3J5IG9iamVjdHMgdGhhdCBrbm93IGhvdyB0byBoYW5kbGUgVVJMIHF1ZXJpZXMuXG4gKi9cbmZ1bmN0aW9uIHVzZVF1ZXJpZXMoY3JlYXRlSGlzdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG4gICAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gb3B0aW9ucy5zdHJpbmdpZnlRdWVyeTtcbiAgICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IG9wdGlvbnMucGFyc2VRdWVyeVN0cmluZztcblxuICAgIHZhciBoaXN0b3J5T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ3N0cmluZ2lmeVF1ZXJ5JywgJ3BhcnNlUXVlcnlTdHJpbmcnXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoaGlzdG9yeU9wdGlvbnMpO1xuXG4gICAgaWYgKHR5cGVvZiBzdHJpbmdpZnlRdWVyeSAhPT0gJ2Z1bmN0aW9uJykgc3RyaW5naWZ5UXVlcnkgPSBkZWZhdWx0U3RyaW5naWZ5UXVlcnk7XG5cbiAgICBpZiAodHlwZW9mIHBhcnNlUXVlcnlTdHJpbmcgIT09ICdmdW5jdGlvbicpIHBhcnNlUXVlcnlTdHJpbmcgPSBkZWZhdWx0UGFyc2VRdWVyeVN0cmluZztcblxuICAgIGZ1bmN0aW9uIGFkZFF1ZXJ5KGxvY2F0aW9uKSB7XG4gICAgICBpZiAobG9jYXRpb24ucXVlcnkgPT0gbnVsbCkgbG9jYXRpb24ucXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuXG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwZW5kUXVlcnkocGF0aCwgcXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgIGlmICghcXVlcnkgfHwgKHF1ZXJ5U3RyaW5nID0gc3RyaW5naWZ5UXVlcnkocXVlcnkpKSA9PT0gJycpIHJldHVybiBwYXRoO1xuXG4gICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX3BhcnNlUGF0aDJbJ2RlZmF1bHQnXShwYXRoKTtcblxuICAgICAgdmFyIHNlYXJjaCA9IHBhdGguc2VhcmNoICsgKHBhdGguc2VhcmNoID8gJyYnIDogJz8nKSArIHF1ZXJ5U3RyaW5nO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHBhdGgsIHtcbiAgICAgICAgc2VhcmNoOiBzZWFyY2hcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIGFsbCByZWFkIG1ldGhvZHMgd2l0aCBxdWVyeS1hd2FyZSB2ZXJzaW9ucy5cbiAgICBmdW5jdGlvbiBsaXN0ZW5CZWZvcmUoaG9vaykge1xuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuQmVmb3JlKGZ1bmN0aW9uIChsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKGhvb2ssIGFkZFF1ZXJ5KGxvY2F0aW9uKSwgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGxpc3RlbmVyKGFkZFF1ZXJ5KGxvY2F0aW9uKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBhbGwgd3JpdGUgbWV0aG9kcyB3aXRoIHF1ZXJ5LWF3YXJlIHZlcnNpb25zLlxuICAgIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCwgcXVlcnkpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgYXBwZW5kUXVlcnkocGF0aCwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgsIHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIGFwcGVuZFF1ZXJ5KHBhdGgsIHF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGF0aChwYXRoLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlUGF0aChhcHBlbmRRdWVyeShwYXRoLCBxdWVyeSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCwgcXVlcnkpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUhyZWYoYXBwZW5kUXVlcnkocGF0aCwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBhZGRRdWVyeShoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uLmFwcGx5KGhpc3RvcnksIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuICAgICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgICBsaXN0ZW46IGxpc3RlbixcbiAgICAgIHB1c2hTdGF0ZTogcHVzaFN0YXRlLFxuICAgICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlU3RhdGUsXG4gICAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICAgIGNyZWF0ZUxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvblxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB1c2VRdWVyaWVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vcGFyc2VQYXRoXCI6NjQsXCIuL3J1blRyYW5zaXRpb25Ib29rXCI6NjUsXCJxc1wiOjY5fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gTG9hZCBtb2R1bGVzXG5cbnZhciBTdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIFBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7fTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzdHJpbmdpZnk6IFN0cmluZ2lmeSxcbiAgICBwYXJzZTogUGFyc2Vcbn07XG5cbn0se1wiLi9wYXJzZVwiOjcwLFwiLi9zdHJpbmdpZnlcIjo3MX1dLDcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIExvYWQgbW9kdWxlc1xuXG52YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cblxuLy8gRGVjbGFyZSBpbnRlcm5hbHNcblxudmFyIGludGVybmFscyA9IHtcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBkZXB0aDogNSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZVxufTtcblxuXG5pbnRlcm5hbHMucGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiAoc3RyLCBvcHRpb25zKSB7XG5cbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gcGFydHMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICB2YXIgcG9zID0gcGFydC5pbmRleE9mKCddPScpID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogcGFydC5pbmRleE9mKCddPScpICsgMTtcblxuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAgb2JqW1V0aWxzLmRlY29kZShwYXJ0KV0gPSAnJztcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgb2JqW1V0aWxzLmRlY29kZShwYXJ0KV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGtleSA9IFV0aWxzLmRlY29kZShwYXJ0LnNsaWNlKDAsIHBvcykpO1xuICAgICAgICAgICAgdmFyIHZhbCA9IFV0aWxzLmRlY29kZShwYXJ0LnNsaWNlKHBvcyArIDEpKTtcblxuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IFtdLmNvbmNhdChvYmpba2V5XSkuY29uY2F0KHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxuXG5pbnRlcm5hbHMucGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucykge1xuXG4gICAgaWYgKCFjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICB2YXIgcm9vdCA9IGNoYWluLnNoaWZ0KCk7XG5cbiAgICB2YXIgb2JqO1xuICAgIGlmIChyb290ID09PSAnW10nKSB7XG4gICAgICAgIG9iaiA9IFtdO1xuICAgICAgICBvYmogPSBvYmouY29uY2F0KGludGVybmFscy5wYXJzZU9iamVjdChjaGFpbiwgdmFsLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3RbMF0gPT09ICdbJyAmJiByb290W3Jvb3QubGVuZ3RoIC0gMV0gPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgcm9vdC5sZW5ndGggLSAxKSA6IHJvb3Q7XG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICB2YXIgaW5kZXhTdHJpbmcgPSAnJyArIGluZGV4O1xuICAgICAgICBpZiAoIWlzTmFOKGluZGV4KSAmJlxuICAgICAgICAgICAgcm9vdCAhPT0gY2xlYW5Sb290ICYmXG4gICAgICAgICAgICBpbmRleFN0cmluZyA9PT0gY2xlYW5Sb290ICYmXG4gICAgICAgICAgICBpbmRleCA+PSAwICYmXG4gICAgICAgICAgICAob3B0aW9ucy5wYXJzZUFycmF5cyAmJlxuICAgICAgICAgICAgIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdCkpIHtcblxuICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICBvYmpbaW5kZXhdID0gaW50ZXJuYWxzLnBhcnNlT2JqZWN0KGNoYWluLCB2YWwsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBpbnRlcm5hbHMucGFyc2VPYmplY3QoY2hhaW4sIHZhbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxuXG5pbnRlcm5hbHMucGFyc2VLZXlzID0gZnVuY3Rpb24gKGtleSwgdmFsLCBvcHRpb25zKSB7XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd0RvdHMpIHtcbiAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1xcLihbXlxcLlxcW10rKS9nLCAnWyQxXScpO1xuICAgIH1cblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBwYXJlbnQgPSAvXihbXlxcW1xcXV0qKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXlxcW1xcXV0qXFxdKS9nO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJlbnRcblxuICAgIHZhciBzZWdtZW50ID0gcGFyZW50LmV4ZWMoa2V5KTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChzZWdtZW50WzFdKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzXG4gICAgICAgIC8vIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KHNlZ21lbnRbMV0pKSB7XG5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuXG4gICAgICAgICsraTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJlxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShzZWdtZW50WzFdLnJlcGxhY2UoL1xcW3xcXF0vZywgJycpKSkge1xuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcm5hbHMucGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRpb25zKSB7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgVXRpbHMuaXNSZWdFeHAob3B0aW9ucy5kZWxpbWl0ZXIpID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBpbnRlcm5hbHMuZGVsaW1pdGVyO1xuICAgIG9wdGlvbnMuZGVwdGggPSB0eXBlb2Ygb3B0aW9ucy5kZXB0aCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmRlcHRoIDogaW50ZXJuYWxzLmRlcHRoO1xuICAgIG9wdGlvbnMuYXJyYXlMaW1pdCA9IHR5cGVvZiBvcHRpb25zLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5hcnJheUxpbWl0IDogaW50ZXJuYWxzLmFycmF5TGltaXQ7XG4gICAgb3B0aW9ucy5wYXJzZUFycmF5cyA9IG9wdGlvbnMucGFyc2VBcnJheXMgIT09IGZhbHNlO1xuICAgIG9wdGlvbnMuYWxsb3dEb3RzID0gb3B0aW9ucy5hbGxvd0RvdHMgIT09IGZhbHNlO1xuICAgIG9wdGlvbnMucGxhaW5PYmplY3RzID0gdHlwZW9mIG9wdGlvbnMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnBsYWluT2JqZWN0cyA6IGludGVybmFscy5wbGFpbk9iamVjdHM7XG4gICAgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPSB0eXBlb2Ygb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzIDogaW50ZXJuYWxzLmFsbG93UHJvdG90eXBlcztcbiAgICBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID0gdHlwZW9mIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA6IGludGVybmFscy5wYXJhbWV0ZXJMaW1pdDtcbiAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA9IHR5cGVvZiBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBpbnRlcm5hbHMuc3RyaWN0TnVsbEhhbmRsaW5nO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHxcbiAgICAgICAgc3RyID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBpbnRlcm5hbHMucGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IGludGVybmFscy5wYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMpO1xuICAgICAgICBvYmogPSBVdGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG5cbn0se1wiLi91dGlsc1wiOjcyfV0sNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gTG9hZCBtb2R1bGVzXG5cbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuXG4vLyBEZWNsYXJlIGludGVybmFsc1xuXG52YXIgaW50ZXJuYWxzID0ge1xuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGFycmF5UHJlZml4R2VuZXJhdG9yczoge1xuICAgICAgICBicmFja2V0czogZnVuY3Rpb24gKHByZWZpeCwga2V5KSB7XG5cbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgICAgICB9LFxuICAgICAgICBpbmRpY2VzOiBmdW5jdGlvbiAocHJlZml4LCBrZXkpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICAgICAgfSxcbiAgICAgICAgcmVwZWF0OiBmdW5jdGlvbiAocHJlZml4LCBrZXkpIHtcblxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxuXG5pbnRlcm5hbHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaiwgcHJlZml4LCBnZW5lcmF0ZUFycmF5UHJlZml4LCBzdHJpY3ROdWxsSGFuZGxpbmcsIGZpbHRlcikge1xuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoVXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBvYmogPSBvYmoudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBvYmoudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5lbmNvZGUocHJlZml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcblxuICAgICAgICByZXR1cm4gW1V0aWxzLmVuY29kZShwcmVmaXgpICsgJz0nICsgVXRpbHMuZW5jb2RlKG9iaildO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBvYmpLZXlzID0gQXJyYXkuaXNBcnJheShmaWx0ZXIpID8gZmlsdGVyIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmpLZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChpbnRlcm5hbHMuc3RyaW5naWZ5KG9ialtrZXldLCBnZW5lcmF0ZUFycmF5UHJlZml4KHByZWZpeCwga2V5KSwgZ2VuZXJhdGVBcnJheVByZWZpeCwgc3RyaWN0TnVsbEhhbmRsaW5nLCBmaWx0ZXIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoaW50ZXJuYWxzLnN0cmluZ2lmeShvYmpba2V5XSwgcHJlZml4ICsgJ1snICsga2V5ICsgJ10nLCBnZW5lcmF0ZUFycmF5UHJlZml4LCBzdHJpY3ROdWxsSGFuZGxpbmcsIGZpbHRlcikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBvcHRpb25zKSB7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgZGVsaW1pdGVyID0gdHlwZW9mIG9wdGlvbnMuZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/IGludGVybmFscy5kZWxpbWl0ZXIgOiBvcHRpb25zLmRlbGltaXRlcjtcbiAgICB2YXIgc3RyaWN0TnVsbEhhbmRsaW5nID0gdHlwZW9mIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA6IGludGVybmFscy5zdHJpY3ROdWxsSGFuZGxpbmc7XG4gICAgdmFyIG9iaktleXM7XG4gICAgdmFyIGZpbHRlcjtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8XG4gICAgICAgIG9iaiA9PT0gbnVsbCkge1xuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdGlvbnMuYXJyYXlGb3JtYXQgaW4gaW50ZXJuYWxzLmFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdGlvbnMuYXJyYXlGb3JtYXQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKCdpbmRpY2VzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0aW9ucy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGludGVybmFscy5hcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmpLZXlzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG4gICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChpbnRlcm5hbHMuc3RyaW5naWZ5KG9ialtrZXldLCBrZXksIGdlbmVyYXRlQXJyYXlQcmVmaXgsIHN0cmljdE51bGxIYW5kbGluZywgZmlsdGVyKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXMuam9pbihkZWxpbWl0ZXIpO1xufTtcblxufSx7XCIuL3V0aWxzXCI6NzJ9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBMb2FkIG1vZHVsZXNcblxuXG4vLyBEZWNsYXJlIGludGVybmFsc1xuXG52YXIgaW50ZXJuYWxzID0ge307XG5pbnRlcm5hbHMuaGV4VGFibGUgPSBuZXcgQXJyYXkoMjU2KTtcbmZvciAodmFyIGggPSAwOyBoIDwgMjU2OyArK2gpIHtcbiAgICBpbnRlcm5hbHMuaGV4VGFibGVbaF0gPSAnJScgKyAoKGggPCAxNiA/ICcwJyA6ICcnKSArIGgudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpO1xufVxuXG5cbmV4cG9ydHMuYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIChzb3VyY2UsIG9wdGlvbnMpIHtcblxuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcblxuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0ID0gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRhcmdldCA9IFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiZcbiAgICAgICAgIUFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuXG4gICAgICAgIHRhcmdldCA9IGV4cG9ydHMuYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBmb3IgKHZhciBrID0gMCwga2wgPSBrZXlzLmxlbmd0aDsgayA8IGtsOyArK2spIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNba107XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gZXhwb3J0cy5tZXJnZSh0YXJnZXRba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0ci5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbn07XG5cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xuXG4gICAgLy8gVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4gYnkgQnJpYW4gV2hpdGUgKG1zY2RleCkgZm9yIHRoZSBpby5qcyBjb3JlIHF1ZXJ5c3RyaW5nIGxpYnJhcnkuXG4gICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHIgPSAnJyArIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc3RyLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoYyA9PT0gMHgyRCB8fCAvLyAtXG4gICAgICAgICAgICBjID09PSAweDJFIHx8IC8vIC5cbiAgICAgICAgICAgIGMgPT09IDB4NUYgfHwgLy8gX1xuICAgICAgICAgICAgYyA9PT0gMHg3RSB8fCAvLyB+XG4gICAgICAgICAgICAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgfHwgLy8gMC05XG4gICAgICAgICAgICAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgfHwgLy8gYS16XG4gICAgICAgICAgICAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkpIHsgLy8gQS1aXG5cbiAgICAgICAgICAgIG91dCArPSBzdHJbaV07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ICs9IGludGVybmFscy5oZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ICs9IGludGVybmFscy5oZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaW50ZXJuYWxzLmhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCArPSBpbnRlcm5hbHMuaGV4VGFibGVbMHhFMCB8IChjID4+IDEyKV0gKyBpbnRlcm5hbHMuaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGludGVybmFscy5oZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICsraTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIG91dCArPSBpbnRlcm5hbHMuaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV0gKyBpbnRlcm5hbHMuaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV0gKyBpbnRlcm5hbHMuaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGludGVybmFscy5oZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbmV4cG9ydHMuY29tcGFjdCA9IGZ1bmN0aW9uIChvYmosIHJlZnMpIHtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmogPT09IG51bGwpIHtcblxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJlZnMgPSByZWZzIHx8IFtdO1xuICAgIHZhciBsb29rdXAgPSByZWZzLmluZGV4T2Yob2JqKTtcbiAgICBpZiAobG9va3VwICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gcmVmc1tsb29rdXBdO1xuICAgIH1cblxuICAgIHJlZnMucHVzaChvYmopO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICB2YXIgY29tcGFjdGVkID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gb2JqLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbXBhY3RlZC5wdXNoKG9ialtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcGFjdGVkO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgb2JqW2tleV0gPSBleHBvcnRzLmNvbXBhY3Qob2JqW2tleV0sIHJlZnMpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmV4cG9ydHMuaXNSZWdFeHAgPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxuXG5leHBvcnRzLmlzQnVmZmVyID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAgIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJlxuICAgICAgICAgICAgICBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG59LHt9XSw3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGludmFyaWFudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxMTR9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMS40XG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0wNC0yOFQxNjowMVpcbiAqL1xuXG4oZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDE4K1xuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxuLy8gdGhlIHN0YWNrIHZpYSBhcmd1bWVudHMuY2FsbGVyLmNhbGxlZSBhbmQgRmlyZWZveCBkaWVzIGlmXG4vLyB5b3UgdHJ5IHRvIHRyYWNlIHRocm91Z2ggXCJ1c2Ugc3RyaWN0XCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpXG4vL1xuXG52YXIgYXJyID0gW107XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxudmFyXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cblx0dmVyc2lvbiA9IFwiMi4xLjRcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xXG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9KSk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKHRhcmdldCkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAob3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdKSAhPSBudWxsICkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoY29weSkpICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKG9iaikgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIE5vdCBwbGFpbiBvYmplY3RzOlxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcblx0XHQvLyAtIERPTSBub2Rlc1xuXHRcdC8vIC0gd2luZG93XG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZSBmdW5jdGlvbiBoYXNuJ3QgcmV0dXJuZWQgYWxyZWFkeSwgd2UncmUgY29uZmlkZW50IHRoYXRcblx0XHQvLyB8b2JqfCBpcyBhIHBsYWluIG9iamVjdCwgY3JlYXRlZCBieSB7fSBvciBjb25zdHJ1Y3RlZCB3aXRoIG5ldyBPYmplY3Rcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjAsIGlPUzw2IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwob2JqKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cdFx0XHQvLyBJZiB0aGUgY29kZSBpbmNsdWRlcyBhIHZhbGlkLCBwcm9sb2d1ZSBwb3NpdGlvblxuXHRcdFx0Ly8gc3RyaWN0IG1vZGUgcHJhZ21hLCBleGVjdXRlIGNvZGUgYnkgaW5qZWN0aW5nIGFcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpZiAoIGNvZGUuaW5kZXhPZihcInVzZSBzdHJpY3RcIikgPT09IDEgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBhdm9pZCB0aGUgRE9NIG5vZGUgY3JlYXRpb24sIGluc2VydGlvblxuXHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblx0XHRcdFx0aW5kaXJlY3QoIGNvZGUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdG5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSxcblxuXHQvLyBhcmdzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrLCBhcmdzICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0XHRcdGlzQXJyYXkgPSBpc0FycmF5bGlrZSggb2JqICk7XG5cblx0XHRpZiAoIGFyZ3MgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suYXBwbHkoIG9ialsgaSBdLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBIHNwZWNpYWwsIGZhc3QsIGNhc2UgZm9yIHRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgZWFjaFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGlzQXJyYXkgKSB7XG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdHZhbHVlID0gY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICk7XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5bGlrZSggT2JqZWN0KGFycikgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0pO1xuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvclwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG5mdW5jdGlvbiBpc0FycmF5bGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMi4wLXByZVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTEyLTE2XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIFdoaXRlc3BhY2UgY2hhcmFjdGVycyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXN5bnRheC8jY2hhcmFjdGVyc1xuXHRjaGFyYWN0ZXJFbmNvZGluZyA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFxcXHgwMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gTG9vc2VseSBtb2RlbGVkIG9uIENTUyBpZGVudGlmaWVyIGNoYXJhY3RlcnNcblx0Ly8gQW4gdW5xdW90ZWQgdmFsdWUgc2hvdWxkIGJlIGEgQ1NTIGlkZW50aWZpZXIgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0Ly8gUHJvcGVyIHN5bnRheDogaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3I1wiICksXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG5cdFx0Ly8gUVNBIHZhcnNcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cdG5vZGVUeXBlID0gY29udGV4dC5ub2RlVHlwZTtcblxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdGlmICggIXNlZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIHdoZW4gcG9zc2libGUgKGUuZy4sIG5vdCB1bmRlciBEb2N1bWVudEZyYWdtZW50KVxuXHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiI0lEXCIpXG5cdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICk7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50IChqUXVlcnkgIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSwgT3BlcmEsIGFuZCBXZWJraXQgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQ29udGV4dCBpcyBub3QgYSBkb2N1bWVudFxuXHRcdFx0XHRcdGlmICggY29udGV4dC5vd25lckRvY3VtZW50ICYmIChlbGVtID0gY29udGV4dC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiVEFHXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIi5DTEFTU1wiKVxuXHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBRU0EgcGF0aFxuXHRcdGlmICggc3VwcG9ydC5xc2EgJiYgKCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblx0XHRcdG5pZCA9IG9sZCA9IGV4cGFuZG87XG5cdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdG5ld1NlbGVjdG9yID0gbm9kZVR5cGUgIT09IDEgJiYgc2VsZWN0b3I7XG5cblx0XHRcdC8vIHFTQSB3b3JrcyBzdHJhbmdlbHkgb24gRWxlbWVudC1yb290ZWQgcXVlcmllc1xuXHRcdFx0Ly8gV2UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgYnkgc3BlY2lmeWluZyBhbiBleHRyYSBJRCBvbiB0aGUgcm9vdFxuXHRcdFx0Ly8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXG5cdFx0XHQvLyBJRSA4IGRvZXNuJ3Qgd29yayBvbiBvYmplY3QgZWxlbWVudHNcblx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblxuXHRcdFx0XHRpZiAoIChvbGQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKSApIHtcblx0XHRcdFx0XHRuaWQgPSBvbGQucmVwbGFjZSggcmVzY2FwZSwgXCJcXFxcJCZcIiApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIG5pZCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5pZCA9IFwiW2lkPSdcIiArIG5pZCArIFwiJ10gXCI7XG5cblx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZCArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0O1xuXHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKFwiLFwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaChxc2FFcnJvcikge1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggIW9sZCApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtGdW5jdGlvbihzdHJpbmcsIE9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGF0dHJzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHQoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC1cblx0XHRcdCggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHBhcmVudCxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0Ly8gU3VwcG9ydDogSUU+OFxuXHQvLyBJZiBpZnJhbWUgZG9jdW1lbnQgaXMgYXNzaWduZWQgdG8gXCJkb2N1bWVudFwiIHZhcmlhYmxlIGFuZCBpZiBpZnJhbWUgaGFzIGJlZW4gcmVsb2FkZWQsXG5cdC8vIElFIHdpbGwgdGhyb3cgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gYWNjZXNzaW5nIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSwgc2VlIGpRdWVyeSAjMTM5MzZcblx0Ly8gSUU2LTggZG8gbm90IHN1cHBvcnQgdGhlIGRlZmF1bHRWaWV3IHByb3BlcnR5IHNvIHBhcmVudCB3aWxsIGJlIHVuZGVmaW5lZFxuXHRpZiAoIHBhcmVudCAmJiBwYXJlbnQgIT09IHBhcmVudC50b3AgKSB7XG5cdFx0Ly8gSUUxMSBkb2VzIG5vdCBoYXZlIGF0dGFjaEV2ZW50LCBzbyBhbGwgbXVzdCBzdWZmZXJcblx0XHRpZiAoIHBhcmVudC5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0cGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBTdXBwb3J0IHRlc3RzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvYy5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmluZCBhbmQgZmlsdGVyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjIrLCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuNytcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2MuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IGRvZXMgbm90IGltcGxlbWVudCBpbmNsdXNpdmUgZGVzY2VuZGVudFxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2MgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2MgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jO1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBkaWZmLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6IG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IHBhcmVudFsgZXhwYW5kbyBdIHx8IChwYXJlbnRbIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWzBdID09PSBkaXJydW5zICYmIGNhY2hlWzFdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMl07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdXNlQ2FjaGUgJiYgKGNhY2hlID0gKGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdKSAmJiBjYWNoZVswXSA9PT0gZGlycnVucyApIHtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IGNhY2hlWzFdO1xuXG5cdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApICYmICsrZGlmZiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdChub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KSlbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZGl2MSApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0ZGl2LmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0cmV0dXJuIGRpdi5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xualF1ZXJ5LmV4cHJbXCI6XCJdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5cblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoL148KFxcdyspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9KTtcblxuXHR9XG5cblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdFx0fVxuXG5cdFx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+PSAwICkgIT09IG5vdDtcblx0fSk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0pKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pICk7XG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSAkKCBzZWxlY3RvciwgY29udGV4dCApIGJlY29tZXMgJCggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yIClcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XG5cdFx0cmV0LnNlbGVjdG9yID0gdGhpcy5zZWxlY3RvciA/IHRoaXMuc2VsZWN0b3IgKyBcIiBcIiArIHNlbGVjdG9yIDogc2VsZWN0b3I7XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyh0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59KTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbMF0gPT09IFwiPFwiICYmIHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmIHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKG1hdGNoWzFdIHx8ICFjb250ZXh0KSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsxXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbMF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQmxhY2tiZXJyeSA0LjZcblx0XHRcdFx0XHQvLyBnRUJJRCByZXR1cm5zIG5vZGVzIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKCM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdFx0dGhpc1swXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290alF1ZXJ5ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIHJvb3RqUXVlcnkucmVhZHkgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0XHRyb290alF1ZXJ5LnJlYWR5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3Rvci5zZWxlY3RvciAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gc2VsZWN0b3IuY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0ZGlyOiBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fSxcblxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1tpXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9ycywgY29udGV4dCB8fCB0aGlzLmNvbnRleHQgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRmb3IgKCBjdXIgPSB0aGlzW2ldOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KGN1cikgPiAtMSA6XG5cblx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvcihjdXIsIHNlbGVjdG9ycykpICkge1xuXG5cdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZSggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlKFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpXG5cdFx0KTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoIChjdXIgPSBjdXJbZGlyXSkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59KTtcbnZhciBybm90d2hpdGUgPSAoL1xcUysvZyk7XG5cblxuXG4vLyBTdHJpbmcgdG8gT2JqZWN0IG9wdGlvbnMgZm9ybWF0IGNhY2hlXG52YXIgb3B0aW9uc0NhY2hlID0ge307XG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzIGFuZCBzdG9yZSBpbiBjYWNoZVxuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9KTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHQoIG9wdGlvbnNDYWNoZVsgb3B0aW9ucyBdIHx8IGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXG5cdFx0bWVtb3J5LFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblx0XHQvLyBGaXJzdCBjYWxsYmFjayB0byBmaXJlICh1c2VkIGludGVybmFsbHkgYnkgYWRkIGFuZCBmaXJlV2l0aClcblx0XHRmaXJpbmdTdGFydCxcblx0XHQvLyBFbmQgb2YgdGhlIGxvb3Agd2hlbiBmaXJpbmdcblx0XHRmaXJpbmdMZW5ndGgsXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgcmVtb3ZlIGlmIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCxcblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblx0XHQvLyBTdGFjayBvZiBmaXJlIGNhbGxzIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0c3RhY2sgPSAhb3B0aW9ucy5vbmNlICYmIFtdLFxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdFx0bWVtb3J5ID0gb3B0aW9ucy5tZW1vcnkgJiYgZGF0YTtcblx0XHRcdGZpcmVkID0gdHJ1ZTtcblx0XHRcdGZpcmluZ0luZGV4ID0gZmlyaW5nU3RhcnQgfHwgMDtcblx0XHRcdGZpcmluZ1N0YXJ0ID0gMDtcblx0XHRcdGZpcmluZ0xlbmd0aCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0ZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgbGlzdCAmJiBmaXJpbmdJbmRleCA8IGZpcmluZ0xlbmd0aDsgZmlyaW5nSW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBkYXRhWyAwIF0sIGRhdGFbIDEgXSApID09PSBmYWxzZSAmJiBvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlOyAvLyBUbyBwcmV2ZW50IGZ1cnRoZXIgY2FsbHMgdXNpbmcgYWRkXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRpZiAoIHN0YWNrICkge1xuXHRcdFx0XHRcdGlmICggc3RhY2subGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0ZmlyZSggc3RhY2suc2hpZnQoKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdC8vIEZpcnN0LCB3ZSBzYXZlIHRoZSBjdXJyZW50IGxlbmd0aFxuXHRcdFx0XHRcdHZhciBzdGFydCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdChmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggYXJnICk7XG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSkoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdC8vIERvIHdlIG5lZWQgdG8gYWRkIHRoZSBjYWxsYmFja3MgdG8gdGhlXG5cdFx0XHRcdFx0Ly8gY3VycmVudCBmaXJpbmcgYmF0Y2g/XG5cdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQvLyBXaXRoIG1lbW9yeSwgaWYgd2UncmUgbm90IGZpcmluZyB0aGVuXG5cdFx0XHRcdFx0Ly8gd2Ugc2hvdWxkIGNhbGwgcmlnaHQgYXdheVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRcdGZpcmluZ1N0YXJ0ID0gc3RhcnQ7XG5cdFx0XHRcdFx0XHRmaXJlKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0xlbmd0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0xlbmd0aC0tO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID8galF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6ICEhKCBsaXN0ICYmIGxpc3QubGVuZ3RoICk7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdGZpcmluZ0xlbmd0aCA9IDA7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIEhhdmUgdGhlIGxpc3QgZG8gbm90aGluZyBhbnltb3JlXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IHN0YWNrID0gbWVtb3J5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBkaXNhYmxlZD9cblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblx0XHRcdC8vIExvY2sgdGhlIGxpc3QgaW4gaXRzIGN1cnJlbnQgc3RhdGVcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdGFjayA9IHVuZGVmaW5lZDtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICkge1xuXHRcdFx0XHRcdHNlbGYuZGlzYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIElzIGl0IGxvY2tlZD9cblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhc3RhY2s7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoIGxpc3QgJiYgKCAhZmlyZWQgfHwgc3RhY2sgKSApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0c3RhY2sucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaXJlKCBhcmdzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGxpc3RlbmVyIGxpc3QsIGZpbmFsIHN0YXRlXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWRbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSBmb3IgZm9yd2FyZGluZyBhY3Rpb25zIHRvIG5ld0RlZmVyXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsxXSBdKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBwcm9taXNlID8gbmV3RGVmZXIucHJvbWlzZSgpIDogdGhpcywgZm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0pLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyAzIF07XG5cblx0XHRcdC8vIHByb21pc2VbIGRvbmUgfCBmYWlsIHwgcHJvZ3Jlc3MgXSA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsxXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxuXHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xuXHRcdFx0XHR9LCB0dXBsZXNbIGkgXiAxIF1bIDIgXS5kaXNhYmxlLCB0dXBsZXNbIDIgXVsgMiBdLmxvY2sgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGVmZXJyZWRbIHJlc29sdmUgfCByZWplY3QgfCBub3RpZnkgXVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWzBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyBwcm9taXNlIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0pO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcblxuXHRcdFx0Ly8gdGhlIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8ICggc3Vib3JkaW5hdGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHN1Ym9yZGluYXRlLnByb21pc2UgKSApID8gbGVuZ3RoIDogMCxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC4gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LmRvbmUoIHVwZGF0ZUZ1bmMoIGksIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0pO1xuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdDtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoe1xuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG4gKi9cbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cdGlmICggIXJlYWR5TGlzdCApIHtcblxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5cdFx0Ly8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWQgYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG5cdFx0Ly8gV2Ugb25jZSB0cmllZCB0byB1c2UgcmVhZHlTdGF0ZSBcImludGVyYWN0aXZlXCIgaGVyZSwgYnV0IGl0IGNhdXNlZCBpc3N1ZXMgbGlrZSB0aGUgb25lXG5cdFx0Ly8gZGlzY292ZXJlZCBieSBDaHJpc1MgaGVyZTogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIyODIjY29tbWVudDoxNVxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdFx0XHRzZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlYWR5TGlzdC5wcm9taXNlKCBvYmogKTtcbn07XG5cbi8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdFxualF1ZXJ5LnJlYWR5LnByb21pc2UoKTtcblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NCxcblx0Ly8gT2xkIFdlYktpdCBkb2VzIG5vdCBoYXZlIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucy9mcmVlemUgbWV0aG9kLFxuXHQvLyByZXR1cm4gbmV3IGVtcHR5IG9iamVjdCBpbnN0ZWFkIHdpdGggbm8gW1tzZXRdXSBhY2Nlc3NvclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMuY2FjaGUgPSB7fSwgMCwge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXHR9KTtcblxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcbkRhdGEuYWNjZXB0cyA9IGpRdWVyeS5hY2NlcHREYXRhO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblx0a2V5OiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHQvLyBBbHdheXMgcmV0dXJuIHRoZSBrZXkgZm9yIGEgZnJvemVuIG9iamVjdC5cblx0XHRpZiAoICFEYXRhLmFjY2VwdHMoIG93bmVyICkgKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IHt9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlIGtleVxuXHRcdFx0dW5sb2NrID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdW5sb2NrICkge1xuXHRcdFx0dW5sb2NrID0gRGF0YS51aWQrKztcblxuXHRcdFx0Ly8gU2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSBwcm9wZXJ0eVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB7IHZhbHVlOiB1bmxvY2sgfTtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NFxuXHRcdFx0Ly8gRmFsbGJhY2sgdG8gYSBsZXNzIHNlY3VyZSBkZWZpbml0aW9uXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0ZGVzY3JpcHRvclsgdGhpcy5leHBhbmRvIF0gPSB1bmxvY2s7XG5cdFx0XHRcdGpRdWVyeS5leHRlbmQoIG93bmVyLCBkZXNjcmlwdG9yICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRpZiAoICF0aGlzLmNhY2hlWyB1bmxvY2sgXSApIHtcblx0XHRcdHRoaXMuY2FjaGVbIHVubG9jayBdID0ge307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVubG9jaztcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Ly8gVGhlcmUgbWF5IGJlIGFuIHVubG9jayBhc3NpZ25lZCB0byB0aGlzIG5vZGUsXG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBlbnRyeSBmb3IgdGhpcyBcIm93bmVyXCIsIGNyZWF0ZSBvbmUgaW5saW5lXG5cdFx0XHQvLyBhbmQgc2V0IHRoZSB1bmxvY2sgYXMgdGhvdWdoIGFuIG93bmVyIGVudHJ5IGhhZCBhbHdheXMgZXhpc3RlZFxuXHRcdFx0dW5sb2NrID0gdGhpcy5rZXkoIG93bmVyICksXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGVbIHVubG9jayBdO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgZGF0YSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBGcmVzaCBhc3NpZ25tZW50cyBieSBvYmplY3QgYXJlIHNoYWxsb3cgY29waWVkXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLmNhY2hlWyB1bmxvY2sgXSwgZGF0YSApO1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdC8vIEVpdGhlciBhIHZhbGlkIGNhY2hlIGlzIGZvdW5kLCBvciB3aWxsIGJlIGNyZWF0ZWQuXG5cdFx0Ly8gTmV3IGNhY2hlcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIHRoZSB1bmxvY2sgcmV0dXJuZWQsXG5cdFx0Ly8gYWxsb3dpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgbmV3bHkgY3JlYXRlZFxuXHRcdC8vIGVtcHR5IGRhdGEgb2JqZWN0LiBBIHZhbGlkIG93bmVyIG9iamVjdCBtdXN0IGJlIHByb3ZpZGVkLlxuXHRcdHZhciBjYWNoZSA9IHRoaXMuY2FjaGVbIHRoaXMua2V5KCBvd25lciApIF07XG5cblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0Y2FjaGUgOiBjYWNoZVsga2V5IF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBzdG9yZWQ7XG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KChrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgKSB7XG5cblx0XHRcdHN0b3JlZCA9IHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHN0b3JlZCA6IHRoaXMuZ2V0KCBvd25lciwgalF1ZXJ5LmNhbWVsQ2FzZShrZXkpICk7XG5cdFx0fVxuXG5cdFx0Ly8gWypdV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdHVubG9jayA9IHRoaXMua2V5KCBvd25lciApLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlWyB1bmxvY2sgXTtcblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLmNhY2hlWyB1bmxvY2sgXSA9IHt9O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBrZXkgKSApIHtcblx0XHRcdFx0Ly8gSWYgXCJuYW1lXCIgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxuXHRcdFx0XHQvLyBrZXlzIHdpbGwgYmUgY29udmVydGVkIHRvIGNhbWVsQ2FzZS5cblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIHRlbGwgX2hvd18gYSBrZXkgd2FzIGFkZGVkLCByZW1vdmVcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxuXHRcdFx0XHQvLyBUaGlzIHdpbGwgb25seSBwZW5hbGl6ZSB0aGUgYXJyYXkgYXJndW1lbnQgcGF0aC5cblx0XHRcdFx0bmFtZSA9IGtleS5jb25jYXQoIGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FtZWwgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcblx0XHRcdFx0XHRuYW1lID0gbmFtZSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0XHRbIG5hbWUgXSA6ICggbmFtZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBuYW1lWyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KFxuXHRcdFx0dGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF0gfHwge31cblx0XHQpO1xuXHR9LFxuXHRkaXNjYXJkOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0aWYgKCBvd25lclsgdGhpcy5leHBhbmRvIF0gKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5jYWNoZVsgb3duZXJbIHRoaXMuZXhwYW5kbyBdIF07XG5cdFx0fVxuXHR9XG59O1xudmFyIGRhdGFfcHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhX3VzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gLyhbQS1aXSkvZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQxXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdFx0XHRcdFx0K2RhdGEgKyBcIlwiID09PSBkYXRhID8gK2RhdGEgOlxuXHRcdFx0XHRcdHJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOlxuXHRcdFx0XHRcdGRhdGE7XG5cdFx0XHR9IGNhdGNoKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhX3VzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YV91c2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhX3ByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3VzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YV91c2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFfcHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoNSkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YV91c2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YSxcblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBhcy1pc1xuXHRcdFx0XHRkYXRhID0gZGF0YV91c2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgY2FtZWxpemVkXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3VzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBjYW1lbEtleSwgdW5kZWZpbmVkICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBGaXJzdCwgYXR0ZW1wdCB0byBzdG9yZSBhIGNvcHkgb3IgcmVmZXJlbmNlIG9mIGFueVxuXHRcdFx0XHQvLyBkYXRhIHRoYXQgbWlnaHQndmUgYmVlbiBzdG9yZSB3aXRoIGEgY2FtZWxDYXNlZCBrZXkuXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YV91c2VyLmdldCggdGhpcywgY2FtZWxLZXkgKTtcblxuXHRcdFx0XHQvLyBGb3IgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZSBpbnRlcm9wLCB3ZSBoYXZlIHRvXG5cdFx0XHRcdC8vIHN0b3JlIHByb3BlcnR5IG5hbWVzIHdpdGggZGFzaGVzIGluIGEgY2FtZWxDYXNlIGZvcm0uXG5cdFx0XHRcdC8vIFRoaXMgbWlnaHQgbm90IGFwcGx5IHRvIGFsbCBwcm9wZXJ0aWVzLi4uKlxuXHRcdFx0XHRkYXRhX3VzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKFwiLVwiKSAhPT0gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFfdXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YV91c2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHRlbmQoe1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YV9wcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFfcHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFfcHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0pO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YV9wcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSk7XG52YXIgcG51bSA9ICgvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLykuc291cmNlO1xuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fCAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0fTtcblxudmFyIHJjaGVja2FibGVUeXBlID0gKC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pKTtcblxuXG5cbihmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xXG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmk8PTUuMSwgQW5kcm9pZDw0LjJcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59KSgpO1xudmFyIHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQ7XG5cblxuXG5zdXBwb3J0LmZvY3VzaW5CdWJibGVzID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0pICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8IHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFfcHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YV9wcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgIShldmVudHMgPSBlbGVtRGF0YS5ldmVudHMpICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbdF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsxXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsyXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbMl0gJiYgbmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fCBzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkZWxldGUgZWxlbURhdGEuaGFuZGxlO1xuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKFwiLlwiKSA+PSAwICkge1xuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoXCIuXCIpO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoXCI6XCIpIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oXCIuXCIpO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZV9yZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChjdXIgPSBldmVudFBhdGhbaSsrXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFfcHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBkYXRhX3ByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgalF1ZXJ5LmFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICghc3BlY2lhbC5fZGVmYXVsdCB8fCBzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UpICYmXG5cdFx0XHRcdGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1swXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0pICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50Lm5hbWVzcGFjZV9yZSB8fCBldmVudC5uYW1lc3BhY2VfcmUudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSkuaGFuZGxlIHx8IGhhbmRsZU9iai5oYW5kbGVyIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChldmVudC5yZXN1bHQgPSByZXQpID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIG1hdGNoZXMsIHNlbCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAoIzEzMTgwKVxuXHRcdC8vIEF2b2lkIG5vbi1sZWZ0LWNsaWNrIGJ1YmJsaW5nIGluIEZpcmVmb3ggKCMzODYxKVxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiYgKCFldmVudC5idXR0b24gfHwgZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApIHtcblx0XHRcdFx0XHRtYXRjaGVzID0gW107XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+PSAwIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiLnNwbGl0KFwiIFwiKSxcblxuXHRmaXhIb29rczoge30sXG5cblx0a2V5SG9va3M6IHtcblx0XHRwcm9wczogXCJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlXCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblx0XHRcdHZhciBldmVudERvYywgZG9jLCBib2R5LFxuXHRcdFx0XHRidXR0b24gPSBvcmlnaW5hbC5idXR0b247XG5cblx0XHRcdC8vIENhbGN1bGF0ZSBwYWdlWC9ZIGlmIG1pc3NpbmcgYW5kIGNsaWVudFgvWSBhdmFpbGFibGVcblx0XHRcdGlmICggZXZlbnQucGFnZVggPT0gbnVsbCAmJiBvcmlnaW5hbC5jbGllbnRYICE9IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cdFx0XHRcdGRvYyA9IGV2ZW50RG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdFx0Ym9keSA9IGV2ZW50RG9jLmJvZHk7XG5cblx0XHRcdFx0ZXZlbnQucGFnZVggPSBvcmlnaW5hbC5jbGllbnRYICsgKCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgKyAoIGRvYyAmJiBkb2Muc2Nyb2xsVG9wICB8fCBib2R5ICYmIGJvZHkuc2Nyb2xsVG9wICB8fCAwICkgLSAoIGRvYyAmJiBkb2MuY2xpZW50VG9wICB8fCBib2R5ICYmIGJvZHkuY2xpZW50VG9wICB8fCAwICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRcdC8vIE5vdGU6IGJ1dHRvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28gZG9uJ3QgdXNlIGl0XG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSAoIGJ1dHRvbiAmIDEgPyAxIDogKCBidXR0b24gJiAyID8gMyA6ICggYnV0dG9uICYgNCA/IDIgOiAwICkgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgd3JpdGFibGUgY29weSBvZiB0aGUgZXZlbnQgb2JqZWN0IGFuZCBub3JtYWxpemUgc29tZSBwcm9wZXJ0aWVzXG5cdFx0dmFyIGksIHByb3AsIGNvcHksXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcblx0XHRcdG9yaWdpbmFsRXZlbnQgPSBldmVudCxcblx0XHRcdGZpeEhvb2sgPSB0aGlzLmZpeEhvb2tzWyB0eXBlIF07XG5cblx0XHRpZiAoICFmaXhIb29rICkge1xuXHRcdFx0dGhpcy5maXhIb29rc1sgdHlwZSBdID0gZml4SG9vayA9XG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XG5cdFx0XHRcdHJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDpcblx0XHRcdFx0e307XG5cdFx0fVxuXHRcdGNvcHkgPSBmaXhIb29rLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoIGZpeEhvb2sucHJvcHMgKSA6IHRoaXMucHJvcHM7XG5cblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblxuXHRcdGkgPSBjb3B5Lmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHByb3AgPSBjb3B5WyBpIF07XG5cdFx0XHRldmVudFsgcHJvcCBdID0gb3JpZ2luYWxFdmVudFsgcHJvcCBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENvcmRvdmEgMi41IChXZWJLaXQpICgjMTMyNTUpXG5cdFx0Ly8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCssIENocm9tZTwyOFxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0aWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50O1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lLlxuXHRcdC8vIEZha2Ugb3JpZ2luYWxFdmVudCB0byBhdm9pZCBkb25vcidzIHN0b3BQcm9wYWdhdGlvbiwgYnV0IGlmIHRoZVxuXHRcdC8vIHNpbXVsYXRlZCBldmVudCBwcmV2ZW50cyBkZWZhdWx0IHRoZW4gd2UgZG8gdGhlIHNhbWUgb24gdGhlIGRvbm9yLlxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZSxcblx0XHRcdFx0b3JpZ2luYWxFdmVudDoge31cblx0XHRcdH1cblx0XHQpO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmNhbGwoIGVsZW0sIGUgKTtcblx0XHR9XG5cdFx0aWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlLCBmYWxzZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gU3VwcG9ydDogQ2hyb21lIDE1K1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBGaXJlZm94LCBDaHJvbWUsIFNhZmFyaVxuLy8gQ3JlYXRlIFwiYnViYmxpbmdcIiBmb2N1cyBhbmQgYmx1ciBldmVudHNcbmlmICggIXN1cHBvcnQuZm9jdXNpbkJ1YmJsZXMgKSB7XG5cdGpRdWVyeS5lYWNoKHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICksIHRydWUgKTtcblx0XHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFfcHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFfcHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhX3ByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxudmFyXG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxcblx0cnRhZ05hbWUgPSAvPChbXFx3Ol0rKS8sXG5cdHJodG1sID0gLzx8JiM/XFx3KzsvLFxuXHRybm9Jbm5lcmh0bWwgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLFxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZSA9IC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcblxuXHQvLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxuXHR3cmFwTWFwID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0XHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdFx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0XHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdFx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdFx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG5cdH07XG5cbi8vIFN1cHBvcnQ6IElFOVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IDEueCBjb21wYXRpYmlsaXR5XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9IChlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09IG51bGwpICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFfcHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLCBcImdsb2JhbEV2YWxcIiwgIXJlZkVsZW1lbnRzIHx8IGRhdGFfcHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFfcHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFfcHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YV9wcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YV91c2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YV91c2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFfdXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cdHZhciByZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHRbXTtcblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApIDpcblx0XHRyZXQ7XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0YnVpbGRGcmFnbWVudDogZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24gKSB7XG5cdFx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0XHRub2RlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXQsIFBoYW50b21KU1xuXHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKTtcblxuXHRcdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgZWxlbS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0LCBQaGFudG9tSlNcblx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRcdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gdG1wWyBqKysgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZyYWdtZW50O1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLCBrZXksXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1sgaSBdKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1bIGRhdGFfcHJpdi5leHBhbmRvIF07XG5cblx0XHRcdFx0aWYgKCBrZXkgJiYgKGRhdGEgPSBkYXRhX3ByaXYuY2FjaGVbIGtleSBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBkYXRhX3ByaXYuY2FjaGVbIGtleSBdICkge1xuXHRcdFx0XHRcdFx0Ly8gRGlzY2FyZCBhbnkgcmVtYWluaW5nIGBwcml2YXRlYCBkYXRhXG5cdFx0XHRcdFx0XHRkZWxldGUgZGF0YV9wcml2LmNhY2hlWyBrZXkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIERpc2NhcmQgYW55IHJlbWFpbmluZyBgdXNlcmAgZGF0YVxuXHRcdFx0ZGVsZXRlIGRhdGFfdXNlci5jYWNoZVsgZWxlbVsgZGF0YV91c2VyLmV4cGFuZG8gXSBdO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3Rvciwga2VlcERhdGEgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRlbGVtcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIHRoaXMgKSA6IHRoaXMsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNldCA9IHRoaXMsXG5cdFx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0XHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0XHR2YXIgc2VsZiA9IHNldC5lcSggaW5kZXggKTtcblx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdFx0XHRcdFx0Ly8galF1ZXJ5Lm1lcmdlIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93c1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbCggdGhpc1sgaSBdLCBub2RlLCBpICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHRcdCFkYXRhX3ByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmIGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCh7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFF0V2ViS2l0XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0pO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge307XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGFjdHVhbCBkaXNwbGF5IG9mIGEgZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgRG9jdW1lbnQgb2JqZWN0XG4gKi9cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBzdHlsZSxcblx0XHRlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHQvLyBnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSBtaWdodCBiZSByZWxpYWJseSB1c2VkIG9ubHkgb24gYXR0YWNoZWQgZWxlbWVudFxuXHRcdGRpc3BsYXkgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgJiYgKCBzdHlsZSA9IHdpbmRvdy5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSggZWxlbVsgMCBdICkgKSA/XG5cblx0XHRcdC8vIFVzZSBvZiB0aGlzIG1ldGhvZCBpcyBhIHRlbXBvcmFyeSBmaXggKG1vcmUgbGlrZSBvcHRpbWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKC9ebWFyZ2luLyk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFPD0xMSssIEZpcmVmb3g8PTMwKyAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0aWYgKCBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXHR9XG5cblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDwgNlxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBpT1MgPCA2IChhdCBsZWFzdCkgcmV0dXJucyBwZXJjZW50YWdlIGZvciBhIGxhcmdlciBzZXQgb2YgdmFsdWVzLCBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzXG5cdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXG5cdFx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweDtcIiArXG5cdFx0XCJwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlUGl4ZWxQb3NpdGlvbkFuZEJveFNpemluZ1JlbGlhYmxlKCkge1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtcIiArXG5cdFx0XHRcImJvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NHB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRkb2NFbGVtLnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IG5vZGUuanMganNkb21cblx0Ly8gRG9uJ3QgYXNzdW1lIHRoYXQgZ2V0Q29tcHV0ZWRTdHlsZSBpcyBhIHByb3BlcnR5IG9mIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gVGhpcyB0ZXN0IGlzIGV4ZWN1dGVkIG9ubHkgb25jZSBidXQgd2Ugc3RpbGwgZG8gbWVtb2l6aW5nXG5cdFx0XHRcdC8vIHNpbmNlIHdlIGNhbiB1c2UgdGhlIGJveFNpemluZ1JlbGlhYmxlIHByZS1jb21wdXRpbmcuXG5cdFx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRcdGNvbXB1dGVQaXhlbFBvc2l0aW9uQW5kQm94U2l6aW5nUmVsaWFibGUoKTtcblx0XHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0XHR9LFxuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdFx0Y29tcHV0ZVBpeGVsUG9zaXRpb25BbmRCb3hTaXppbmdSZWxpYWJsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHRcdH0sXG5cdFx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0XHQvLyBDaGVjayBpZiBkaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lci4gKCMzMzMzKVxuXHRcdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdFx0Ly8gVGhpcyBzdXBwb3J0IGZ1bmN0aW9uIGlzIG9ubHkgZXhlY3V0ZWQgb25jZSBzbyBubyBtZW1vaXppbmcgaXMgbmVlZGVkLlxuXHRcdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xuXHRcdFx0XHRtYXJnaW5EaXYuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFx0XCJib3gtc2l6aW5nOmNvbnRlbnQtYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowXCI7XG5cdFx0XHRcdG1hcmdpbkRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IG1hcmdpbkRpdi5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0XHRyZXQgPSAhcGFyc2VGbG9hdCggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIG1hcmdpbkRpdiwgbnVsbCApLm1hcmdpblJpZ2h0ICk7XG5cblx0XHRcdFx0ZG9jRWxlbS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdFx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSkoKTtcblxuXG4vLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXJcblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cdHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgcG51bSArIFwiKVwiLCBcImlcIiApLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBzdHlsZSwgbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcblx0XHRvcmlnTmFtZSA9IG5hbWUsXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9yaWdOYW1lO1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXHR2YXIgbWF0Y2hlcyA9IHJudW1zcGxpdC5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMSBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMiBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRcdDQgOlxuXHRcdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0XHRuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMCxcblxuXHRcdHZhbCA9IDA7XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcblx0XHR2YWwgPSBuYW1lID09PSBcIndpZHRoXCIgPyBlbGVtLm9mZnNldFdpZHRoIDogZWxlbS5vZmZzZXRIZWlnaHQsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIFNvbWUgbm9uLWh0bWwgZWxlbWVudHMgcmV0dXJuIHVuZGVmaW5lZCBmb3Igb2Zmc2V0V2lkdGgsIHNvIGNoZWNrIGZvciBudWxsL3VuZGVmaW5lZFxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcblx0Ly8gTWF0aE1MIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDkxNjY4XG5cdGlmICggdmFsIDw9IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KHZhbCkgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcblxuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiB8fCAhaGlkZGVuICkge1xuXHRcdFx0XHRkYXRhX3ByaXYuc2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRuYW1lID0galF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdIHx8ICggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIsIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGpRdWVyeS5pc051bWVyaWMoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCkgOiAwXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goe1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcblx0XHRcdFx0KCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5zdHlsZSAmJiAoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fCBqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFOVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fVxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRyZnhudW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLyxcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXHR0d2VlbmVycyA9IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxuXHRcdFx0XHR0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0cGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXG5cdFx0XHRcdFx0cmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxuXHRcdFx0XHRzY2FsZSA9IDEsXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcblxuXHRcdFx0aWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0XHRcdHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0XHRwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRcdHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xuXG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHByb3AsIHN0YXJ0ICsgdW5pdCApO1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpLFxuXHRcdFx0XHQvLyBicmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xuXHRcdFx0aWYgKCBwYXJ0cyApIHtcblx0XHRcdFx0c3RhcnQgPSB0d2Vlbi5zdGFydCA9ICtzdGFydCB8fCArdGFyZ2V0IHx8IDA7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cblx0XHRcdFx0dHdlZW4uZW5kID0gcGFydHNbIDEgXSA/XG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9O1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQgOyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggdHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggdHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAodHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFfcHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRTktMTAgZG8gbm90XG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XG5cdFx0XHRkYXRhX3ByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBkYXRhX3ByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblxuXHRcdFx0ZGF0YV9wcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcblx0fSBlbHNlIGlmICggKGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkpID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgeyBzcGVjaWFsRWFzaW5nOiB7fSB9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSlcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIgXCIpO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxuXHRcdG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID8galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhX3ByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhX3ByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiAodHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSkgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFfcHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaChbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCh7XG5cdHNsaWRlRG93bjogZ2VuRngoXCJzaG93XCIpLFxuXHRzbGlkZVVwOiBnZW5GeChcImhpZGVcIiksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeChcInRvZ2dsZVwiKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cdFx0Ly8gQ2hlY2tzIHRoZSB0aW1lciBoYXMgbm90IGFscmVhZHkgYmVlbiByZW1vdmVkXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0aWYgKCB0aW1lcigpICkge1xuXHRcdGpRdWVyeS5meC5zdGFydCgpO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xuXG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gc2V0SW50ZXJ2YWwoIGpRdWVyeS5meC50aWNrLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0Y2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xuXHR0aW1lcklkID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0pO1xufTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogaU9TPD01LjEsIEFuZHJvaWQ8PTQuMitcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcblx0Ly8gT3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmUgaW5jb3JyZWN0bHkgbWFya2VkIGFzIGRpc2FibGVkXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSkoKTtcblxuXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBhdHRyaWJ1dGVzIGFyZSBsb3dlcmNhc2Vcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogbm9kZUhvb2sgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/XG5cdFx0XHRcdHVuZGVmaW5lZCA6XG5cdFx0XHRcdHJldDtcblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLCBwcm9wTmFtZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKG5hbWUgPSBhdHRyTmFtZXNbaSsrXSkgKSB7XG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXG5cdFx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgKCMxMDg3MClcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxuXHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH0sXG5cblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLCBub3R4bWwsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRub3R4bWwgPSBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICk7XG5cblx0XHRpZiAoIG5vdHhtbCApIHtcblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0KCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSkgIT09IG51bGwgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHRlbGVtWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5oYXNBdHRyaWJ1dGUoIFwidGFiaW5kZXhcIiApIHx8IHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0ZWxlbS50YWJJbmRleCA6XG5cdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaChbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRwcm9jZWVkID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIiBcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdHByb2NlZWQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGg7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YV9wcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID8gXCJcIiA6IGRhdGFfcHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIjtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKFwiIFwiICsgdGhpc1tpXS5jbGFzc05hbWUgKyBcIiBcIikucmVwbGFjZShyY2xhc3MsIFwiIFwiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbMF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBJRTYtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggKG9wdGlvbi5zZWxlY3RlZCA9IGpRdWVyeS5pbkFycmF5KCBvcHRpb24udmFsdWUsIHZhbHVlcyApID49IDApICkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6IHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59KTtcblxuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoL1xcPy8pO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgdG1wO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5XG5cdHRyeSB7XG5cdFx0dG1wID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblx0cnVybCA9IC9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gRG9jdW1lbnQgbG9jYXRpb25cblx0YWpheExvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLmhyZWYsXG5cblx0Ly8gU2VnbWVudCBsb2NhdGlvbiBpbnRvIHBhcnRzXG5cdGFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWzBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogYWpheExvY2F0aW9uLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC94bWwvLFxuXHRcdFx0aHRtbDogL2h0bWwvLFxuXHRcdFx0anNvbjogL2pzb24vXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblx0XHRcdC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xuXHRcdFx0cGFydHMsXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmICggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLFxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblx0XHRcdC8vIFRoZSBqcVhIUiBzdGF0ZVxuXHRcdFx0c3RhdGUgPSAwLFxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZSA9PT0gMiA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdHZhciBsbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoICFzdGF0ZSApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKS5jb21wbGV0ZSA9IGNvbXBsZXRlRGVmZXJyZWQuYWRkO1xuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xuXHRcdGpxWEhSLmVycm9yID0ganFYSFIuZmFpbDtcblxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGFqYXhMb2NQYXJ0c1sgMSBdICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB3ZSBoYXZlIGEgcHJvdG9jb2w6aG9zdDpwb3J0IG1pc21hdGNoXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHRwYXJ0cyA9IHJ1cmwuZXhlYyggcy51cmwudG9Mb3dlckNhc2UoKSApO1xuXHRcdFx0cy5jcm9zc0RvbWFpbiA9ICEhKCBwYXJ0cyAmJlxuXHRcdFx0XHQoIHBhcnRzWyAxIF0gIT09IGFqYXhMb2NQYXJ0c1sgMSBdIHx8IHBhcnRzWyAyIF0gIT09IGFqYXhMb2NQYXJ0c1sgMiBdIHx8XG5cdFx0XHRcdFx0KCBwYXJ0c1sgMyBdIHx8ICggcGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgIT09XG5cdFx0XHRcdFx0XHQoIGFqYXhMb2NQYXJ0c1sgMyBdIHx8ICggYWpheExvY1BhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApIClcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIik7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybDtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgYW50aS1jYWNoZSBpbiB1cmwgaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSAnXycgcGFyYW1ldGVyLCBzZXQgaXRzIHZhbHVlXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2UgYWRkIG9uZSB0byB0aGUgZW5kXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1swXSBdICsgKCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiYgKCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBzdGF0ZSA9PT0gMiApICkge1xuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcblx0XHRcdGpxWEhSWyBpIF0oIHNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydChcInRpbWVvdXRcIik7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzdGF0ZSA9IDE7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdFx0Ly8gU2ltcGx5IHJldGhyb3cgb3RoZXJ3aXNlXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIENhbGxlZCBvbmNlXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXRlIGlzIFwiZG9uZVwiIG5vd1xuXHRcdFx0c3RhdGUgPSAyO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiZXRhZ1wiKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0pO1xuXHR9O1xufSk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHR1cmw6IHVybCxcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCh0aGlzLCBpKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKHRoaXMsIGkpIDogaHRtbCApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJib2R5XCIgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdFx0fVxuXHRcdH0pLmVuZCgpO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBTdXBwb3J0OiBPcGVyYSA8PSAxMi4xMlxuXHQvLyBPcGVyYSByZXBvcnRzIG9mZnNldFdpZHRocyBhbmQgb2Zmc2V0SGVpZ2h0cyBsZXNzIHRoYW4gemVybyBvbiBzb21lIGVsZW1lbnRzXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoIDw9IDAgJiYgZWxlbS5vZmZzZXRIZWlnaHQgPD0gMDtcbn07XG5qUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiggZWxlbSApO1xufTtcblxuXG5cblxudmFyIHIyMCA9IC8lMjAvZyxcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBqUXVlcnkuaXNBcnJheSggb2JqICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiID8gaSA6IFwiXCIgKSArIFwiXVwiLCB2LCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9KTtcblxuXHR9IGVsc2Uge1xuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSlcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSkuZ2V0KCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoKCBlICkge31cbn07XG5cbnZhciB4aHJJZCA9IDAsXG5cdHhockNhbGxiYWNrcyA9IHt9LFxuXHR4aHJTdWNjZXNzU3RhdHVzID0ge1xuXHRcdC8vIGZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIE9wZW4gcmVxdWVzdHMgbXVzdCBiZSBtYW51YWxseSBhYm9ydGVkIG9uIHVubG9hZCAoIzUyODApXG4vLyBTZWUgaHR0cHM6Ly9zdXBwb3J0Lm1pY3Jvc29mdC5jb20va2IvMjg1Njc0NiBmb3IgbW9yZSBpbmZvXG5pZiAoIHdpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0d2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSgpO1xuXHRcdH1cblx0fSk7XG59XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCksXG5cdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0geGhyLm9ubG9hZCA9IHhoci5vbmVycm9yID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiA/IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGV4dDogeGhyLnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0fSA6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdHhoci5vbmVycm9yID0gY2FsbGJhY2soXCJlcnJvclwiKTtcblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2soXCJhYm9ydFwiKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59KTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeShcIjxzY3JpcHQ+XCIpLnByb3Aoe1xuXHRcdFx0XHRcdGFzeW5jOiB0cnVlLFxuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0pLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59KTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdGlmICggb2ZmID49IDAgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbIFwiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCIgXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSk7XG5cblxuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSkubGVuZ3RoO1xufTtcblxuXG5cblxudmFyIGRvY0VsZW0gPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vKipcbiAqIEdldHMgYSB3aW5kb3cgZnJvbSBhbiBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApID8gZWxlbSA6IGVsZW0ubm9kZVR5cGUgPT09IDkgJiYgZWxlbS5kZWZhdWx0Vmlldztcbn1cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKFwiYXV0b1wiKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvY0VsZW0sIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZG9jID0gZWxlbSAmJiBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRpZiAoICFkb2MgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcblx0XHRpZiAoICFqUXVlcnkuY29udGFpbnMoIGRvY0VsZW0sIGVsZW0gKSApIHtcblx0XHRcdHJldHVybiBib3g7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0fVxuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LCBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCB8fCBkb2NFbGVtO1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudCwgXCJodG1sXCIgKSAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW5kb3cucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGgsIG51bGwgKTtcblx0fTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8NyssIENocm9tZTwzNytcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTIyOTI4MFxuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0pO1xufVxuXG5cblxuXG52YXJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xuXG59KSk7XG5cbn0se31dLDc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGFuIGVudW1lcmF0aW9uIHdpdGgga2V5cyBlcXVhbCB0byB0aGVpciB2YWx1ZS5cbiAqXG4gKiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgIHZhciBDT0xPUlMgPSBrZXlNaXJyb3Ioe2JsdWU6IG51bGwsIHJlZDogbnVsbH0pO1xuICogICB2YXIgbXlDb2xvciA9IENPTE9SUy5ibHVlO1xuICogICB2YXIgaXNDb2xvclZhbGlkID0gISFDT0xPUlNbbXlDb2xvcl07XG4gKlxuICogVGhlIGxhc3QgbGluZSBjb3VsZCBub3QgYmUgcGVyZm9ybWVkIGlmIHRoZSB2YWx1ZXMgb2YgdGhlIGdlbmVyYXRlZCBlbnVtIHdlcmVcbiAqIG5vdCBlcXVhbCB0byB0aGVpciBrZXlzLlxuICpcbiAqICAgSW5wdXQ6ICB7a2V5MTogdmFsMSwga2V5MjogdmFsMn1cbiAqICAgT3V0cHV0OiB7a2V5MToga2V5MSwga2V5Mjoga2V5Mn1cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbnZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHJldCA9IHt9O1xuICB2YXIga2V5O1xuICBpZiAoIShvYmogaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkob2JqKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0W2tleV0gPSBrZXk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5TWlycm9yO1xuXG59LHt9XSw3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL2JhYmVsLXRyYW5zZm9ybS9tYWluLmpzXCIpXG5cbn0se1wiLi9saWIvYmFiZWwtdHJhbnNmb3JtL21haW4uanNcIjo3N31dLDc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KSgpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGJhYmVsUGx1Z2luTGl2ZVJlYWN0bG9hZDtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcInJlYWN0LXByb3h5XCIpO1xuXG52YXIgZ2V0Rm9yY2VVcGRhdGUgPSBfcmVxdWlyZS5nZXRGb3JjZVVwZGF0ZTtcbnZhciBjcmVhdGVQcm94eSA9IF9yZXF1aXJlLmNyZWF0ZVByb3h5O1xuXG5mdW5jdGlvbiBiYWJlbFBsdWdpbkxpdmVSZWFjdGxvYWQoX3JlZikge1xuICB2YXIgZmlsZW5hbWUgPSBfcmVmLmZpbGVuYW1lO1xuICB2YXIgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50cztcbiAgdmFyIGltcG9ydHMgPSBfcmVmLmltcG9ydHM7XG4gIHZhciBsb2NhbHMgPSBfcmVmLmxvY2FscztcblxuICB2YXIgX2ltcG9ydHMgPSBfc2xpY2VkVG9BcnJheShpbXBvcnRzLCAxKTtcblxuICB2YXIgUmVhY3QgPSBfaW1wb3J0c1swXTtcblxuICB2YXIgZm9yY2VVcGRhdGUgPSBnZXRGb3JjZVVwZGF0ZShSZWFjdCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGFwcGx5UHJveHkoQ29tcG9uZW50LCB1bmlxdWVJZCkge1xuICAgIHZhciBfY29tcG9uZW50cyR1bmlxdWVJZCA9IGNvbXBvbmVudHNbdW5pcXVlSWRdO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9jb21wb25lbnRzJHVuaXF1ZUlkLmRpc3BsYXlOYW1lO1xuICAgIHZhciBfY29tcG9uZW50cyR1bmlxdWVJZCRpc0luRnVuY3Rpb24gPSBfY29tcG9uZW50cyR1bmlxdWVJZC5pc0luRnVuY3Rpb247XG4gICAgdmFyIGlzSW5GdW5jdGlvbiA9IF9jb21wb25lbnRzJHVuaXF1ZUlkJGlzSW5GdW5jdGlvbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfY29tcG9uZW50cyR1bmlxdWVJZCRpc0luRnVuY3Rpb247XG5cbiAgICB2YXIgcHJveGllcyA9IGdldFByb3hpZXMoKTtcblxuICAgIGlmICghcHJveGllcyB8fCBpc0luRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgdmFyIGlkID0gZmlsZW5hbWUgKyBcIiQkXCIgKyB1bmlxdWVJZDtcbiAgICBpZiAoIXByb3hpZXNbaWRdKSB7XG4gICAgICB2YXIgcHJveHkgPSBjcmVhdGVQcm94eShDb21wb25lbnQpO1xuICAgICAgcHJveGllc1tpZF0gPSBwcm94eTtcbiAgICAgIHJldHVybiBwcm94eS5nZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9yZXQgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIiA+IFBhdGNoIGNvbXBvbmVudCA6OiBcIiwgZGlzcGxheU5hbWUgfHwgdW5pcXVlSWQpO1xuICAgICAgICB2YXIgcHJveHkgPSBwcm94aWVzW2lkXTtcbiAgICAgICAgdmFyIGluc3RhbmNlcyA9IHByb3h5LnVwZGF0ZShDb21wb25lbnQpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2VzLmZvckVhY2goZm9yY2VVcGRhdGUpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2OiBwcm94eS5nZXQoKVxuICAgICAgICB9O1xuICAgICAgfSkoKTtcblxuICAgICAgaWYgKHR5cGVvZiBfcmV0ID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldC52O1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJveGllcygpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5fX2xycHJveGllcyQkID0gd2luZG93Ll9fbHJwcm94aWVzJCQgfHwge307XG4gICAgfSBlbHNlIHt9XG4gIH0gY2F0Y2ggKGlnbm9yZSkge31cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG59LHtcInJlYWN0LXByb3h5XCI6MTIyfV0sNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGJhc2VEaWZmZXJlbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvYmFzZURpZmZlcmVuY2UnKSxcbiAgICBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2Jhc2VGbGF0dGVuJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lzT2JqZWN0TGlrZScpLFxuICAgIHJlc3RQYXJhbSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9uL3Jlc3RQYXJhbScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXJcbiAqIHByb3ZpZGVkIGFycmF5cyB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIGFycmF5cyBvZiB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kaWZmZXJlbmNlKFsxLCAyLCAzXSwgWzQsIDJdKTtcbiAqIC8vID0+IFsxLCAzXVxuICovXG52YXIgZGlmZmVyZW5jZSA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiAoaXNPYmplY3RMaWtlKGFycmF5KSAmJiBpc0FycmF5TGlrZShhcnJheSkpXG4gICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCBmYWxzZSwgdHJ1ZSkpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZlcmVuY2U7XG5cbn0se1wiLi4vZnVuY3Rpb24vcmVzdFBhcmFtXCI6NzksXCIuLi9pbnRlcm5hbC9iYXNlRGlmZmVyZW5jZVwiOjg2LFwiLi4vaW50ZXJuYWwvYmFzZUZsYXR0ZW5cIjo4NyxcIi4uL2ludGVybmFsL2lzQXJyYXlMaWtlXCI6OTgsXCIuLi9pbnRlcm5hbC9pc09iamVjdExpa2VcIjoxMDJ9XSw3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhcyBhbiBhcnJheS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Z1bmN0aW9ucy9yZXN0X3BhcmFtZXRlcnMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHNheSA9IF8ucmVzdFBhcmFtKGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICogfSk7XG4gKlxuICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gKi9cbmZ1bmN0aW9uIHJlc3RQYXJhbShmdW5jLCBzdGFydCkge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiAoK3N0YXJ0IHx8IDApLCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIHJlc3QgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3RbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgc3dpdGNoIChzdGFydCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3NbMF0sIHJlc3QpO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIHJlc3QpO1xuICAgIH1cbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICBpbmRleCA9IC0xO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHJlc3Q7XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXN0UGFyYW07XG5cbn0se31dLDgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIGxvZGFzaCAzLjEwLjEgKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2Rlcm4gLWQgLW8gLi9pbmRleC5qc2BcbiAqIENvcHlyaWdodCAyMDEyLTIwMTUgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzMuMTAuMSc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3Igd3JhcHBlciBtZXRhZGF0YS4gKi9cbiAgdmFyIEJJTkRfRkxBRyA9IDEsXG4gICAgICBCSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIENVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgQ1VSUllfRkxBRyA9IDgsXG4gICAgICBDVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBQQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFBBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBSRUFSR19GTEFHID0gMjU2O1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgd2hlbiBhIGZ1bmN0aW9uIGJlY29tZXMgaG90LiAqL1xuICB2YXIgSE9UX0NPVU5UID0gMTUwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG4gIHZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOXwjOTYpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIidgXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXG5cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXG5cXFxcXXxcXFxcLikqPylcXDIpXFxdL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wYXR0ZXJucylcbiAgICogYW5kIHRob3NlIG91dGxpbmVkIGJ5IFtgRXNjYXBlUmVnRXhwUGF0dGVybmBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWVzY2FwZXJlZ2V4cHBhdHRlcm4pLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhcnMgPSAvXls6ISxdfFtcXFxcXiQuKis/KClbXFxde318XFwvXXwoXlswLTlhLWZBLUZucnR1dnhdKXwoW1xcblxcclxcdTIwMjhcXHUyMDI5XSkvZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhcnMgPSBSZWdFeHAocmVSZWdFeHBDaGFycy5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuICovXG4gIHZhciByZUNvbWJvTWFyayA9IC9bXFx1MDMwMC1cXHUwMzZmXFx1ZmUyMC1cXHVmZTIzXS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS4gKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVIYXNIZXhQcmVmaXggPSAvXjBbeFhdLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSA+IDUpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eXFxkKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxhdGluLTEgc3VwcGxlbWVudGFyeSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluMSA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhkZVxceGRmLVxceGY2XFx4ZjgtXFx4ZmZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIHRvIGNyZWF0ZSBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlV29yZHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVwcGVyID0gJ1tBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGVdJyxcbiAgICAgICAgbG93ZXIgPSAnW2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZl0rJztcblxuICAgIHJldHVybiBSZWdFeHAodXBwZXIgKyAnKyg/PScgKyB1cHBlciArIGxvd2VyICsgJyl8JyArIHVwcGVyICsgJz8nICsgbG93ZXIgKyAnfCcgKyB1cHBlciArICcrfFswLTldKycsICdnJyk7XG4gIH0oKSk7XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdBcnJheUJ1ZmZlcicsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hdGgnLCAnTnVtYmVyJyxcbiAgICAnT2JqZWN0JywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJyxcbiAgICAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICdzZXRUaW1lb3V0JywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID0gdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPSB0eXBlZEFycmF5VGFnc1ttYXBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID0gdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPSB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW21hcFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGxhdGluLTEgc3VwcGxlbWVudGFyeSBsZXR0ZXJzIHRvIGJhc2ljIGxhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNDJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZUMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICdgJzogJyYjOTY7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIixcbiAgICAnJiM5NjsnOiAnYCdcbiAgfTtcblxuICAvKiogVXNlZCB0byBkZXRlcm1pbmUgaWYgdmFsdWVzIGFyZSBvZiB0aGUgbGFuZ3VhZ2UgdHlwZSBgT2JqZWN0YC4gKi9cbiAgdmFyIG9iamVjdFR5cGVzID0ge1xuICAgICdmdW5jdGlvbic6IHRydWUsXG4gICAgJ29iamVjdCc6IHRydWVcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHJlZ2V4ZXMuICovXG4gIHZhciByZWdleHBFc2NhcGVzID0ge1xuICAgICcwJzogJ3gzMCcsICcxJzogJ3gzMScsICcyJzogJ3gzMicsICczJzogJ3gzMycsICc0JzogJ3gzNCcsXG4gICAgJzUnOiAneDM1JywgJzYnOiAneDM2JywgJzcnOiAneDM3JywgJzgnOiAneDM4JywgJzknOiAneDM5JyxcbiAgICAnQSc6ICd4NDEnLCAnQic6ICd4NDInLCAnQyc6ICd4NDMnLCAnRCc6ICd4NDQnLCAnRSc6ICd4NDUnLCAnRic6ICd4NDYnLFxuICAgICdhJzogJ3g2MScsICdiJzogJ3g2MicsICdjJzogJ3g2MycsICdkJzogJ3g2NCcsICdlJzogJ3g2NScsICdmJzogJ3g2NicsXG4gICAgJ24nOiAneDZlJywgJ3InOiAneDcyJywgJ3QnOiAneDc0JywgJ3UnOiAneDc1JywgJ3YnOiAneDc2JywgJ3gnOiAneDc4J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSBmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlICYmIHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IG9iamVjdFR5cGVzW3R5cGVvZiBzZWxmXSAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGB3aW5kb3dgLiAqL1xuICB2YXIgZnJlZVdpbmRvdyA9IG9iamVjdFR5cGVzW3R5cGVvZiB3aW5kb3ddICYmIHdpbmRvdyAmJiB3aW5kb3cuT2JqZWN0ICYmIHdpbmRvdztcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cyAmJiBmcmVlRXhwb3J0cztcblxuICAvKipcbiAgICogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICpcbiAgICogVGhlIGB0aGlzYCB2YWx1ZSBpcyB1c2VkIGlmIGl0J3MgdGhlIGdsb2JhbCBvYmplY3QgdG8gYXZvaWQgR3JlYXNlbW9ua2V5J3NcbiAgICogcmVzdHJpY3RlZCBgd2luZG93YCBvYmplY3QsIG90aGVyd2lzZSB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIHVzZWQuXG4gICAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgKChmcmVlV2luZG93ICE9PSAodGhpcyAmJiB0aGlzLndpbmRvdykpICYmIGZyZWVXaW5kb3cpIHx8IGZyZWVTZWxmIHx8IHRoaXM7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBjb21wYXJlQXNjZW5kaW5nYCB3aGljaCBjb21wYXJlcyB2YWx1ZXMgYW5kXG4gICAqIHNvcnRzIHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyIHdpdGhvdXQgZ3VhcmFudGVlaW5nIGEgc3RhYmxlIHNvcnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgdmFyIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzVW5kZWYgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlO1xuXG4gICAgICB2YXIgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgb3RoSXNVbmRlZiA9IG90aGVyID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXI7XG5cbiAgICAgIGlmICgodmFsdWUgPiBvdGhlciAmJiAhb3RoSXNOdWxsKSB8fCAhdmFsSXNSZWZsZXhpdmUgfHxcbiAgICAgICAgICAodmFsSXNOdWxsICYmICFvdGhJc1VuZGVmICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICh2YWxJc1VuZGVmICYmIG90aElzUmVmbGV4aXZlKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIGlmICgodmFsdWUgPCBvdGhlciAmJiAhdmFsSXNOdWxsKSB8fCAhb3RoSXNSZWZsZXhpdmUgfHxcbiAgICAgICAgICAob3RoSXNOdWxsICYmICF2YWxJc1VuZGVmICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgIChvdGhJc1VuZGVmICYmIHZhbElzUmVmbGV4aXZlKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGJpbmFyeSBzZWFyY2hlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleE9mTmFOKGFycmF5LCBmcm9tSW5kZXgpO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNGdW5jdGlvbmAgd2l0aG91dCBzdXBwb3J0IGZvciBlbnZpcm9ubWVudHNcbiAgICogd2l0aCBpbmNvcnJlY3QgYHR5cGVvZmAgcmVzdWx0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNGdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIEF2b2lkIGEgQ2hha3JhIEpJVCBidWcgaW4gY29tcGF0aWJpbGl0eSBtb2RlcyBvZiBJRSAxMS5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2lzc3Vlcy8xNjIxIGZvciBtb3JlIGRldGFpbHMuXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgaWYgaXQncyBub3Qgb25lLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWRcbiAgICogZm9yIGBudWxsYCBvciBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiAodmFsdWUgKyAnJyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUxlZnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGNoYXJhY3RlclxuICAgKiBvZiBgc3RyaW5nYCB0aGF0IGlzIG5vdCBmb3VuZCBpbiBgY2hhcnNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYXJzIFRoZSBjaGFyYWN0ZXJzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgbm90IGZvdW5kIGluIGBjaGFyc2AuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0xlZnRJbmRleChzdHJpbmcsIGNoYXJzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBjaGFycy5pbmRleE9mKHN0cmluZy5jaGFyQXQoaW5kZXgpKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltUmlnaHRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2hhcmFjdGVyXG4gICAqIG9mIGBzdHJpbmdgIHRoYXQgaXMgbm90IGZvdW5kIGluIGBjaGFyc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhcnMgVGhlIGNoYXJhY3RlcnMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2hhcmFjdGVyIG5vdCBmb3VuZCBpbiBgY2hhcnNgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNSaWdodEluZGV4KHN0cmluZywgY2hhcnMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgY2hhcnMuaW5kZXhPZihzdHJpbmcuY2hhckF0KGluZGV4KSkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5zb3J0QnlgIHRvIGNvbXBhcmUgdHJhbnNmb3JtZWQgZWxlbWVudHMgb2YgYSBjb2xsZWN0aW9uIGFuZCBzdGFibGVcbiAgICogc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcob2JqZWN0LCBvdGhlcikge1xuICAgIHJldHVybiBiYXNlQ29tcGFyZUFzY2VuZGluZyhvYmplY3QuY3JpdGVyaWEsIG90aGVyLmNyaXRlcmlhKSB8fCAob2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uc29ydEJ5T3JkZXJgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAqXG4gICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgKiBhIHZhbHVlIGlzIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgaWYgaXRzIGNvcnJlc3BvbmRpbmcgb3JkZXIgaXMgXCJhc2NcIiwgYW5kXG4gICAqIGRlc2NlbmRpbmcgaWYgXCJkZXNjXCIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW5bXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAqICgob3JkZXIgPT09ICdhc2MnIHx8IG9yZGVyID09PSB0cnVlKSA/IDEgOiAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy9cbiAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgbGF0aW4tMSBzdXBwbGVtZW50YXJ5IGxldHRlcnMgdG8gYmFzaWMgbGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBkZWJ1cnJMZXR0ZXIobGV0dGVyKSB7XG4gICAgcmV0dXJuIGRlYnVycmVkTGV0dGVyc1tsZXR0ZXJdO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZUh0bWxDaGFyKGNocikge1xuICAgIHJldHVybiBodG1sRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlUmVnRXhwYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHJlZ2V4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxlYWRpbmdDaGFyIFRoZSBjYXB0dXJlIGdyb3VwIGZvciBhIGxlYWRpbmcgY2hhcmFjdGVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gd2hpdGVzcGFjZUNoYXIgVGhlIGNhcHR1cmUgZ3JvdXAgZm9yIGEgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwQ2hhcihjaHIsIGxlYWRpbmdDaGFyLCB3aGl0ZXNwYWNlQ2hhcikge1xuICAgIGlmIChsZWFkaW5nQ2hhcikge1xuICAgICAgY2hyID0gcmVnZXhwRXNjYXBlc1tjaHJdO1xuICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZUNoYXIpIHtcbiAgICAgIGNociA9IHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgICB9XG4gICAgcmV0dXJuICdcXFxcJyArIGNocjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgTmFOYCBpcyBmb3VuZCBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIGBOYU5gLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBpbmRleE9mTmFOKGFycmF5LCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDAgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgdmFyIG90aGVyID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKG90aGVyICE9PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgdHJpbW1lZExlZnRJbmRleGAgYW5kIGB0cmltbWVkUmlnaHRJbmRleGAgdG8gZGV0ZXJtaW5lIGlmIGFcbiAgICogY2hhcmFjdGVyIGNvZGUgaXMgd2hpdGVzcGFjZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNoYXJDb2RlIFRoZSBjaGFyYWN0ZXIgY29kZSB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGNoYXJDb2RlYCBpcyB3aGl0ZXNwYWNlLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBpc1NwYWNlKGNoYXJDb2RlKSB7XG4gICAgcmV0dXJuICgoY2hhckNvZGUgPD0gMTYwICYmIChjaGFyQ29kZSA+PSA5ICYmIGNoYXJDb2RlIDw9IDEzKSB8fCBjaGFyQ29kZSA9PSAzMiB8fCBjaGFyQ29kZSA9PSAxNjApIHx8IGNoYXJDb2RlID09IDU3NjAgfHwgY2hhckNvZGUgPT0gNjE1OCB8fFxuICAgICAgKGNoYXJDb2RlID49IDgxOTIgJiYgKGNoYXJDb2RlIDw9IDgyMDIgfHwgY2hhckNvZGUgPT0gODIzMiB8fCBjaGFyQ29kZSA9PSA4MjMzIHx8IGNoYXJDb2RlID09IDgyMzkgfHwgY2hhckNvZGUgPT0gODI4NyB8fCBjaGFyQ29kZSA9PSAxMjI4OCB8fCBjaGFyQ29kZSA9PSA2NTI3OSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbKytyZXNJbmRleF0gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxYCBvcHRpbWl6ZWQgZm9yIHNvcnRlZCBhcnJheXMgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlLXZhbHVlLWZyZWUgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBzZWVuLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBhcnJheSkgOiB2YWx1ZTtcblxuICAgICAgaWYgKCFpbmRleCB8fCBzZWVuICE9PSBjb21wdXRlZCkge1xuICAgICAgICBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1MZWZ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZExlZnRJbmRleChzdHJpbmcpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGlzU3BhY2Uoc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVJpZ2h0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHRyaW1tZWRSaWdodEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBpc1NwYWNlKHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KSkpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHVuZXNjYXBlSHRtbENoYXIoY2hyKSB7XG4gICAgcmV0dXJuIGh0bWxVbmVzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGdpdmVuIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIHVzaW5nIGBjb250ZXh0YCB0byBtb2NrIGBEYXRlI2dldFRpbWVgIHVzZSBpbiBgXy5ub3dgXG4gICAqIHZhciBtb2NrID0gXy5ydW5JbkNvbnRleHQoe1xuICAgKiAgICdEYXRlJzogZnVuY3Rpb24oKSB7XG4gICAqICAgICByZXR1cm4geyAnZ2V0VGltZSc6IGdldFRpbWVNb2NrIH07XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICpcbiAgICogLy8gb3IgY3JlYXRpbmcgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanNcbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgLy8gQXZvaWQgaXNzdWVzIHdpdGggc29tZSBFUzMgZW52aXJvbm1lbnRzIHRoYXQgYXR0ZW1wdCB0byB1c2UgdmFsdWVzLCBuYW1lZFxuICAgIC8vIGFmdGVyIGJ1aWx0LWluIGNvbnN0cnVjdG9ycyBsaWtlIGBPYmplY3RgLCBmb3IgdGhlIGNyZWF0aW9uIG9mIGxpdGVyYWxzLlxuICAgIC8vIEVTNSBjbGVhcnMgdGhpcyB1cCBieSBzdGF0aW5nIHRoYXQgbGl0ZXJhbHMgbXVzdCB1c2UgYnVpbHQtaW4gY29uc3RydWN0b3JzLlxuICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMS4xLjUgZm9yIG1vcmUgZGV0YWlscy5cbiAgICBjb250ZXh0ID0gY29udGV4dCA/IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpIDogcm9vdDtcblxuICAgIC8qKiBOYXRpdmUgY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgTnVtYmVyID0gY29udGV4dC5OdW1iZXIsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBzdHJpbmdQcm90byA9IFN0cmluZy5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZuVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgb2JqVG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmblRvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheUJ1ZmZlciA9IGNvbnRleHQuQXJyYXlCdWZmZXIsXG4gICAgICAgIGNsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBwYXJzZUZsb2F0ID0gY29udGV4dC5wYXJzZUZsb2F0LFxuICAgICAgICBwb3cgPSBNYXRoLnBvdyxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgc2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKTtcblxuICAgIC8qIE5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKSxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVJc0FycmF5ID0gZ2V0TmF0aXZlKEFycmF5LCAnaXNBcnJheScpLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUtleXMgPSBnZXROYXRpdmUoT2JqZWN0LCAna2V5cycpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IGdldE5hdGl2ZShEYXRlLCAnbm93JyksXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb207XG5cbiAgICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciBgLUluZmluaXR5YCBhbmQgYEluZmluaXR5YC4gKi9cbiAgICB2YXIgTkVHQVRJVkVfSU5GSU5JVFkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG4gICAgICAgIFBPU0lUSVZFX0lORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gICAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCBhcyB0aGUgW21heGltdW0gbGVuZ3RoXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlcilcbiAgICAgKiBvZiBhbiBhcnJheS1saWtlIHZhbHVlLlxuICAgICAqL1xuICAgIHZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgY2hhaW5pbmcuXG4gICAgICogTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLCBhbmQgZnVuY3Rpb25zIGNhblxuICAgICAqIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZSBvciBtYXkgcmV0dXJuIGFcbiAgICAgKiBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gcmV0dXJuaW5nIHRoZSB1bndyYXBwZWRcbiAgICAgKiB2YWx1ZS4gRXhwbGljaXQgY2hhaW5pbmcgbWF5IGJlIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLiBUaGUgZXhlY3V0aW9uIG9mXG4gICAgICogY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGV4ZWN1dGlvbiBpcyBkZWZlcnJlZCB1bnRpbCBgXyN2YWx1ZWBcbiAgICAgKiBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uIFNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiBzdHJhdGVneSB3aGljaCBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBjYW4gaGVscFxuICAgICAqIHRvIGF2b2lkIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgZGF0YSBzdHJ1Y3R1cmVzIGFuZCBncmVhdGx5IHJlZHVjZSB0aGVcbiAgICAgKiBudW1iZXIgb2YgaXRlcmF0ZWUgZXhlY3V0aW9ucy5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGByZXZlcnNlYCwgYHNoaWZ0YCwgYHNsaWNlYCwgYHNvcnRgLFxuICAgICAqIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsXG4gICAgICogYGZpcnN0YCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcGx1Y2tgLCBgcmVqZWN0YCwgYHJlc3RgLCBgcmV2ZXJzZWAsXG4gICAgICogYHNsaWNlYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0b0FycmF5YCxcbiAgICAgKiBhbmQgYHdoZXJlYFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGF0YCwgYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsXG4gICAgICogYGNhbGxiYWNrYCwgYGNoYWluYCwgYGNodW5rYCwgYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25zdGFudGAsXG4gICAgICogYGNvdW50QnlgLCBgY3JlYXRlYCwgYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsXG4gICAgICogYGRlZmVyYCwgYGRlbGF5YCwgYGRpZmZlcmVuY2VgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFJpZ2h0V2hpbGVgLFxuICAgICAqIGBkcm9wV2hpbGVgLCBgZmlsbGAsIGBmaWx0ZXJgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsXG4gICAgICogYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCwgYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCxcbiAgICAgKiBgZnVuY3Rpb25zYCwgYGdyb3VwQnlgLCBgaW5kZXhCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnZlcnRgLFxuICAgICAqIGBpbnZva2VgLCBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLFxuICAgICAqIGBtYXRjaGVzUHJvcGVydHlgLCBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLFxuICAgICAqIGBtb2RBcmdzYCwgYG5lZ2F0ZWAsIGBvbWl0YCwgYG9uY2VgLCBgcGFpcnNgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLFxuICAgICAqIGBwYXJ0aXRpb25gLCBgcGlja2AsIGBwbGFudGAsIGBwbHVja2AsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLFxuICAgICAqIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByZWFyZ2AsIGByZWplY3RgLCBgcmVtb3ZlYCwgYHJlc3RgLCBgcmVzdFBhcmFtYCxcbiAgICAgKiBgcmV2ZXJzZWAsIGBzZXRgLCBgc2h1ZmZsZWAsIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzb3J0QnlBbGxgLFxuICAgICAqIGBzb3J0QnlPcmRlcmAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCxcbiAgICAgKiBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRpbWVzYCwgYHRvQXJyYXlgLCBgdG9QbGFpbk9iamVjdGAsXG4gICAgICogYHRyYW5zZm9ybWAsIGB1bmlvbmAsIGB1bmlxYCwgYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdoZXJlYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgemlwYCwgYHppcE9iamVjdGAsIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbG9uZWAsIGBjbG9uZURlZXBgLFxuICAgICAqIGBkZWJ1cnJgLCBgZW5kc1dpdGhgLCBgZXNjYXBlYCwgYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsXG4gICAgICogYGZpbmRLZXlgLCBgZmluZExhc3RgLCBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaW5kV2hlcmVgLCBgZmlyc3RgLFxuICAgICAqIGBmbG9vcmAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCxcbiAgICAgKiBgaW5SYW5nZWAsIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQm9vbGVhbmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCxcbiAgICAgKiBgaXNFbXB0eWAsIGBpc0VxdWFsYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgIGBpc0Z1bmN0aW9uYCwgYGlzTWF0Y2hgLFxuICAgICAqIGBpc05hdGl2ZWAsIGBpc05hTmAsIGBpc051bGxgLCBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNQbGFpbk9iamVjdGAsXG4gICAgICogYGlzUmVnRXhwYCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsXG4gICAgICogYGxhc3RgLCBgbGFzdEluZGV4T2ZgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtaW5gLCBgbm9Db25mbGljdGAsIGBub29wYCxcbiAgICAgKiBgbm93YCwgYHBhZGAsIGBwYWRMZWZ0YCwgYHBhZFJpZ2h0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCxcbiAgICAgKiBgcmVkdWNlUmlnaHRgLCBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZExhc3RJbmRleGAsIGBzdGFydENhc2VgLFxuICAgICAqIGBzdGFydHNXaXRoYCwgYHN1bWAsIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1MZWZ0YCwgYHRyaW1SaWdodGAsIGB0cnVuY2AsXG4gICAgICogYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZCBgc2FtcGxlYCB3aWxsIHJldHVybiBhIHdyYXBwZWQgdmFsdWUgd2hlbiBgbmAgaXMgcHJvdmlkZWQsXG4gICAgICogb3RoZXJ3aXNlIGFuIHVud3JhcHBlZCB2YWx1ZSBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gcmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWVcbiAgICAgKiB3cmFwcGVkLnJlZHVjZShmdW5jdGlvbih0b3RhbCwgbikge1xuICAgICAqICAgcmV0dXJuIHRvdGFsICsgbjtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyByZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZVxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX19jaGFpbl9fJykgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGFsbCBjaGFpbmluZyB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBjaGFpbmluZyBmb3IgYWxsIHdyYXBwZXIgbWV0aG9kcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYWN0aW9ucz1bXV0gQWN0aW9ucyB0byBwZWZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsLCBhY3Rpb25zKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gYWN0aW9ucyB8fCBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgZW52aXJvbm1lbnQgZmVhdHVyZSBmbGFncy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqL1xuICAgIHZhciBzdXBwb3J0ID0gbG9kYXNoLnN1cHBvcnQgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKS4gQ2hhbmdlIHRoZSBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlXG4gICAgICogYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIFJlZ0V4cFxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgUmVnRXhwXG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSBGdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGFycmF5Q29weSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBhcnJheUNvcHkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGFycmF5Q29weSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCBhcnJMZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIHx8IChhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKChpc1JpZ2h0ICYmIGlzQXJyKSA/IGFycmF5LnJldmVyc2UoKSA6IGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXkvdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbmFtZSBDYWNoZVxuICAgICAqIEBtZW1iZXJPZiBfLm1lbW9pemVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZSgpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBfLm1lbW9pemUuQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkIHN1Y2Nlc3NmdWxseSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcERlbGV0ZShrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY2FjaGVkIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIF8ubWVtb2l6ZS5DYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjYWNoZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGtleSA9PSAnX19wcm90b19fJyA/IHVuZGVmaW5lZCA6IHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIF8ubWVtb2l6ZS5DYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBIYXMoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5ICE9ICdfX3Byb3RvX18nICYmIGhhc093blByb3BlcnR5LmNhbGwodGhpcy5fX2RhdGFfXywga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGB2YWx1ZWAgdG8gYGtleWAgb2YgdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgXy5tZW1vaXplLkNhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgIT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgdGhpcy5fX2RhdGFfX1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICAgICAgdGhpcy5kYXRhID0geyAnaGFzaCc6IG5hdGl2ZUNyZWF0ZShudWxsKSwgJ3NldCc6IG5ldyBTZXQgfTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB0aGlzLnB1c2godmFsdWVzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjYWNoZWAgbWltaWNraW5nIHRoZSByZXR1cm4gc2lnbmF0dXJlIG9mXG4gICAgICogYF8uaW5kZXhPZmAgYnkgcmV0dXJuaW5nIGAwYCBpZiB0aGUgdmFsdWUgaXMgZm91bmQsIGVsc2UgYC0xYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGAwYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBjYWNoZS5kYXRhLFxuICAgICAgICAgIHJlc3VsdCA9ICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNPYmplY3QodmFsdWUpKSA/IGRhdGEuc2V0Lmhhcyh2YWx1ZSkgOiBkYXRhLmhhc2hbdmFsdWVdO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID8gMCA6IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHB1c2hcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWNoZVB1c2godmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgZGF0YS5zZXQuYWRkKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuaGFzaFt2YWx1ZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgam9pbmluZyBgYXJyYXlgIHdpdGggYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGpvaW4uXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGpvaW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5Q29uY2F0KGFycmF5LCBvdGhlcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gLTEsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCArIG90aExlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytvdGhJbmRleCA8IG90aExlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXgrK10gPSBvdGhlcltvdGhJbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUNvcHkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGNhbGxiYWNrIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUV4dHJlbXVtYCBmb3IgYXJyYXlzIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgZnVuY3Rpb24gdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IGV4VmFsdWUgVGhlIGluaXRpYWwgZXh0cmVtdW0gdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5RXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yLCBleFZhbHVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgY29tcHV0ZWQgPSBleFZhbHVlLFxuICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVkO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gK2l0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZCkpIHtcbiAgICAgICAgICBjb21wdXRlZCA9IGN1cnJlbnQ7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0RnJvbUFycmF5XSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWBcbiAgICAgKiAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRGcm9tQXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKGluaXRGcm9tQXJyYXkgJiYgbGVuZ3RoKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0RnJvbUFycmF5XSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YFxuICAgICAqICBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0RnJvbUFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGluaXRGcm9tQXJyYXkgJiYgbGVuZ3RoKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnN1bWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0ICs9ICtpdGVyYXRlZShhcnJheVtsZW5ndGhdKSB8fCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbmAgdXNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdFZhbHVlIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzb3VyY2VWYWx1ZSBUaGUgc291cmNlIG9iamVjdCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduRGVmYXVsdHMob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0VmFsdWUgPT09IHVuZGVmaW5lZCA/IHNvdXJjZVZhbHVlIDogb2JqZWN0VmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25gIHVzZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnbkRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCBpZ25vcmVzXG4gICAgICogaW5oZXJpdGVkIHByb3BlcnR5IHZhbHVlcyB3aGVuIGNoZWNraW5nIGlmIGEgcHJvcGVydHkgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0VmFsdWUgVGhlIGRlc3RpbmF0aW9uIG9iamVjdCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNvdXJjZVZhbHVlIFRoZSBzb3VyY2Ugb2JqZWN0IHByb3BlcnR5IHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIG9iamVjdCBhbmQgc291cmNlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk93bkRlZmF1bHRzKG9iamVjdFZhbHVlLCBzb3VyY2VWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiAob2JqZWN0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpXG4gICAgICAgID8gc291cmNlVmFsdWVcbiAgICAgICAgOiBvYmplY3RWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uYXNzaWduYCBmb3IgY3VzdG9taXppbmcgYXNzaWduZWQgdmFsdWVzIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBhcmd1bWVudCBqdWdnbGluZywgbXVsdGlwbGUgc291cmNlcywgYW5kIGB0aGlzYCBiaW5kaW5nIGBjdXN0b21pemVyYFxuICAgICAqIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbldpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICByZXN1bHQgPSBjdXN0b21pemVyKHZhbHVlLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSk7XG5cbiAgICAgICAgaWYgKChyZXN1bHQgPT09IHJlc3VsdCA/IChyZXN1bHQgIT09IHZhbHVlKSA6ICh2YWx1ZSA9PT0gdmFsdWUpKSB8fFxuICAgICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgICBvYmplY3Rba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXJndW1lbnQganVnZ2xpbmcsXG4gICAgICogbXVsdGlwbGUgc291cmNlcywgYW5kIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUNvcHkoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RyaW5nIGNvbGxlY3Rpb25zXG4gICAgICogYW5kIGluZGl2aWR1YWwga2V5IGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW118c3RyaW5nW119IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyBvciBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChjb2xsZWN0aW9uLCBwcm9wcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNOaWwgPSBjb2xsZWN0aW9uID09IG51bGwsXG4gICAgICAgICAgaXNBcnIgPSAhaXNOaWwgJiYgaXNBcnJheUxpa2UoY29sbGVjdGlvbiksXG4gICAgICAgICAgbGVuZ3RoID0gaXNBcnIgPyBjb2xsZWN0aW9uLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocHJvcHNMZW5ndGgpO1xuXG4gICAgICB3aGlsZSgrK2luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGlzSW5kZXgoa2V5LCBsZW5ndGgpID8gY29sbGVjdGlvbltrZXldIDogdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBpc05pbCA/IHVuZGVmaW5lZCA6IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb3B5KHNvdXJjZSwgcHJvcHMsIG9iamVjdCkge1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2FsbGJhY2tgIHdoaWNoIHN1cHBvcnRzIHNwZWNpZnlpbmcgdGhlXG4gICAgICogbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcmdDb3VudF0gVGhlIG51bWJlciBvZiBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGZ1bmM7XG4gICAgICBpZiAodHlwZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0aGlzQXJnID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IGZ1bmNcbiAgICAgICAgICA6IGJpbmRDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCk7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhmdW5jKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzQXJnID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBwcm9wZXJ0eShmdW5jKVxuICAgICAgICA6IGJhc2VNYXRjaGVzUHJvcGVydHkoZnVuYywgdGhpc0FyZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXJndW1lbnQganVnZ2xpbmdcbiAgICAgKiBhbmQgYHRoaXNgIGJpbmRpbmcgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IGB2YWx1ZWAgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIEFzc29jaWF0ZXMgY2xvbmVzIHdpdGggc291cmNlIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCkgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBhcnJheUNvcHkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnO1xuXG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVPYmplY3QoaXNGdW5jID8ge30gOiB2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVhYmxlVGFnc1t0YWddXG4gICAgICAgICAgICA/IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcClcbiAgICAgICAgICAgIDogKG9iamVjdCA/IHZhbHVlIDoge30pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBbXSk7XG4gICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IFtdKTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0YWNrQS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrQVtsZW5ndGhdID09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YWNrQltsZW5ndGhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBBZGQgdGhlIHNvdXJjZSB2YWx1ZSB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMgYW5kIGFzc29jaWF0ZSBpdCB3aXRoIGl0cyBjbG9uZS5cbiAgICAgIHN0YWNrQS5wdXNoKHZhbHVlKTtcbiAgICAgIHN0YWNrQi5wdXNoKHJlc3VsdCk7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAoaXNBcnIgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKSh2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGJhc2VDbG9uZShzdWJWYWx1ZSwgaXNEZWVwLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFja0EsIHN0YWNrQik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgICAgICBpZiAoaXNPYmplY3QocHJvdG90eXBlKSkge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0IHx8IHt9O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBhbiBpbmRleFxuICAgICAqIG9mIHdoZXJlIHRvIHNsaWNlIHRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgVGhlIGFyZ3VtZW50cyBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGlmZmVyZW5jZWAgd2hpY2ggYWNjZXB0cyBhIHNpbmdsZSBhcnJheVxuICAgICAqIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBpc0NvbW1vbiA9IGluZGV4T2YgPT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgY2FjaGUgPSAoaXNDb21tb24gJiYgdmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSA/IGNyZWF0ZUNhY2hlKHZhbHVlcykgOiBudWxsLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBpbmRleE9mID0gY2FjaGVJbmRleE9mO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBjYWNoZTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiB2YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4T2YodmFsdWVzLCB2YWx1ZSwgMCkgPCAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R8c3RyaW5nfSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFja1xuICAgICAqIHNob3J0aGFuZHMgYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZXh0cmVtdW0gdmFsdWUgb2YgYGNvbGxlY3Rpb25gIGludm9raW5nIGBpdGVyYXRlZWAgZm9yIGVhY2ggdmFsdWVcbiAgICAgKiBpbiBgY29sbGVjdGlvbmAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB0aGUgdmFsdWUgaXMgcmFua2VkLlxuICAgICAqIFRoZSBgaXRlcmF0ZWVgIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBleFZhbHVlIFRoZSBpbml0aWFsIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IsIGV4VmFsdWUpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IGV4VmFsdWUsXG4gICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZWQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3VycmVudCA9ICtpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZCkgfHwgKGN1cnJlbnQgPT09IGV4VmFsdWUgJiYgY3VycmVudCA9PT0gcmVzdWx0KSkge1xuICAgICAgICAgIGNvbXB1dGVkID0gY3VycmVudDtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6ICgrc3RhcnQgfHwgMCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6ICgrZW5kIHx8IDApO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6IChlbmQgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB3aGlsZSAoc3RhcnQgPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRgLCBgXy5maW5kTGFzdGAsIGBfLmZpbmRLZXlgLCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcsIHdoaWNoIGl0ZXJhdGVzXG4gICAgICogb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgdGhlIHByb3ZpZGVkIGBlYWNoRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0S2V5XSBTcGVjaWZ5IHJldHVybmluZyB0aGUga2V5IG9mIHRoZSBmb3VuZCBlbGVtZW50XG4gICAgICogIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbmQoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYywgcmV0S2V5KSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmV0S2V5ID8ga2V5IDogdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBhZGRlZCBzdXBwb3J0IGZvciByZXN0cmljdGluZ1xuICAgICAqIGZsYXR0ZW5pbmcgYW5kIHNwZWNpZnlpbmcgdGhlIHN0YXJ0IGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IGZsYXR0ZW5pbmcgdG8gYXJyYXlzLWxpa2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBpc0RlZXAsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgICAoaXNTdHJpY3QgfHwgaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgaXNEZWVwLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvckluYCBhbmQgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzXG4gICAgICogb3ZlciBgb2JqZWN0YCBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgaW52b2tpbmcgYGl0ZXJhdGVlYCBmb3JcbiAgICAgKiBlYWNoIHByb3BlcnR5LiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHlcbiAgICAgKiByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9ySW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2tcbiAgICAgKiBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSB0aG9zZSBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYmplY3Rba2V5XSkpIHtcbiAgICAgICAgICByZXN1bHRbKytyZXNJbmRleF0gPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBzdHJpbmcgcGF0aHNcbiAgICAgKiBhbmQgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXRoS2V5XSBUaGUga2V5IHJlcHJlc2VudGF0aW9uIG9mIHBhdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoLCBwYXRoS2V5KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhdGhLZXkgIT09IHVuZGVmaW5lZCAmJiBwYXRoS2V5IGluIHRvT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcGF0aCA9IFtwYXRoS2V5XTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbcGF0aFtpbmRleCsrXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2l0aG91dCBzdXBwb3J0IGZvciBgdGhpc2AgYmluZGluZ1xuICAgICAqIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTG9vc2VdIFNwZWNpZnkgcGVyZm9ybWluZyBwYXJ0aWFsIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0FdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0JdIFRyYWNrcyB0cmF2ZXJzZWQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdCh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJhc2VJc0VxdWFsLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0xvb3NlXSBTcGVjaWZ5IHBlcmZvcm1pbmcgcGFydGlhbCBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tCPVtdXSBUcmFja3MgdHJhdmVyc2VkIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gYXJyYXlUYWcsXG4gICAgICAgICAgb3RoVGFnID0gYXJyYXlUYWc7XG5cbiAgICAgIGlmICghb2JqSXNBcnIpIHtcbiAgICAgICAgb2JqVGFnID0gb2JqVG9TdHJpbmcuY2FsbChvYmplY3QpO1xuICAgICAgICBpZiAob2JqVGFnID09IGFyZ3NUYWcpIHtcbiAgICAgICAgICBvYmpUYWcgPSBvYmplY3RUYWc7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqVGFnICE9IG9iamVjdFRhZykge1xuICAgICAgICAgIG9iaklzQXJyID0gaXNUeXBlZEFycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghb3RoSXNBcnIpIHtcbiAgICAgICAgb3RoVGFnID0gb2JqVG9TdHJpbmcuY2FsbChvdGhlcik7XG4gICAgICAgIGlmIChvdGhUYWcgPT0gYXJnc1RhZykge1xuICAgICAgICAgIG90aFRhZyA9IG9iamVjdFRhZztcbiAgICAgICAgfSBlbHNlIGlmIChvdGhUYWcgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgICAgb3RoSXNBcnIgPSBpc1R5cGVkQXJyYXkob3RoZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmICEob2JqSXNBcnIgfHwgb2JqSXNPYmopKSB7XG4gICAgICAgIHJldHVybiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTG9vc2UpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCwgb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIC8vIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGRldGVjdGluZyBjaXJjdWxhciByZWZlcmVuY2VzIHNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI0pPLlxuICAgICAgc3RhY2tBIHx8IChzdGFja0EgPSBbXSk7XG4gICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IFtdKTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0YWNrQS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrQVtsZW5ndGhdID09IG9iamVjdCkge1xuICAgICAgICAgIHJldHVybiBzdGFja0JbbGVuZ3RoXSA9PSBvdGhlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQWRkIGBvYmplY3RgIGFuZCBgb3RoZXJgIHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgIHN0YWNrQS5wdXNoKG9iamVjdCk7XG4gICAgICBzdGFja0IucHVzaChvdGhlcik7XG5cbiAgICAgIHZhciByZXN1bHQgPSAob2JqSXNBcnIgPyBlcXVhbEFycmF5cyA6IGVxdWFsT2JqZWN0cykob2JqZWN0LCBvdGhlciwgZXF1YWxGdW5jLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQik7XG5cbiAgICAgIHN0YWNrQS5wb3AoKTtcbiAgICAgIHN0YWNrQi5wb3AoKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrXG4gICAgICogc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVyeSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpbmcgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSB0b09iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBjdXN0b21pemVyLCB0cnVlKSA6IHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lcyBub3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICB2YXIga2V5ID0gbWF0Y2hEYXRhWzBdWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBtYXRjaERhdGFbMF1bMV07XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHZhbHVlICYmICh2YWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gdG9PYmplY3Qob2JqZWN0KSkpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXMgbm90IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHBhdGgpLFxuICAgICAgICAgIGlzQ29tbW9uID0gaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSxcbiAgICAgICAgICBwYXRoS2V5ID0gKHBhdGggKyAnJyk7XG5cbiAgICAgIHBhdGggPSB0b1BhdGgocGF0aCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5ID0gcGF0aEtleTtcbiAgICAgICAgb2JqZWN0ID0gdG9PYmplY3Qob2JqZWN0KTtcbiAgICAgICAgaWYgKChpc0FyciB8fCAhaXNDb21tb24pICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICBvYmplY3QgPSBwYXRoLmxlbmd0aCA9PSAxID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXkgPSBsYXN0KHBhdGgpO1xuICAgICAgICAgIG9iamVjdCA9IHRvT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZVxuICAgICAgICAgID8gKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBvYmplY3QpKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9iamVjdFtrZXldLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhcmd1bWVudCBqdWdnbGluZyxcbiAgICAgKiBtdWx0aXBsZSBzb3VyY2VzLCBhbmQgYHRoaXNgIGJpbmRpbmcgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIEFzc29jaWF0ZXMgdmFsdWVzIHdpdGggc291cmNlIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplciwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIGlzU3JjQXJyID0gaXNBcnJheUxpa2Uoc291cmNlKSAmJiAoaXNBcnJheShzb3VyY2UpIHx8IGlzVHlwZWRBcnJheShzb3VyY2UpKSxcbiAgICAgICAgICBwcm9wcyA9IGlzU3JjQXJyID8gdW5kZWZpbmVkIDoga2V5cyhzb3VyY2UpO1xuXG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIHNyY1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JqZWN0TGlrZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBzdGFja0EgfHwgKHN0YWNrQSA9IFtdKTtcbiAgICAgICAgICBzdGFja0IgfHwgKHN0YWNrQiA9IFtdKTtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgICByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBpc0NvbW1vbiA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChyZXN1bHQgIT09IHVuZGVmaW5lZCB8fCAoaXNTcmNBcnIgJiYgIShrZXkgaW4gb2JqZWN0KSkpICYmXG4gICAgICAgICAgICAgIChpc0NvbW1vbiB8fCAocmVzdWx0ID09PSByZXN1bHQgPyAocmVzdWx0ICE9PSB2YWx1ZSkgOiAodmFsdWUgPT09IHZhbHVlKSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbc3RhY2tBPVtdXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtzdGFja0I9W11dIEFzc29jaWF0ZXMgdmFsdWVzIHdpdGggc291cmNlIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBzdGFja0EubGVuZ3RoLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoc3RhY2tBW2xlbmd0aF0gPT0gc3JjVmFsdWUpIHtcbiAgICAgICAgICBvYmplY3Rba2V5XSA9IHN0YWNrQltsZW5ndGhdO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgcmVzdWx0ID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShzcmNWYWx1ZSkgJiYgKGlzQXJyYXkoc3JjVmFsdWUpIHx8IGlzVHlwZWRBcnJheShzcmNWYWx1ZSkpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgIDogKGlzQXJyYXlMaWtlKHZhbHVlKSA/IGFycmF5Q29weSh2YWx1ZSkgOiBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gaXNBcmd1bWVudHModmFsdWUpXG4gICAgICAgICAgICA/IHRvUGxhaW5PYmplY3QodmFsdWUpXG4gICAgICAgICAgICA6IChpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDoge30pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIHZhbHVlIHRvIHRoZSBzdGFjayBvZiB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgYXNzb2NpYXRlXG4gICAgICAvLyBpdCB3aXRoIGl0cyBtZXJnZWQgdmFsdWUuXG4gICAgICBzdGFja0EucHVzaChzcmNWYWx1ZSk7XG4gICAgICBzdGFja0IucHVzaChyZXN1bHQpO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIG9iamVjdFtrZXldID0gbWVyZ2VGdW5jKHJlc3VsdCwgc3JjVmFsdWUsIGN1c3RvbWl6ZXIsIHN0YWNrQSwgc3RhY2tCKTtcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSByZXN1bHQgPyAocmVzdWx0ICE9PSB2YWx1ZSkgOiAodmFsdWUgPT09IHZhbHVlKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHZhciBwYXRoS2V5ID0gKHBhdGggKyAnJyk7XG4gICAgICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgsIHBhdGhLZXkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4IGFyZ3VtZW50cyBhbmQgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChpbmRleCAhPSBwcmV2aW91cyAmJiBpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXJndW1lbnQganVnZ2xpbmdcbiAgICAgKiBhbmQgcmV0dXJuaW5nIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIG1pbmltdW0gcG9zc2libGUgdmFsdWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obWluLCBtYXgpIHtcbiAgICAgIHJldHVybiBtaW4gKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBjYWxsYmFjayBzaG9ydGhhbmRzIGFuZCBgdGhpc2AgYmluZGluZywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICAgKiB1c2luZyB0aGUgcHJvdmlkZWQgYGVhY2hGdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbml0RnJvbUNvbGxlY3Rpb24gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50XG4gICAgICogIG9mIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRGcm9tQ29sbGVjdGlvbiwgZWFjaEZ1bmMpIHtcbiAgICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRGcm9tQ29sbGVjdGlvblxuICAgICAgICAgID8gKGluaXRGcm9tQ29sbGVjdGlvbiA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3AgZGV0ZWN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogKCtzdGFydCB8fCAwKTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogKCtlbmQgfHwgMCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZVxuICAgICAqIHRoZSBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeU9yZGVyYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFuW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0QnlPcmRlcihjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgdmFyIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2soKSxcbiAgICAgICAgICBpbmRleCA9IC0xO1xuXG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7IHJldHVybiBjYWxsYmFjayhpdGVyYXRlZSk7IH0pO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7IHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7IH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCB3aXRob3V0IHN1cHBvcnQgZm9yIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVN1bShjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ICs9ICtpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHx8IDA7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcWAgd2l0aG91dCBzdXBwb3J0IGZvciBjYWxsYmFjayBzaG9ydGhhbmRzXG4gICAgICogYW5kIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlLXZhbHVlLWZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IGluZGV4T2YgPT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgaXNMYXJnZSA9IGlzQ29tbW9uICYmIGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFLFxuICAgICAgICAgIHNlZW4gPSBpc0xhcmdlID8gY3JlYXRlQ2FjaGUoKSA6IG51bGwsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc0xhcmdlID0gZmFsc2U7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBhcnJheSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoaXNDb21tb24gJiYgdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIDApIDwgMCkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZSB8fCBpc0xhcmdlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICAgKiBvZiBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gb2JqZWN0W3Byb3BzW2luZGV4XV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRyb3BSaWdodFdoaWxlYCwgYF8uZHJvcFdoaWxlYCwgYF8udGFrZVJpZ2h0V2hpbGVgLFxuICAgICAqIGFuZCBgXy50YWtlV2hpbGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgY2FsbGJhY2sgc2hvcnRoYW5kcyBhbmQgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFjdGlvbnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc1tpbmRleF07XG4gICAgICAgIHJlc3VsdCA9IGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJpbmFyeUluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogbG93O1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmICgocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpICYmIGNvbXB1dGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiaW5hcnlJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmluYXJ5SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGludm9rZXMgYGl0ZXJhdGVlYCBmb3JcbiAgICAgKiBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5hcnlJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzVW5kZWYgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgaXNEZWYgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgaXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQ7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IGlzUmVmbGV4aXZlIHx8IHJldEhpZ2hlc3Q7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gaXNSZWZsZXhpdmUgJiYgaXNEZWYgJiYgKHJldEhpZ2hlc3QgfHwgY29tcHV0ZWQgIT0gbnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZikge1xuICAgICAgICAgIHNldExvdyA9IGlzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IGlzRGVmKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb21wdXRlZCA9PSBudWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUNhbGxiYWNrYCB3aGljaCBvbmx5IHN1cHBvcnRzIGB0aGlzYCBiaW5kaW5nXG4gICAgICogYW5kIHNwZWNpZnlpbmcgdGhlIG51bWJlciBvZiBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcmdDb3VudF0gVGhlIG51bWJlciBvZiBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiaW5kQ2FsbGJhY2soZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzQXJnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGFyZ0NvdW50KSB7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgNTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlciwga2V5LCBvYmplY3QsIHNvdXJjZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgdmFsdWUsIG90aGVyLCBrZXksIG9iamVjdCwgc291cmNlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBnaXZlbiBhcnJheSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBidWZmZXJDbG9uZShidWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyLmJ5dGVMZW5ndGgpLFxuICAgICAgICAgIHZpZXcgPSBuZXcgVWludDhBcnJheShyZXN1bHQpO1xuXG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzKSB7XG4gICAgICB2YXIgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMpIHtcbiAgICAgIHZhciBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShhcmdzTGVuZ3RoICsgcmlnaHRMZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmNvdW50QnlgLCBgXy5ncm91cEJ5YCwgYF8uaW5kZXhCeWAsIG9yIGBfLnBhcnRpdGlvbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgYWNjdW11bGF0b3Igb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgdGhlIGFjY3VtdWxhdG9yIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcbiAgICAgICAgaXRlcmF0ZWUgPSBnZXRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgICBzZXR0ZXIocmVzdWx0LCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSwgY29sbGVjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHNldHRlcihyZXN1bHQsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSwgY29sbGVjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmFzc2lnbmAsIGBfLmRlZmF1bHRzYCwgb3IgYF8ubWVyZ2VgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIHJlc3RQYXJhbShmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAyID8gc291cmNlc1tsZW5ndGggLSAyXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gYmluZENhbGxiYWNrKGN1c3RvbWl6ZXIsIHRoaXNBcmcsIDUpO1xuICAgICAgICAgIGxlbmd0aCAtPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgdGhpc0FyZyA9PSAnZnVuY3Rpb24nID8gdGhpc0FyZyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBsZW5ndGggLT0gKGN1c3RvbWl6ZXIgPyAxIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24gPyBnZXRMZW5ndGgoY29sbGVjdGlvbikgOiAwO1xuICAgICAgICBpZiAoIWlzTGVuZ3RoKGxlbmd0aCkpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSB0b09iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBgXy5mb3JJbmAgb3IgYF8uZm9ySW5SaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSB0b09iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCBhbmQgaW52b2tlcyBpdCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmRXcmFwcGVyKGZ1bmMsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcldyYXBwZXIoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBTZXRgIGNhY2hlIG9iamVjdCB0byBvcHRpbWl6ZSBsaW5lYXIgc2VhcmNoZXMgb2YgbGFyZ2UgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyB0aGUgbmV3IGNhY2hlIG9iamVjdCBpZiBgU2V0YCBpcyBzdXBwb3J0ZWQsIGVsc2UgYG51bGxgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKHZhbHVlcykge1xuICAgICAgcmV0dXJuIChuYXRpdmVDcmVhdGUgJiYgU2V0KSA/IG5ldyBTZXRDYWNoZSh2YWx1ZXMpIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBjb21wb3VuZCB3b3JkcyBvdXQgb2YgdGhlIHdvcmRzIGluIGFcbiAgICAgKiBnaXZlbiBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBhcnJheSA9IHdvcmRzKGRlYnVycihzdHJpbmcpKSxcbiAgICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2socmVzdWx0LCBhcnJheVtpbmRleF0sIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yV3JhcHBlcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLlxuICAgICAgICAvLyBTZWUgaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZyBUaGUgY3VycnkgYml0IGZsYWcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycnkgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZmxhZykge1xuICAgICAgZnVuY3Rpb24gY3VycnlGdW5jKGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoZnVuYywgYXJpdHksIGd1YXJkKSkge1xuICAgICAgICAgIGFyaXR5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwcGVyKGZ1bmMsIGZsYWcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5RnVuYy5wbGFjZWhvbGRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyeUZ1bmM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmRlZmF1bHRzYCBvciBgXy5kZWZhdWx0c0RlZXBgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlZmF1bHRzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRzKGFzc2lnbmVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gcmVzdFBhcmFtKGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGN1c3RvbWl6ZXIpO1xuICAgICAgICByZXR1cm4gYXNzaWduZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5tYXhgIG9yIGBfLm1pbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBleFZhbHVlIFRoZSBpbml0aWFsIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGV4dHJlbXVtIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUV4dHJlbXVtKGNvbXBhcmF0b3IsIGV4VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgICBpZiAodGhpc0FyZyAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgdGhpc0FyZykpIHtcbiAgICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcbiAgICAgICAgaWYgKGl0ZXJhdGVlLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdG9JdGVyYWJsZShjb2xsZWN0aW9uKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYXJyYXlFeHRyZW11bShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgY29tcGFyYXRvciwgZXhWYWx1ZSk7XG4gICAgICAgICAgaWYgKCEoY29sbGVjdGlvbi5sZW5ndGggJiYgcmVzdWx0ID09PSBleFZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VFeHRyZW11bShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgY29tcGFyYXRvciwgZXhWYWx1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICAgIGlmIChpc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gYmFzZUZpbmRJbmRleChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21SaWdodCk7XG4gICAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBjb2xsZWN0aW9uW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZUZpbmQoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kSW5kZXhgIG9yIGBfLmZpbmRMYXN0SW5kZXhgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmRJbmRleChmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRLZXlgIG9yIGBfLmZpbmRMYXN0S2V5YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb2JqZWN0RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGFuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmRLZXkob2JqZWN0RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICAgIHJldHVybiBiYXNlRmluZChvYmplY3QsIHByZWRpY2F0ZSwgb2JqZWN0RnVuYywgdHJ1ZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3cmFwcGVyLFxuICAgICAgICAgICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAwLFxuICAgICAgICAgICAgZnVuY3MgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghd3JhcHBlciAmJiBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1ICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gLTEgOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiYgZGF0YVsxXSA9PSAoQVJZX0ZMQUcgfCBDVVJSWV9GTEFHIHwgUEFSVElBTF9GTEFHIHwgUkVBUkdfRkxBRykgJiYgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMSkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSkgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLmZvckVhY2hgIG9yIGBfLmZvckVhY2hSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGFuIGFycmF5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGVhY2ggZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9yRWFjaChhcnJheUZ1bmMsIGVhY2hGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzQXJnID09PSB1bmRlZmluZWQgJiYgaXNBcnJheShjb2xsZWN0aW9uKSlcbiAgICAgICAgICA/IGFycmF5RnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSlcbiAgICAgICAgICA6IGVhY2hGdW5jKGNvbGxlY3Rpb24sIGJpbmRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMykpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLmZvckluYCBvciBgXy5mb3JJblJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb2JqZWN0RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGFuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBlYWNoIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZvckluKG9iamVjdEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlcmF0ZWUgIT0gJ2Z1bmN0aW9uJyB8fCB0aGlzQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpdGVyYXRlZSA9IGJpbmRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdEZ1bmMob2JqZWN0LCBpdGVyYXRlZSwga2V5c0luKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGZvciBgXy5mb3JPd25gIG9yIGBfLmZvck93blJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb2JqZWN0RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGFuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBlYWNoIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZvck93bihvYmplY3RGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdGVlICE9ICdmdW5jdGlvbicgfHwgdGhpc0FyZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaXRlcmF0ZWUgPSBiaW5kQ2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3RGdW5jKG9iamVjdCwgaXRlcmF0ZWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLm1hcEtleXNgIG9yIGBfLm1hcFZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTWFwS2V5c10gU3BlY2lmeSBtYXBwaW5nIGtleXMgaW5zdGVhZCBvZiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWFwIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE1hcHBlcihpc01hcEtleXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgaXRlcmF0ZWUgPSBnZXRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG5cbiAgICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICAgIHZhciBtYXBwZWQgPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpO1xuICAgICAgICAgIGtleSA9IGlzTWFwS2V5cyA/IG1hcHBlZCA6IGtleTtcbiAgICAgICAgICB2YWx1ZSA9IGlzTWFwS2V5cyA/IHZhbHVlIDogbWFwcGVkO1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLnBhZExlZnRgIG9yIGBfLnBhZFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IHBhZGRpbmcgZnJvbSB0aGUgcmlnaHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZERpcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICAgIHJldHVybiAoZnJvbVJpZ2h0ID8gc3RyaW5nIDogJycpICsgY3JlYXRlUGFkZGluZyhzdHJpbmcsIGxlbmd0aCwgY2hhcnMpICsgKGZyb21SaWdodCA/ICcnIDogc3RyaW5nKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnBhcnRpYWxgIG9yIGBfLnBhcnRpYWxSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZyBUaGUgcGFydGlhbCBiaXQgZmxhZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZmxhZykge1xuICAgICAgdmFyIHBhcnRpYWxGdW5jID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIHBhcnRpYWxGdW5jLnBsYWNlaG9sZGVyKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYywgZmxhZywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJ0aWFsRnVuYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gZm9yIGBfLnJlZHVjZWAgb3IgYF8ucmVkdWNlUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhbiBhcnJheS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBlYWNoIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZShhcnJheUZ1bmMsIGVhY2hGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBpbml0RnJvbUFycmF5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG4gICAgICAgIHJldHVybiAodHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgdGhpc0FyZyA9PT0gdW5kZWZpbmVkICYmIGlzQXJyYXkoY29sbGVjdGlvbikpXG4gICAgICAgICAgPyBhcnJheUZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0RnJvbUFycmF5KVxuICAgICAgICAgIDogYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBnZXRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgNCksIGFjY3VtdWxhdG9yLCBpbml0RnJvbUFycmF5LCBlYWNoRnVuYyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCBhbmQgaW52b2tlcyBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBmbGFncy4gU2VlIGBjcmVhdGVXcmFwcGVyYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkV3JhcHBlcihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBBUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBCSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycnkgPSBiaXRtYXNrICYgQ1VSUllfRkxBRyxcbiAgICAgICAgICBpc0N1cnJ5Qm91bmQgPSBiaXRtYXNrICYgQ1VSUllfQk9VTkRfRkxBRyxcbiAgICAgICAgICBpc0N1cnJ5UmlnaHQgPSBiaXRtYXNrICYgQ1VSUllfUklHSFRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcldyYXBwZXIoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIC8vIEF2b2lkIGBhcmd1bWVudHNgIG9iamVjdCB1c2UgZGlzcXVhbGlmeWluZyBvcHRpbWl6YXRpb25zIGJ5XG4gICAgICAgIC8vIGNvbnZlcnRpbmcgaXQgdG8gYW4gYXJyYXkgYmVmb3JlIHByb3ZpZGluZyBpdCB0byBvdGhlciBmdW5jdGlvbnMuXG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyeSB8fCBpc0N1cnJ5UmlnaHQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSB3cmFwcGVyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICBhcmdzSG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICAgIGxlbmd0aCAtPSBhcmdzSG9sZGVycy5sZW5ndGg7XG4gICAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgICB2YXIgbmV3QXJnUG9zID0gYXJnUG9zID8gYXJyYXlDb3B5KGFyZ1BvcykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgbmV3QXJpdHkgPSBuYXRpdmVNYXgoYXJpdHkgLSBsZW5ndGgsIDApLFxuICAgICAgICAgICAgICAgIG5ld3NIb2xkZXJzID0gaXNDdXJyeSA/IGFyZ3NIb2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBhcmdzSG9sZGVycyxcbiAgICAgICAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBhcmdzIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogYXJncztcblxuICAgICAgICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFBBUlRJQUxfRkxBRyA6IFBBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFBBUlRJQUxfUklHSFRfRkxBRyA6IFBBUlRJQUxfRkxBRyk7XG5cbiAgICAgICAgICAgIGlmICghaXNDdXJyeUJvdW5kKSB7XG4gICAgICAgICAgICAgIGJpdG1hc2sgJj0gfihCSU5EX0ZMQUcgfCBCSU5EX0tFWV9GTEFHKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdEYXRhID0gW2Z1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdzSG9sZGVycywgbmV3UGFydGlhbHNSaWdodCwgbmV3SG9sZGVyc1JpZ2h0LCBuZXdBcmdQb3MsIGFyeSwgbmV3QXJpdHldLFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZFdyYXBwZXIuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcblxuICAgICAgICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3RvcldyYXBwZXIoZnVuYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgcmVxdWlyZWQgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIHRoZSBnaXZlbiBgbGVuZ3RoYC5cbiAgICAgKiBUaGUgYGNoYXJzYCBzdHJpbmcgaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY3JlYXRlIHBhZGRpbmcgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBsZW5ndGggPSArbGVuZ3RoO1xuXG4gICAgICBpZiAoc3RyTGVuZ3RoID49IGxlbmd0aCB8fCAhbmF0aXZlSXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgcGFkTGVuZ3RoID0gbGVuZ3RoIC0gc3RyTGVuZ3RoO1xuICAgICAgY2hhcnMgPSBjaGFycyA9PSBudWxsID8gJyAnIDogKGNoYXJzICsgJycpO1xuICAgICAgcmV0dXJuIHJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChwYWRMZW5ndGggLyBjaGFycy5sZW5ndGgpKS5zbGljZSgwLCBwYWRMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCBhbmQgaW52b2tlcyBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogdGhlIHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgb2YgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcHBlcmAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsV3JhcHBlcihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBCSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3JXcmFwcGVyKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICAvLyBBdm9pZCBgYXJndW1lbnRzYCBvYmplY3QgdXNlIGRpc3F1YWxpZnlpbmcgb3B0aW1pemF0aW9ucyBieVxuICAgICAgICAvLyBjb252ZXJ0aW5nIGl0IHRvIGFuIGFycmF5IGJlZm9yZSBwcm92aWRpbmcgaXQgYGZ1bmNgLlxuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmNlaWxgLCBgXy5mbG9vcmAsIG9yIGBfLnJvdW5kYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gMCA6ICgrcHJlY2lzaW9uIHx8IDApO1xuICAgICAgICBpZiAocHJlY2lzaW9uKSB7XG4gICAgICAgICAgcHJlY2lzaW9uID0gcG93KDEwLCBwcmVjaXNpb24pO1xuICAgICAgICAgIHJldHVybiBmdW5jKG51bWJlciAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnNvcnRlZEluZGV4YCBvciBgXy5zb3J0ZWRMYXN0SW5kZXhgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW5kZXggZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlU29ydGVkSW5kZXgocmV0SGlnaGVzdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2soaXRlcmF0ZWUpO1xuICAgICAgICByZXR1cm4gKGl0ZXJhdGVlID09IG51bGwgJiYgY2FsbGJhY2sgPT09IGJhc2VDYWxsYmFjaylcbiAgICAgICAgICA/IGJpbmFyeUluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdClcbiAgICAgICAgICA6IGJpbmFyeUluZGV4QnkoYXJyYXksIHZhbHVlLCBjYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMSksIHJldEhpZ2hlc3QpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHJlZmVyZW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBvZiBmbGFncy5cbiAgICAgKiAgVGhlIGJpdG1hc2sgbWF5IGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZmxhZ3M6XG4gICAgICogICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogICAyNTYgLSBgXy5hcnlgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcHBlcihmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIEJJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oUEFSVElBTF9GTEFHIHwgUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGVuZ3RoIC09IChob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwKTtcbiAgICAgIGlmIChiaXRtYXNrICYgUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKSxcbiAgICAgICAgICBuZXdEYXRhID0gW2Z1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eV07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XTtcbiAgICAgIH1cbiAgICAgIG5ld0RhdGFbOV0gPSBhcml0eSA9PSBudWxsXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiAobmF0aXZlTWF4KGFyaXR5IC0gbGVuZ3RoLCAwKSB8fCAwKTtcblxuICAgICAgaWYgKGJpdG1hc2sgPT0gQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kV3JhcHBlcihuZXdEYXRhWzBdLCBuZXdEYXRhWzJdKTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKEJJTkRfRkxBRyB8IFBBUlRJQUxfRkxBRykpICYmICFuZXdEYXRhWzRdLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsV3JhcHBlci5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkV3JhcHBlci5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyBhcnJheXMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNMb29zZV0gU3BlY2lmeSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQV0gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQl0gVHJhY2tzIHRyYXZlcnNlZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgaXNMb29zZSwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNMb29zZSAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdLFxuICAgICAgICAgICAgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIoaXNMb29zZSA/IG90aFZhbHVlIDogYXJyVmFsdWUsIGlzTG9vc2UgPyBhcnJWYWx1ZSA6IG90aFZhbHVlLCBpbmRleCkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoaXNMb29zZSkge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgY3VzdG9taXplciwgaXNMb29zZSwgc3RhY2tBLCBzdGFja0IpO1xuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcpIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtYmVycywgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzIGFuZCBib29sZWFuc1xuICAgICAgICAgIC8vIHRvIGAxYCBvciBgMGAgdHJlYXRpbmcgaW52YWxpZCBkYXRlcyBjb2VyY2VkIHRvIGBOYU5gIGFzIG5vdCBlcXVhbC5cbiAgICAgICAgICByZXR1cm4gK29iamVjdCA9PSArb3RoZXI7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIFRyZWF0IGBOYU5gIHZzLiBgTmFOYCBhcyBlcXVhbC5cbiAgICAgICAgICByZXR1cm4gKG9iamVjdCAhPSArb2JqZWN0KVxuICAgICAgICAgICAgPyBvdGhlciAhPSArb3RoZXJcbiAgICAgICAgICAgIDogb2JqZWN0ID09ICtvdGhlcjtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncyBwcmltaXRpdmVzIGFuZCBzdHJpbmdcbiAgICAgICAgICAvLyBvYmplY3RzIGFzIGVxdWFsLiBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMTAuNi40IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmluZyB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNMb29zZV0gU3BlY2lmeSBwZXJmb3JtaW5nIHBhcnRpYWwgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQV0gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3N0YWNrQl0gVHJhY2tzIHRyYXZlcnNlZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGVxdWFsRnVuYywgY3VzdG9taXplciwgaXNMb29zZSwgc3RhY2tBLCBzdGFja0IpIHtcbiAgICAgIHZhciBvYmpQcm9wcyA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBrZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc0xvb3NlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzTG9vc2UgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNraXBDdG9yID0gaXNMb29zZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV0sXG4gICAgICAgICAgICByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihpc0xvb3NlID8gb3RoVmFsdWUgOiBvYmpWYWx1ZSwgaXNMb29zZT8gb2JqVmFsdWUgOiBvdGhWYWx1ZSwga2V5KSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWQgPyBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBjdXN0b21pemVyLCBpc0xvb3NlLCBzdGFja0EsIHN0YWNrQikgOiByZXN1bHQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcImNhbGxiYWNrXCIgZnVuY3Rpb24uIElmIHRoZSBgXy5jYWxsYmFja2AgbWV0aG9kIGlzXG4gICAgICogY3VzdG9taXplZCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zXG4gICAgICogdGhlIGBiYXNlQ2FsbGJhY2tgIGZ1bmN0aW9uLiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRoZSBjaG9zZW4gZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmQgaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5jYWxsYmFjayB8fCBjYWxsYmFjaztcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gY2FsbGJhY2sgPyBiYXNlQ2FsbGJhY2sgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJnQ291bnQgPyByZXN1bHQoZnVuYywgdGhpc0FyZywgYXJnQ291bnQpIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBmdW5jLm5hbWUsXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpbmRleE9mXCIgZnVuY3Rpb24uIElmIHRoZSBgXy5pbmRleE9mYCBtZXRob2QgaXNcbiAgICAgKiBjdXN0b21pemVkIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnNcbiAgICAgKiB0aGUgYGJhc2VJbmRleE9mYCBmdW5jdGlvbi4gSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0aGUgY2hvc2VuIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxudW1iZXJ9IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4T2YoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaW5kZXhPZiB8fCBpbmRleE9mO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpbmRleE9mID8gYmFzZUluZGV4T2YgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gY29sbGVjdGlvbiA/IHJlc3VsdChjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSB2YWx1ZSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXZvaWQgYSBbSklUIGJ1Z10oaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0Mjc5MilcbiAgICAgKiB0aGF0IGFmZmVjdHMgU2FmYXJpIG9uIGF0IGxlYXN0IGlPUyA4LjEtOC4zIEFSTTY0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIFwibGVuZ3RoXCIgdmFsdWUuXG4gICAgICovXG4gICAgdmFyIGdldExlbmd0aCA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBwYWlycyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVuZ3RoXVsyXSA9IGlzU3RyaWN0Q29tcGFyYWJsZShyZXN1bHRbbGVuZ3RoXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgICAgcmV0dXJuIGlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIGFycmF5IHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBpZiAoISh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yKSkge1xuICAgICAgICBDdG9yID0gT2JqZWN0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGJ1ZmZlckNsb25lKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgdmFyIGJ1ZmZlciA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKGlzRGVlcCA/IGJ1ZmZlckNsb25lKGJ1ZmZlcikgOiBidWZmZXIsIG9iamVjdC5ieXRlT2Zmc2V0LCBvYmplY3QubGVuZ3RoKTtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yKG9iamVjdC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhvYmplY3QpKTtcbiAgICAgICAgICByZXN1bHQubGFzdEluZGV4ID0gb2JqZWN0Lmxhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludm9rZVBhdGgob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwgJiYgIWlzS2V5KHBhdGgsIG9iamVjdCkpIHtcbiAgICAgICAgcGF0aCA9IHRvUGF0aChwYXRoKTtcbiAgICAgICAgb2JqZWN0ID0gcGF0aC5sZW5ndGggPT0gMSA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICAgICAgcGF0aCA9IGxhc3QocGF0aCk7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3BhdGhdO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZ1bmMuYXBwbHkob2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKGdldExlbmd0aCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhbHVlID0gKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgPyArdmFsdWUgOiAtMTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgICAgIHJldHVybiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBvYmplY3RbaW5kZXhdO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gKHZhbHVlID09PSBvdGhlcikgOiAob3RoZXIgIT09IG90aGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAoKHR5cGUgPT0gJ3N0cmluZycgJiYgcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSkgfHwgdHlwZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiByZXN1bHQgfHwgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIHRvT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKTtcbiAgICAgIGlmICghKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIGlzIGJhc2VkIG9uIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgcmVxdWlyZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kIGBfLnJlYXJnYFxuICAgICAqIGF1Z21lbnQgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlIGV4ZWN1dGVkIGltcG9ydGFudCxcbiAgICAgKiBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlXG4gICAgICogY29tbW9uIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgQVJZX0ZMQUc7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKHNyY0JpdG1hc2sgPT0gQVJZX0ZMQUcgJiYgYml0bWFzayA9PSBDVVJSWV9GTEFHKSB8fFxuICAgICAgICAoc3JjQml0bWFzayA9PSBBUllfRkxBRyAmJiBiaXRtYXNrID09IFJFQVJHX0ZMQUcgJiYgZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSB8fFxuICAgICAgICAoc3JjQml0bWFzayA9PSAoQVJZX0ZMQUcgfCBSRUFSR19GTEFHKSAmJiBiaXRtYXNrID09IENVUlJZX0ZMQUcpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBCSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSAoYml0bWFzayAmIEJJTkRfRkxBRykgPyAwIDogQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogYXJyYXlDb3B5KHZhbHVlKTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogYXJyYXlDb3B5KHNvdXJjZVs0XSk7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IGFycmF5Q29weSh2YWx1ZSk7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IGFycmF5Q29weShzb3VyY2VbNl0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gYXJyYXlDb3B5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBBUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3RWYWx1ZSBUaGUgZGVzdGluYXRpb24gb2JqZWN0IHByb3BlcnR5IHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc291cmNlVmFsdWUgVGhlIHNvdXJjZSBvYmplY3QgcHJvcGVydHkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGVmYXVsdHMob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0VmFsdWUgPT09IHVuZGVmaW5lZCA/IHNvdXJjZVZhbHVlIDogbWVyZ2Uob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlLCBtZXJnZURlZmF1bHRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucGlja2Agd2hpY2ggcGlja3MgYG9iamVjdGAgcHJvcGVydGllcyBzcGVjaWZpZWRcbiAgICAgKiBieSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5QXJyYXkob2JqZWN0LCBwcm9wcykge1xuICAgICAgb2JqZWN0ID0gdG9PYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnBpY2tgIHdoaWNoIHBpY2tzIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWBcbiAgICAgKiByZXR1cm5zIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnlDYWxsYmFjayhvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgYmFzZUZvckluKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gYXJyYXlDb3B5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eSBmdW5jdGlvblxuICAgICAqIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZSBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVNldERhdGEoa2V5LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIG9mIGBPYmplY3Qua2V5c2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZiB0aGVcbiAgICAgKiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hpbUtleXMob2JqZWN0KSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzSW4ob2JqZWN0KSxcbiAgICAgICAgICBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wc0xlbmd0aCAmJiBvYmplY3QubGVuZ3RoO1xuXG4gICAgICB2YXIgYWxsb3dJbmRleGVzID0gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoKGFsbG93SW5kZXhlcyAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSkgfHwgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXktbGlrZSBvYmplY3QgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSXRlcmFibGUodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIG9iamVjdCBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpID8gdmFsdWUgOiBPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gcHJvcGVydHkgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VUb1N0cmluZyh2YWx1ZSkucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgcmV0dXJuIHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlclxuICAgICAgICA/IHdyYXBwZXIuY2xvbmUoKVxuICAgICAgICA6IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fLCBhcnJheUNvcHkod3JhcHBlci5fX2FjdGlvbnNfXykpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGNvbGxlY3Rpb25gIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVuay5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBjb250YWluaW5nIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09IG51bGwpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KG5hdGl2ZUZsb29yKHNpemUpIHx8IDEsIDEpO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICByZXNJbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFsrK3Jlc0luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXJcbiAgICAgKiBwcm92aWRlZCBhcnJheXMgdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgYXJyYXlzIG9mIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsxLCAyLCAzXSwgWzQsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGlzT2JqZWN0TGlrZShhcnJheSkgJiYgaXNBcnJheUxpa2UoYXJyYXkpKVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIGZhbHNlLCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIG4sIGd1YXJkKSA6IG4gPT0gbnVsbCkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBuLCBndWFyZCkgOiBuID09IG51bGwpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9XG4gICAgICBuID0gbGVuZ3RoIC0gKCtuIHx8IDApO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgbWF0Y2ggdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZShbMSwgMiwgM10sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuID4gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUoWzEsIDIsIDNdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiA8IDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOF0sICcqJywgMSwgMik7XG4gICAgICogLy8gPT4gWzQsICcqJywgOF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLnVzZXIgPT0gJ2Jhcm5leSc7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgZmluZEluZGV4ID0gY3JlYXRlRmluZEluZGV4KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLnVzZXIgPT0gJ3BlYmJsZXMnO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdEluZGV4ID0gY3JlYXRlRmluZEluZGV4KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGhlYWRcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maXJzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZmlyc3QoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpcnN0KGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBhIG5lc3RlZCBhcnJheS4gSWYgYGlzRGVlcGAgaXMgYHRydWVgIHRoZSBhcnJheSBpcyByZWN1cnNpdmVseVxuICAgICAqIGZsYXR0ZW5lZCwgb3RoZXJ3aXNlIGl0IGlzIG9ubHkgZmxhdHRlbmVkIGEgc2luZ2xlIGxldmVsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBmbGF0dGVuLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgMywgWzRdXV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBgaXNEZWVwYFxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIDMsIFs0XV1dLCB0cnVlKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5LCBpc0RlZXAsIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBpc0RlZXAsIGd1YXJkKSkge1xuICAgICAgICBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgaXNEZWVwKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGEgbmVzdGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlY3Vyc2l2ZWx5IGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgMywgWzRdXV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCB0cnVlKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQgaXMgdXNlZCBhcyB0aGUgb2Zmc2V0XG4gICAgICogZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgc29ydGVkIHByb3ZpZGluZyBgdHJ1ZWAgZm9yIGBmcm9tSW5kZXhgXG4gICAgICogcGVyZm9ybXMgYSBmYXN0ZXIgYmluYXJ5IHNlYXJjaC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbSBvciBgdHJ1ZWBcbiAgICAgKiAgdG8gcGVyZm9ybSBhIGJpbmFyeSBzZWFyY2ggb24gYSBzb3J0ZWQgYXJyYXkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYGZyb21JbmRleGBcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBwZXJmb3JtaW5nIGEgYmluYXJ5IHNlYXJjaFxuICAgICAqIF8uaW5kZXhPZihbMSwgMSwgMiwgMl0sIDIsIHRydWUpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBmcm9tSW5kZXggPT0gJ251bWJlcicpIHtcbiAgICAgICAgZnJvbUluZGV4ID0gZnJvbUluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApIDogZnJvbUluZGV4O1xuICAgICAgfSBlbHNlIGlmIChmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmluYXJ5SW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmXG4gICAgICAgICAgICAodmFsdWUgPT09IHZhbHVlID8gKHZhbHVlID09PSBhcnJheVtpbmRleF0pIDogKGFycmF5W2luZGV4XSAhPT0gYXJyYXlbaW5kZXhdKSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICByZXR1cm4gZHJvcFJpZ2h0KGFycmF5LCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIG9mIHRoZSBwcm92aWRlZFxuICAgICAqIGFycmF5cyB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzEsIDJdLCBbNCwgMl0sIFsyLCAxXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgaW5kZXhPZiA9IGdldEluZGV4T2YoKSxcbiAgICAgICAgICBpc0NvbW1vbiA9IGluZGV4T2YgPT0gYmFzZUluZGV4T2YsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5c1tvdGhJbmRleF0gPSBpc0FycmF5TGlrZSh2YWx1ZSA9IGFycmF5c1tvdGhJbmRleF0pID8gdmFsdWUgOiBbXTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9IChpc0NvbW1vbiAmJiB2YWx1ZS5sZW5ndGggPj0gMTIwKSA/IGNyZWF0ZUNhY2hlKG90aEluZGV4ICYmIHZhbHVlKSA6IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgYXJyYXkgPSBhcnJheXNbMF0sXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKChzZWVuID8gY2FjaGVJbmRleE9mKHNlZW4sIHZhbHVlKSA6IGluZGV4T2YocmVzdWx0LCB2YWx1ZSwgMCkpIDwgMCkge1xuICAgICAgICAgIHZhciBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICgoY2FjaGUgPyBjYWNoZUluZGV4T2YoY2FjaGUsIHZhbHVlKSA6IGluZGV4T2YoYXJyYXlzW290aEluZGV4XSwgdmFsdWUsIDApKSA8IDApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbVxuICAgICAqICBvciBgdHJ1ZWAgdG8gcGVyZm9ybSBhIGJpbmFyeSBzZWFyY2ggb24gYSBzb3J0ZWQgYXJyYXkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGBmcm9tSW5kZXhgXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIHBlcmZvcm1pbmcgYSBiaW5hcnkgc2VhcmNoXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMSwgMiwgMl0sIDIsIHRydWUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ID09ICdudW1iZXInKSB7XG4gICAgICAgIGluZGV4ID0gKGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKSA6IG5hdGl2ZU1pbihmcm9tSW5kZXggfHwgMCwgbGVuZ3RoIC0gMSkpICsgMTtcbiAgICAgIH0gZWxzZSBpZiAoZnJvbUluZGV4KSB7XG4gICAgICAgIGluZGV4ID0gYmluYXJ5SW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIHZhciBvdGhlciA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB2YWx1ZSA/ICh2YWx1ZSA9PT0gb3RoZXIpIDogKG90aGVyICE9PSBvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXhPZk5hTihhcnJheSwgaW5kZXgsIHRydWUpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBwcm92aWRlZCB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCAxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgMiwgMyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGwoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBhcnJheSA9IGFyZ3NbMF07XG5cbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBpbmRleE9mID0gZ2V0SW5kZXhPZigpLFxuICAgICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gYXJnc1tpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSkgPiAtMSkge1xuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gaW5kZXhlcyBhbmQgcmV0dXJuc1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBJbmRleGVzIG1heSBiZSBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBpbmRleGVzIG9yIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZSxcbiAgICAgKiAgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgaW5kZXhlcyBvciBhcnJheXMgb2YgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbNSwgMTAsIDE1LCAyMF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5wdWxsQXQoYXJyYXksIDEsIDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFs1LCAxNV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMTAsIDIwXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSByZXN0UGFyYW0oZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIGluZGV4ZXMgPSBiYXNlRmxhdHRlbihpbmRleGVzKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzLnNvcnQoYmFzZUNvbXBhcmVBc2NlbmRpbmcpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBib3VuZCB0b1xuICAgICAqIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgcHJlZGljYXRlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIHRhaWxcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGFycmF5KSB7XG4gICAgICByZXR1cm4gZHJvcChhcnJheSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mIGBBcnJheSNzbGljZWAgdG8gc3VwcG9ydCBub2RlXG4gICAgICogbGlzdHMgaW4gSUUgPCA5IGFuZCB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkXG4gICAgICogYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLiBJZiBhbiBpdGVyYXRlZVxuICAgICAqIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGl0IGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgXG4gICAgICogdG8gY29tcHV0ZSB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzQsIDQsIDUsIDVdLCA1KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiB2YXIgZGljdCA9IHsgJ2RhdGEnOiB7ICd0aGlydHknOiAzMCwgJ2ZvcnR5JzogNDAsICdmaWZ0eSc6IDUwIH0gfTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGFuIGl0ZXJhdGVlIGZ1bmN0aW9uXG4gICAgICogXy5zb3J0ZWRJbmRleChbJ3RoaXJ0eScsICdmaWZ0eSddLCAnZm9ydHknLCBmdW5jdGlvbih3b3JkKSB7XG4gICAgICogICByZXR1cm4gdGhpcy5kYXRhW3dvcmRdO1xuICAgICAqIH0sIGRpY3QpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5zb3J0ZWRJbmRleChbeyAneCc6IDMwIH0sIHsgJ3gnOiA1MCB9XSwgeyAneCc6IDQwIH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIHZhciBzb3J0ZWRJbmRleCA9IGNyZWF0ZVNvcnRlZEluZGV4KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA0LCA1LCA1XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIHZhciBzb3J0ZWRMYXN0SW5kZXggPSBjcmVhdGVTb3J0ZWRJbmRleCh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBuLCBndWFyZCkgOiBuID09IG51bGwpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIG4sIGd1YXJkKSA6IG4gPT0gbnVsbCkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH1cbiAgICAgIG4gPSBsZW5ndGggLSAoK24gfHwgMCk7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG8gYHRoaXNBcmdgXG4gICAgICogYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUoWzEsIDIsIDNdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiA+IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG9cbiAgICAgKiBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKFsxLCAyLCAzXSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gPCAzO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2V9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsxLCAyXSwgWzQsIDJdLCBbMiwgMV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCA0XVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IHJlc3RQYXJhbShmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIGZhbHNlLCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFByb3ZpZGluZyBgdHJ1ZWAgZm9yIGBpc1NvcnRlZGAgcGVyZm9ybXMgYSBmYXN0ZXIgc2VhcmNoIGFsZ29yaXRobVxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLiBJZiBhbiBpdGVyYXRlZSBmdW5jdGlvbiBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkIGZvclxuICAgICAqIGVhY2ggZWxlbWVudCBpbiB0aGUgYXJyYXkgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaCB1bmlxdWVuZXNzXG4gICAgICogaXMgY29tcHV0ZWQuIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgdW5pcXVlXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTb3J0ZWRdIFNwZWNpZnkgdGhlIGFycmF5IGlzIHNvcnRlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUtdmFsdWUtZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBgaXNTb3J0ZWRgXG4gICAgICogXy51bmlxKFsxLCAxLCAyXSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBhbiBpdGVyYXRlZSBmdW5jdGlvblxuICAgICAqIF8udW5pcShbMSwgMi41LCAxLjUsIDJdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gdGhpcy5mbG9vcihuKTtcbiAgICAgKiB9LCBNYXRoKTtcbiAgICAgKiAvLyA9PiBbMSwgMi41XVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnVuaXEoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgdGhpc0FyZykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NvcnRlZCAhPSBudWxsICYmIHR5cGVvZiBpc1NvcnRlZCAhPSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhpc0FyZyA9IGl0ZXJhdGVlO1xuICAgICAgICBpdGVyYXRlZSA9IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBpc1NvcnRlZCwgdGhpc0FyZykgPyB1bmRlZmluZWQgOiBpc1NvcnRlZDtcbiAgICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjYWxsYmFjayA9IGdldENhbGxiYWNrKCk7XG4gICAgICBpZiAoIShpdGVyYXRlZSA9PSBudWxsICYmIGNhbGxiYWNrID09PSBiYXNlQ2FsbGJhY2spKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gY2FsbGJhY2soaXRlcmF0ZWUsIHRoaXNBcmcsIDMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpc1NvcnRlZCAmJiBnZXRJbmRleE9mKCkgPT0gYmFzZUluZGV4T2YpXG4gICAgICAgID8gc29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpXG4gICAgICAgIDogYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnZnJlZCcsICdiYXJuZXknXSwgWzMwLCA0MF0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2ZyZWQnLCAzMCwgdHJ1ZV0sIFsnYmFybmV5JywgNDAsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2UoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gaXRlcmF0ZWUgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgXG4gICAgICogYW5kIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGl0ZXJhdGVlID0gYmluZENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCA0KTtcbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZShncm91cCwgaXRlcmF0ZWUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgcHJvdmlkZWQgdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsdGVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsxLCAyLCAxLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSByZXN0UGFyYW0oZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGUgW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgcHJvdmlkZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzEsIDJdLCBbNCwgMl0pO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHhvcigpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShhcnJheSkpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0XG4gICAgICAgICAgICA/IGFycmF5UHVzaChiYXNlRGlmZmVyZW5jZShyZXN1bHQsIGFycmF5KSwgYmFzZURpZmZlcmVuY2UoYXJyYXksIHJlc3VsdCkpXG4gICAgICAgICAgICA6IGFycmF5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ID8gYmFzZVVuaXEocmVzdWx0KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlIHNlY29uZCBlbGVtZW50c1xuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2ZyZWQnLCAnYmFybmV5J10sIFszMCwgNDBdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydmcmVkJywgMzAsIHRydWVdLCBbJ2Jhcm5leScsIDQwLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IHJlc3RQYXJhbSh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5wYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkIGZyb20gYXJyYXlzXG4gICAgICogb2YgcHJvcGVydHkgbmFtZXMgYW5kIHZhbHVlcy4gUHJvdmlkZSBlaXRoZXIgYSBzaW5nbGUgdHdvIGRpbWVuc2lvbmFsIGFycmF5LFxuICAgICAqIGUuZy4gYFtba2V5MSwgdmFsdWUxXSwgW2tleTIsIHZhbHVlMl1dYCBvciB0d28gYXJyYXlzLCBvbmUgb2YgcHJvcGVydHkgbmFtZXNcbiAgICAgKiBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIG9iamVjdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFtbJ2ZyZWQnLCAzMF0sIFsnYmFybmV5JywgNDBdXSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDMwLCAnYmFybmV5JzogNDAgfVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydmcmVkJywgJ2Jhcm5leSddLCBbMzAsIDQwXSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDMwLCAnYmFybmV5JzogNDAgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcyA/IHByb3BzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIGlmIChsZW5ndGggJiYgIXZhbHVlcyAmJiAhaXNBcnJheShwcm9wc1swXSkpIHtcbiAgICAgICAgdmFsdWVzID0gW107XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSkge1xuICAgICAgICAgIHJlc3VsdFtrZXlbMF1dID0ga2V5WzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGl0ZXJhdGVlIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSByZXN0UGFyYW0oZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDIgPyBhcnJheXNbbGVuZ3RoIC0gMl0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGhpc0FyZyA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChsZW5ndGggPiAyICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxlbmd0aCAtPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWUgPSAobGVuZ3RoID4gMSAmJiB0eXBlb2YgdGhpc0FyZyA9PSAnZnVuY3Rpb24nKSA/ICgtLWxlbmd0aCwgdGhpc0FyZykgOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXNBcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlLCB0aGlzQXJnKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3QgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW5pbmcgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF8uY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgICAgcmV0dXJuIGNoci51c2VyICsgJyBpcyAnICsgY2hyLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuZmlyc3QoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvciBpc1xuICAgICAqIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2ZcbiAgICAgKiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gaW4gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zXG4gICAgICogb24gaW50ZXJtZWRpYXRlIHJlc3VsdHMgd2l0aGluIHRoZSBjaGFpbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDaGFpblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvciwgdGhpc0FyZykge1xuICAgICAgaW50ZXJjZXB0b3IuY2FsbCh0aGlzQXJnLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvci5jYWxsKHRoaXNBcmcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIGV4cGxpY2l0IG1ldGhvZCBjaGFpbmluZyBvbiB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmdcbiAgICAgKiBfKHVzZXJzKS5maXJzdCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIHdpdGggZXhwbGljaXQgY2hhaW5pbmdcbiAgICAgKiBfKHVzZXJzKS5jaGFpbigpXG4gICAgICogICAuZmlyc3QoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluZWQgc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgam9pbmluZyBhIHdyYXBwZWQgYXJyYXkgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQG5hbWUgY29uY2F0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5jb25jYXQoMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyh3cmFwcGVkLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJDb25jYXQgPSByZXN0UGFyYW0oZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICB2YWx1ZXMgPSBiYXNlRmxhdHRlbih2YWx1ZXMpO1xuICAgICAgcmV0dXJuIHRoaXMudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXlDb25jYXQoaXNBcnJheShhcnJheSkgPyBhcnJheSA6IFt0b09iamVjdChhcnJheSldLCB2YWx1ZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluZWQgc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gTWF0aC5wb3codmFsdWUsIDIpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0gWzMsIDRdO1xuICAgICAqIHZhciBvdGhlcldyYXBwZWQgPSB3cmFwcGVkLnBsYW50KG90aGVyKTtcbiAgICAgKlxuICAgICAqIG90aGVyV3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgd3JhcHBlZCBhcnJheSBzbyB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ2hhaW5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG5cbiAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAod3JhcHBlZCAmJiB3cmFwcGVkLl9fZGlyX18gPCAwKSA/IHZhbHVlIDogdmFsdWUucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyB0aGUgcmVzdWx0IG9mIGNvZXJjaW5nIHRoZSB1bndyYXBwZWQgdmFsdWUgdG8gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAbmFtZSB0b1N0cmluZ1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29lcmNlZCBzdHJpbmcgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS50b1N0cmluZygpO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gKHRoaXMudmFsdWUoKSArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW5lZCBzZXF1ZW5jZSB0byBleHRyYWN0IHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIHJ1biwgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IENoYWluXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBrZXlzLCBvciBpbmRleGVzLFxuICAgICAqIG9mIGBjb2xsZWN0aW9uYC4gS2V5cyBtYXkgYmUgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnRzIG9yIGFzIGFycmF5c1xuICAgICAqIG9mIGtleXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdfHN0cmluZ3xzdHJpbmdbXSl9IFtwcm9wc10gVGhlIHByb3BlcnR5IG5hbWVzXG4gICAgICogIG9yIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcGljaywgc3BlY2lmaWVkIGluZGl2aWR1YWxseSBvciBpbiBhcnJheXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmF0KFsnYScsICdiJywgJ2MnXSwgWzAsIDJdKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBfLmF0KFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddLCAwLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICB2YXIgYXQgPSByZXN0UGFyYW0oZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBiYXNlQXQoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4ocHJvcHMpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIG9mIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC5cbiAgICAgKiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs0LjMsIDYuMSwgNi40XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIE1hdGguZmxvb3Iobik7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzQuMywgNi4xLCA2LjRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gdGhpcy5mbG9vcihuKTtcbiAgICAgKiB9LCBNYXRoKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpID8gKytyZXN1bHRba2V5XSA6IChyZXN1bHRba2V5XSA9IDEpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBUaGUgcHJlZGljYXRlIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbGxcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmICh0aGlzQXJnICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJyB8fCB0aGlzQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJlZGljYXRlID0gZ2V0Q2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZFxuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYHByZWRpY2F0ZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIHNlbGVjdFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFs0LCA1LCA2XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzQsIDZdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnLCBmYWxzZSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmRcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBkZXRlY3RcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZXN1bHQoXy5maW5kKHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgNDA7XG4gICAgICogfSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3VsdChfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5yZXN1bHQoXy5maW5kKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCAndXNlcicpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnJlc3VsdChfLmZpbmQodXNlcnMsICdhY3RpdmUnKSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChiYXNlRWFjaCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoYmFzZUVhY2hSaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgYW5kIHRoZVxuICAgICAqIHNvdXJjZSBvYmplY3QsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGhhcyBlcXVpdmFsZW50IHByb3BlcnR5XG4gICAgICogdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGJvb2xlYW5zLCBgRGF0ZWAgb2JqZWN0cyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBhbmQgc3RyaW5ncy4gT2JqZWN0cyBhcmUgY29tcGFyZWQgYnlcbiAgICAgKiB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRm9yIGNvbXBhcmluZyBhIHNpbmdsZVxuICAgICAqIG93biBvciBpbmhlcml0ZWQgcHJvcGVydHkgdmFsdWUgc2VlIGBfLm1hdGNoZXNQcm9wZXJ0eWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChfLmZpbmRXaGVyZSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChfLmZpbmRXaGVyZSh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kV2hlcmUoY29sbGVjdGlvbiwgc291cmNlKSB7XG4gICAgICByZXR1cm4gZmluZChjb2xsZWN0aW9uLCBiYXNlTWF0Y2hlcyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBpbnZva2luZyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseVxuICAgICAqIGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIiBwcm9wZXJ0eVxuICAgICAqIGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciBgXy5mb3JJbmAgb3IgYF8uZm9yT3duYFxuICAgICAqIG1heSBiZSB1c2VkIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdHxzdHJpbmd9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyXSkuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhuKTtcbiAgICAgKiB9KS52YWx1ZSgpO1xuICAgICAqIC8vID0+IGxvZ3MgZWFjaCB2YWx1ZSBmcm9tIGxlZnQgdG8gcmlnaHQgYW5kIHJldHVybnMgdGhlIGFycmF5XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbihuLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKG4sIGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyBlYWNoIHZhbHVlLWtleSBwYWlyIGFuZCByZXR1cm5zIHRoZSBvYmplY3QgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgZm9yRWFjaCA9IGNyZWF0ZUZvckVhY2goYXJyYXlFYWNoLCBiYXNlRWFjaCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fHN0cmluZ30gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDJdKS5mb3JFYWNoUmlnaHQoZnVuY3Rpb24obikge1xuICAgICAqICAgY29uc29sZS5sb2cobik7XG4gICAgICogfSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBsb2dzIGVhY2ggdmFsdWUgZnJvbSByaWdodCB0byBsZWZ0IGFuZCByZXR1cm5zIHRoZSBhcnJheVxuICAgICAqL1xuICAgIHZhciBmb3JFYWNoUmlnaHQgPSBjcmVhdGVGb3JFYWNoKGFycmF5RWFjaFJpZ2h0LCBiYXNlRWFjaFJpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhyb3VnaCBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICAqIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIHRoZSBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LlxuICAgICAqIFRoZSBgaXRlcmF0ZWVgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gTWF0aC5mbG9vcihuKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi40XSB9XG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzQuMiwgNi4xLCA2LjRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gdGhpcy5mbG9vcihuKTtcbiAgICAgKiB9LCBNYXRoKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi40XSB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQgaXMgdXNlZCBhcyB0aGUgb2Zmc2V0XG4gICAgICogZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBjb250YWlucywgaW5jbHVkZVxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgbWF0Y2hpbmcgZWxlbWVudCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9LCAnZnJlZCcpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ3BlYmJsZXMnLCAnZWInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdGFyZ2V0LCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGdldExlbmd0aChjb2xsZWN0aW9uKSA6IDA7XG4gICAgICBpZiAoIWlzTGVuZ3RoKGxlbmd0aCkpIHtcbiAgICAgICAgY29sbGVjdGlvbiA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGZyb21JbmRleCAhPSAnbnVtYmVyJyB8fCAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwodGFyZ2V0LCBmcm9tSW5kZXgsIGd1YXJkKSkpIHtcbiAgICAgICAgZnJvbUluZGV4ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyb21JbmRleCA9IGZyb21JbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKSA6IChmcm9tSW5kZXggfHwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHR5cGVvZiBjb2xsZWN0aW9uID09ICdzdHJpbmcnIHx8ICFpc0FycmF5KGNvbGxlY3Rpb24pICYmIGlzU3RyaW5nKGNvbGxlY3Rpb24pKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih0YXJnZXQsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgZ2V0SW5kZXhPZihjb2xsZWN0aW9uLCB0YXJnZXQsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJvdWdoIGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgICogb2YgZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBmdW5jdGlvbiBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGtleURhdGEgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleURhdGEsICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5pbmRleEJ5KGtleURhdGEsIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUob2JqZWN0LmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8uaW5kZXhCeShrZXlEYXRhLCBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmZyb21DaGFyQ29kZShvYmplY3QuY29kZSk7XG4gICAgICogfSwgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGluZGV4QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBtZXRob2ROYW1lYCBpcyBhIGZ1bmN0aW9uIGl0IGlzXG4gICAgICogaW52b2tlZCBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZShbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IHJlc3RQYXJhbShmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIGlzUHJvcCA9IGlzS2V5KHBhdGgpLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gcGF0aCA6ICgoaXNQcm9wICYmIHZhbHVlICE9IG51bGwpID8gdmFsdWVbcGF0aF0gOiB1bmRlZmluZWQpO1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBmdW5jID8gZnVuYy5hcHBseSh2YWx1ZSwgYXJncykgOiBpbnZva2VQYXRoKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJvdWdoXG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIElmIGEgcHJvcGVydHkgbmFtZSBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgdmFsdWUgaXMgYWxzbyBwcm92aWRlZCBmb3IgYHRoaXNBcmdgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNQcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIGEgbWF0Y2hpbmcgcHJvcGVydHlcbiAgICAgKiB2YWx1ZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjYWxsYmFja2AsIGBjaHVua2AsIGBjbG9uZWAsIGBjcmVhdGVgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsXG4gICAgICogYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCwgYGZpbGxgLCBgZmxhdHRlbmAsIGBpbnZlcnRgLCBgbWF4YCwgYG1pbmAsXG4gICAgICogYHBhcnNlSW50YCwgYHNsaWNlYCwgYHNvcnRCeWAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0ZW1wbGF0ZWAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUxlZnRgLCBgdHJpbVJpZ2h0YCwgYHRydW5jYCwgYHJhbmRvbWAsIGByYW5nZWAsIGBzYW1wbGVgLCBgc29tZWAsXG4gICAgICogYHN1bWAsIGB1bmlxYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBjb2xsZWN0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB0aW1lc1RocmVlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbMSwgMl0sIHRpbWVzVGhyZWUpO1xuICAgICAqIC8vID0+IFszLCA2XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDEsICdiJzogMiB9LCB0aW1lc1RocmVlKTtcbiAgICAgKiAvLyA9PiBbMywgNl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB3aGlsZSB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGJvdW5kXG4gICAgICogdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbihbMSwgMiwgM10sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMjtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbWzEsIDNdLCBbMl1dXG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbihbMS4yLCAyLjMsIDMuNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiB0aGlzLmZsb29yKG4pICUgMjtcbiAgICAgKiB9LCBNYXRoKTtcbiAgICAgKiAvLyA9PiBbWzEuMiwgMy40XSwgWzIuM11dXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgbWFwcGVyID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgIHJldHVybiBfLnBsdWNrKGFycmF5LCAndXNlcicpO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5tYXAoXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KSwgbWFwcGVyKTtcbiAgICAgKiAvLyA9PiBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWFwKF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpLCBtYXBwZXIpO1xuICAgICAqIC8vID0+IFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcChfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpLCBtYXBwZXIpO1xuICAgICAqIC8vID0+IFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIGBwYXRoYCBmcm9tIGFsbCBlbGVtZW50cyBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHBsdWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBsdWNrKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogdmFyIHVzZXJJbmRleCA9IF8uaW5kZXhCeSh1c2VycywgJ3VzZXInKTtcbiAgICAgKiBfLnBsdWNrKHVzZXJJbmRleCwgJ2FnZScpO1xuICAgICAqIC8vID0+IFszNiwgNDBdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGx1Y2soY29sbGVjdGlvbiwgcGF0aCkge1xuICAgICAgcmV0dXJuIG1hcChjb2xsZWN0aW9uLCBwcm9wZXJ0eShwYXRoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocm91Z2ggYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBwcm92aWRlZCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYHNvcnRCeUFsbGAsXG4gICAgICogYW5kIGBzb3J0QnlPcmRlcmBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBmb2xkbCwgaW5qZWN0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24odG90YWwsIG4pIHtcbiAgICAgKiAgIHJldHVybiB0b3RhbCArIG47XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbihyZXN1bHQsIG4sIGtleSkge1xuICAgICAqICAgcmVzdWx0W2tleV0gPSBuICogMztcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAzLCAnYic6IDYgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciByZWR1Y2UgPSBjcmVhdGVSZWR1Y2UoYXJyYXlSZWR1Y2UsIGJhc2VFYWNoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBmb2xkclxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIHZhciByZWR1Y2VSaWdodCA9IGNyZWF0ZVJlZHVjZShhcnJheVJlZHVjZVJpZ2h0LCBiYXNlRWFjaFJpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYHByZWRpY2F0ZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ubWF0Y2hlc2AgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ucGx1Y2soXy5yZWplY3QodXNlcnMsICdhY3RpdmUnLCBmYWxzZSksICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5wcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5wbHVjayhfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDMpO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgb3IgYG5gIHJhbmRvbSBlbGVtZW50cyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gc2FtcGxlKHMpLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09IG51bGwpIHtcbiAgICAgICAgY29sbGVjdGlvbiA9IHRvSXRlcmFibGUoY29sbGVjdGlvbik7XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA+IDAgPyBjb2xsZWN0aW9uW2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdG9BcnJheShjb2xsZWN0aW9uKSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIG4gPSBuYXRpdmVNaW4obiA8IDAgPyAwIDogKCtuIHx8IDApLCBsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gcmVzdWx0W3JhbmRdO1xuXG4gICAgICAgIHJlc3VsdFtyYW5kXSA9IHJlc3VsdFtpbmRleF07XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2FtcGxlKGNvbGxlY3Rpb24sIFBPU0lUSVZFX0lORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbiA/IGdldExlbmd0aChjb2xsZWN0aW9uKSA6IDA7XG4gICAgICByZXR1cm4gaXNMZW5ndGgobGVuZ3RoKSA/IGxlbmd0aCA6IGtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBUaGUgZnVuY3Rpb24gcmV0dXJucyBhcyBzb29uIGFzIGl0IGZpbmRzIGEgcGFzc2luZyB2YWx1ZSBhbmQgZG9lcyBub3QgaXRlcmF0ZVxuICAgICAqIG92ZXIgdGhlIGVudGlyZSBjb2xsZWN0aW9uLiBUaGUgcHJlZGljYXRlIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBhbnlcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBwcmVkaWNhdGVgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAodGhpc0FyZyAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIHRoaXNBcmcpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicgfHwgdGhpc0FyZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IGdldENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhyb3VnaCBgaXRlcmF0ZWVgLiBUaGlzIG1ldGhvZCBwZXJmb3Jtc1xuICAgICAqIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZiBlcXVhbCBlbGVtZW50cy5cbiAgICAgKiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkXG4gICAgICogIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeShbMSwgMiwgM10sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBNYXRoLnNpbihuKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMywgMSwgMl1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KFsxLCAyLCAzXSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIHRoaXMuc2luKG4pO1xuICAgICAqIH0sIE1hdGgpO1xuICAgICAqIC8vID0+IFszLCAxLCAyXVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJyB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnBsdWNrKF8uc29ydEJ5KHVzZXJzLCAndXNlcicpLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydEJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzQXJnICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWUgPSBnZXRDYWxsYmFjayhpdGVyYXRlZSwgdGhpc0FyZywgMyk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbiksICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgY29tcGFyZUFzY2VuZGluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGNhbiBzb3J0IGJ5IG11bHRpcGxlIGl0ZXJhdGVlc1xuICAgICAqIG9yIHByb3BlcnR5IG5hbWVzLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBhbiBpdGVyYXRlZSB0aGUgY3JlYXRlZCBgXy5wcm9wZXJ0eWBcbiAgICAgKiBzdHlsZSBjYWxsYmFjayByZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYW4gaXRlcmF0ZWUgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW118T2JqZWN0fE9iamVjdFtdfHN0cmluZ3xzdHJpbmdbXSl9IGl0ZXJhdGVlc1xuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnksIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIHZhbHVlcyBvciBhcnJheXMgb2YgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MiB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeUFsbCh1c2VycywgWyd1c2VyJywgJ2FnZSddKSwgXy52YWx1ZXMpO1xuICAgICAqIC8vID0+IFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQyXSwgWydmcmVkJywgNDhdXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0QnlBbGwodXNlcnMsICd1c2VyJywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gTWF0aC5mbG9vcihjaHIuYWdlIC8gMTApO1xuICAgICAqIH0pLCBfLnZhbHVlcyk7XG4gICAgICogLy8gPT4gW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0Ml1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeUFsbCA9IHJlc3RQYXJhbShmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGd1YXJkID0gaXRlcmF0ZWVzWzJdO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgaXRlcmF0ZWVzLmxlbmd0aCA9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRCeU9yZGVyKGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcyksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5QWxsYCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGVcbiAgICAgKiBzb3J0IG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGxcbiAgICAgKiB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgYSB2YWx1ZSBpcyBzb3J0ZWQgaW5cbiAgICAgKiBhc2NlbmRpbmcgb3JkZXIgaWYgaXRzIGNvcnJlc3BvbmRpbmcgb3JkZXIgaXMgXCJhc2NcIiwgYW5kIGRlc2NlbmRpbmcgaWYgXCJkZXNjXCIuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGFuIGl0ZXJhdGVlIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYW4gb2JqZWN0IGlzIHByb3ZpZGVkIGZvciBhbiBpdGVyYXRlZSB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQyIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIHNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlclxuICAgICAqIF8ubWFwKF8uc29ydEJ5T3JkZXIodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKSwgXy52YWx1ZXMpO1xuICAgICAqIC8vID0+IFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRCeU9yZGVyKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSkge1xuICAgICAgICBvcmRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRCeU9yZGVyKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgYW5kIHRoZVxuICAgICAqIHNvdXJjZSBvYmplY3QsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHMgdGhhdCBoYXZlIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYm9vbGVhbnMsIGBEYXRlYCBvYmplY3RzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIGFuZCBzdHJpbmdzLiBPYmplY3RzIGFyZSBjb21wYXJlZCBieVxuICAgICAqIHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGb3IgY29tcGFyaW5nIGEgc2luZ2xlXG4gICAgICogb3duIG9yIGluaGVyaXRlZCBwcm9wZXJ0eSB2YWx1ZSBzZWUgYF8ubWF0Y2hlc1Byb3BlcnR5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlLCAncGV0cyc6IFsnaG9wcHknXSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlLCAncGV0cyc6IFsnYmFieSBwdXNzJywgJ2Rpbm8nXSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGx1Y2soXy53aGVyZSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiBfLnBsdWNrKF8ud2hlcmUodXNlcnMsIHsgJ3BldHMnOiBbJ2Rpbm8nXSB9KSwgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdoZXJlKGNvbGxlY3Rpb24sIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGZpbHRlcihjb2xsZWN0aW9uLCBiYXNlTWF0Y2hlcyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBVbml4IGVwb2NoXG4gICAgICogKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IGxvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGZ1bmN0aW9uIHRvIGJlIGludm9rZWRcbiAgICAgKi9cbiAgICB2YXIgbm93ID0gbmF0aXZlTm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0IGlzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIG4gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB0ZW1wID0gbjtcbiAgICAgICAgICBuID0gZnVuYztcbiAgICAgICAgICBmdW5jID0gdGVtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG4gPSBuYXRpdmVJc0Zpbml0ZShuID0gK24pID8gbiA6IDA7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIGBuYCBhcmd1bWVudHMgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGZ1bmMsIG4sIGd1YXJkKSkge1xuICAgICAgICBuID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG5hdGl2ZU1heCgrbiB8fCAwLCAwKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIEFSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0IGlzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoJyNhZGQnKS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gYWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIG4gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciB0ZW1wID0gbjtcbiAgICAgICAgICBuID0gZnVuYztcbiAgICAgICAgICBmdW5jID0gdGVtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIHByZXBlbmRzIGFueSBhZGRpdGlvbmFsIGBfLmJpbmRgIGFyZ3VtZW50cyB0byB0aG9zZSBwcm92aWRlZCB0byB0aGVcbiAgICAgKiBib3VuZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgcGxhY2Vob2xkZXJzXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IEJJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgYmluZC5wbGFjZWhvbGRlcik7XG4gICAgICAgIGJpdG1hc2sgfD0gUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXBwZXIoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC4gTWV0aG9kIG5hbWVzIG1heSBiZSBzcGVjaWZpZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHMgb3IgYXMgYXJyYXlzXG4gICAgICogb2YgbWV0aG9kIG5hbWVzLiBJZiBubyBtZXRob2QgbmFtZXMgYXJlIHByb3ZpZGVkIGFsbCBlbnVtZXJhYmxlIGZ1bmN0aW9uXG4gICAgICogcHJvcGVydGllcywgb3duIGFuZCBpbmhlcml0ZWQsIG9mIGBvYmplY3RgIGFyZSBib3VuZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbbWV0aG9kTmFtZXNdIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQsXG4gICAgICogIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIG1ldGhvZCBuYW1lcyBvciBhcnJheXMgb2YgbWV0aG9kIG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ29uQ2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldyk7XG4gICAgICogalF1ZXJ5KCcjZG9jcycpLm9uKCdjbGljaycsIHZpZXcub25DbGljayk7XG4gICAgICogLy8gPT4gbG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIHRoZSBlbGVtZW50IGlzIGNsaWNrZWRcbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IHJlc3RQYXJhbShmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBtZXRob2ROYW1lcyA9IG1ldGhvZE5hbWVzLmxlbmd0aCA/IGJhc2VGbGF0dGVuKG1ldGhvZE5hbWVzKSA6IGZ1bmN0aW9ucyhvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBtZXRob2ROYW1lcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBtZXRob2ROYW1lc1tpbmRleF07XG4gICAgICAgIG9iamVjdFtrZXldID0gY3JlYXRlV3JhcHBlcihvYmplY3Rba2V5XSwgQklORF9GTEFHLCBvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIGFuZCBwcmVwZW5kc1xuICAgICAqIGFueSBhZGRpdGlvbmFsIGBfLmJpbmRLZXlgIGFyZ3VtZW50cyB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYm91bmQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC5cbiAgICAgKiBTZWUgW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRoZSBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHBsYWNlaG9sZGVyc1xuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSByZXN0UGFyYW0oZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IEJJTkRfRkxBRyB8IEJJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGJpbmRLZXkucGxhY2Vob2xkZXIpO1xuICAgICAgICBiaXRtYXNrIHw9IFBBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBvciBtb3JlIGFyZ3VtZW50cyBvZiBgZnVuY2AgdGhhdCB3aGVuXG4gICAgICogY2FsbGVkIGVpdGhlciBpbnZva2VzIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYWxsIGBmdW5jYCBhcmd1bWVudHNcbiAgICAgKiBoYXZlIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIG9yIG1vcmUgb2YgdGhlXG4gICAgICogcmVtYWluaW5nIGBmdW5jYCBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkXG4gICAgICogaWYgYGZ1bmMubGVuZ3RoYCBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lcyBub3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBwbGFjZWhvbGRlcnNcbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIHZhciBjdXJyeSA9IGNyZWF0ZUN1cnJ5KENVUlJZX0ZMQUcpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBwbGFjZWhvbGRlcnNcbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIHZhciBjdXJyeVJpZ2h0ID0gY3JlYXRlQ3VycnkoQ1VSUllfUklHSFRfRkxBRyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBpbnZvY2F0aW9ucy4gUHJvdmlkZSBhbiBvcHRpb25zIG9iamVjdCB0byBpbmRpY2F0ZSB0aGF0IGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3RcbiAgICAgKiBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gaXNcbiAgICAgKiBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cDovL2RydXBhbG1vdGlvbi5jb20vYXJ0aWNsZS9kZWJvdW5jZS1hbmQtdGhyb3R0bGUtdmlzdWFsLWV4cGxhbmF0aW9uKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXSBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nXG4gICAgICogIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmVcbiAgICAgKiAgZGVsYXllZCBiZWZvcmUgaXQgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nXG4gICAgICogIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBhdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4XG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIGludm9rZSBgc2VuZE1haWxgIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHNcbiAgICAgKiBqUXVlcnkoJyNwb3N0Ym94Jykub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIGVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHNcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHtcbiAgICAgKiAgICdtYXhXYWl0JzogMTAwMFxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIGNhbmNlbCBhIGRlYm91bmNlZCBjYWxsXG4gICAgICogdmFyIHRvZG9DaGFuZ2VzID0gXy5kZWJvdW5jZShiYXRjaExvZywgMTAwMCk7XG4gICAgICogT2JqZWN0Lm9ic2VydmUobW9kZWxzLnRvZG8sIHRvZG9DaGFuZ2VzKTtcbiAgICAgKlxuICAgICAqIE9iamVjdC5vYnNlcnZlKG1vZGVscywgZnVuY3Rpb24oY2hhbmdlcykge1xuICAgICAqICAgaWYgKF8uZmluZChjaGFuZ2VzLCB7ICd1c2VyJzogJ3RvZG8nLCAndHlwZSc6ICdkZWxldGUnfSkpIHtcbiAgICAgKiAgICAgdG9kb0NoYW5nZXMuY2FuY2VsKCk7XG4gICAgICogICB9XG4gICAgICogfSwgWydkZWxldGUnXSk7XG4gICAgICpcbiAgICAgKiAvLyAuLi5hdCBzb21lIHBvaW50IGBtb2RlbHMudG9kb2AgaXMgY2hhbmdlZFxuICAgICAqIG1vZGVscy50b2RvLmNvbXBsZXRlZCA9IHRydWU7XG4gICAgICpcbiAgICAgKiAvLyAuLi5iZWZvcmUgMSBzZWNvbmQgaGFzIHBhc3NlZCBgbW9kZWxzLnRvZG9gIGlzIGRlbGV0ZWRcbiAgICAgKiAvLyB3aGljaCBjYW5jZWxzIHRoZSBkZWJvdW5jZWQgYHRvZG9DaGFuZ2VzYCBjYWxsXG4gICAgICogZGVsZXRlIG1vZGVscy50b2RvO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzLFxuICAgICAgICAgIG1heFRpbWVvdXRJZCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgc3RhbXAsXG4gICAgICAgICAgdGhpc0FyZyxcbiAgICAgICAgICB0aW1lb3V0SWQsXG4gICAgICAgICAgdHJhaWxpbmdDYWxsLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwLFxuICAgICAgICAgIG1heFdhaXQgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB3YWl0IDwgMCA/IDAgOiAoK3dhaXQgfHwgMCk7XG4gICAgICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgbGVhZGluZyA9IHRydWU7XG4gICAgICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4V2FpdCA9ICdtYXhXYWl0JyBpbiBvcHRpb25zICYmIG5hdGl2ZU1heCgrb3B0aW9ucy5tYXhXYWl0IHx8IDAsIHdhaXQpO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4VGltZW91dElkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KG1heFRpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdENhbGxlZCA9IDA7XG4gICAgICAgIG1heFRpbWVvdXRJZCA9IHRpbWVvdXRJZCA9IHRyYWlsaW5nQ2FsbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29tcGxldGUoaXNDYWxsZWQsIGlkKSB7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4VGltZW91dElkID0gdGltZW91dElkID0gdHJhaWxpbmdDYWxsID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoaXNDYWxsZWQpIHtcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gbm93KCk7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXRJZCAmJiAhbWF4VGltZW91dElkKSB7XG4gICAgICAgICAgICBhcmdzID0gdGhpc0FyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVsYXllZCgpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93KCkgLSBzdGFtcCk7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgICAgY29tcGxldGUodHJhaWxpbmdDYWxsLCBtYXhUaW1lb3V0SWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtYXhEZWxheWVkKCkge1xuICAgICAgICBjb21wbGV0ZSh0cmFpbGluZywgdGltZW91dElkKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzdGFtcCA9IG5vdygpO1xuICAgICAgICB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJhaWxpbmcgJiYgKHRpbWVvdXRJZCB8fCAhbGVhZGluZyk7XG5cbiAgICAgICAgaWYgKG1heFdhaXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdmFyIGxlYWRpbmdDYWxsID0gbGVhZGluZyAmJiAhdGltZW91dElkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbWF4VGltZW91dElkICYmICFsZWFkaW5nKSB7XG4gICAgICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZW1haW5pbmcgPSBtYXhXYWl0IC0gKHN0YW1wIC0gbGFzdENhbGxlZCksXG4gICAgICAgICAgICAgIGlzQ2FsbGVkID0gcmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gbWF4V2FpdDtcblxuICAgICAgICAgIGlmIChpc0NhbGxlZCkge1xuICAgICAgICAgICAgaWYgKG1heFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICBtYXhUaW1lb3V0SWQgPSBjbGVhclRpbWVvdXQobWF4VGltZW91dElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIG1heFRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWF4RGVsYXllZCwgcmVtYWluaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmIHRpbWVvdXRJZCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aW1lb3V0SWQgJiYgd2FpdCAhPT0gbWF4V2FpdCkge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZGVsYXllZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XG4gICAgICAgICAgaXNDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ2FsbGVkICYmICF0aW1lb3V0SWQgJiYgIW1heFRpbWVvdXRJZCkge1xuICAgICAgICAgIGFyZ3MgPSB0aGlzQXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQgaXMgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vIGxvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgb3IgbW9yZSBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCBpcyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBsb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZFxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IHJlc3RQYXJhbShmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBwcm92aWRlZFxuICAgICAqIGZ1bmN0aW9ucyB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IFtmdW5jc10gRnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KF8uYWRkLCBzcXVhcmUpO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBiYWNrZmxvdywgY29tcG9zZVxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IFtmdW5jc10gRnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoc3F1YXJlLCBfLmFkZCk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIGNvZXJjZWQgdG8gYSBzdHJpbmcgYW5kIHVzZWQgYXMgdGhlXG4gICAgICogY2FjaGUga2V5LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGUgW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXppbmcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1cHBlckNhc2UgPSBfLm1lbW9pemUoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gc3RyaW5nLnRvVXBwZXJDYXNlKCk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB1cHBlckNhc2UoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKlxuICAgICAqIC8vIG1vZGlmeWluZyB0aGUgcmVzdWx0IGNhY2hlXG4gICAgICogdXBwZXJDYXNlLmNhY2hlLnNldCgnZnJlZCcsICdCQVJORVknKTtcbiAgICAgKiB1cHBlckNhc2UoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnQkFSTkVZJ1xuICAgICAqXG4gICAgICogLy8gcmVwbGFjaW5nIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICd1c2VyJzogJ2Jhcm5leScgfTtcbiAgICAgKiB2YXIgaWRlbnRpdHkgPSBfLm1lbW9pemUoXy5pZGVudGl0eSk7XG4gICAgICpcbiAgICAgKiBpZGVudGl0eShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIGlkZW50aXR5KG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICogdmFyIGlkZW50aXR5ID0gXy5tZW1vaXplKF8uaWRlbnRpdHkpO1xuICAgICAqXG4gICAgICogaWRlbnRpdHkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBpZGVudGl0eShvdGhlcik7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyBtZW1vaXplLkNhY2hlO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJ1bnMgZWFjaCBhcmd1bWVudCB0aHJvdWdoIGEgY29ycmVzcG9uZGluZ1xuICAgICAqIHRyYW5zZm9ybSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zXSBUaGUgZnVuY3Rpb25zIHRvIHRyYW5zZm9ybVxuICAgICAqIGFyZ3VtZW50cywgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgZnVuY3Rpb25zIG9yIGFycmF5cyBvZiBmdW5jdGlvbnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG1vZGRlZCA9IF8ubW9kQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIHNxdWFyZSwgZG91YmxlZCk7XG4gICAgICpcbiAgICAgKiBtb2RkZWQoMSwgMik7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICpcbiAgICAgKiBtb2RkZWQoNSwgMTApO1xuICAgICAqIC8vID0+IFsyNSwgMjBdXG4gICAgICovXG4gICAgdmFyIG1vZEFyZ3MgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9IGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMpO1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgIWFycmF5RXZlcnkodHJhbnNmb3JtcywgYmFzZUlzRnVuY3Rpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiByZXN0UGFyYW0oZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XShhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBjYWxsLiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gYGluaXRpYWxpemVgIGludm9rZXMgYGNyZWF0ZUFwcGxpY2F0aW9uYCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxgIGFyZ3VtZW50cyBwcmVwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgbmV3IGZ1bmN0aW9uLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdFxuICAgICAqIGl0IGRvZXMgKipub3QqKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lcyBub3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBwbGFjZWhvbGRlcnNcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGNyZWF0ZVBhcnRpYWwoUEFSVElBTF9GTEFHKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHBsYWNlaG9sZGVyc1xuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gY3JlYXRlUGFydGlhbChQQVJUSUFMX1JJR0hUX0ZMQUcpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcyxcbiAgICAgKiAgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgaW5kZXhlcyBvciBhcnJheXMgb2YgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgMiwgMCwgMSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiB2YXIgbWFwID0gXy5yZWFyZyhfLm1hcCwgWzEsIDBdKTtcbiAgICAgKiBtYXAoZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gKiAzO1xuICAgICAqIH0sIFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzMsIDYsIDldXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gcmVzdFBhcmFtKGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKGZ1bmMsIFJFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJhc2VGbGF0dGVuKGluZGV4ZXMpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhcyBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGUgW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9GdW5jdGlvbnMvcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0UGFyYW0oZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0UGFyYW0oZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6ICgrc3RhcnQgfHwgMCksIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICByZXN0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHJlc3RbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHN0YXJ0KSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzLCBhcmdzWzBdLCByZXN0KTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgcmVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHJlc3Q7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2UgW2BGdW5jdGlvbiNhcHBseWBdKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjMuNC4zKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGUgW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL1NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiAvLyB3aXRoIGEgUHJvbWlzZVxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJyYXkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgaW52b2NhdGlvbnMuIFByb3ZpZGUgYW4gb3B0aW9ucyBvYmplY3QgdG8gaW5kaWNhdGVcbiAgICAgKiB0aGF0IGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGVcbiAgICAgKiBgd2FpdGAgdGltZW91dC4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGNhbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGlzXG4gICAgICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHA6Ly9kcnVwYWxtb3Rpb24uY29tL2FydGljbGUvZGVib3VuY2UtYW5kLXRocm90dGxlLXZpc3VhbC1leHBsYW5hdGlvbilcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXSBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nXG4gICAgICogIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXSBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZ1xuICAgICAqICBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gYXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZ1xuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIGludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzXG4gICAgICogalF1ZXJ5KCcuaW50ZXJhY3RpdmUnKS5vbignY2xpY2snLCBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwge1xuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBjYW5jZWwgYSB0cmFpbGluZyB0aHJvdHRsZWQgY2FsbFxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zID09PSBmYWxzZSkge1xuICAgICAgICBsZWFkaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7ICdsZWFkaW5nJzogbGVhZGluZywgJ21heFdhaXQnOiArd2FpdCwgJ3RyYWlsaW5nJzogdHJhaWxpbmcgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byB0aGUgd3JhcHBlciBmdW5jdGlvbiBhcyBpdHNcbiAgICAgKiBmaXJzdCBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmVcbiAgICAgKiBhcHBlbmRlZCB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgd3JhcHBlciBmdW5jdGlvbi4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgd3JhcHBlciA9IHdyYXBwZXIgPT0gbnVsbCA/IGlkZW50aXR5IDogd3JhcHBlcjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwcGVyKHdyYXBwZXIsIFBBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBbdmFsdWVdLCBbXSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB2YWx1ZWAuIElmIGBpc0RlZXBgIGlzIGB0cnVlYCBuZXN0ZWQgb2JqZWN0cyBhcmUgY2xvbmVkLFxuICAgICAqIG90aGVyd2lzZSB0aGV5IGFyZSBhc3NpZ25lZCBieSByZWZlcmVuY2UuIElmIGBjdXN0b21pemVyYCBpcyBwcm92aWRlZCBpdCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGJvdW5kIHRvXG4gICAgICogYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50OyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3RdKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNpbnRlcm5hbC1zdHJ1Y3R1cmVkLWNsb25pbmctYWxnb3JpdGhtKS5cbiAgICAgKiBUaGUgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYW5kIG9iamVjdHMgY3JlYXRlZCBieVxuICAgICAqIGNvbnN0cnVjdG9ycyBvdGhlciB0aGFuIGBPYmplY3RgIGFyZSBjbG9uZWQgdG8gcGxhaW4gYE9iamVjdGAgb2JqZWN0cy4gQW5cbiAgICAgKiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoIGFzIGZ1bmN0aW9ucywgRE9NIG5vZGVzLFxuICAgICAqIE1hcHMsIFNldHMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGN1c3RvbWl6ZXJgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZSh1c2Vycyk7XG4gICAgICogc2hhbGxvd1swXSA9PT0gdXNlcnNbMF07XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lKHVzZXJzLCB0cnVlKTtcbiAgICAgKiBkZWVwWzBdID09PSB1c2Vyc1swXTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIGVsID0gXy5jbG9uZShkb2N1bWVudC5ib2R5LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGVsID09PSBkb2N1bWVudC5ib2R5XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBlbC5ub2RlTmFtZVxuICAgICAqIC8vID0+IEJPRFlcbiAgICAgKiBlbC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUsIGlzRGVlcCwgY3VzdG9taXplciwgdGhpc0FyZykge1xuICAgICAgaWYgKGlzRGVlcCAmJiB0eXBlb2YgaXNEZWVwICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaXNEZWVwLCBjdXN0b21pemVyKSkge1xuICAgICAgICBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBpc0RlZXAgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzQXJnID0gY3VzdG9taXplcjtcbiAgICAgICAgY3VzdG9taXplciA9IGlzRGVlcDtcbiAgICAgICAgaXNEZWVwID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBiaW5kQ2FsbGJhY2soY3VzdG9taXplciwgdGhpc0FyZywgMSkpXG4gICAgICAgIDogYmFzZUNsb25lKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIGB2YWx1ZWAuIElmIGBjdXN0b21pemVyYCBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkXG4gICAgICogdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAgY2xvbmluZ1xuICAgICAqIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYFxuICAgICAqIGFuZCBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50OyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3RdKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNpbnRlcm5hbC1zdHJ1Y3R1cmVkLWNsb25pbmctYWxnb3JpdGhtKS5cbiAgICAgKiBUaGUgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYW5kIG9iamVjdHMgY3JlYXRlZCBieVxuICAgICAqIGNvbnN0cnVjdG9ycyBvdGhlciB0aGFuIGBPYmplY3RgIGFyZSBjbG9uZWQgdG8gcGxhaW4gYE9iamVjdGAgb2JqZWN0cy4gQW5cbiAgICAgKiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoIGFzIGZ1bmN0aW9ucywgRE9NIG5vZGVzLFxuICAgICAqIE1hcHMsIFNldHMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZGVlcCBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGN1c3RvbWl6ZXJgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcCh1c2Vycyk7XG4gICAgICogZGVlcFswXSA9PT0gdXNlcnNbMF07XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGEgY3VzdG9taXplciBjYWxsYmFja1xuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwKGRvY3VtZW50LmJvZHksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBlbCA9PT0gZG9jdW1lbnQuYm9keVxuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogZWwubm9kZU5hbWVcbiAgICAgKiAvLyA9PiBCT0RZXG4gICAgICogZWwuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUsIGN1c3RvbWl6ZXIsIHRoaXNBcmcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nXG4gICAgICAgID8gYmFzZUNsb25lKHZhbHVlLCB0cnVlLCBiaW5kQ2FsbGJhY2soY3VzdG9taXplciwgdGhpc0FyZywgMSkpXG4gICAgICAgIDogYmFzZUNsb25lKHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGd0ZSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJiAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcnJheVRhZztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8IChpc09iamVjdExpa2UodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiAhIXZhbHVlICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGVtcHR5LiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgZW1wdHkgdW5sZXNzIGl0IGlzIGFuXG4gICAgICogYGFyZ3VtZW50c2Agb2JqZWN0LCBhcnJheSwgc3RyaW5nLCBvciBqUXVlcnktbGlrZSBjb2xsZWN0aW9uIHdpdGggYSBsZW5ndGhcbiAgICAgKiBncmVhdGVyIHRoYW4gYDBgIG9yIGFuIG9iamVjdCB3aXRoIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJiAoaXNBcnJheSh2YWx1ZSkgfHwgaXNTdHJpbmcodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWUuc3BsaWNlKSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuICFrZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuIElmIGBjdXN0b21pemVyYCBpcyBwcm92aWRlZCBpdCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgIGNvbXBhcmlzb25zIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2RcbiAgICAgKiBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGJvdW5kIHRvIGB0aGlzQXJnYCBhbmQgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIG90aGVyIFssIGluZGV4fGtleV0pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGJvb2xlYW5zLCBgRGF0ZWAgb2JqZWN0cyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBhbmQgc3RyaW5ncy4gT2JqZWN0cyBhcmUgY29tcGFyZWQgYnlcbiAgICAgKiB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET00gbm9kZXNcbiAgICAgKiBhcmUgKipub3QqKiBzdXBwb3J0ZWQuIFByb3ZpZGUgYSBjdXN0b21pemVyIGZ1bmN0aW9uIHRvIGV4dGVuZCBzdXBwb3J0XG4gICAgICogZm9yIGNvbXBhcmluZyBvdGhlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAYWxpYXMgZXFcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGN1c3RvbWl6ZXJgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICogdmFyIG90aGVyID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogb2JqZWN0ID09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwoYXJyYXksIG90aGVyLCBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgKiAgIGlmIChfLmV2ZXJ5KFt2YWx1ZSwgb3RoZXJdLCBSZWdFeHAucHJvdG90eXBlLnRlc3QsIC9eaCg/Oml8ZWxsbykkLykpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyLCBjdXN0b21pemVyLCB0aGlzQXJnKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGJpbmRDYWxsYmFjayhjdXN0b21pemVyLCB0aGlzQXJnLCAzKSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuICByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBlcnJvclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzZmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMTApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzEwJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUodHJ1ZSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoT2JqZWN0KDEwKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIG9sZGVyIHZlcnNpb25zIG9mIENocm9tZSBhbmQgU2FmYXJpIHdoaWNoIHJldHVybiAnZnVuY3Rpb24nIGZvciByZWdleGVzXG4gICAgICAvLyBhbmQgU2FmYXJpIDggZXF1aXZhbGVudHMgd2hpY2ggcmV0dXJuICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcnMuXG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IGZ1bmNUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlIFtsYW5ndWFnZSB0eXBlXShodHRwczovL2VzNS5naXRodWIuaW8vI3g4KSBvZiBgT2JqZWN0YC5cbiAgICAgKiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIC8vIEF2b2lkIGEgVjggSklUIGJ1ZyBpbiBDaHJvbWUgMTktMjAuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIyOTEgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0byBkZXRlcm1pbmUgaWZcbiAgICAgKiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIGlzIHByb3ZpZGVkXG4gICAgICogaXQgaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBjb21wYXJpc29ucyBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmRcbiAgICAgKiB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgb3RoZXIsIGluZGV4fGtleSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIHByb3BlcnRpZXMgb2YgYXJyYXlzLCBib29sZWFucyxcbiAgICAgKiBgRGF0ZWAgb2JqZWN0cywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgYW5kIHN0cmluZ3MuIEZ1bmN0aW9uc1xuICAgICAqIGFuZCBET00gbm9kZXMgYXJlICoqbm90Kiogc3VwcG9ydGVkLiBQcm92aWRlIGEgY3VzdG9taXplciBmdW5jdGlvbiB0byBleHRlbmRcbiAgICAgKiBzdXBwb3J0IGZvciBjb21wYXJpbmcgb3RoZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYWdlJzogNDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYWdlJzogMzYgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGEgY3VzdG9taXplciBjYWxsYmFja1xuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIF8uZXZlcnkoW3ZhbHVlLCBvdGhlcl0sIFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgL15oKD86aXxlbGxvKSQvKSB8fCB1bmRlZmluZWQ7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIsIHRoaXNBcmcpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gYmluZENhbGxiYWNrKGN1c3RvbWl6ZXIsIHRoaXNBcmcsIDMpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIG5vdCB0aGUgc2FtZSBhcyBbYGlzTmFOYF0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjQpXG4gICAgICogd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtZXJpYyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZSBob3N0IG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlSXNOYXRpdmUudGVzdChmblRvU3RyaW5nLmNhbGwodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHJlSXNIb3N0Q3Rvci50ZXN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmUgY2xhc3NpZmllZFxuICAgICAqIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcig4LjQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCc4LjQnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IChpc09iamVjdExpa2UodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhc3N1bWVzIG9iamVjdHMgY3JlYXRlZCBieSB0aGUgYE9iamVjdGAgY29uc3RydWN0b3JcbiAgICAgKiBoYXZlIG5vIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvcjtcblxuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igbm9uIGBPYmplY3RgIG9iamVjdHMuXG4gICAgICBpZiAoIShpc09iamVjdExpa2UodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IG9iamVjdFRhZyAmJiAhaXNBcmd1bWVudHModmFsdWUpKSB8fFxuICAgICAgICAgICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NvbnN0cnVjdG9yJykgJiYgKEN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvciwgdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhKEN0b3IgaW5zdGFuY2VvZiBDdG9yKSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIElFIDwgOSBpdGVyYXRlcyBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgb3duIHByb3BlcnRpZXMuIElmIHRoZSBmaXJzdFxuICAgICAgLy8gaXRlcmF0ZWQgcHJvcGVydHkgaXMgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnR5IHRoZW4gdGhlcmUgYXJlIG5vIGluaGVyaXRlZFxuICAgICAgLy8gZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIC8vIEluIG1vc3QgZW52aXJvbm1lbnRzIGFuIG9iamVjdCdzIG93biBwcm9wZXJ0aWVzIGFyZSBpdGVyYXRlZCBiZWZvcmVcbiAgICAgIC8vIGl0cyBpbmhlcml0ZWQgcHJvcGVydGllcy4gSWYgdGhlIGxhc3QgaXRlcmF0ZWQgcHJvcGVydHkgaXMgYW4gb2JqZWN0J3NcbiAgICAgIC8vIG93biBwcm9wZXJ0eSB0aGVuIHRoZXJlIGFyZSBubyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAgYmFzZUZvckluKHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IChpc09iamVjdExpa2UodmFsdWUpICYmIG9ialRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3Nbb2JqVG9TdHJpbmcuY2FsbCh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGx0ZSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7XG4gICAgICogfSgxLCAyLCAzKSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlID8gZ2V0TGVuZ3RoKHZhbHVlKSA6IDA7XG4gICAgICBpZiAoIWlzTGVuZ3RoKGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlDb3B5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvcHkodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBzb3VyY2Ugb2JqZWN0KHMpLCB0aGF0XG4gICAgICogZG9uJ3QgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBpbnRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIFN1YnNlcXVlbnQgc291cmNlc1xuICAgICAqIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLiBJZiBgY3VzdG9taXplcmAgaXNcbiAgICAgKiBwcm92aWRlZCBpdCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCBtZXJnaW5nIGlzIGhhbmRsZWRcbiAgICAgKiBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCBmaXZlIGFyZ3VtZW50czogKG9iamVjdFZhbHVlLCBzb3VyY2VWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGN1c3RvbWl6ZXJgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdkYXRhJzogW3sgJ3VzZXInOiAnYmFybmV5JyB9LCB7ICd1c2VyJzogJ2ZyZWQnIH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBhZ2VzID0ge1xuICAgICAqICAgJ2RhdGEnOiBbeyAnYWdlJzogMzYgfSwgeyAnYWdlJzogNDAgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZSh1c2VycywgYWdlcyk7XG4gICAgICogLy8gPT4geyAnZGF0YSc6IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV0gfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdmcnVpdHMnOiBbJ2FwcGxlJ10sXG4gICAgICogICAndmVnZXRhYmxlcyc6IFsnYmVldCddXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdmcnVpdHMnOiBbJ2JhbmFuYSddLFxuICAgICAqICAgJ3ZlZ2V0YWJsZXMnOiBbJ2NhcnJvdCddXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlciwgZnVuY3Rpb24oYSwgYikge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShhKSkge1xuICAgICAqICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZnJ1aXRzJzogWydhcHBsZScsICdiYW5hbmEnXSwgJ3ZlZ2V0YWJsZXMnOiBbJ2JlZXQnLCAnY2Fycm90J10gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGJhc2VNZXJnZSk7XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBvYmplY3QuIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKiBJZiBgY3VzdG9taXplcmAgaXMgcHJvdmlkZWQgaXQgaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogVGhlIGBjdXN0b21pemVyYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czpcbiAgICAgKiAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAndXNlcic6ICdiYXJuZXknIH0sIHsgJ2FnZSc6IDQwIH0sIHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1cbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIGEgY3VzdG9taXplciBjYWxsYmFja1xuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduLCBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKHZhbHVlKSA/IG90aGVyIDogdmFsdWU7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICd1c2VyJzogJ2Jhcm5leScgfSwgeyAnYWdlJzogMzYgfSwgeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gY3VzdG9taXplclxuICAgICAgICA/IGFzc2lnbldpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpXG4gICAgICAgIDogYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgcHJvdmlkZWQgaXRzIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGFzc2lnbmVkXG4gICAgICogdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMsIGd1YXJkKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHByb3RvdHlwZSwgcHJvcGVydGllcywgZ3VhcmQpKSB7XG4gICAgICAgIHByb3BlcnRpZXMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA/IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdChzKSB0byB0aGUgZGVzdGluYXRpb25cbiAgICAgKiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gT25jZSBhXG4gICAgICogcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ3VzZXInOiAnYmFybmV5JyB9LCB7ICdhZ2UnOiAzNiB9LCB7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBjcmVhdGVEZWZhdWx0cyhhc3NpZ24sIGFzc2lnbkRlZmF1bHRzKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAndXNlcic6IHsgJ25hbWUnOiAnYmFybmV5JyB9IH0sIHsgJ3VzZXInOiB7ICduYW1lJzogJ2ZyZWQnLCAnYWdlJzogMzYgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogeyAnbmFtZSc6ICdiYXJuZXknLCAnYWdlJzogMzYgfSB9XG4gICAgICpcbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gY3JlYXRlRGVmYXVsdHMobWVyZ2UsIG1lcmdlRGVmYXVsdHMpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlIDwgNDA7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgY2FsbGJhY2sgc2hvcnRoYW5kXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kS2V5ID0gY3JlYXRlRmluZEtleShiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBwcmVkaWNhdGVgIHRoZSBjcmVhdGVkIGBfLm1hdGNoZXNgIHN0eWxlXG4gICAgICogY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24oY2hyKSB7XG4gICAgICogICByZXR1cm4gY2hyLmFnZSA8IDQwO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgYHBlYmJsZXNgIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgYGJhcm5leWBcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzYCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3RLZXkgPSBjcmVhdGVGaW5kS2V5KGJhc2VGb3JPd25SaWdodCk7XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgaW52b2tpbmdcbiAgICAgKiBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBpdGVyYXRlZWAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBsb2dzICdhJywgJ2InLCBhbmQgJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIGZvckluID0gY3JlYXRlRm9ySW4oYmFzZUZvcik7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnYycsICdiJywgYW5kICdhJyBhc3N1bWluZyBgXy5mb3JJbiBgIGxvZ3MgJ2EnLCAnYicsIGFuZCAnYydcbiAgICAgKi9cbiAgICB2YXIgZm9ySW5SaWdodCA9IGNyZWF0ZUZvckluKGJhc2VGb3JSaWdodCk7XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGludm9raW5nIGBpdGVyYXRlZWBcbiAgICAgKiBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IGxvZ3MgJ2EnIGFuZCAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgZm9yT3duID0gY3JlYXRlRm9yT3duKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gbG9ncyAnYicgYW5kICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIGFuZCAnYidcbiAgICAgKi9cbiAgICB2YXIgZm9yT3duUmlnaHQgPSBjcmVhdGVGb3JPd24oYmFzZUZvck93blJpZ2h0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLFxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkLCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBtZXRob2RzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhfKTtcbiAgICAgKiAvLyA9PiBbJ2FmdGVyJywgJ2FyeScsICdhc3NpZ24nLCAuLi5dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgdXNlZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGB1bmRlZmluZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHRvUGF0aChwYXRoKSwgcGF0aCArICcnKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IHsgJ2MnOiAzIH0gfSB9O1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwYXRoKTtcbiAgICAgIGlmICghcmVzdWx0ICYmICFpc0tleShwYXRoKSkge1xuICAgICAgICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICAgICAgICBvYmplY3QgPSBwYXRoLmxlbmd0aCA9PSAxID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcGF0aCA9IGxhc3QocGF0aCk7XG4gICAgICAgIHJlc3VsdCA9IGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwYXRoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgfHwgKGlzTGVuZ3RoKG9iamVjdC5sZW5ndGgpICYmIGlzSW5kZXgocGF0aCwgb2JqZWN0Lmxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGUgcHJvcGVydHlcbiAgICAgKiBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMgdW5sZXNzIGBtdWx0aVZhbHVlYCBpcyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFttdWx0aVZhbHVlXSBBbGxvdyBtdWx0aXBsZSB2YWx1ZXMgcGVyIGtleS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKlxuICAgICAqIC8vIHdpdGggYG11bHRpVmFsdWVgXG4gICAgICogXy5pbnZlcnQob2JqZWN0LCB0cnVlKTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52ZXJ0KG9iamVjdCwgbXVsdGlWYWx1ZSwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChvYmplY3QsIG11bHRpVmFsdWUsIGd1YXJkKSkge1xuICAgICAgICBtdWx0aVZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcHJvcHMgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAobXVsdGlWYWx1ZSkge1xuICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIHZhciBrZXlzID0gIW5hdGl2ZUtleXMgPyBzaGltS2V5cyA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmICgodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0KSB8fFxuICAgICAgICAgICh0eXBlb2Ygb2JqZWN0ICE9ICdmdW5jdGlvbicgJiYgaXNBcnJheUxpa2Uob2JqZWN0KSkpIHtcbiAgICAgICAgcmV0dXJuIHNoaW1LZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNPYmplY3Qob2JqZWN0KSA/IG5hdGl2ZUtleXMob2JqZWN0KSA6IFtdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7XG4gICAgICBsZW5ndGggPSAobGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKSAmJiBsZW5ndGgpIHx8IDA7XG5cbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNQcm90byA9IHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUgPT09IG9iamVjdCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gbGVuZ3RoID4gMDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IChpbmRleCArICcnKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoc2tpcEluZGV4ZXMgJiYgaXNJbmRleChrZXksIGxlbmd0aCkpICYmXG4gICAgICAgICAgICAhKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogcHJvcGVydHkgb2YgYG9iamVjdGAgdGhyb3VnaCBgaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R8c3RyaW5nfSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWRcbiAgICAgKiAgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgdmFyIG1hcEtleXMgPSBjcmVhdGVPYmplY3RNYXBwZXIodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWQgYnlcbiAgICAgKiBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhyb3VnaCBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBmdW5jdGlvbiBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBJZiBhIHByb3BlcnR5IG5hbWUgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ucHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIHZhbHVlIGlzIGFsc28gcHJvdmlkZWQgZm9yIGB0aGlzQXJnYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzUHJvcGVydHlgXG4gICAgICogc3R5bGUgY2FsbGJhY2sgcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSBhIG1hdGNoaW5nIHByb3BlcnR5XG4gICAgICogdmFsdWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIElmIGFuIG9iamVjdCBpcyBwcm92aWRlZCBmb3IgYGl0ZXJhdGVlYCB0aGUgY3JlYXRlZCBgXy5tYXRjaGVzYCBzdHlsZVxuICAgICAqIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGdpdmVuXG4gICAgICogb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdHxzdHJpbmd9IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZFxuICAgICAqICBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMywgJ2InOiA2IH1cbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgbWFwVmFsdWVzID0gY3JlYXRlT2JqZWN0TWFwcGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwcmVkaWNhdGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlclxuICAgICAqICBpdGVyYXRpb24gb3IgcHJvcGVydHkgbmFtZXMgdG8gb21pdCwgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgcHJvcGVydHlcbiAgICAgKiAgbmFtZXMgb3IgYXJyYXlzIG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJyB9XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IHJlc3RQYXJhbShmdW5jdGlvbihvYmplY3QsIHByb3BzKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwcm9wc1swXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGJhc2VGbGF0dGVuKHByb3BzKSwgU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHBpY2tCeUFycmF5KG9iamVjdCwgYmFzZURpZmZlcmVuY2Uoa2V5c0luKG9iamVjdCksIHByb3BzKSk7XG4gICAgICB9XG4gICAgICB2YXIgcHJlZGljYXRlID0gYmluZENhbGxiYWNrKHByb3BzWzBdLCBwcm9wc1sxXSwgMyk7XG4gICAgICByZXR1cm4gcGlja0J5Q2FsbGJhY2sob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHR3byBkaW1lbnNpb25hbCBhcnJheSBvZiB0aGUga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCxcbiAgICAgKiBlLmcuIGBbW2tleTEsIHZhbHVlMV0sIFtrZXkyLCB2YWx1ZTJdXWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWlycyh7ICdiYXJuZXknOiAzNiwgJ2ZyZWQnOiA0MCB9KTtcbiAgICAgKiAvLyA9PiBbWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWlycyhvYmplY3QpIHtcbiAgICAgIG9iamVjdCA9IHRvT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuIFByb3BlcnR5XG4gICAgICogbmFtZXMgbWF5IGJlIHNwZWNpZmllZCBhcyBpbmRpdmlkdWFsIGFyZ3VtZW50cyBvciBhcyBhcnJheXMgb2YgcHJvcGVydHlcbiAgICAgKiBuYW1lcy4gSWYgYHByZWRpY2F0ZWAgaXMgcHJvdmlkZWQgaXQgaXMgaW52b2tlZCBmb3IgZWFjaCBwcm9wZXJ0eSBvZiBgb2JqZWN0YFxuICAgICAqIHBpY2tpbmcgdGhlIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwcmVkaWNhdGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlclxuICAgICAqICBpdGVyYXRpb24gb3IgcHJvcGVydHkgbmFtZXMgdG8gcGljaywgc3BlY2lmaWVkIGFzIGluZGl2aWR1YWwgcHJvcGVydHlcbiAgICAgKiAgbmFtZXMgb3IgYXJyYXlzIG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgcHJlZGljYXRlYC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCAndXNlcicpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgXy5pc1N0cmluZyk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSByZXN0UGFyYW0oZnVuY3Rpb24ob2JqZWN0LCBwcm9wcykge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgcHJvcHNbMF0gPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBpY2tCeUNhbGxiYWNrKG9iamVjdCwgYmluZENhbGxiYWNrKHByb3BzWzBdLCBwcm9wc1sxXSwgMykpXG4gICAgICAgIDogcGlja0J5QXJyYXkob2JqZWN0LCBiYXNlRmxhdHRlbihwcm9wcykpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4gICAgICogaXQgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmQgaXRzIHJlc3VsdFxuICAgICAqIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2EuYi5jJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtwYXRoXTtcbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob2JqZWN0ICE9IG51bGwgJiYgIWlzS2V5KHBhdGgsIG9iamVjdCkpIHtcbiAgICAgICAgICBwYXRoID0gdG9QYXRoKHBhdGgpO1xuICAgICAgICAgIG9iamVjdCA9IHBhdGgubGVuZ3RoID09IDEgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbbGFzdChwYXRoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNGdW5jdGlvbihyZXN1bHQpID8gcmVzdWx0LmNhbGwob2JqZWN0KSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiBgcGF0aGAgb24gYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGBcbiAgICAgKiBkb2VzIG5vdCBleGlzdCBpdCBpcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBhdWdtZW50LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAneFswXS55LnonLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcGF0aEtleSA9IChwYXRoICsgJycpO1xuICAgICAgcGF0aCA9IChvYmplY3RbcGF0aEtleV0gIT0gbnVsbCB8fCBpc0tleShwYXRoLCBvYmplY3QpKSA/IFtwYXRoS2V5XSA6IHRvUGF0aChwYXRoKTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwYXRoW2luZGV4XTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KG5lc3RlZCkpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICBuZXN0ZWRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmVzdGVkW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbmVzdGVkW2tleV0gPSBpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd24gZW51bWVyYWJsZVxuICAgICAqIHByb3BlcnRpZXMgdGhyb3VnaCBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvbiBwb3RlbnRpYWxseSBtdXRhdGluZ1xuICAgICAqIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkXG4gICAgICogd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnNcbiAgICAgKiBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24ocmVzdWx0LCBuLCBrZXkpIHtcbiAgICAgKiAgIHJlc3VsdFtrZXldID0gbiAqIDM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDMsICdiJzogNiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG4gICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCA0KTtcblxuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnJheShvYmplY3QpID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBiYXNlQ3JlYXRlKGlzRnVuY3Rpb24oQ3RvcikgPyBDdG9yLnByb3RvdHlwZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0FyciA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8gYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQgaXQgaXMgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZSh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSArc3RhcnQgfHwgMDtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gK2VuZCB8fCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiB2YWx1ZSA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgKGluY2x1c2l2ZSkuIElmIG9ubHkgb25lXG4gICAgICogYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXIgaXMgcmV0dXJuZWQuXG4gICAgICogSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbWluYCBvciBgbWF4YCBhcmUgZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50XG4gICAgICogbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbj0wXSBUaGUgbWluaW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heD0xXSBUaGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obWluLCBtYXgsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgaXNJdGVyYXRlZUNhbGwobWluLCBtYXgsIGZsb2F0aW5nKSkge1xuICAgICAgICBtYXggPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBub01pbiA9IG1pbiA9PSBudWxsLFxuICAgICAgICAgIG5vTWF4ID0gbWF4ID09IG51bGw7XG5cbiAgICAgIGlmIChmbG9hdGluZyA9PSBudWxsKSB7XG4gICAgICAgIGlmIChub01heCAmJiB0eXBlb2YgbWluID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbWluO1xuICAgICAgICAgIG1pbiA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1heCA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IG1heDtcbiAgICAgICAgICBub01heCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub01pbiAmJiBub01heCkge1xuICAgICAgICBtYXggPSAxO1xuICAgICAgICBub01heCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgbWluID0gK21pbiB8fCAwO1xuICAgICAgaWYgKG5vTWF4KSB7XG4gICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heCA9ICttYXggfHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBtaW4gJSAxIHx8IG1heCAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihtaW4gKyAocmFuZCAqIChtYXggLSBtaW4gKyBwYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCBtYXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obWluLCBtYXgpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAod29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDYXBpdGFsaXplcyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIChzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZyBbbGF0aW4tMSBzdXBwbGVtZW50YXJ5IGxldHRlcnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIHRvIGJhc2ljIGxhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluMSwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9ICh0YXJnZXQgKyAnJyk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogbmF0aXZlTWluKHBvc2l0aW9uIDwgMCA/IDAgOiAoK3Bvc2l0aW9uIHx8IDApLCBsZW5ndGgpO1xuXG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLmluZGV4T2YodGFyZ2V0LCBwb3NpdGlvbikgPT0gcG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgXCInXCIsIGFuZCBcIlxcYFwiLCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbCBjaGFyYWN0ZXJzXG4gICAgICogdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuXG4gICAgICogU2VlIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEJhY2t0aWNrcyBhcmUgZXNjYXBlZCBiZWNhdXNlIGluIEludGVybmV0IEV4cGxvcmVyIDwgOSwgdGhleSBjYW4gYnJlYWsgb3V0XG4gICAgICogb2YgYXR0cmlidXRlIHZhbHVlcyBvciBIVE1MIGNvbW1lbnRzLiBTZWUgWyM1OV0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzU5KSxcbiAgICAgKiBbIzEwMl0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEwMiksIFsjMTA4XShodHRwczovL2h0bWw1c2VjLm9yZy8jMTA4KSwgYW5kXG4gICAgICogWyMxMzNdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMzMpIG9mIHRoZSBbSFRNTDUgU2VjdXJpdHkgQ2hlYXRzaGVldF0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZylcbiAgICAgKiB0byByZWR1Y2UgWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIC8vIFJlc2V0IGBsYXN0SW5kZXhgIGJlY2F1c2UgaW4gSUUgPCA5IGBTdHJpbmcjcmVwbGFjZWAgZG9lcyBub3QuXG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXFxcIiwgXCIvXCIsIFwiXlwiLCBcIiRcIiwgXCIuXCIsIFwifFwiLCBcIj9cIixcbiAgICAgKiBcIipcIiwgXCIrXCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiBhbmQgXCJ9XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6XFwvXFwvbG9kYXNoXFwuY29tXFwvXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFycy50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFycywgZXNjYXBlUmVnRXhwQ2hhcilcbiAgICAgICAgOiAoc3RyaW5nIHx8ICcoPzopJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9ICtsZW5ndGg7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKHN0ckxlbmd0aCA+PSBsZW5ndGggfHwgIW5hdGl2ZUlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDIsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IG5hdGl2ZUZsb29yKG1pZCksXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBuYXRpdmVDZWlsKG1pZCk7XG5cbiAgICAgIGNoYXJzID0gY3JlYXRlUGFkZGluZygnJywgcmlnaHRMZW5ndGgsIGNoYXJzKTtcbiAgICAgIHJldHVybiBjaGFycy5zbGljZSgwLCBsZWZ0TGVuZ3RoKSArIHN0cmluZyArIGNoYXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZExlZnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZExlZnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZExlZnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgdmFyIHBhZExlZnQgPSBjcmVhdGVQYWREaXIoKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRSaWdodCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkUmlnaHQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZFJpZ2h0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIHZhciBwYWRSaWdodCA9IGNyZWF0ZVBhZERpcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhIGhleGFkZWNpbWFsLFxuICAgICAqIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGUgW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyNFKVxuICAgICAqIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIC8vIEZpcmVmb3ggPCAyMSBhbmQgT3BlcmEgPCAxNSBmb2xsb3cgRVMzIGZvciBgcGFyc2VJbnRgLlxuICAgICAgLy8gQ2hyb21lIGZhaWxzIHRvIHRyaW0gbGVhZGluZyA8Qk9NPiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxMDkgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgcmFkaXgsIGd1YXJkKSA6IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRyaW0oc3RyaW5nKTtcbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludChzdHJpbmcsIHJhZGl4IHx8IChyZUhhc0hleFByZWZpeC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgbiA9ICtuO1xuICAgICAgaWYgKG4gPCAxIHx8ICFzdHJpbmcgfHwgIW5hdGl2ZUlzRmluaXRlKG4pKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArICh3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IG5hdGl2ZU1pbihwb3NpdGlvbiA8IDAgPyAwIDogKCtwb3NpdGlvbiB8fCAwKSwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHJldHVybiBzdHJpbmcubGFzdEluZGV4T2YodGFyZ2V0LCBwb3NpdGlvbikgPT0gcG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgcHJvdmlkZWQgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZV0gVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlXSBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0c10gQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGVdIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkxdIFRoZSBzb3VyY2VVUkwgb2YgdGhlIHRlbXBsYXRlJ3MgY29tcGlsZWQgc291cmNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZV0gVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbb3RoZXJPcHRpb25zXSBFbmFibGVzIHRoZSBsZWdhY3kgYG9wdGlvbnNgIHBhcmFtIHNpZ25hdHVyZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgRVMgZGVsaW1pdGVyIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBkZWZhdWx0IFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVyc1xuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gdXNpbmcgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYFxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIHVzaW5nIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZVxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBmaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yXG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGVcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIGEgc3RhY2sgdHJhY2VcbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihjd2QsICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBvdGhlck9wdGlvbnMpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb24gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKG90aGVyT3B0aW9ucyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIG90aGVyT3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucyA9IG90aGVyT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbldpdGgoYmFzZUFzc2lnbih7fSwgb3RoZXJPcHRpb25zIHx8IG9wdGlvbnMpLCBzZXR0aW5ncywgYXNzaWduT3duRGVmYXVsdHMpO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbldpdGgoYmFzZUFzc2lnbih7fSwgb3B0aW9ucy5pbXBvcnRzKSwgc2V0dGluZ3MuaW1wb3J0cywgYXNzaWduT3duRGVmYXVsdHMpLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKCdzb3VyY2VVUkwnIGluIG9wdGlvbnNcbiAgICAgICAgICA/IG9wdGlvbnMuc291cmNlVVJMXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIHJlcXVpcmVzIHJldHVybmluZyB0aGUgYG1hdGNoYFxuICAgICAgICAvLyBzdHJpbmcgaW4gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSkuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0cmluZztcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBjaGFycywgZ3VhcmQpIDogY2hhcnMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHRyaW1tZWRMZWZ0SW5kZXgoc3RyaW5nKSwgdHJpbW1lZFJpZ2h0SW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgY2hhcnMgPSAoY2hhcnMgKyAnJyk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKGNoYXJzTGVmdEluZGV4KHN0cmluZywgY2hhcnMpLCBjaGFyc1JpZ2h0SW5kZXgoc3RyaW5nLCBjaGFycykgKyAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1MZWZ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltTGVmdCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltTGVmdChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgdmFyIHZhbHVlID0gc3RyaW5nO1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoIXN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgaWYgKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGNoYXJzLCBndWFyZCkgOiBjaGFycyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UodHJpbW1lZExlZnRJbmRleChzdHJpbmcpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoY2hhcnNMZWZ0SW5kZXgoc3RyaW5nLCAoY2hhcnMgKyAnJykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltUmlnaHQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1SaWdodCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltUmlnaHQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0cmluZztcbiAgICAgIHN0cmluZyA9IGJhc2VUb1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIGlmIChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBjaGFycywgZ3VhcmQpIDogY2hhcnMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRSaWdodEluZGV4KHN0cmluZykgKyAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgY2hhcnNSaWdodEluZGV4KHN0cmluZywgKGNoYXJzICsgJycpKSArIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdHxudW1iZXJ9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3Qgb3IgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhIGNhbGxiYWNrIGZvciBmdW5jdGlvbnMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmMoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuYygnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIDI0KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuYygnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmMoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmMoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmMoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAob3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/ICgrb3B0aW9ucy5sZW5ndGggfHwgMCkgOiBsZW5ndGg7XG4gICAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZW5ndGggPSArb3B0aW9ucyB8fCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSBiYXNlVG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChsZW5ndGggPj0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIG9taXNzaW9uLmxlbmd0aDtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIG5ld0VuZCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCAocmVGbGFncy5leGVjKHNlcGFyYXRvcikgfHwgJycpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PSBudWxsID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihzZXBhcmF0b3IsIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYCYjMzk7YCwgYW5kIGAmIzk2O2AgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsIEhUTUxcbiAgICAgKiBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYSBjYWxsYmFjayBmb3IgZnVuY3Rpb25zIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSkge1xuICAgICAgICBwYXR0ZXJuID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gYmFzZVRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4gfHwgcmVXb3JkcykgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQgaXMgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIGF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnNcbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSByZXN0UGFyYW0oZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lIHRoZVxuICAgICAqIGNyZWF0ZWQgY2FsbGJhY2sgcmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgXG4gICAgICogaXMgYW4gb2JqZWN0IHRoZSBjcmVhdGVkIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW5cbiAgICAgKiB0aGUgZXF1aXZhbGVudCBvYmplY3QgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBhbGlhcyBpdGVyYXRlZVxuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGEgY2FsbGJhY2sgZm9yIGZ1bmN0aW9ucyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gd3JhcCB0byBjcmVhdGUgY3VzdG9tIGNhbGxiYWNrIHNob3J0aGFuZHNcbiAgICAgKiBfLmNhbGxiYWNrID0gXy53cmFwKF8uY2FsbGJhY2ssIGZ1bmN0aW9uKGNhbGxiYWNrLCBmdW5jLCB0aGlzQXJnKSB7XG4gICAgICogICB2YXIgbWF0Y2ggPSAvXiguKz8pX18oW2dsXXQpKC4rKSQvLmV4ZWMoZnVuYyk7XG4gICAgICogICBpZiAoIW1hdGNoKSB7XG4gICAgICogICAgIHJldHVybiBjYWxsYmFjayhmdW5jLCB0aGlzQXJnKTtcbiAgICAgKiAgIH1cbiAgICAgKiAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgKiAgICAgcmV0dXJuIG1hdGNoWzJdID09ICdndCdcbiAgICAgKiAgICAgICA/IG9iamVjdFttYXRjaFsxXV0gPiBtYXRjaFszXVxuICAgICAqICAgICAgIDogb2JqZWN0W21hdGNoWzFdXSA8IG1hdGNoWzNdO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWdlX19ndDM2Jyk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGZ1bmMsIHRoaXNBcmcsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoZnVuYywgdGhpc0FyZywgZ3VhcmQpKSB7XG4gICAgICAgIHRoaXNBcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKGZ1bmMpXG4gICAgICAgID8gbWF0Y2hlcyhmdW5jKVxuICAgICAgICA6IGJhc2VDYWxsYmFjayhmdW5jLCB0aGlzQXJnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICogdmFyIGdldHRlciA9IF8uY29uc3RhbnQob2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGdldHRlcigpID09PSBvYmplY3Q7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgcHJvdmlkZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiBfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW4gb2JqZWN0XG4gICAgICogYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBib29sZWFucywgYERhdGVgIG9iamVjdHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgYW5kIHN0cmluZ3MuIE9iamVjdHMgYXJlIGNvbXBhcmVkIGJ5XG4gICAgICogdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZvciBjb21wYXJpbmcgYSBzaW5nbGVcbiAgICAgKiBvd24gb3IgaW5oZXJpdGVkIHByb3BlcnR5IHZhbHVlIHNlZSBgXy5tYXRjaGVzUHJvcGVydHlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5tYXRjaGVzKHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNvbXBhcmVzIHRoZSBwcm9wZXJ0eSB2YWx1ZSBvZiBgcGF0aGAgb24gYSBnaXZlblxuICAgICAqIG9iamVjdCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGJvb2xlYW5zLCBgRGF0ZWAgb2JqZWN0cyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBhbmQgc3RyaW5ncy4gT2JqZWN0cyBhcmUgY29tcGFyZWQgYnlcbiAgICAgKiB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBfLm1hdGNoZXNQcm9wZXJ0eSgndXNlcicsICdmcmVkJykpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvbiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogeyAnYyc6IF8uY29uc3RhbnQoMikgfSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IHsgJ2MnOiBfLmNvbnN0YW50KDEpIH0gfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmIuYycpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlKF8uc29ydEJ5KG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJywgJ2MnXSkpLCAnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gcmVzdFBhcmFtKGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZVBhdGgob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9uIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gcmVzdFBhcmFtKGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGludm9rZVBhdGgob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlIG9iamVjdCB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24gdGhlbiBtZXRob2RzIGFyZSBhZGRlZCB0b1xuICAgICAqIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIHRoZSBmdW5jdGlvbnMgYWRkZWRcbiAgICAgKiAgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICB2YXIgaXNPYmogPSBpc09iamVjdChzb3VyY2UpLFxuICAgICAgICAgICAgcHJvcHMgPSBpc09iaiA/IGtleXMoc291cmNlKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG1ldGhvZE5hbWVzID0gKHByb3BzICYmIHByb3BzLmxlbmd0aCkgPyBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICghKG1ldGhvZE5hbWVzID8gbWV0aG9kTmFtZXMubGVuZ3RoIDogaXNPYmopKSB7XG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBmYWxzZTtcbiAgICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW1ldGhvZE5hbWVzKSB7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSB0cnVlLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IG1ldGhvZE5hbWVzLmxlbmd0aDtcblxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNoYWluID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykge1xuICAgICAgICBjaGFpbiA9IG9wdGlvbnMuY2hhaW47XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IG1ldGhvZE5hbWVzW2luZGV4XSxcbiAgICAgICAgICAgIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG5cbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSAoZnVuY3Rpb24oZnVuYykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGFycmF5Q29weSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfShmdW5jKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBuby1vcGVyYXRpb24gZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB1bmRlZmluZWRgIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIF8ubm9vcChvYmplY3QpID09PSB1bmRlZmluZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIGF0IGBwYXRoYCBvbiBhXG4gICAgICogZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogeyAnYyc6IDIgfSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IHsgJ2MnOiAxIH0gfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYi5jJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5wbHVjayhfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJywgJ2MnXSkpLCAnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkocGF0aCkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgcHJvcGVydHkgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxpdHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCB0b1BhdGgocGF0aCksIHBhdGggKyAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkIGl0IGlzXG4gICAgICogc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC4gSWYgYGVuZGAgaXMgbGVzcyB0aGFuIGBzdGFydGBcbiAgICAgKiBhIHplcm8tbGVuZ3RoIHJhbmdlIGlzIGNyZWF0ZWQgdW5sZXNzIGEgbmVnYXRpdmUgYHN0ZXBgIGlzIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIG51bWJlcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgaWYgKHN0ZXAgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gK3N0YXJ0IHx8IDA7XG4gICAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6ICgrc3RlcCB8fCAwKTtcblxuICAgICAgaWYgKGVuZCA9PSBudWxsKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSArZW5kIHx8IDA7XG4gICAgICB9XG4gICAgICAvLyBVc2UgYEFycmF5KGxlbmd0aClgIHNvIGVuZ2luZXMgbGlrZSBDaGFrcmEgYW5kIFY4IGF2b2lkIHNsb3dlciBtb2Rlcy5cbiAgICAgIC8vIFNlZSBodHRwczovL3lvdXR1LmJlL1hBcUlwR1U4WlprI3Q9MTdtMjVzIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9uIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzXG4gICAgICogb2YgZWFjaCBpbnZvY2F0aW9uLiBUaGUgYGl0ZXJhdGVlYCBpcyBib3VuZCB0byBgdGhpc0FyZ2AgYW5kIGludm9rZWQgd2l0aFxuICAgICAqIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBkaWNlUm9sbHMgPSBfLnRpbWVzKDMsIF8ucGFydGlhbChfLnJhbmRvbSwgMSwgNiwgZmFsc2UpKTtcbiAgICAgKiAvLyA9PiBbMywgNiwgNF1cbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgZnVuY3Rpb24obikge1xuICAgICAqICAgbWFnZS5jYXN0U3BlbGwobik7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gaW52b2tlcyBgbWFnZS5jYXN0U3BlbGwobilgIHRocmVlIHRpbWVzIHdpdGggYG5gIG9mIGAwYCwgYDFgLCBhbmQgYDJgXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHRoaXMuY2FzdChuKTtcbiAgICAgKiB9LCBtYWdlKTtcbiAgICAgKiAvLyA9PiBhbHNvIGludm9rZXMgYG1hZ2UuY2FzdFNwZWxsKG4pYCB0aHJlZSB0aW1lc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICBuID0gbmF0aXZlRmxvb3Iobik7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgdG8gYXZvaWQgYSBKU0MgSklUIGJ1ZyBpbiBTYWZhcmkgOFxuICAgICAgLy8gd2hlcmUgYEFycmF5KDApYCBpcyB0cmVhdGVkIGFzIGBBcnJheSgxKWAuXG4gICAgICBpZiAobiA8IDEgfHwgIW5hdGl2ZUlzRmluaXRlKG4pKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSk7XG5cbiAgICAgIGl0ZXJhdGVlID0gYmluZENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAxKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpZiAoaW5kZXggPCBNQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBwcm92aWRlZCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbGl0eVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4XSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIGJhc2VUb1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIHRvIGFkZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gKCthdWdlbmQgfHwgMCkgKyAoK2FkZGVuZCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGBuYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGBuYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBlbXB0eSBvciBmYWxzZXlcbiAgICAgKiBgLUluZmluaXR5YCBpcyByZXR1cm5lZC4gSWYgYW4gaXRlcmF0ZWUgZnVuY3Rpb24gaXMgcHJvdmlkZWQgaXQgaXMgaW52b2tlZFxuICAgICAqIGZvciBlYWNoIHZhbHVlIGluIGBjb2xsZWN0aW9uYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZVxuICAgICAqIGlzIHJhbmtlZC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiAtSW5maW5pdHlcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWF4KHVzZXJzLCBmdW5jdGlvbihjaHIpIHtcbiAgICAgKiAgIHJldHVybiBjaHIuYWdlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XG4gICAgICpcbiAgICAgKiAvLyB1c2luZyB0aGUgYF8ucHJvcGVydHlgIGNhbGxiYWNrIHNob3J0aGFuZFxuICAgICAqIF8ubWF4KHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1cbiAgICAgKi9cbiAgICB2YXIgbWF4ID0gY3JlYXRlRXh0cmVtdW0oZ3QsIE5FR0FUSVZFX0lORklOSVRZKTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgZW1wdHkgb3IgZmFsc2V5XG4gICAgICogYEluZmluaXR5YCBpcyByZXR1cm5lZC4gSWYgYW4gaXRlcmF0ZWUgZnVuY3Rpb24gaXMgcHJvdmlkZWQgaXQgaXMgaW52b2tlZFxuICAgICAqIGZvciBlYWNoIHZhbHVlIGluIGBjb2xsZWN0aW9uYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoIHRoZSB2YWx1ZVxuICAgICAqIGlzIHJhbmtlZC4gVGhlIGBpdGVyYXRlZWAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogSWYgYSBwcm9wZXJ0eSBuYW1lIGlzIHByb3ZpZGVkIGZvciBgaXRlcmF0ZWVgIHRoZSBjcmVhdGVkIGBfLnByb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgYSB2YWx1ZSBpcyBhbHNvIHByb3ZpZGVkIGZvciBgdGhpc0FyZ2AgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc1Byb3BlcnR5YFxuICAgICAqIHN0eWxlIGNhbGxiYWNrIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGhhdmUgYSBtYXRjaGluZyBwcm9wZXJ0eVxuICAgICAqIHZhbHVlLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBvYmplY3QgaXMgcHJvdmlkZWQgZm9yIGBpdGVyYXRlZWAgdGhlIGNyZWF0ZWQgYF8ubWF0Y2hlc2Agc3R5bGVcbiAgICAgKiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBnaXZlblxuICAgICAqIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5taW4odXNlcnMsIGZ1bmN0aW9uKGNocikge1xuICAgICAqICAgcmV0dXJuIGNoci5hZ2U7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLm1pbih1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKi9cbiAgICB2YXIgbWluID0gY3JlYXRlRXh0cmVtdW0obHQsIFBPU0lUSVZFX0lORklOSVRZKTtcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYG5gIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fHN0cmluZ30gW2l0ZXJhdGVlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgaXRlcmF0ZWVgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDZdKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqXG4gICAgICogXy5zdW0oeyAnYSc6IDQsICdiJzogNiB9KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICduJzogNCB9LFxuICAgICAqICAgeyAnbic6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnN1bShvYmplY3RzLCBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgKiAgIHJldHVybiBvYmplY3QubjtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqXG4gICAgICogLy8gdXNpbmcgdGhlIGBfLnByb3BlcnR5YCBjYWxsYmFjayBzaG9ydGhhbmRcbiAgICAgKiBfLnN1bShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCB0aGlzQXJnKSB7XG4gICAgICBpZiAodGhpc0FyZyAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgdGhpc0FyZykpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpdGVyYXRlZSA9IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAzKTtcbiAgICAgIHJldHVybiBpdGVyYXRlZS5sZW5ndGggPT0gMVxuICAgICAgICA/IGFycmF5U3VtKGlzQXJyYXkoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdG9JdGVyYWJsZShjb2xsZWN0aW9uKSwgaXRlcmF0ZWUpXG4gICAgICAgIDogYmFzZVN1bShjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25zIHRvIHRoZSBgTWFwYCBjYWNoZS5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcEhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwU2V0O1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyB0byB0aGUgYFNldGAgY2FjaGUuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBjYWNoZVB1c2g7XG5cbiAgICAvLyBBc3NpZ24gY2FjaGUgdG8gYF8ubWVtb2l6ZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluZGV4QnkgPSBpbmRleEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5tb2RBcmdzID0gbW9kQXJncztcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLnBhaXJzID0gcGFpcnM7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBsdWNrID0gcGx1Y2s7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJlc3RQYXJhbSA9IHJlc3RQYXJhbTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0QnlBbGwgPSBzb3J0QnlBbGw7XG4gICAgbG9kYXNoLnNvcnRCeU9yZGVyID0gc29ydEJ5T3JkZXI7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aGVyZSA9IHdoZXJlO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmJhY2tmbG93ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5jb2xsZWN0ID0gbWFwO1xuICAgIGxvZGFzaC5jb21wb3NlID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ247XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gY2FsbGJhY2s7XG4gICAgbG9kYXNoLm1ldGhvZHMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLm9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guc2VsZWN0ID0gZmlsdGVyO1xuICAgIGxvZGFzaC50YWlsID0gcmVzdDtcbiAgICBsb2Rhc2gudW5pcXVlID0gdW5pcTtcblxuICAgIC8vIEFkZCBmdW5jdGlvbnMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyB3aGVuIGNoYWluaW5nLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZpbmRXaGVyZSA9IGZpbmRXaGVyZTtcbiAgICBsb2Rhc2guZmlyc3QgPSBmaXJzdDtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZExlZnQgPSBwYWRMZWZ0O1xuICAgIGxvZGFzaC5wYWRSaWdodCA9IHBhZFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUxlZnQgPSB0cmltTGVmdDtcbiAgICBsb2Rhc2gudHJpbVJpZ2h0ID0gdHJpbVJpZ2h0O1xuICAgIGxvZGFzaC50cnVuYyA9IHRydW5jO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmFsbCA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5hbnkgPSBzb21lO1xuICAgIGxvZGFzaC5jb250YWlucyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5lcSA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmRldGVjdCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZvbGRsID0gcmVkdWNlO1xuICAgIGxvZGFzaC5mb2xkciA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5oZWFkID0gZmlyc3Q7XG4gICAgbG9kYXNoLmluY2x1ZGUgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5qZWN0ID0gcmVkdWNlO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgZmFsc2UpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyBjYXBhYmxlIG9mIHJldHVybmluZyB3cmFwcGVkIGFuZCB1bndyYXBwZWQgdmFsdWVzIHdoZW4gY2hhaW5pbmcuXG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcblxuICAgIGxvZGFzaC5wcm90b3R5cGUuc2FtcGxlID0gZnVuY3Rpb24obikge1xuICAgICAgaWYgKCF0aGlzLl9fY2hhaW5fXyAmJiBuID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHNhbXBsZSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gc2FtcGxlKHZhbHVlLCBuKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICB2YXIgZmlsdGVyZWQgPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgICAgaWYgKGZpbHRlcmVkICYmICFpbmRleCkge1xuICAgICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG4gPT0gbnVsbCA/IDEgOiBuYXRpdmVNYXgobmF0aXZlRmxvb3IobikgfHwgMCwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgaWYgKGZpbHRlcmVkKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4ocmVzdWx0Ll9fdGFrZUNvdW50X18sIG4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7ICdzaXplJzogbiwgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJykgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgIT0gTEFaWV9NQVBfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUsIHRoaXNBcmcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7ICdpdGVyYXRlZSc6IGdldENhbGxiYWNrKGl0ZXJhdGVlLCB0aGlzQXJnLCAxKSwgJ3R5cGUnOiB0eXBlIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5maXJzdGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2ZpcnN0JywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8ucmVzdGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICdyZXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8ucGx1Y2tgIGFuZCBgXy53aGVyZWAuXG4gICAgYXJyYXlFYWNoKFsncGx1Y2snLCAnd2hlcmUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBvcGVyYXRpb25OYW1lID0gaW5kZXggPyAnZmlsdGVyJyA6ICdtYXAnLFxuICAgICAgICAgIGNyZWF0ZUNhbGxiYWNrID0gaW5kZXggPyBiYXNlTWF0Y2hlcyA6IHByb3BlcnR5O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpc1tvcGVyYXRpb25OYW1lXShjcmVhdGVDYWxsYmFjayh2YWx1ZSkpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDEpO1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogKCtzdGFydCB8fCAwKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gKCtlbmQgfHwgMCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSwgdGhpc0FyZykucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShQT1NJVElWRV9JTkZJTklUWSk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OmZpcnN0fGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW3JldFVud3JhcHBlZCA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHJldFVud3JhcHBlZCA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIChyZXRVbndyYXBwZWQgJiYgY2hhaW5BbGwpXG4gICAgICAgICAgICA/IGxvZGFzaEZ1bmModmFsdWUsIDEpWzBdXG4gICAgICAgICAgICA6IGxvZGFzaEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhY3Rpb24gPSB7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9LFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsKSB7XG4gICAgICAgICAgaWYgKG9ubHlMYXp5KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKGFjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxvZGFzaEZ1bmMuY2FsbCh1bmRlZmluZWQsIHRoaXMudmFsdWUoKSlbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ2pvaW4nLCAncG9wJywgJ3B1c2gnLCAncmVwbGFjZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICdzcGxpdCcsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gKC9eKD86cmVwbGFjZXxzcGxpdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gc3RyaW5nUHJvdG8gOiBhcnJheVByb3RvKVttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OmpvaW58cG9wfHJlcGxhY2V8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLnZhbHVlKCksIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBmdW5jdGlvbiBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUsXG4gICAgICAgICAgICBuYW1lcyA9IHJlYWxOYW1lc1trZXldIHx8IChyZWFsTmFtZXNba2V5XSA9IFtdKTtcblxuICAgICAgICBuYW1lcy5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkV3JhcHBlcih1bmRlZmluZWQsIEJJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3sgJ25hbWUnOiAnd3JhcHBlcicsICdmdW5jJzogdW5kZWZpbmVkIH1dO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9ucyB0byB0aGUgbGF6eSB3cmFwcGVyLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbmluZyBmdW5jdGlvbnMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25jYXQgPSB3cmFwcGVyQ29uY2F0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b1N0cmluZyA9IHdyYXBwZXJUb1N0cmluZztcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJ1biA9IGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBmdW5jdGlvbiBhbGlhc2VzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuY29sbGVjdCA9IGxvZGFzaC5wcm90b3R5cGUubWFwO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuaGVhZCA9IGxvZGFzaC5wcm90b3R5cGUuZmlyc3Q7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5zZWxlY3QgPSBsb2Rhc2gucHJvdG90eXBlLmZpbHRlcjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRhaWwgPSBsb2Rhc2gucHJvdG90eXBlLnJlc3Q7XG5cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzIGxpa2Ugci5qcyBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2UgdGhlIGZvbGxvd2luZzpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIGxvZGFzaCB0byB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGFuIEFNRCBsb2FkZXIgaXMgcHJlc2VudCB0byBhdm9pZFxuICAgIC8vIGVycm9ycyBpbiBjYXNlcyB3aGVyZSBsb2Rhc2ggaXMgbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBhbmQgbm90IGludGVuZGVkXG4gICAgLy8gYXMgYW4gQU1EIG1vZHVsZS4gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yXG4gICAgLy8gbW9yZSBkZXRhaWxzLlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBhbiBgZXhwb3J0c2Agb2JqZWN0LlxuICBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzIG9yIFJpbmdvSlMuXG4gICAgaWYgKG1vZHVsZUV4cG9ydHMpIHtcbiAgICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICB9XG4gICAgLy8gRXhwb3J0IGZvciBSaGlubyB3aXRoIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZWxzZSB7XG4gICAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IGZvciBhIGJyb3dzZXIgb3IgUmhpbm8uXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG59LHt9XSw4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG52YXIgY2FjaGVQdXNoID0gcmVxdWlyZSgnLi9jYWNoZVB1c2gnKSxcbiAgICBnZXROYXRpdmUgPSByZXF1aXJlKCcuL2dldE5hdGl2ZScpO1xuXG4vKiogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShnbG9iYWwsICdTZXQnKTtcblxuLyogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBsZW5ndGggPSB2YWx1ZXMgPyB2YWx1ZXMubGVuZ3RoIDogMDtcblxuICB0aGlzLmRhdGEgPSB7ICdoYXNoJzogbmF0aXZlQ3JlYXRlKG51bGwpLCAnc2V0JzogbmV3IFNldCB9O1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB0aGlzLnB1c2godmFsdWVzW2xlbmd0aF0pO1xuICB9XG59XG5cbi8vIEFkZCBmdW5jdGlvbnMgdG8gdGhlIGBTZXRgIGNhY2hlLlxuU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBjYWNoZVB1c2g7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7XCIuL2NhY2hlUHVzaFwiOjkyLFwiLi9nZXROYXRpdmVcIjo5Nn1dLDgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG5cbn0se31dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBrZXlzID0gcmVxdWlyZSgnLi4vb2JqZWN0L2tleXMnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uYXNzaWduYCBmb3IgY3VzdG9taXppbmcgYXNzaWduZWQgdmFsdWVzIHdpdGhvdXRcbiAqIHN1cHBvcnQgZm9yIGFyZ3VtZW50IGp1Z2dsaW5nLCBtdWx0aXBsZSBzb3VyY2VzLCBhbmQgYHRoaXNgIGJpbmRpbmcgYGN1c3RvbWl6ZXJgXG4gKiBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYXNzaWduV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgcmVzdWx0ID0gY3VzdG9taXplcih2YWx1ZSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpO1xuXG4gICAgaWYgKChyZXN1bHQgPT09IHJlc3VsdCA/IChyZXN1bHQgIT09IHZhbHVlKSA6ICh2YWx1ZSA9PT0gdmFsdWUpKSB8fFxuICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgb2JqZWN0W2tleV0gPSByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduV2l0aDtcblxufSx7XCIuLi9vYmplY3Qva2V5c1wiOjExMH1dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBiYXNlQ29weSA9IHJlcXVpcmUoJy4vYmFzZUNvcHknKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi4vb2JqZWN0L2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXJndW1lbnQganVnZ2xpbmcsXG4gKiBtdWx0aXBsZSBzb3VyY2VzLCBhbmQgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZSA9PSBudWxsXG4gICAgPyBvYmplY3RcbiAgICA6IGJhc2VDb3B5KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG5cbn0se1wiLi4vb2JqZWN0L2tleXNcIjoxMTAsXCIuL2Jhc2VDb3B5XCI6ODV9XSw4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDb3B5KHNvdXJjZSwgcHJvcHMsIG9iamVjdCkge1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG4gICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDb3B5O1xuXG59LHt9XSw4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL2Jhc2VJbmRleE9mJyksXG4gICAgY2FjaGVJbmRleE9mID0gcmVxdWlyZSgnLi9jYWNoZUluZGV4T2YnKSxcbiAgICBjcmVhdGVDYWNoZSA9IHJlcXVpcmUoJy4vY3JlYXRlQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kaWZmZXJlbmNlYCB3aGljaCBhY2NlcHRzIGEgc2luZ2xlIGFycmF5XG4gKiBvZiB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBpZiAoIWxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBpbmRleE9mID0gYmFzZUluZGV4T2YsXG4gICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICBjYWNoZSA9IChpc0NvbW1vbiAmJiB2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpID8gY3JlYXRlQ2FjaGUodmFsdWVzKSA6IG51bGwsXG4gICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gIGlmIChjYWNoZSkge1xuICAgIGluZGV4T2YgPSBjYWNoZUluZGV4T2Y7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICB2YWx1ZXMgPSBjYWNoZTtcbiAgfVxuICBvdXRlcjpcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICBpZiAoaXNDb21tb24gJiYgdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbmRleE9mKHZhbHVlcywgdmFsdWUsIDApIDwgMCkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VEaWZmZXJlbmNlO1xuXG59LHtcIi4vYmFzZUluZGV4T2ZcIjo4OCxcIi4vY2FjaGVJbmRleE9mXCI6OTEsXCIuL2NyZWF0ZUNhY2hlXCI6OTR9XSw4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9hcnJheVB1c2gnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4uL2xhbmcvaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi4vbGFuZy9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIGFkZGVkIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nXG4gKiBmbGF0dGVuaW5nIGFuZCBzcGVjaWZ5aW5nIHRoZSBzdGFydCBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgZmxhdHRlbmluZyB0byBhcnJheXMtbGlrZSBvYmplY3RzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgaXNEZWVwLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAoaXNTdHJpY3QgfHwgaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgaXNEZWVwLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG5cbn0se1wiLi4vbGFuZy9pc0FyZ3VtZW50c1wiOjEwNCxcIi4uL2xhbmcvaXNBcnJheVwiOjEwNSxcIi4vYXJyYXlQdXNoXCI6ODIsXCIuL2lzQXJyYXlMaWtlXCI6OTgsXCIuL2lzT2JqZWN0TGlrZVwiOjEwMn1dLDg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpbmRleE9mTmFOID0gcmVxdWlyZSgnLi9pbmRleE9mTmFOJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBiaW5hcnkgc2VhcmNoZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIGluZGV4T2ZOYU4oYXJyYXksIGZyb21JbmRleCk7XG4gIH1cbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcblxufSx7XCIuL2luZGV4T2ZOYU5cIjo5N31dLDg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuXG59LHt9XSw5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuLi91dGlsaXR5L2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQ2FsbGJhY2tgIHdoaWNoIG9ubHkgc3VwcG9ydHMgYHRoaXNgIGJpbmRpbmdcbiAqIGFuZCBzcGVjaWZ5aW5nIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyZ0NvdW50XSBUaGUgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGJpbmRDYWxsYmFjayhmdW5jLCB0aGlzQXJnLCBhcmdDb3VudCkge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodGhpc0FyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbiAgc3dpdGNoIChhcmdDb3VudCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIHZhbHVlKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgY2FzZSA0OiByZXR1cm4gZnVuY3Rpb24oYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9O1xuICAgIGNhc2UgNTogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlciwga2V5LCBvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgb3RoZXIsIGtleSwgb2JqZWN0LCBzb3VyY2UpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZENhbGxiYWNrO1xuXG59LHtcIi4uL3V0aWxpdHkvaWRlbnRpdHlcIjoxMTJ9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9sYW5nL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNhY2hlYCBtaW1pY2tpbmcgdGhlIHJldHVybiBzaWduYXR1cmUgb2ZcbiAqIGBfLmluZGV4T2ZgIGJ5IHJldHVybmluZyBgMGAgaWYgdGhlIHZhbHVlIGlzIGZvdW5kLCBlbHNlIGAtMWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gc2VhcmNoLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYDBgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVJbmRleE9mKGNhY2hlLCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGNhY2hlLmRhdGEsXG4gICAgICByZXN1bHQgPSAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzT2JqZWN0KHZhbHVlKSkgPyBkYXRhLnNldC5oYXModmFsdWUpIDogZGF0YS5oYXNoW3ZhbHVlXTtcblxuICByZXR1cm4gcmVzdWx0ID8gMCA6IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSW5kZXhPZjtcblxufSx7XCIuLi9sYW5nL2lzT2JqZWN0XCI6MTA4fV0sOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vbGFuZy9pc09iamVjdCcpO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHB1c2hcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlUHVzaCh2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc09iamVjdCh2YWx1ZSkpIHtcbiAgICBkYXRhLnNldC5hZGQodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGRhdGEuaGFzaFt2YWx1ZV0gPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVQdXNoO1xuXG59LHtcIi4uL2xhbmcvaXNPYmplY3RcIjoxMDh9XSw5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYmluZENhbGxiYWNrID0gcmVxdWlyZSgnLi9iaW5kQ2FsbGJhY2snKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vaXNJdGVyYXRlZUNhbGwnKSxcbiAgICByZXN0UGFyYW0gPSByZXF1aXJlKCcuLi9mdW5jdGlvbi9yZXN0UGFyYW0nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYF8uYXNzaWduYCwgYF8uZGVmYXVsdHNgLCBvciBgXy5tZXJnZWAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiByZXN0UGFyYW0oZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbbGVuZ3RoIC0gMl0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQsXG4gICAgICAgIHRoaXNBcmcgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjdXN0b21pemVyID0gYmluZENhbGxiYWNrKGN1c3RvbWl6ZXIsIHRoaXNBcmcsIDUpO1xuICAgICAgbGVuZ3RoIC09IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgdGhpc0FyZyA9PSAnZnVuY3Rpb24nID8gdGhpc0FyZyA6IHVuZGVmaW5lZDtcbiAgICAgIGxlbmd0aCAtPSAoY3VzdG9taXplciA/IDEgOiAwKTtcbiAgICB9XG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBc3NpZ25lcjtcblxufSx7XCIuLi9mdW5jdGlvbi9yZXN0UGFyYW1cIjo3OSxcIi4vYmluZENhbGxiYWNrXCI6OTAsXCIuL2lzSXRlcmF0ZWVDYWxsXCI6MTAwfV0sOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xudmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9TZXRDYWNoZScpLFxuICAgIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vZ2V0TmF0aXZlJyk7XG5cbi8qKiBOYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKGdsb2JhbCwgJ1NldCcpO1xuXG4vKiBOYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYFNldGAgY2FjaGUgb2JqZWN0IHRvIG9wdGltaXplIGxpbmVhciBzZWFyY2hlcyBvZiBsYXJnZSBhcnJheXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7bnVsbHxPYmplY3R9IFJldHVybnMgdGhlIG5ldyBjYWNoZSBvYmplY3QgaWYgYFNldGAgaXMgc3VwcG9ydGVkLCBlbHNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUodmFsdWVzKSB7XG4gIHJldHVybiAobmF0aXZlQ3JlYXRlICYmIFNldCkgPyBuZXcgU2V0Q2FjaGUodmFsdWVzKSA6IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ2FjaGU7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7XCIuL1NldENhY2hlXCI6ODEsXCIuL2dldE5hdGl2ZVwiOjk2fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vYmFzZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSB2YWx1ZSBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF2b2lkIGEgW0pJVCBidWddKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDI3OTIpXG4gKiB0aGF0IGFmZmVjdHMgU2FmYXJpIG9uIGF0IGxlYXN0IGlPUyA4LjEtOC4zIEFSTTY0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgXCJsZW5ndGhcIiB2YWx1ZS5cbiAqL1xudmFyIGdldExlbmd0aCA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TGVuZ3RoO1xuXG59LHtcIi4vYmFzZVByb3BlcnR5XCI6ODl9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNOYXRpdmUgPSByZXF1aXJlKCcuLi9sYW5nL2lzTmF0aXZlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICByZXR1cm4gaXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuXG59LHtcIi4uL2xhbmcvaXNOYXRpdmVcIjoxMDd9XSw5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGBOYU5gIGlzIGZvdW5kIGluIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgYE5hTmAsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gaW5kZXhPZk5hTihhcnJheSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDAgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICB2YXIgb3RoZXIgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKG90aGVyICE9PSBvdGhlcikge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZXhPZk5hTjtcblxufSx7fV0sOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdldExlbmd0aCA9IHJlcXVpcmUoJy4vZ2V0TGVuZ3RoJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKGdldExlbmd0aCh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuXG59LHtcIi4vZ2V0TGVuZ3RoXCI6OTUsXCIuL2lzTGVuZ3RoXCI6MTAxfV0sOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL15cXGQrJC87XG5cbi8qKlxuICogVXNlZCBhcyB0aGUgW21heGltdW0gbGVuZ3RoXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlcilcbiAqIG9mIGFuIGFycmF5LWxpa2UgdmFsdWUuXG4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFsdWUgPSAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSA/ICt2YWx1ZSA6IC0xO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG5cbn0se31dLDEwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vaXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vbGFuZy9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KSkge1xuICAgIHZhciBvdGhlciA9IG9iamVjdFtpbmRleF07XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICh2YWx1ZSA9PT0gb3RoZXIpIDogKG90aGVyICE9PSBvdGhlcik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuXG59LHtcIi4uL2xhbmcvaXNPYmplY3RcIjoxMDgsXCIuL2lzQXJyYXlMaWtlXCI6OTgsXCIuL2lzSW5kZXhcIjo5OX1dLDEwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFVzZWQgYXMgdGhlIFttYXhpbXVtIGxlbmd0aF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLm1heF9zYWZlX2ludGVnZXIpXG4gKiBvZiBhbiBhcnJheS1saWtlIHZhbHVlLlxuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBpcyBiYXNlZCBvbiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuXG59LHt9XSwxMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcblxufSx7fV0sMTAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4uL2xhbmcvaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi4vbGFuZy9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vaXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4uL29iamVjdC9rZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBmYWxsYmFjayBpbXBsZW1lbnRhdGlvbiBvZiBgT2JqZWN0LmtleXNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlXG4gKiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gc2hpbUtleXMob2JqZWN0KSB7XG4gIHZhciBwcm9wcyA9IGtleXNJbihvYmplY3QpLFxuICAgICAgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBwcm9wc0xlbmd0aCAmJiBvYmplY3QubGVuZ3RoO1xuXG4gIHZhciBhbGxvd0luZGV4ZXMgPSAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuICAgIGlmICgoYWxsb3dJbmRleGVzICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpKSB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGltS2V5cztcblxufSx7XCIuLi9sYW5nL2lzQXJndW1lbnRzXCI6MTA0LFwiLi4vbGFuZy9pc0FycmF5XCI6MTA1LFwiLi4vb2JqZWN0L2tleXNJblwiOjExMSxcIi4vaXNJbmRleFwiOjk5LFwiLi9pc0xlbmd0aFwiOjEwMX1dLDEwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIE5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJiAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuXG59LHtcIi4uL2ludGVybmFsL2lzQXJyYXlMaWtlXCI6OTgsXCIuLi9pbnRlcm5hbC9pc09iamVjdExpa2VcIjoxMDJ9XSwxMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2dldE5hdGl2ZScpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJztcblxuLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZSBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9ialRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qIE5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNBcnJheSA9IGdldE5hdGl2ZShBcnJheSwgJ2lzQXJyYXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcnJheVRhZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcblxufSx7XCIuLi9pbnRlcm5hbC9nZXROYXRpdmVcIjo5NixcIi4uL2ludGVybmFsL2lzTGVuZ3RoXCI6MTAxLFwiLi4vaW50ZXJuYWwvaXNPYmplY3RMaWtlXCI6MTAyfV0sMTA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG4vKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqVG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gb2xkZXIgdmVyc2lvbnMgb2YgQ2hyb21lIGFuZCBTYWZhcmkgd2hpY2ggcmV0dXJuICdmdW5jdGlvbicgZm9yIHJlZ2V4ZXNcbiAgLy8gYW5kIFNhZmFyaSA4IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9ycy5cbiAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiBvYmpUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBmdW5jVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG5cbn0se1wiLi9pc09iamVjdFwiOjEwOH1dLDEwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSA+IDUpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZm5Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZuVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZSgvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOYXRpdmUoXyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gcmVJc05hdGl2ZS50ZXN0KGZuVG9TdHJpbmcuY2FsbCh2YWx1ZSkpO1xuICB9XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHJlSXNIb3N0Q3Rvci50ZXN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05hdGl2ZTtcblxufSx7XCIuLi9pbnRlcm5hbC9pc09iamVjdExpa2VcIjoxMDIsXCIuL2lzRnVuY3Rpb25cIjoxMDZ9XSwxMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGUgW2xhbmd1YWdlIHR5cGVdKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDgpIG9mIGBPYmplY3RgLlxuICogKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdCgxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIEF2b2lkIGEgVjggSklUIGJ1ZyBpbiBDaHJvbWUgMTktMjAuXG4gIC8vIFNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MSBmb3IgbW9yZSBkZXRhaWxzLlxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcblxufSx7fV0sMTA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBhc3NpZ25XaXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvYXNzaWduV2l0aCcpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9iYXNlQXNzaWduJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0KHMpIHRvIHRoZSBkZXN0aW5hdGlvblxuICogb2JqZWN0LiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gKiBJZiBgY3VzdG9taXplcmAgaXMgcHJvdmlkZWQgaXQncyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy5cbiAqIFRoZSBgY3VzdG9taXplcmAgaXMgYm91bmQgdG8gYHRoaXNBcmdgIGFuZCBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6XG4gKiAob2JqZWN0VmFsdWUsIHNvdXJjZVZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgYmFzZWQgb25cbiAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5hc3NpZ24pLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAYWxpYXMgZXh0ZW5kXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgY3VzdG9taXplcmAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmFzc2lnbih7ICd1c2VyJzogJ2Jhcm5leScgfSwgeyAnYWdlJzogNDAgfSwgeyAndXNlcic6ICdmcmVkJyB9KTtcbiAqIC8vID0+IHsgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XG4gKlxuICogLy8gdXNpbmcgYSBjdXN0b21pemVyIGNhbGxiYWNrXG4gKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbiwgZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKHZhbHVlKSA/IG90aGVyIDogdmFsdWU7XG4gKiB9KTtcbiAqXG4gKiBkZWZhdWx0cyh7ICd1c2VyJzogJ2Jhcm5leScgfSwgeyAnYWdlJzogMzYgfSwgeyAndXNlcic6ICdmcmVkJyB9KTtcbiAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAqL1xudmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gIHJldHVybiBjdXN0b21pemVyXG4gICAgPyBhc3NpZ25XaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKVxuICAgIDogYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG5cbn0se1wiLi4vaW50ZXJuYWwvYXNzaWduV2l0aFwiOjgzLFwiLi4vaW50ZXJuYWwvYmFzZUFzc2lnblwiOjg0LFwiLi4vaW50ZXJuYWwvY3JlYXRlQXNzaWduZXJcIjo5M31dLDExMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvZ2V0TmF0aXZlJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vbGFuZy9pc09iamVjdCcpLFxuICAgIHNoaW1LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvc2hpbUtleXMnKTtcblxuLyogTmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xudmFyIGtleXMgPSAhbmF0aXZlS2V5cyA/IHNoaW1LZXlzIDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciBDdG9yID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmICgodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0KSB8fFxuICAgICAgKHR5cGVvZiBvYmplY3QgIT0gJ2Z1bmN0aW9uJyAmJiBpc0FycmF5TGlrZShvYmplY3QpKSkge1xuICAgIHJldHVybiBzaGltS2V5cyhvYmplY3QpO1xuICB9XG4gIHJldHVybiBpc09iamVjdChvYmplY3QpID8gbmF0aXZlS2V5cyhvYmplY3QpIDogW107XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG5cbn0se1wiLi4vaW50ZXJuYWwvZ2V0TmF0aXZlXCI6OTYsXCIuLi9pbnRlcm5hbC9pc0FycmF5TGlrZVwiOjk4LFwiLi4vaW50ZXJuYWwvc2hpbUtleXNcIjoxMDMsXCIuLi9sYW5nL2lzT2JqZWN0XCI6MTA4fV0sMTExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4uL2xhbmcvaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi4vbGFuZy9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9sYW5nL2lzT2JqZWN0Jyk7XG5cbi8qKiBVc2VkIGZvciBuYXRpdmUgbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB9XG4gIHZhciBsZW5ndGggPSBvYmplY3QubGVuZ3RoO1xuICBsZW5ndGggPSAobGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpICYmIGxlbmd0aCkgfHwgMDtcblxuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgIGluZGV4ID0gLTEsXG4gICAgICBpc1Byb3RvID0gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0LFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgIHNraXBJbmRleGVzID0gbGVuZ3RoID4gMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSAoaW5kZXggKyAnJyk7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKHNraXBJbmRleGVzICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpKSAmJlxuICAgICAgICAhKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcblxufSx7XCIuLi9pbnRlcm5hbC9pc0luZGV4XCI6OTksXCIuLi9pbnRlcm5hbC9pc0xlbmd0aFwiOjEwMSxcIi4uL2xhbmcvaXNBcmd1bWVudHNcIjoxMDQsXCIuLi9sYW5nL2lzQXJyYXlcIjoxMDUsXCIuLi9sYW5nL2lzT2JqZWN0XCI6MTA4fV0sMTEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgcHJvdmlkZWQgdG8gaXQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsaXR5XG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gKlxuICogXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3Q7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcblxufSx7fV0sMTEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4ndXNlIHN0cmljdCc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cbn0se31dLDExNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxufSx7fV0sMTE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRGb3JjZVVwZGF0ZTtcbmZ1bmN0aW9uIHRyYXZlcnNlUmVuZGVyZWRDaGlsZHJlbihpbnRlcm5hbEluc3RhbmNlLCBjYWxsYmFjaywgYXJndW1lbnQpIHtcbiAgY2FsbGJhY2soaW50ZXJuYWxJbnN0YW5jZSwgYXJndW1lbnQpO1xuXG4gIGlmIChpbnRlcm5hbEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgIHRyYXZlcnNlUmVuZGVyZWRDaGlsZHJlbihpbnRlcm5hbEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudCwgY2FsbGJhY2ssIGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3JlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB0cmF2ZXJzZVJlbmRlcmVkQ2hpbGRyZW4oaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDaGlsZHJlbltrZXldLCBjYWxsYmFjaywgYXJndW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRQZW5kaW5nRm9yY2VVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSkge1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0ZvcmNlVXBkYXRlID09PSBmYWxzZSkge1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZlBlbmRpbmcoaW50ZXJuYWxJbnN0YW5jZSwgUmVhY3QpIHtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9PT0gdHJ1ZSkge1xuICAgIHZhciBwdWJsaWNJbnN0YW5jZSA9IGludGVybmFsSW5zdGFuY2UuX2luc3RhbmNlO1xuICAgIFJlYWN0LkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUuY2FsbChwdWJsaWNJbnN0YW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Rm9yY2VVcGRhdGUoUmVhY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gaW5zdGFuY2UuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZTtcbiAgICB0cmF2ZXJzZVJlbmRlcmVkQ2hpbGRyZW4oaW50ZXJuYWxJbnN0YW5jZSwgc2V0UGVuZGluZ0ZvcmNlVXBkYXRlKTtcbiAgICB0cmF2ZXJzZVJlbmRlcmVkQ2hpbGRyZW4oaW50ZXJuYWxJbnN0YW5jZSwgZm9yY2VVcGRhdGVJZlBlbmRpbmcsIFJlYWN0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbn0se31dLDExNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0RE9NJyk7XG5cbn0se1wicmVhY3QvbGliL1JlYWN0RE9NXCI6MjAyfV0sMTE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHNpemVyU3R5bGUgPSB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB2aXNpYmlsaXR5OiAnaGlkZGVuJywgaGVpZ2h0OiAwLCB3aWR0aDogMCwgb3ZlcmZsb3c6ICdzY3JvbGwnLCB3aGl0ZVNwYWNlOiAnbm93cmFwJyB9O1xuXG52YXIgQXV0b3NpemVJbnB1dCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdBdXRvc2l6ZUlucHV0JyxcblxuXHRwcm9wVHlwZXM6IHtcblx0XHR2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLmFueSwgLy8gZmllbGQgdmFsdWVcblx0XHRkZWZhdWx0VmFsdWU6IFJlYWN0LlByb3BUeXBlcy5hbnksIC8vIGRlZmF1bHQgZmllbGQgdmFsdWVcblx0XHRvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQ2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7fVxuXHRcdHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuXHRcdG1pbldpZHRoOiBSZWFjdC5Qcm9wVHlwZXMub25lT2ZUeXBlKFsvLyBtaW5pbXVtIHdpZHRoIGZvciBpbnB1dCBlbGVtZW50XG5cdFx0UmVhY3QuUHJvcFR5cGVzLm51bWJlciwgUmVhY3QuUHJvcFR5cGVzLnN0cmluZ10pLFxuXHRcdGlucHV0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG5cdFx0aW5wdXRDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcgLy8gY2xhc3NOYW1lIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuXHR9LFxuXHRnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bWluV2lkdGg6IDFcblx0XHR9O1xuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5wdXRXaWR0aDogdGhpcy5wcm9wcy5taW5XaWR0aFxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHR0aGlzLmNvcHlJbnB1dFN0eWxlcygpO1xuXHRcdHRoaXMudXBkYXRlSW5wdXRXaWR0aCgpO1xuXHR9LFxuXHRjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcblx0XHR0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcblx0fSxcblx0Y29weUlucHV0U3R5bGVzOiBmdW5jdGlvbiBjb3B5SW5wdXRTdHlsZXMoKSB7XG5cdFx0aWYgKCF0aGlzLmlzTW91bnRlZCgpIHx8ICF3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgaW5wdXRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMucmVmcy5pbnB1dCk7XG5cdFx0dmFyIHdpZHRoTm9kZSA9IHRoaXMucmVmcy5zaXplcjtcblx0XHR3aWR0aE5vZGUuc3R5bGUuZm9udFNpemUgPSBpbnB1dFN0eWxlLmZvbnRTaXplO1xuXHRcdHdpZHRoTm9kZS5zdHlsZS5mb250RmFtaWx5ID0gaW5wdXRTdHlsZS5mb250RmFtaWx5O1xuXHRcdHdpZHRoTm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gaW5wdXRTdHlsZS5sZXR0ZXJTcGFjaW5nO1xuXHRcdGlmICh0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHR2YXIgcGxhY2Vob2xkZXJOb2RlID0gdGhpcy5yZWZzLnBsYWNlaG9sZGVyU2l6ZXI7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUuZm9udFNpemUgPSBpbnB1dFN0eWxlLmZvbnRTaXplO1xuXHRcdFx0cGxhY2Vob2xkZXJOb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBpbnB1dFN0eWxlLmZvbnRGYW1pbHk7XG5cdFx0XHRwbGFjZWhvbGRlck5vZGUuc3R5bGUubGV0dGVyU3BhY2luZyA9IGlucHV0U3R5bGUubGV0dGVyU3BhY2luZztcblx0XHR9XG5cdH0sXG5cdHVwZGF0ZUlucHV0V2lkdGg6IGZ1bmN0aW9uIHVwZGF0ZUlucHV0V2lkdGgoKSB7XG5cdFx0aWYgKCF0aGlzLmlzTW91bnRlZCgpIHx8IHR5cGVvZiB0aGlzLnJlZnMuc2l6ZXIuc2Nyb2xsV2lkdGggPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBuZXdJbnB1dFdpZHRoO1xuXHRcdGlmICh0aGlzLnByb3BzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRuZXdJbnB1dFdpZHRoID0gTWF0aC5tYXgodGhpcy5yZWZzLnNpemVyLnNjcm9sbFdpZHRoLCB0aGlzLnJlZnMucGxhY2Vob2xkZXJTaXplci5zY3JvbGxXaWR0aCkgKyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdJbnB1dFdpZHRoID0gdGhpcy5yZWZzLnNpemVyLnNjcm9sbFdpZHRoICsgMjtcblx0XHR9XG5cdFx0aWYgKG5ld0lucHV0V2lkdGggPCB0aGlzLnByb3BzLm1pbldpZHRoKSB7XG5cdFx0XHRuZXdJbnB1dFdpZHRoID0gdGhpcy5wcm9wcy5taW5XaWR0aDtcblx0XHR9XG5cdFx0aWYgKG5ld0lucHV0V2lkdGggIT09IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlucHV0V2lkdGg6IG5ld0lucHV0V2lkdGhcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblx0Z2V0SW5wdXQ6IGZ1bmN0aW9uIGdldElucHV0KCkge1xuXHRcdHJldHVybiB0aGlzLnJlZnMuaW5wdXQ7XG5cdH0sXG5cdGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHtcblx0XHR0aGlzLnJlZnMuaW5wdXQuZm9jdXMoKTtcblx0fSxcblx0c2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoKSB7XG5cdFx0dGhpcy5yZWZzLmlucHV0LnNlbGVjdCgpO1xuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHR2YXIgZXNjYXBlZFZhbHVlID0gKHRoaXMucHJvcHMudmFsdWUgfHwgJycpLnJlcGxhY2UoL1xcJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC8gL2csICcmbmJzcDsnKS5yZXBsYWNlKC9cXDwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXD4vZywgJyZndDsnKTtcblx0XHR2YXIgd3JhcHBlclN0eWxlID0gdGhpcy5wcm9wcy5zdHlsZSB8fCB7fTtcblx0XHRpZiAoIXdyYXBwZXJTdHlsZS5kaXNwbGF5KSB3cmFwcGVyU3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuXHRcdHZhciBpbnB1dFN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMuaW5wdXRTdHlsZSk7XG5cdFx0aW5wdXRTdHlsZS53aWR0aCA9IHRoaXMuc3RhdGUuaW5wdXRXaWR0aDtcblx0XHRpbnB1dFN0eWxlLmJveFNpemluZyA9ICdjb250ZW50LWJveCc7XG5cdFx0dmFyIHBsYWNlaG9sZGVyID0gdGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgcmVmOiAncGxhY2Vob2xkZXJTaXplcicsIHN0eWxlOiBzaXplclN0eWxlIH0sXG5cdFx0XHR0aGlzLnByb3BzLnBsYWNlaG9sZGVyXG5cdFx0KSA6IG51bGw7XG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSwgc3R5bGU6IHdyYXBwZXJTdHlsZSB9LFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyByZWY6ICdpbnB1dCcsIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5pbnB1dENsYXNzTmFtZSwgc3R5bGU6IGlucHV0U3R5bGUgfSkpLFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdzaXplcicsIHN0eWxlOiBzaXplclN0eWxlLCBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IGVzY2FwZWRWYWx1ZSB9IH0pLFxuXHRcdFx0cGxhY2Vob2xkZXJcblx0XHQpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvc2l6ZUlucHV0O1xufSx7XCJyZWFjdFwiOjI5NX1dLDExODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiBSZWFjdCBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogT3JpZ2luYWw6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi82NTA4YjFhZDI3M2E2ZjM3MWU4ZDkwYWU2NzZlNTM5MDE5OTQ2MWI0L3NyYy9pc29tb3JwaGljL2NsYXNzaWMvY2xhc3MvUmVhY3RDbGFzcy5qcyNMNjUwLUw3MTNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gYmluZEF1dG9CaW5kTWV0aG9kcztcbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuXG4gIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcblxuICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSxcbiAgICAgIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcblxuICBib3VuZE1ldGhvZC5iaW5kID0gZnVuY3Rpb24gKG5ld1RoaXMpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgKyAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJyArIGNvbXBvbmVudE5hbWUpO1xuICAgIH0gZWxzZSBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICsgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgKyAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJyArIGNvbXBvbmVudE5hbWUpO1xuICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgIH1cblxuICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcblxuICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICB9O1xuXG4gIHJldHVybiBib3VuZE1ldGhvZDtcbn1cblxuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgIGlmICghY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShhdXRvQmluZEtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUd2Vhazogc2tpcCBtZXRob2RzIHRoYXQgYXJlIGFscmVhZHkgYm91bmQuXG4gICAgLy8gVGhpcyBpcyB0byBwcmVzZXJ2ZSBtZXRob2QgcmVmZXJlbmNlIGluIGNhc2UgaXQgaXMgdXNlZFxuICAgIC8vIGFzIGEgc3Vic2NyaXB0aW9uIGhhbmRsZXIgdGhhdCBuZWVkcyB0byBiZSBkZXRhY2hlZCBsYXRlci5cbiAgICBpZiAoY29tcG9uZW50Lmhhc093blByb3BlcnR5KGF1dG9CaW5kS2V5KSAmJiBjb21wb25lbnRbYXV0b0JpbmRLZXldLl9fcmVhY3RCb3VuZENvbnRleHQgPT09IGNvbXBvbmVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIG1ldGhvZCA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXBbYXV0b0JpbmRLZXldO1xuICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICB9XG59XG5cbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7fV0sMTE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHByb3h5Q2xhc3M7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9jcmVhdGVQcm90b3R5cGVQcm94eSA9IHJlcXVpcmUoJy4vY3JlYXRlUHJvdG90eXBlUHJveHknKTtcblxudmFyIF9jcmVhdGVQcm90b3R5cGVQcm94eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVQcm90b3R5cGVQcm94eSk7XG5cbnZhciBfYmluZEF1dG9CaW5kTWV0aG9kcyA9IHJlcXVpcmUoJy4vYmluZEF1dG9CaW5kTWV0aG9kcycpO1xuXG52YXIgX2JpbmRBdXRvQmluZE1ldGhvZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmluZEF1dG9CaW5kTWV0aG9kcyk7XG5cbnZhciBfZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kcyA9IHJlcXVpcmUoJy4vZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kcycpO1xuXG52YXIgX2RlbGV0ZVVua25vd25BdXRvQmluZE1ldGhvZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVsZXRlVW5rbm93bkF1dG9CaW5kTWV0aG9kcyk7XG5cbnZhciBSRVNFUlZFRF9TVEFUSUNTID0gWydsZW5ndGgnLCAnbmFtZScsICdhcmd1bWVudHMnLCAnY2FsbGVyJywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddO1xuXG5mdW5jdGlvbiBpc0VxdWFsRGVzY3JpcHRvcihhLCBiKSB7XG4gIGlmICghYSAmJiAhYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghYSB8fCAhYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcHJveHlDbGFzcyhJbml0aWFsQ2xhc3MpIHtcbiAgLy8gUHJldmVudCBkb3VibGUgd3JhcHBpbmcuXG4gIC8vIEdpdmVuIGEgcHJveHkgY2xhc3MsIHJldHVybiB0aGUgZXhpc3RpbmcgcHJveHkgbWFuYWdpbmcgaXQuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoSW5pdGlhbENsYXNzLCAnX19yZWFjdFBhdGNoUHJveHknKSkge1xuICAgIHJldHVybiBJbml0aWFsQ2xhc3MuX19yZWFjdFBhdGNoUHJveHk7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlUHJveHkgPSAoMCwgX2NyZWF0ZVByb3RvdHlwZVByb3h5MlsnZGVmYXVsdCddKSgpO1xuICB2YXIgQ3VycmVudENsYXNzID0gdW5kZWZpbmVkO1xuXG4gIHZhciBzdGF0aWNEZXNjcmlwdG9ycyA9IHt9O1xuICBmdW5jdGlvbiB3YXNTdGF0aWNNb2RpZmllZEJ5VXNlcihrZXkpIHtcbiAgICAvLyBDb21wYXJlIHRoZSBkZXNjcmlwdG9yIHdpdGggdGhlIG9uZSB3ZSBwcmV2aW91c2x5IHNldCBvdXJzZWx2ZXMuXG4gICAgdmFyIGN1cnJlbnREZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihQcm94eUNsYXNzLCBrZXkpO1xuICAgIHJldHVybiAhaXNFcXVhbERlc2NyaXB0b3Ioc3RhdGljRGVzY3JpcHRvcnNba2V5XSwgY3VycmVudERlc2NyaXB0b3IpO1xuICB9XG5cbiAgdmFyIFByb3h5Q2xhc3MgPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAgLy8gQ3JlYXRlIGEgcHJveHkgY29uc3RydWN0b3Igd2l0aCBtYXRjaGluZyBuYW1lXG4gICAgUHJveHlDbGFzcyA9IG5ldyBGdW5jdGlvbignZ2V0Q3VycmVudENsYXNzJywgJ3JldHVybiBmdW5jdGlvbiAnICsgKEluaXRpYWxDbGFzcy5uYW1lIHx8ICdQcm94eUNsYXNzJykgKyAnKCkge1xcbiAgICAgICAgcmV0dXJuIGdldEN1cnJlbnRDbGFzcygpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfScpKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBDdXJyZW50Q2xhc3M7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIG1heSBmb3JiaWQgZHluYW1pYyBldmFsdWF0aW9uXG4gICAgUHJveHlDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBDdXJyZW50Q2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUG9pbnQgcHJveHkgY29uc3RydWN0b3IgdG8gdGhlIHByb3h5IHByb3RvdHlwZVxuICBQcm94eUNsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZVByb3h5LmdldCgpO1xuXG4gIC8vIFByb3h5IHRvU3RyaW5nKCkgdG8gdGhlIGN1cnJlbnQgY29uc3RydWN0b3JcbiAgUHJveHlDbGFzcy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBDdXJyZW50Q2xhc3MudG9TdHJpbmcoKTtcbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGUoX3gpIHtcbiAgICB2YXIgX2FnYWluID0gdHJ1ZTtcblxuICAgIF9mdW5jdGlvbjogd2hpbGUgKF9hZ2Fpbikge1xuICAgICAgdmFyIE5leHRDbGFzcyA9IF94O1xuICAgICAgbW91bnRlZEluc3RhbmNlcyA9IHVuZGVmaW5lZDtcbiAgICAgIF9hZ2FpbiA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIE5leHRDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgY29uc3RydWN0b3IuJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXZlbnQgcHJveHkgY3ljbGVzXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKE5leHRDbGFzcywgJ19fcmVhY3RQYXRjaFByb3h5JykpIHtcbiAgICAgICAgX3ggPSBOZXh0Q2xhc3MuX19yZWFjdFBhdGNoUHJveHkuX19nZXRDdXJyZW50KCk7XG4gICAgICAgIF9hZ2FpbiA9IHRydWU7XG4gICAgICAgIGNvbnRpbnVlIF9mdW5jdGlvbjtcbiAgICAgIH1cblxuICAgICAgLy8gU2F2ZSB0aGUgbmV4dCBjb25zdHJ1Y3RvciBzbyB3ZSBjYWxsIGl0XG4gICAgICBDdXJyZW50Q2xhc3MgPSBOZXh0Q2xhc3M7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgcHJvdG90eXBlIHByb3h5IHdpdGggbmV3IG1ldGhvZHNcbiAgICAgIHZhciBtb3VudGVkSW5zdGFuY2VzID0gcHJvdG90eXBlUHJveHkudXBkYXRlKE5leHRDbGFzcy5wcm90b3R5cGUpO1xuXG4gICAgICAvLyBTZXQgdXAgdGhlIGNvbnN0cnVjdG9yIHByb3BlcnR5IHNvIGFjY2Vzc2luZyB0aGUgc3RhdGljcyB3b3JrXG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByb3h5Q2xhc3M7XG5cbiAgICAgIC8vIFNldCB1cCB0aGUgc2FtZSBwcm90b3R5cGUgZm9yIGluaGVyaXRlZCBzdGF0aWNzXG4gICAgICBQcm94eUNsYXNzLl9fcHJvdG9fXyA9IE5leHRDbGFzcy5fX3Byb3RvX187XG5cbiAgICAgIC8vIENvcHkgc3RhdGljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE5leHRDbGFzcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9TVEFUSUNTLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXRpY0Rlc2NyaXB0b3IgPSBfZXh0ZW5kcyh7fSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOZXh0Q2xhc3MsIGtleSksIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ29weSBzdGF0aWMgdW5sZXNzIHVzZXIgaGFzIHJlZGVmaW5lZCBpdCBhdCBydW50aW1lXG4gICAgICAgIGlmICghd2FzU3RhdGljTW9kaWZpZWRCeVVzZXIoa2V5KSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLCBrZXksIHN0YXRpY0Rlc2NyaXB0b3IpO1xuICAgICAgICAgIHN0YXRpY0Rlc2NyaXB0b3JzW2tleV0gPSBzdGF0aWNEZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gUmVtb3ZlIG9sZCBzdGF0aWMgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoUHJveHlDbGFzcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9TVEFUSUNTLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2tpcCBzdGF0aWNzIHRoYXQgZXhpc3Qgb24gdGhlIG5leHQgY2xhc3NcbiAgICAgICAgaWYgKE5leHRDbGFzcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2tpcCBub24tY29uZmlndXJhYmxlIHN0YXRpY3NcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFByb3h5Q2xhc3MsIGtleSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGV0ZSBzdGF0aWMgdW5sZXNzIHVzZXIgaGFzIHJlZGVmaW5lZCBpdCBhdCBydW50aW1lXG4gICAgICAgIGlmICghd2FzU3RhdGljTW9kaWZpZWRCeVVzZXIoa2V5KSkge1xuICAgICAgICAgIGRlbGV0ZSBQcm94eUNsYXNzW2tleV07XG4gICAgICAgICAgZGVsZXRlIHN0YXRpY0Rlc2NyaXB0b3JzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcnkgdG8gaW5mZXIgZGlzcGxheU5hbWVcbiAgICAgIFByb3h5Q2xhc3MuZGlzcGxheU5hbWUgPSBOZXh0Q2xhc3MuZGlzcGxheU5hbWUgfHwgTmV4dENsYXNzLm5hbWU7XG5cbiAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgYWRkZWQgbmV3IG1ldGhvZHMgdGhhdCBuZWVkIHRvIGJlIGF1dG8tYm91bmRcbiAgICAgIG1vdW50ZWRJbnN0YW5jZXMuZm9yRWFjaChfYmluZEF1dG9CaW5kTWV0aG9kczJbJ2RlZmF1bHQnXSk7XG4gICAgICBtb3VudGVkSW5zdGFuY2VzLmZvckVhY2goX2RlbGV0ZVVua25vd25BdXRvQmluZE1ldGhvZHMyWydkZWZhdWx0J10pO1xuXG4gICAgICAvLyBMZXQgdGhlIHVzZXIgdGFrZSBjYXJlIG9mIHJlZHJhd2luZ1xuICAgICAgcmV0dXJuIG1vdW50ZWRJbnN0YW5jZXM7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gUHJveHlDbGFzcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnQoKSB7XG4gICAgcmV0dXJuIEN1cnJlbnRDbGFzcztcbiAgfVxuXG4gIHVwZGF0ZShJbml0aWFsQ2xhc3MpO1xuXG4gIHZhciBwcm94eSA9IHsgZ2V0OiBnZXQsIHVwZGF0ZTogdXBkYXRlIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCAnX19nZXRDdXJyZW50Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBnZXRDdXJyZW50XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLCAnX19yZWFjdFBhdGNoUHJveHknLCB7XG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IHByb3h5XG4gIH0pO1xuXG4gIHJldHVybiBwcm94eTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vYmluZEF1dG9CaW5kTWV0aG9kc1wiOjExOCxcIi4vY3JlYXRlUHJvdG90eXBlUHJveHlcIjoxMjAsXCIuL2RlbGV0ZVVua25vd25BdXRvQmluZE1ldGhvZHNcIjoxMjF9XSwxMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZVByb3RvdHlwZVByb3h5O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfbG9kYXNoT2JqZWN0QXNzaWduID0gcmVxdWlyZSgnbG9kYXNoL29iamVjdC9hc3NpZ24nKTtcblxudmFyIF9sb2Rhc2hPYmplY3RBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoT2JqZWN0QXNzaWduKTtcblxudmFyIF9sb2Rhc2hBcnJheURpZmZlcmVuY2UgPSByZXF1aXJlKCdsb2Rhc2gvYXJyYXkvZGlmZmVyZW5jZScpO1xuXG52YXIgX2xvZGFzaEFycmF5RGlmZmVyZW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2hBcnJheURpZmZlcmVuY2UpO1xuXG5mdW5jdGlvbiBjcmVhdGVQcm90b3R5cGVQcm94eSgpIHtcbiAgdmFyIHByb3h5ID0ge307XG4gIHZhciBjdXJyZW50ID0gbnVsbDtcbiAgdmFyIG1vdW50ZWRJbnN0YW5jZXMgPSBbXTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb3hpZWQgdG9TdHJpbmcoKSBtZXRob2QgcG9pbnRpbmcgdG8gdGhlIGN1cnJlbnQgdmVyc2lvbidzIHRvU3RyaW5nKCkuXG4gICAqL1xuICBmdW5jdGlvbiBwcm94eVRvU3RyaW5nKG5hbWUpIHtcbiAgICAvLyBXcmFwIHRvIGFsd2F5cyBjYWxsIHRoZSBjdXJyZW50IHZlcnNpb25cbiAgICByZXR1cm4gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnRbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRbbmFtZV0udG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnPG1ldGhvZCB3YXMgZGVsZXRlZD4nO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb3hpZWQgbWV0aG9kIHRoYXQgY2FsbHMgdGhlIGN1cnJlbnQgdmVyc2lvbiwgd2hlbmV2ZXIgYXZhaWxhYmxlLlxuICAgKi9cbiAgZnVuY3Rpb24gcHJveHlNZXRob2QobmFtZSkge1xuICAgIC8vIFdyYXAgdG8gYWx3YXlzIGNhbGwgdGhlIGN1cnJlbnQgdmVyc2lvblxuICAgIHZhciBwcm94aWVkTWV0aG9kID0gZnVuY3Rpb24gcHJveGllZE1ldGhvZCgpIHtcbiAgICAgIGlmICh0eXBlb2YgY3VycmVudFtuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gY3VycmVudFtuYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDb3B5IHByb3BlcnRpZXMgb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLCBpZiBhbnlcbiAgICAoMCwgX2xvZGFzaE9iamVjdEFzc2lnbjJbJ2RlZmF1bHQnXSkocHJveGllZE1ldGhvZCwgY3VycmVudFtuYW1lXSk7XG4gICAgcHJveGllZE1ldGhvZC50b1N0cmluZyA9IHByb3h5VG9TdHJpbmcobmFtZSk7XG5cbiAgICByZXR1cm4gcHJveGllZE1ldGhvZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdWdtZW50cyB0aGUgb3JpZ2luYWwgY29tcG9uZW50RGlkTW91bnQgd2l0aCBpbnN0YW5jZSB0cmFja2luZy5cbiAgICovXG4gIGZ1bmN0aW9uIHByb3hpZWRDb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBtb3VudGVkSW5zdGFuY2VzLnB1c2godGhpcyk7XG4gICAgaWYgKHR5cGVvZiBjdXJyZW50LmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY3VycmVudC5jb21wb25lbnREaWRNb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuICBwcm94aWVkQ29tcG9uZW50RGlkTW91bnQudG9TdHJpbmcgPSBwcm94eVRvU3RyaW5nKCdjb21wb25lbnREaWRNb3VudCcpO1xuXG4gIC8qKlxuICAgKiBBdWdtZW50cyB0aGUgb3JpZ2luYWwgY29tcG9uZW50V2lsbFVubW91bnQgd2l0aCBpbnN0YW5jZSB0cmFja2luZy5cbiAgICovXG4gIGZ1bmN0aW9uIHByb3hpZWRDb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB2YXIgaW5kZXggPSBtb3VudGVkSW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gICAgLy8gVW5sZXNzIHdlJ3JlIGluIGEgd2VpcmQgZW52aXJvbm1lbnQgd2l0aG91dCBjb21wb25lbnREaWRNb3VudFxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIG1vdW50ZWRJbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdXJyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY3VycmVudC5jb21wb25lbnRXaWxsVW5tb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuICBwcm94aWVkQ29tcG9uZW50V2lsbFVubW91bnQudG9TdHJpbmcgPSBwcm94eVRvU3RyaW5nKCdjb21wb25lbnRXaWxsVW5tb3VudCcpO1xuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGEgcHJvcGVydHkgb24gdGhlIHByb3h5LlxuICAgKi9cbiAgZnVuY3Rpb24gZGVmaW5lUHJveHlQcm9wZXJ0eShuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGEgcHJvcGVydHksIGF0dGVtcHRpbmcgdG8ga2VlcCB0aGUgb3JpZ2luYWwgZGVzY3JpcHRvciBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZGVmaW5lUHJveHlQcm9wZXJ0eVdpdGhWYWx1ZShuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBfcmVmID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdXJyZW50LCBuYW1lKSB8fCB7fTtcblxuICAgIHZhciBfcmVmJGVudW1lcmFibGUgPSBfcmVmLmVudW1lcmFibGU7XG4gICAgdmFyIGVudW1lcmFibGUgPSBfcmVmJGVudW1lcmFibGUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRlbnVtZXJhYmxlO1xuICAgIHZhciBfcmVmJHdyaXRhYmxlID0gX3JlZi53cml0YWJsZTtcbiAgICB2YXIgd3JpdGFibGUgPSBfcmVmJHdyaXRhYmxlID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiR3cml0YWJsZTtcblxuICAgIGRlZmluZVByb3h5UHJvcGVydHkobmFtZSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZW51bWVyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiB3cml0YWJsZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYXV0by1iaW5kIG1hcCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG1hcCwgYnV0IGRpcmVjdGVkIGF0IHByb3h5LlxuICAgKi9cbiAgZnVuY3Rpb24gY3JlYXRlQXV0b0JpbmRNYXAoKSB7XG4gICAgaWYgKCFjdXJyZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICBmb3IgKHZhciBfbmFtZSBpbiBjdXJyZW50Ll9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgICAgaWYgKGN1cnJlbnQuX19yZWFjdEF1dG9CaW5kTWFwLmhhc093blByb3BlcnR5KF9uYW1lKSkge1xuICAgICAgICBfX3JlYWN0QXV0b0JpbmRNYXBbX25hbWVdID0gcHJveHlbX25hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfX3JlYWN0QXV0b0JpbmRNYXA7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdXBkYXRlZCBwcm90b3R5cGUuXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGUobmV4dCkge1xuICAgIC8vIFNhdmUgY3VycmVudCBzb3VyY2Ugb2YgdHJ1dGhcbiAgICBjdXJyZW50ID0gbmV4dDtcblxuICAgIC8vIEZpbmQgY2hhbmdlZCBwcm9wZXJ0eSBuYW1lc1xuICAgIHZhciBjdXJyZW50TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KTtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJveHkpO1xuICAgIHZhciBhZGRlZE5hbWVzID0gKDAsIF9sb2Rhc2hBcnJheURpZmZlcmVuY2UyWydkZWZhdWx0J10pKGN1cnJlbnROYW1lcywgcHJldmlvdXNOYW1lKTtcbiAgICB2YXIgcmVtb3ZlZE5hbWVzID0gKDAsIF9sb2Rhc2hBcnJheURpZmZlcmVuY2UyWydkZWZhdWx0J10pKHByZXZpb3VzTmFtZSwgY3VycmVudE5hbWVzKTtcblxuICAgIC8vIFJlbW92ZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRoYXQgYXJlIG5vIGxvbmdlciB0aGVyZVxuICAgIHJlbW92ZWROYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBkZWxldGUgcHJveHlbbmFtZV07XG4gICAgfSk7XG5cbiAgICAvLyBDb3B5IGV2ZXJ5IGRlc2NyaXB0b3JcbiAgICBjdXJyZW50TmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN1cnJlbnQsIG5hbWUpO1xuICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEZ1bmN0aW9ucyByZXF1aXJlIGFkZGl0aW9uYWwgd3JhcHBpbmcgc28gdGhleSBjYW4gYmUgYm91bmQgbGF0ZXJcbiAgICAgICAgZGVmaW5lUHJveHlQcm9wZXJ0eVdpdGhWYWx1ZShuYW1lLCBwcm94eU1ldGhvZChuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlciB2YWx1ZXMgY2FuIGJlIGNvcGllZCBkaXJlY3RseVxuICAgICAgICBkZWZpbmVQcm94eVByb3BlcnR5KG5hbWUsIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVHJhY2sgbW91bnRpbmcgYW5kIHVubW91bnRpbmdcbiAgICBkZWZpbmVQcm94eVByb3BlcnR5V2l0aFZhbHVlKCdjb21wb25lbnREaWRNb3VudCcsIHByb3hpZWRDb21wb25lbnREaWRNb3VudCk7XG4gICAgZGVmaW5lUHJveHlQcm9wZXJ0eVdpdGhWYWx1ZSgnY29tcG9uZW50V2lsbFVubW91bnQnLCBwcm94aWVkQ29tcG9uZW50V2lsbFVubW91bnQpO1xuICAgIGRlZmluZVByb3h5UHJvcGVydHlXaXRoVmFsdWUoJ19fcmVhY3RBdXRvQmluZE1hcCcsIGNyZWF0ZUF1dG9CaW5kTWFwKCkpO1xuXG4gICAgLy8gU2V0IHVwIHRoZSBwcm90b3R5cGUgY2hhaW5cbiAgICBwcm94eS5fX3Byb3RvX18gPSBuZXh0O1xuXG4gICAgcmV0dXJuIG1vdW50ZWRJbnN0YW5jZXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdXAtdG8tZGF0ZSBwcm94eSBwcm90b3R5cGUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBnZXQ6IGdldFxuICB9O1xufVxuXG47XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wibG9kYXNoL2FycmF5L2RpZmZlcmVuY2VcIjo3OCxcImxvZGFzaC9vYmplY3QvYXNzaWduXCI6MTA5fV0sMTIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBkZWxldGVVbmtub3duQXV0b0JpbmRNZXRob2RzO1xuZnVuY3Rpb24gc2hvdWxkRGVsZXRlQ2xhc3NpY0luc3RhbmNlTWV0aG9kKGNvbXBvbmVudCwgbmFtZSkge1xuICBpZiAoY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIC8vIEl0J3MgYSBrbm93biBhdXRvYm91bmQgZnVuY3Rpb24sIGtlZXAgaXRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY29tcG9uZW50W25hbWVdLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyAhPT0gbnVsbCkge1xuICAgIC8vIEl0J3MgYSBmdW5jdGlvbiBib3VuZCB0byBzcGVjaWZpYyBhcmdzLCBrZWVwIGl0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gSXQncyBhIGNhY2hlZCBib3VuZCBtZXRob2QgZm9yIGEgZnVuY3Rpb25cbiAgLy8gdGhhdCB3YXMgZGVsZXRlZCBieSB1c2VyLCBzbyB3ZSBkZWxldGUgaXQgZnJvbSBjb21wb25lbnQuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzaG91bGREZWxldGVNb2Rlcm5JbnN0YW5jZU1ldGhvZChjb21wb25lbnQsIG5hbWUpIHtcbiAgdmFyIHByb3RvdHlwZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgdmFyIHByb3RvdHlwZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwgbmFtZSk7XG5cbiAgaWYgKCFwcm90b3R5cGVEZXNjcmlwdG9yIHx8ICFwcm90b3R5cGVEZXNjcmlwdG9yLmdldCkge1xuICAgIC8vIFRoaXMgaXMgZGVmaW5pdGVseSBub3QgYW4gYXV0b2JpbmRpbmcgZ2V0dGVyXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHByb3RvdHlwZURlc2NyaXB0b3IuZ2V0KCkubGVuZ3RoICE9PSBjb21wb25lbnRbbmFtZV0ubGVuZ3RoKSB7XG4gICAgLy8gVGhlIGxlbmd0aCBkb2Vzbid0IG1hdGNoLCBiYWlsIG91dFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoaXMgc2VlbXMgbGlrZSBhIG1ldGhvZCBib3VuZCB1c2luZyBhbiBhdXRvYmluZGluZyBnZXR0ZXIgb24gdGhlIHByb3RvdHlwZVxuICAvLyBIb3BlZnVsbHkgd2Ugd29uJ3QgcnVuIGludG8gdG9vIG1hbnkgZmFsc2UgcG9zaXRpdmVzLlxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRGVsZXRlSW5zdGFuY2VNZXRob2QoY29tcG9uZW50LCBuYW1lKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb21wb25lbnQsIG5hbWUpO1xuICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBOb3QgYSBmdW5jdGlvbiwgb3Igc29tZXRoaW5nIGZhbmN5OiBiYWlsIG91dFxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgLy8gQ2xhc3NpY1xuICAgIHJldHVybiBzaG91bGREZWxldGVDbGFzc2ljSW5zdGFuY2VNZXRob2QoY29tcG9uZW50LCBuYW1lKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBNb2Rlcm5cbiAgICByZXR1cm4gc2hvdWxkRGVsZXRlTW9kZXJuSW5zdGFuY2VNZXRob2QoY29tcG9uZW50LCBuYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIERlbGV0ZXMgYXV0b2JvdW5kIG1ldGhvZHMgZnJvbSB0aGUgaW5zdGFuY2UuXG4gKlxuICogRm9yIGNsYXNzaWMgUmVhY3QgY2xhc3Nlcywgd2Ugb25seSBkZWxldGUgdGhlIG1ldGhvZHMgdGhhdCBubyBsb25nZXIgZXhpc3QgaW4gbWFwLlxuICogVGhpcyBtZWFucyB0aGUgdXNlciBhY3R1YWxseSBkZWxldGVkIHRoZW0gaW4gY29kZS5cbiAqXG4gKiBGb3IgbW9kZXJuIGNsYXNzZXMsIHdlIGRlbGV0ZSBtZXRob2RzIHRoYXQgZXhpc3Qgb24gcHJvdG90eXBlIHdpdGggdGhlIHNhbWUgbGVuZ3RoLFxuICogYW5kIHdoaWNoIGhhdmUgZ2V0dGVycyBvbiBwcm90b3R5cGUsIGJ1dCBhcmUgbm9ybWFsIHZhbHVlcyBvbiB0aGUgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHVzdWFsbHkgYW4gaW5kaWNhdGlvbiB0aGF0IGFuIGF1dG9iaW5kaW5nIGRlY29yYXRvciBpcyBiZWluZyB1c2VkLFxuICogYW5kIHRoZSBnZXR0ZXIgd2lsbCByZS1nZW5lcmF0ZSB0aGUgbWVtb2l6ZWQgaGFuZGxlciBvbiBuZXh0IGFjY2Vzcy5cbiAqL1xuXG5mdW5jdGlvbiBkZWxldGVVbmtub3duQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb21wb25lbnQpO1xuXG4gIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoc2hvdWxkRGVsZXRlSW5zdGFuY2VNZXRob2QoY29tcG9uZW50LCBuYW1lKSkge1xuICAgICAgZGVsZXRlIGNvbXBvbmVudFtuYW1lXTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se31dLDEyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmUob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmpbJ2RlZmF1bHQnXSA6IG9iajsgfVxuXG52YXIgX2NyZWF0ZUNsYXNzUHJveHkgPSByZXF1aXJlKCcuL2NyZWF0ZUNsYXNzUHJveHknKTtcblxuZXhwb3J0cy5jcmVhdGVQcm94eSA9IF9pbnRlcm9wUmVxdWlyZShfY3JlYXRlQ2xhc3NQcm94eSk7XG5cbnZhciBfcmVhY3REZWVwRm9yY2VVcGRhdGUgPSByZXF1aXJlKCdyZWFjdC1kZWVwLWZvcmNlLXVwZGF0ZScpO1xuXG5leHBvcnRzLmdldEZvcmNlVXBkYXRlID0gX2ludGVyb3BSZXF1aXJlKF9yZWFjdERlZXBGb3JjZVVwZGF0ZSk7XG59LHtcIi4vY3JlYXRlQ2xhc3NQcm94eVwiOjExOSxcInJlYWN0LWRlZXAtZm9yY2UtdXBkYXRlXCI6MTE1fV0sMTIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb29wQXN5bmMgPSBsb29wQXN5bmM7XG5leHBvcnRzLm1hcEFzeW5jID0gbWFwQXN5bmM7XG5cbmZ1bmN0aW9uIGxvb3BBc3luYyh0dXJucywgd29yaywgY2FsbGJhY2spIHtcbiAgdmFyIGN1cnJlbnRUdXJuID0gMCxcbiAgICAgIGlzRG9uZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaXNEb25lID0gdHJ1ZTtcbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICBpZiAoaXNEb25lKSByZXR1cm47XG5cbiAgICBpZiAoY3VycmVudFR1cm4gPCB0dXJucykge1xuICAgICAgd29yay5jYWxsKHRoaXMsIGN1cnJlbnRUdXJuKyssIG5leHQsIGRvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBtYXBBc3luYyhhcnJheSwgd29yaywgY2FsbGJhY2spIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiBjYWxsYmFjayhudWxsLCB2YWx1ZXMpO1xuXG4gIHZhciBpc0RvbmUgPSBmYWxzZSxcbiAgICAgIGRvbmVDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gZG9uZShpbmRleCwgZXJyb3IsIHZhbHVlKSB7XG4gICAgaWYgKGlzRG9uZSkgcmV0dXJuO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG5cbiAgICAgIGlzRG9uZSA9ICsrZG9uZUNvdW50ID09PSBsZW5ndGg7XG5cbiAgICAgIGlmIChpc0RvbmUpIGNhbGxiYWNrKG51bGwsIHZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICB3b3JrKGl0ZW0sIGluZGV4LCBmdW5jdGlvbiAoZXJyb3IsIHZhbHVlKSB7XG4gICAgICBkb25lKGluZGV4LCBlcnJvciwgdmFsdWUpO1xuICAgIH0pO1xuICB9KTtcbn1cbn0se31dLDEyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIEhpc3RvcnkgPSB7XG5cbiAgY29udGV4dFR5cGVzOiB7IGhpc3Rvcnk6IF9Qcm9wVHlwZXMuaGlzdG9yeSB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuY29udGV4dC5oaXN0b3J5O1xuICB9XG5cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9Qcm9wVHlwZXNcIjoxMzF9XSwxMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfTGluayA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluayk7XG5cbi8qKlxuICogQW4gPEluZGV4TGluaz4gaXMgdXNlZCB0byBsaW5rIHRvIGFuIDxJbmRleFJvdXRlPi5cbiAqL1xuXG52YXIgSW5kZXhMaW5rID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbmRleExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEluZGV4TGluaygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kZXhMaW5rKTtcblxuICAgIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEluZGV4TGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfTGluazJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHsgb25seUFjdGl2ZU9uSW5kZXg6IHRydWUgfSkpO1xuICB9O1xuXG4gIHJldHVybiBJbmRleExpbms7XG59KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gSW5kZXhMaW5rO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vTGlua1wiOjEyOSxcInJlYWN0XCI6Mjk1fV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9SZWRpcmVjdCA9IHJlcXVpcmUoJy4vUmVkaXJlY3QnKTtcblxudmFyIF9SZWRpcmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWRpcmVjdCk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzO1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIG9iamVjdCA9IF9SZWFjdCRQcm9wVHlwZXMub2JqZWN0O1xuXG4vKipcbiAqIEFuIDxJbmRleFJlZGlyZWN0PiBpcyB1c2VkIHRvIHJlZGlyZWN0IGZyb20gYW4gaW5kZXhSb3V0ZS5cbiAqL1xuXG52YXIgSW5kZXhSZWRpcmVjdCA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSW5kZXhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5kZXhSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5kZXhSZWRpcmVjdCk7XG5cbiAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBJbmRleFJlZGlyZWN0LmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50LCBwYXJlbnRSb3V0ZSkge1xuICAgIGlmIChwYXJlbnRSb3V0ZSkge1xuICAgICAgcGFyZW50Um91dGUuaW5kZXhSb3V0ZSA9IF9SZWRpcmVjdDJbJ2RlZmF1bHQnXS5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnQW4gPEluZGV4UmVkaXJlY3Q+IGRvZXMgbm90IG1ha2Ugc2Vuc2UgYXQgdGhlIHJvb3Qgb2YgeW91ciByb3V0ZSBjb25maWcnKTtcbiAgICB9XG4gIH07XG5cbiAgSW5kZXhSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICc8SW5kZXhSZWRpcmVjdD4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKEluZGV4UmVkaXJlY3QsIG51bGwsIFt7XG4gICAga2V5OiAncHJvcFR5cGVzJyxcbiAgICB2YWx1ZToge1xuICAgICAgdG86IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgcXVlcnk6IG9iamVjdCxcbiAgICAgIHN0YXRlOiBvYmplY3QsXG4gICAgICBvbkVudGVyOiBfUHJvcFR5cGVzLmZhbHN5LFxuICAgICAgY2hpbGRyZW46IF9Qcm9wVHlwZXMuZmFsc3lcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfV0pO1xuXG4gIHJldHVybiBJbmRleFJlZGlyZWN0O1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEluZGV4UmVkaXJlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9Qcm9wVHlwZXNcIjoxMzEsXCIuL1JlZGlyZWN0XCI6MTMyLFwiaW52YXJpYW50XCI6NzMsXCJyZWFjdFwiOjI5NSxcIndhcm5pbmdcIjoyOTZ9XSwxMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXM7XG52YXIgYm9vbCA9IF9SZWFjdCRQcm9wVHlwZXMuYm9vbDtcbnZhciBmdW5jID0gX1JlYWN0JFByb3BUeXBlcy5mdW5jO1xuXG4vKipcbiAqIEFuIDxJbmRleFJvdXRlPiBpcyB1c2VkIHRvIHNwZWNpZnkgaXRzIHBhcmVudCdzIDxSb3V0ZSBpbmRleFJvdXRlPiBpblxuICogYSBKU1ggcm91dGUgY29uZmlnLlxuICovXG5cbnZhciBJbmRleFJvdXRlID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbmRleFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbmRleFJvdXRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleFJvdXRlKTtcblxuICAgIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEluZGV4Um91dGUuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQsIHBhcmVudFJvdXRlKSB7XG4gICAgaWYgKHBhcmVudFJvdXRlKSB7XG4gICAgICBwYXJlbnRSb3V0ZS5pbmRleFJvdXRlID0gX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ0FuIDxJbmRleFJvdXRlPiBkb2VzIG5vdCBtYWtlIHNlbnNlIGF0IHRoZSByb290IG9mIHlvdXIgcm91dGUgY29uZmlnJyk7XG4gICAgfVxuICB9O1xuXG4gIEluZGV4Um91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnPEluZGV4Um91dGU+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhJbmRleFJvdXRlLCBudWxsLCBbe1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIHBhdGg6IF9Qcm9wVHlwZXMuZmFsc3ksXG4gICAgICBpZ25vcmVTY3JvbGxCZWhhdmlvcjogYm9vbCxcbiAgICAgIGNvbXBvbmVudDogX1Byb3BUeXBlcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnRzOiBfUHJvcFR5cGVzLmNvbXBvbmVudHMsXG4gICAgICBnZXRDb21wb25lbnRzOiBmdW5jXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1dKTtcblxuICByZXR1cm4gSW5kZXhSb3V0ZTtcbn0pKF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBJbmRleFJvdXRlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUHJvcFR5cGVzXCI6MTMxLFwiLi9Sb3V0ZVV0aWxzXCI6MTM1LFwiaW52YXJpYW50XCI6NzMsXCJyZWFjdFwiOjI5NSxcIndhcm5pbmdcIjoyOTZ9XSwxMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIG9iamVjdCA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXMub2JqZWN0O1xuXG4vKipcbiAqIFRoZSBMaWZlY3ljbGUgbWl4aW4gYWRkcyB0aGUgcm91dGVyV2lsbExlYXZlIGxpZmVjeWNsZSBtZXRob2QgdG8gYVxuICogY29tcG9uZW50IHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FuY2VsIGEgdHJhbnNpdGlvbiBvciBwcm9tcHQgdGhlIHVzZXJcbiAqIGZvciBjb25maXJtYXRpb24uXG4gKlxuICogT24gc3RhbmRhcmQgdHJhbnNpdGlvbnMsIHJvdXRlcldpbGxMZWF2ZSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudDogdGhlXG4gKiBsb2NhdGlvbiB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvLiBUbyBjYW5jZWwgdGhlIHRyYW5zaXRpb24sIHJldHVybiBmYWxzZS5cbiAqIFRvIHByb21wdCB0aGUgdXNlciBmb3IgY29uZmlybWF0aW9uLCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSAoc3RyaW5nKS5cbiAqXG4gKiBEdXJpbmcgdGhlIGJlZm9yZXVubG9hZCBldmVudCAoYXNzdW1pbmcgeW91J3JlIHVzaW5nIHRoZSB1c2VCZWZvcmVVbmxvYWRcbiAqIGhpc3RvcnkgZW5oYW5jZXIpLCByb3V0ZXJXaWxsTGVhdmUgZG9lcyBub3QgcmVjZWl2ZSBhIGxvY2F0aW9uIG9iamVjdFxuICogYmVjYXVzZSBpdCBpc24ndCBwb3NzaWJsZSBmb3IgdXMgdG8ga25vdyB0aGUgbG9jYXRpb24gd2UncmUgdHJhbnNpdGlvbmluZ1xuICogdG8uIEluIHRoaXMgY2FzZSByb3V0ZXJXaWxsTGVhdmUgbXVzdCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSB0byBwcmV2ZW50XG4gKiB0aGUgdXNlciBmcm9tIGNsb3NpbmcgdGhlIHdpbmRvdy90YWIuXG4gKi9cbnZhciBMaWZlY3ljbGUgPSB7XG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgaGlzdG9yeTogb2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgLy8gTmVzdGVkIGNoaWxkcmVuIHJlY2VpdmUgdGhlIHJvdXRlIGFzIGNvbnRleHQsIGVpdGhlclxuICAgIC8vIHNldCBieSB0aGUgcm91dGUgY29tcG9uZW50IHVzaW5nIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW5cbiAgICAvLyBvciBieSBzb21lIG90aGVyIGFuY2VzdG9yLlxuICAgIHJvdXRlOiBvYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvLyBSb3V0ZSBjb21wb25lbnRzIHJlY2VpdmUgdGhlIHJvdXRlIG9iamVjdCBhcyBhIHByb3AuXG4gICAgcm91dGU6IG9iamVjdFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKHRoaXMucm91dGVyV2lsbExlYXZlLCAnVGhlIExpZmVjeWNsZSBtaXhpbiByZXF1aXJlcyB5b3UgdG8gZGVmaW5lIGEgcm91dGVyV2lsbExlYXZlIG1ldGhvZCcpO1xuXG4gICAgdmFyIHJvdXRlID0gdGhpcy5wcm9wcy5yb3V0ZSB8fCB0aGlzLmNvbnRleHQucm91dGU7XG5cbiAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKHJvdXRlLCAnVGhlIExpZmVjeWNsZSBtaXhpbiBtdXN0IGJlIHVzZWQgb24gZWl0aGVyIGEpIGEgPFJvdXRlIGNvbXBvbmVudD4gb3IgJyArICdiKSBhIGRlc2NlbmRhbnQgb2YgYSA8Um91dGUgY29tcG9uZW50PiB0aGF0IHVzZXMgdGhlIFJvdXRlQ29udGV4dCBtaXhpbicpO1xuXG4gICAgdGhpcy5fdW5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUgPSB0aGlzLmNvbnRleHQuaGlzdG9yeS5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUocm91dGUsIHRoaXMucm91dGVyV2lsbExlYXZlKTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKSB0aGlzLl91bmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSgpO1xuICB9XG5cbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IExpZmVjeWNsZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCJpbnZhcmlhbnRcIjo3MyxcInJlYWN0XCI6Mjk1fV0sMTI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcztcbnZhciBib29sID0gX1JlYWN0JFByb3BUeXBlcy5ib29sO1xudmFyIG9iamVjdCA9IF9SZWFjdCRQcm9wVHlwZXMub2JqZWN0O1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cbmZ1bmN0aW9uIGlzTGVmdENsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmplY3QpIHtcbiAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KHApKSByZXR1cm4gZmFsc2U7XG4gIH1yZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiBpcyB1c2VkIHRvIGNyZWF0ZSBhbiA8YT4gZWxlbWVudCB0aGF0IGxpbmtzIHRvIGEgcm91dGUuXG4gKiBXaGVuIHRoYXQgcm91dGUgaXMgYWN0aXZlLCB0aGUgbGluayBnZXRzIHRoZSB2YWx1ZSBvZiBpdHNcbiAqIGBhY3RpdmVDbGFzc05hbWVgIHByb3BcbiAqXG4gKiBGb3IgZXhhbXBsZSwgYXNzdW1pbmcgeW91IGhhdmUgdGhlIGZvbGxvd2luZyByb3V0ZTpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL3Bvc3RzLzpwb3N0SURcIiBjb21wb25lbnQ9e1Bvc3R9IC8+XG4gKlxuICogWW91IGNvdWxkIHVzZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudCB0byBsaW5rIHRvIHRoYXQgcm91dGU6XG4gKlxuICogICA8TGluayB0bz17YC9wb3N0cy8ke3Bvc3QuaWR9YH0gLz5cbiAqXG4gKiBMaW5rcyBtYXkgcGFzcyBhbG9uZyBsb2NhdGlvbiBzdGF0ZSBhbmQvb3IgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnNcbiAqIGluIHRoZSBzdGF0ZS9xdWVyeSBwcm9wcywgcmVzcGVjdGl2ZWx5LlxuICpcbiAqICAgPExpbmsgLi4uIHF1ZXJ5PXt7IHNob3c6IHRydWUgfX0gc3RhdGU9e3sgdGhlOiAnc3RhdGUnIH19IC8+XG4gKi9cblxudmFyIExpbmsgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBhbGxvd1RyYW5zaXRpb24gPSB0cnVlLFxuICAgICAgICBjbGlja1Jlc3VsdCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIGNsaWNrUmVzdWx0ID0gdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmIChpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaWYgKGNsaWNrUmVzdWx0ID09PSBmYWxzZSB8fCBldmVudC5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlKSBhbGxvd1RyYW5zaXRpb24gPSBmYWxzZTtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoYWxsb3dUcmFuc2l0aW9uKSB0aGlzLmNvbnRleHQuaGlzdG9yeS5wdXNoU3RhdGUodGhpcy5wcm9wcy5zdGF0ZSwgdGhpcy5wcm9wcy50bywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gIH07XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgdG8gPSBfcHJvcHMudG87XG4gICAgdmFyIHF1ZXJ5ID0gX3Byb3BzLnF1ZXJ5O1xuICAgIHZhciBoYXNoID0gX3Byb3BzLmhhc2g7XG4gICAgdmFyIHN0YXRlID0gX3Byb3BzLnN0YXRlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBfcHJvcHMuYWN0aXZlQ2xhc3NOYW1lO1xuICAgIHZhciBhY3RpdmVTdHlsZSA9IF9wcm9wcy5hY3RpdmVTdHlsZTtcbiAgICB2YXIgb25seUFjdGl2ZU9uSW5kZXggPSBfcHJvcHMub25seUFjdGl2ZU9uSW5kZXg7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3RvJywgJ3F1ZXJ5JywgJ2hhc2gnLCAnc3RhdGUnLCAnYWN0aXZlQ2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ29ubHlBY3RpdmVPbkluZGV4J10pO1xuXG4gICAgLy8gTWFudWFsbHkgb3ZlcnJpZGUgb25DbGljay5cbiAgICBwcm9wcy5vbkNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVDbGljayhlKTtcbiAgICB9O1xuXG4gICAgLy8gSWdub3JlIGlmIHJlbmRlcmVkIG91dHNpZGUgdGhlIGNvbnRleHQgb2YgaGlzdG9yeSwgc2ltcGxpZmllcyB1bml0IHRlc3RpbmcuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQuaGlzdG9yeTtcblxuICAgIGlmIChoaXN0b3J5KSB7XG4gICAgICBwcm9wcy5ocmVmID0gaGlzdG9yeS5jcmVhdGVIcmVmKHRvLCBxdWVyeSk7XG5cbiAgICAgIGlmIChoYXNoKSBwcm9wcy5ocmVmICs9IGhhc2g7XG5cbiAgICAgIGlmIChhY3RpdmVDbGFzc05hbWUgfHwgYWN0aXZlU3R5bGUgIT0gbnVsbCAmJiAhaXNFbXB0eU9iamVjdChhY3RpdmVTdHlsZSkpIHtcbiAgICAgICAgaWYgKGhpc3RvcnkuaXNBY3RpdmUodG8sIHF1ZXJ5LCBvbmx5QWN0aXZlT25JbmRleCkpIHtcbiAgICAgICAgICBpZiAoYWN0aXZlQ2xhc3NOYW1lKSBwcm9wcy5jbGFzc05hbWUgKz0gcHJvcHMuY2xhc3NOYW1lID09PSAnJyA/IGFjdGl2ZUNsYXNzTmFtZSA6ICcgJyArIGFjdGl2ZUNsYXNzTmFtZTtcblxuICAgICAgICAgIGlmIChhY3RpdmVTdHlsZSkgcHJvcHMuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMuc3R5bGUsIGFjdGl2ZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnYScsIHByb3BzKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoTGluaywgbnVsbCwgW3tcbiAgICBrZXk6ICdjb250ZXh0VHlwZXMnLFxuICAgIHZhbHVlOiB7XG4gICAgICBoaXN0b3J5OiBvYmplY3RcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSwge1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIHRvOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHF1ZXJ5OiBvYmplY3QsXG4gICAgICBoYXNoOiBzdHJpbmcsXG4gICAgICBzdGF0ZTogb2JqZWN0LFxuICAgICAgYWN0aXZlU3R5bGU6IG9iamVjdCxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZTogc3RyaW5nLFxuICAgICAgb25seUFjdGl2ZU9uSW5kZXg6IGJvb2wuaXNSZXF1aXJlZCxcbiAgICAgIG9uQ2xpY2s6IGZ1bmNcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSwge1xuICAgIGtleTogJ2RlZmF1bHRQcm9wcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIG9ubHlBY3RpdmVPbkluZGV4OiBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgICBzdHlsZToge31cbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfV0pO1xuXG4gIHJldHVybiBMaW5rO1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IExpbms7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wicmVhY3RcIjoyOTV9XSwxMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21waWxlUGF0dGVybiA9IGNvbXBpbGVQYXR0ZXJuO1xuZXhwb3J0cy5tYXRjaFBhdHRlcm4gPSBtYXRjaFBhdHRlcm47XG5leHBvcnRzLmdldFBhcmFtTmFtZXMgPSBnZXRQYXJhbU5hbWVzO1xuZXhwb3J0cy5nZXRQYXJhbXMgPSBnZXRQYXJhbXM7XG5leHBvcnRzLmZvcm1hdFBhdHRlcm4gPSBmb3JtYXRQYXR0ZXJuO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVTb3VyY2Uoc3RyaW5nKSB7XG4gIHJldHVybiBlc2NhcGVSZWdFeHAoc3RyaW5nKS5yZXBsYWNlKC9cXC8rL2csICcvKycpO1xufVxuXG5mdW5jdGlvbiBfY29tcGlsZVBhdHRlcm4ocGF0dGVybikge1xuICB2YXIgcmVnZXhwU291cmNlID0gJyc7XG4gIHZhciBwYXJhbU5hbWVzID0gW107XG4gIHZhciB0b2tlbnMgPSBbXTtcblxuICB2YXIgbWF0Y2ggPSB1bmRlZmluZWQsXG4gICAgICBsYXN0SW5kZXggPSAwLFxuICAgICAgbWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyRdKil8XFwqfFxcKHxcXCkvZztcbiAgd2hpbGUgKG1hdGNoID0gbWF0Y2hlci5leGVjKHBhdHRlcm4pKSB7XG4gICAgaWYgKG1hdGNoLmluZGV4ICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdHRlcm4uc2xpY2UobGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgcmVnZXhwU291cmNlICs9IGVzY2FwZVNvdXJjZShwYXR0ZXJuLnNsaWNlKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgIHJlZ2V4cFNvdXJjZSArPSAnKFteLz8jXSspJztcbiAgICAgIHBhcmFtTmFtZXMucHVzaChtYXRjaFsxXSk7XG4gICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gJyonKSB7XG4gICAgICByZWdleHBTb3VyY2UgKz0gJyhbXFxcXHNcXFxcU10qPyknO1xuICAgICAgcGFyYW1OYW1lcy5wdXNoKCdzcGxhdCcpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcoJykge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcoPzonO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcpJykge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcpPyc7XG4gICAgfVxuXG4gICAgdG9rZW5zLnB1c2gobWF0Y2hbMF0pO1xuXG4gICAgbGFzdEluZGV4ID0gbWF0Y2hlci5sYXN0SW5kZXg7XG4gIH1cblxuICBpZiAobGFzdEluZGV4ICE9PSBwYXR0ZXJuLmxlbmd0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdHRlcm4uc2xpY2UobGFzdEluZGV4LCBwYXR0ZXJuLmxlbmd0aCkpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBlc2NhcGVTb3VyY2UocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIHBhdHRlcm4ubGVuZ3RoKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdHRlcm46IHBhdHRlcm4sXG4gICAgcmVnZXhwU291cmNlOiByZWdleHBTb3VyY2UsXG4gICAgcGFyYW1OYW1lczogcGFyYW1OYW1lcyxcbiAgICB0b2tlbnM6IHRva2Vuc1xuICB9O1xufVxuXG52YXIgQ29tcGlsZWRQYXR0ZXJuc0NhY2hlID0ge307XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgaWYgKCEocGF0dGVybiBpbiBDb21waWxlZFBhdHRlcm5zQ2FjaGUpKSBDb21waWxlZFBhdHRlcm5zQ2FjaGVbcGF0dGVybl0gPSBfY29tcGlsZVBhdHRlcm4ocGF0dGVybik7XG5cbiAgcmV0dXJuIENvbXBpbGVkUGF0dGVybnNDYWNoZVtwYXR0ZXJuXTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBtYXRjaCBhIHBhdHRlcm4gb24gdGhlIGdpdmVuIHBhdGhuYW1lLiBQYXR0ZXJucyBtYXkgdXNlXG4gKiB0aGUgZm9sbG93aW5nIHNwZWNpYWwgY2hhcmFjdGVyczpcbiAqXG4gKiAtIDpwYXJhbU5hbWUgICAgIE1hdGNoZXMgYSBVUkwgc2VnbWVudCB1cCB0byB0aGUgbmV4dCAvLCA/LCBvciAjLiBUaGVcbiAqICAgICAgICAgICAgICAgICAgY2FwdHVyZWQgc3RyaW5nIGlzIGNvbnNpZGVyZWQgYSBcInBhcmFtXCJcbiAqIC0gKCkgICAgICAgICAgICAgV3JhcHMgYSBzZWdtZW50IG9mIHRoZSBVUkwgdGhhdCBpcyBvcHRpb25hbFxuICogLSAqICAgICAgICAgICAgICBDb25zdW1lcyAobm9uLWdyZWVkeSkgYWxsIGNoYXJhY3RlcnMgdXAgdG8gdGhlIG5leHRcbiAqICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIGluIHRoZSBwYXR0ZXJuLCBvciB0byB0aGUgZW5kIG9mIHRoZSBVUkwgaWZcbiAqICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm9uZVxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gcmVtYWluaW5nUGF0aG5hbWVcbiAqIC0gcGFyYW1OYW1lc1xuICogLSBwYXJhbVZhbHVlc1xuICovXG5cbmZ1bmN0aW9uIG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwYXRobmFtZSkge1xuICB2YXIgX2NvbXBpbGVQYXR0ZXJuMiA9IGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pO1xuXG4gIHZhciByZWdleHBTb3VyY2UgPSBfY29tcGlsZVBhdHRlcm4yLnJlZ2V4cFNvdXJjZTtcbiAgdmFyIHBhcmFtTmFtZXMgPSBfY29tcGlsZVBhdHRlcm4yLnBhcmFtTmFtZXM7XG4gIHZhciB0b2tlbnMgPSBfY29tcGlsZVBhdHRlcm4yLnRva2VucztcblxuICByZWdleHBTb3VyY2UgKz0gJy8qJzsgLy8gSWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcblxuICB2YXIgY2FwdHVyZVJlbWFpbmluZyA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0gIT09ICcqJztcblxuICBpZiAoY2FwdHVyZVJlbWFpbmluZykgcmVnZXhwU291cmNlICs9ICcoW1xcXFxzXFxcXFNdKj8pJztcblxuICB2YXIgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChuZXcgUmVnRXhwKCdeJyArIHJlZ2V4cFNvdXJjZSArICckJywgJ2knKSk7XG5cbiAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gdW5kZWZpbmVkLFxuICAgICAgcGFyYW1WYWx1ZXMgPSB1bmRlZmluZWQ7XG4gIGlmIChtYXRjaCAhPSBudWxsKSB7XG4gICAgcGFyYW1WYWx1ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtYXRjaCwgMSkubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiAhPSBudWxsID8gZGVjb2RlVVJJQ29tcG9uZW50KHYucmVwbGFjZSgvXFwrL2csICclMjAnKSkgOiB2O1xuICAgIH0pO1xuXG4gICAgaWYgKGNhcHR1cmVSZW1haW5pbmcpIHtcbiAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyYW1WYWx1ZXMucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZShtYXRjaFswXSwgJycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZW1haW5pbmdQYXRobmFtZSA9IHBhcmFtVmFsdWVzID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtYWluaW5nUGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lLFxuICAgIHBhcmFtTmFtZXM6IHBhcmFtTmFtZXMsXG4gICAgcGFyYW1WYWx1ZXM6IHBhcmFtVmFsdWVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmFtTmFtZXMocGF0dGVybikge1xuICByZXR1cm4gY29tcGlsZVBhdHRlcm4ocGF0dGVybikucGFyYW1OYW1lcztcbn1cblxuZnVuY3Rpb24gZ2V0UGFyYW1zKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIHZhciBfbWF0Y2hQYXR0ZXJuID0gbWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIHBhdGhuYW1lKTtcblxuICB2YXIgcGFyYW1OYW1lcyA9IF9tYXRjaFBhdHRlcm4ucGFyYW1OYW1lcztcbiAgdmFyIHBhcmFtVmFsdWVzID0gX21hdGNoUGF0dGVybi5wYXJhbVZhbHVlcztcblxuICBpZiAocGFyYW1WYWx1ZXMgIT0gbnVsbCkge1xuICAgIHJldHVybiBwYXJhbU5hbWVzLnJlZHVjZShmdW5jdGlvbiAobWVtbywgcGFyYW1OYW1lLCBpbmRleCkge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gcGFyYW1WYWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGdpdmVuIHBhdHRlcm4gd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLiBUaHJvd3NcbiAqIGlmIHRoZXJlIGlzIGEgZHluYW1pYyBzZWdtZW50IG9mIHRoZSBwYXR0ZXJuIGZvciB3aGljaCB0aGVyZSBpcyBubyBwYXJhbS5cbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRQYXR0ZXJuKHBhdHRlcm4sIHBhcmFtcykge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cbiAgdmFyIF9jb21waWxlUGF0dGVybjMgPSBjb21waWxlUGF0dGVybihwYXR0ZXJuKTtcblxuICB2YXIgdG9rZW5zID0gX2NvbXBpbGVQYXR0ZXJuMy50b2tlbnM7XG5cbiAgdmFyIHBhcmVuQ291bnQgPSAwLFxuICAgICAgcGF0aG5hbWUgPSAnJyxcbiAgICAgIHNwbGF0SW5kZXggPSAwO1xuXG4gIHZhciB0b2tlbiA9IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtTmFtZSA9IHVuZGVmaW5lZCxcbiAgICAgIHBhcmFtVmFsdWUgPSB1bmRlZmluZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0b2tlbiA9PT0gJyonKSB7XG4gICAgICBwYXJhbVZhbHVlID0gQXJyYXkuaXNBcnJheShwYXJhbXMuc3BsYXQpID8gcGFyYW1zLnNwbGF0W3NwbGF0SW5kZXgrK10gOiBwYXJhbXMuc3BsYXQ7XG5cbiAgICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10ocGFyYW1WYWx1ZSAhPSBudWxsIHx8IHBhcmVuQ291bnQgPiAwLCAnTWlzc2luZyBzcGxhdCAjJXMgZm9yIHBhdGggXCIlc1wiJywgc3BsYXRJbmRleCwgcGF0dGVybik7XG5cbiAgICAgIGlmIChwYXJhbVZhbHVlICE9IG51bGwpIHBhdGhuYW1lICs9IGVuY29kZVVSSShwYXJhbVZhbHVlKS5yZXBsYWNlKC8lMjAvZywgJysnKTtcbiAgICB9IGVsc2UgaWYgKHRva2VuID09PSAnKCcpIHtcbiAgICAgIHBhcmVuQ291bnQgKz0gMTtcbiAgICB9IGVsc2UgaWYgKHRva2VuID09PSAnKScpIHtcbiAgICAgIHBhcmVuQ291bnQgLT0gMTtcbiAgICB9IGVsc2UgaWYgKHRva2VuLmNoYXJBdCgwKSA9PT0gJzonKSB7XG4gICAgICBwYXJhbU5hbWUgPSB0b2tlbi5zdWJzdHJpbmcoMSk7XG4gICAgICBwYXJhbVZhbHVlID0gcGFyYW1zW3BhcmFtTmFtZV07XG5cbiAgICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10ocGFyYW1WYWx1ZSAhPSBudWxsIHx8IHBhcmVuQ291bnQgPiAwLCAnTWlzc2luZyBcIiVzXCIgcGFyYW1ldGVyIGZvciBwYXRoIFwiJXNcIicsIHBhcmFtTmFtZSwgcGF0dGVybik7XG5cbiAgICAgIGlmIChwYXJhbVZhbHVlICE9IG51bGwpIHBhdGhuYW1lICs9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbHVlKS5yZXBsYWNlKC8lMjAvZywgJysnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aG5hbWUgKz0gdG9rZW47XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnJlcGxhY2UoL1xcLysvZywgJy8nKTtcbn1cbn0se1wiaW52YXJpYW50XCI6NzN9XSwxMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5mYWxzeSA9IGZhbHN5O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX3JlYWN0LlByb3BUeXBlcy5vYmplY3Q7XG52YXIgYXJyYXlPZiA9IF9yZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZjtcbnZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcbnZhciBlbGVtZW50ID0gX3JlYWN0LlByb3BUeXBlcy5lbGVtZW50O1xudmFyIHNoYXBlID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZTtcbnZhciBzdHJpbmcgPSBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZztcblxuZnVuY3Rpb24gZmFsc3kocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHJldHVybiBuZXcgRXJyb3IoJzwnICsgY29tcG9uZW50TmFtZSArICc+IHNob3VsZCBub3QgaGF2ZSBhIFwiJyArIHByb3BOYW1lICsgJ1wiIHByb3AnKTtcbn1cblxudmFyIGhpc3RvcnkgPSBzaGFwZSh7XG4gIGxpc3RlbjogZnVuYy5pc1JlcXVpcmVkLFxuICBwdXNoU3RhdGU6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVwbGFjZVN0YXRlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvOiBmdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnRzLmhpc3RvcnkgPSBoaXN0b3J5O1xudmFyIGxvY2F0aW9uID0gc2hhcGUoe1xuICBwYXRobmFtZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNlYXJjaDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHN0YXRlOiBvYmplY3QsXG4gIGFjdGlvbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGtleTogc3RyaW5nXG59KTtcblxuZXhwb3J0cy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xudmFyIGNvbXBvbmVudCA9IG9uZU9mVHlwZShbZnVuYywgc3RyaW5nXSk7XG5leHBvcnRzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbnZhciBjb21wb25lbnRzID0gb25lT2ZUeXBlKFtjb21wb25lbnQsIG9iamVjdF0pO1xuZXhwb3J0cy5jb21wb25lbnRzID0gY29tcG9uZW50cztcbnZhciByb3V0ZSA9IG9uZU9mVHlwZShbb2JqZWN0LCBlbGVtZW50XSk7XG5leHBvcnRzLnJvdXRlID0gcm91dGU7XG52YXIgcm91dGVzID0gb25lT2ZUeXBlKFtyb3V0ZSwgYXJyYXlPZihyb3V0ZSldKTtcblxuZXhwb3J0cy5yb3V0ZXMgPSByb3V0ZXM7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIGZhbHN5OiBmYWxzeSxcbiAgaGlzdG9yeTogaGlzdG9yeSxcbiAgbG9jYXRpb246IGxvY2F0aW9uLFxuICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgcm91dGU6IHJvdXRlXG59O1xufSx7XCJyZWFjdFwiOjI5NX1dLDEzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfUGF0dGVyblV0aWxzID0gcmVxdWlyZSgnLi9QYXR0ZXJuVXRpbHMnKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXM7XG52YXIgc3RyaW5nID0gX1JlYWN0JFByb3BUeXBlcy5zdHJpbmc7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8UmVkaXJlY3Q+IGlzIHVzZWQgdG8gZGVjbGFyZSBhbm90aGVyIFVSTCBwYXRoIGEgY2xpZW50IHNob3VsZFxuICogYmUgc2VudCB0byB3aGVuIHRoZXkgcmVxdWVzdCBhIGdpdmVuIFVSTC5cbiAqXG4gKiBSZWRpcmVjdHMgYXJlIHBsYWNlZCBhbG9uZ3NpZGUgcm91dGVzIGluIHRoZSByb3V0ZSBjb25maWd1cmF0aW9uXG4gKiBhbmQgYXJlIHRyYXZlcnNlZCBpbiB0aGUgc2FtZSBtYW5uZXIuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFJlZGlyZWN0LmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIHJvdXRlID0gX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgaWYgKHJvdXRlLmZyb20pIHJvdXRlLnBhdGggPSByb3V0ZS5mcm9tO1xuXG4gICAgcm91dGUub25FbnRlciA9IGZ1bmN0aW9uIChuZXh0U3RhdGUsIHJlcGxhY2VTdGF0ZSkge1xuICAgICAgdmFyIGxvY2F0aW9uID0gbmV4dFN0YXRlLmxvY2F0aW9uO1xuICAgICAgdmFyIHBhcmFtcyA9IG5leHRTdGF0ZS5wYXJhbXM7XG5cbiAgICAgIHZhciBwYXRobmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChyb3V0ZS50by5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICBwYXRobmFtZSA9IF9QYXR0ZXJuVXRpbHMuZm9ybWF0UGF0dGVybihyb3V0ZS50bywgcGFyYW1zKTtcbiAgICAgIH0gZWxzZSBpZiAoIXJvdXRlLnRvKSB7XG4gICAgICAgIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcm91dGVJbmRleCA9IG5leHRTdGF0ZS5yb3V0ZXMuaW5kZXhPZihyb3V0ZSk7XG4gICAgICAgIHZhciBwYXJlbnRQYXR0ZXJuID0gUmVkaXJlY3QuZ2V0Um91dGVQYXR0ZXJuKG5leHRTdGF0ZS5yb3V0ZXMsIHJvdXRlSW5kZXggLSAxKTtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSBwYXJlbnRQYXR0ZXJuLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIHJvdXRlLnRvO1xuICAgICAgICBwYXRobmFtZSA9IF9QYXR0ZXJuVXRpbHMuZm9ybWF0UGF0dGVybihwYXR0ZXJuLCBwYXJhbXMpO1xuICAgICAgfVxuXG4gICAgICByZXBsYWNlU3RhdGUocm91dGUuc3RhdGUgfHwgbG9jYXRpb24uc3RhdGUsIHBhdGhuYW1lLCByb3V0ZS5xdWVyeSB8fCBsb2NhdGlvbi5xdWVyeSk7XG4gICAgfTtcblxuICAgIHJldHVybiByb3V0ZTtcbiAgfTtcblxuICBSZWRpcmVjdC5nZXRSb3V0ZVBhdHRlcm4gPSBmdW5jdGlvbiBnZXRSb3V0ZVBhdHRlcm4ocm91dGVzLCByb3V0ZUluZGV4KSB7XG4gICAgdmFyIHBhcmVudFBhdHRlcm4gPSAnJztcblxuICAgIGZvciAodmFyIGkgPSByb3V0ZUluZGV4OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2ldO1xuICAgICAgdmFyIHBhdHRlcm4gPSByb3V0ZS5wYXRoIHx8ICcnO1xuICAgICAgcGFyZW50UGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwvKiQvLCAnLycpICsgcGFyZW50UGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4uaW5kZXhPZignLycpID09PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gJy8nICsgcGFyZW50UGF0dGVybjtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICc8UmVkaXJlY3Q+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhSZWRpcmVjdCwgbnVsbCwgW3tcbiAgICBrZXk6ICdwcm9wVHlwZXMnLFxuICAgIHZhbHVlOiB7XG4gICAgICBwYXRoOiBzdHJpbmcsXG4gICAgICBmcm9tOiBzdHJpbmcsIC8vIEFsaWFzIGZvciBwYXRoXG4gICAgICB0bzogc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBxdWVyeTogb2JqZWN0LFxuICAgICAgc3RhdGU6IG9iamVjdCxcbiAgICAgIG9uRW50ZXI6IF9Qcm9wVHlwZXMuZmFsc3ksXG4gICAgICBjaGlsZHJlbjogX1Byb3BUeXBlcy5mYWxzeVxuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJlZGlyZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUGF0dGVyblV0aWxzXCI6MTMwLFwiLi9Qcm9wVHlwZXNcIjoxMzEsXCIuL1JvdXRlVXRpbHNcIjoxMzUsXCJpbnZhcmlhbnRcIjo3MyxcInJlYWN0XCI6Mjk1fV0sMTMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9Qcm9wVHlwZXMnKTtcblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzO1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIGJvb2wgPSBfUmVhY3QkUHJvcFR5cGVzLmJvb2w7XG52YXIgZnVuYyA9IF9SZWFjdCRQcm9wVHlwZXMuZnVuYztcblxuLyoqXG4gKiBBIDxSb3V0ZT4gaXMgdXNlZCB0byBkZWNsYXJlIHdoaWNoIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIHRvIHRoZVxuICogcGFnZSB3aGVuIHRoZSBVUkwgbWF0Y2hlcyBhIGdpdmVuIHBhdHRlcm4uXG4gKlxuICogUm91dGVzIGFyZSBhcnJhbmdlZCBpbiBhIG5lc3RlZCB0cmVlIHN0cnVjdHVyZS4gV2hlbiBhIG5ldyBVUkwgaXNcbiAqIHJlcXVlc3RlZCwgdGhlIHRyZWUgaXMgc2VhcmNoZWQgZGVwdGgtZmlyc3QgdG8gZmluZCBhIHJvdXRlIHdob3NlXG4gKiBwYXRoIG1hdGNoZXMgdGhlIFVSTC4gIFdoZW4gb25lIGlzIGZvdW5kLCBhbGwgcm91dGVzIGluIHRoZSB0cmVlXG4gKiB0aGF0IGxlYWQgdG8gaXQgYXJlIGNvbnNpZGVyZWQgXCJhY3RpdmVcIiBhbmQgdGhlaXIgY29tcG9uZW50cyBhcmVcbiAqIHJlbmRlcmVkIGludG8gdGhlIERPTSwgbmVzdGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIGluIHRoZSB0cmVlLlxuICovXG5cbnZhciBSb3V0ZSA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBSb3V0ZS5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciByb3V0ZSA9IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KTtcblxuICAgIGlmIChyb3V0ZS5oYW5kbGVyKSB7XG4gICAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJzxSb3V0ZSBoYW5kbGVyPiBpcyBkZXByZWNhdGVkLCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gaW5zdGVhZCcpO1xuXG4gICAgICByb3V0ZS5jb21wb25lbnQgPSByb3V0ZS5oYW5kbGVyO1xuICAgICAgZGVsZXRlIHJvdXRlLmhhbmRsZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvdXRlO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSwgJzxSb3V0ZT4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFJvdXRlLCBudWxsLCBbe1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIHBhdGg6IHN0cmluZyxcbiAgICAgIGlnbm9yZVNjcm9sbEJlaGF2aW9yOiBib29sLFxuICAgICAgaGFuZGxlcjogLy8gZGVwcmVjYXRlZFxuICAgICAgX1Byb3BUeXBlcy5jb21wb25lbnQsIGNvbXBvbmVudDogX1Byb3BUeXBlcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnRzOiBfUHJvcFR5cGVzLmNvbXBvbmVudHMsXG4gICAgICBnZXRDb21wb25lbnRzOiBmdW5jXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1dKTtcblxuICByZXR1cm4gUm91dGU7XG59KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUm91dGU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9Qcm9wVHlwZXNcIjoxMzEsXCIuL1JvdXRlVXRpbHNcIjoxMzUsXCJpbnZhcmlhbnRcIjo3MyxcInJlYWN0XCI6Mjk1LFwid2FybmluZ1wiOjI5Nn1dLDEzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgb2JqZWN0ID0gX3JlYWN0MlsnZGVmYXVsdCddLlByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogVGhlIFJvdXRlQ29udGV4dCBtaXhpbiBwcm92aWRlcyBhIGNvbnZlbmllbnQgd2F5IGZvciByb3V0ZVxuICogY29tcG9uZW50cyB0byBzZXQgdGhlIHJvdXRlIGluIGNvbnRleHQuIFRoaXMgaXMgbmVlZGVkIGZvclxuICogcm91dGVzIHRoYXQgcmVuZGVyIGVsZW1lbnRzIHRoYXQgd2FudCB0byB1c2UgdGhlIExpZmVjeWNsZVxuICogbWl4aW4gdG8gcHJldmVudCB0cmFuc2l0aW9ucy5cbiAqL1xudmFyIFJvdXRlQ29udGV4dCA9IHtcblxuICBwcm9wVHlwZXM6IHtcbiAgICByb3V0ZTogb2JqZWN0LmlzUmVxdWlyZWRcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIHJvdXRlOiBvYmplY3QuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZTogdGhpcy5wcm9wcy5yb3V0ZVxuICAgIH07XG4gIH1cblxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUm91dGVDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcInJlYWN0XCI6Mjk1fV0sMTM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5pc1JlYWN0Q2hpbGRyZW4gPSBpc1JlYWN0Q2hpbGRyZW47XG5leHBvcnRzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCA9IGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudDtcbmV4cG9ydHMuY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbjtcbmV4cG9ydHMuY3JlYXRlUm91dGVzID0gY3JlYXRlUm91dGVzO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRDaGlsZChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5pc1ZhbGlkRWxlbWVudChvYmplY3QpO1xufVxuXG5mdW5jdGlvbiBpc1JlYWN0Q2hpbGRyZW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc1ZhbGlkQ2hpbGQob2JqZWN0KSB8fCBBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgb2JqZWN0LmV2ZXJ5KGlzVmFsaWRDaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMpIHtcbiAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgJ1Vua25vd25Db21wb25lbnQnO1xuXG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSk7XG5cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHMsIHByb3BzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gIHZhciByb3V0ZSA9IGNyZWF0ZVJvdXRlKHR5cGUuZGVmYXVsdFByb3BzLCBlbGVtZW50LnByb3BzKTtcblxuICBpZiAodHlwZS5wcm9wVHlwZXMpIGNoZWNrUHJvcFR5cGVzKHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lLCB0eXBlLnByb3BUeXBlcywgcm91dGUpO1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIHZhciBjaGlsZFJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHJvdXRlLmNoaWxkcmVuLCByb3V0ZSk7XG5cbiAgICBpZiAoY2hpbGRSb3V0ZXMubGVuZ3RoKSByb3V0ZS5jaGlsZFJvdXRlcyA9IGNoaWxkUm91dGVzO1xuXG4gICAgZGVsZXRlIHJvdXRlLmNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSByb3V0ZXMgb2JqZWN0IGZyb20gdGhlIGdpdmVuIFJlYWN0Q2hpbGRyZW4uIEpTWFxuICogcHJvdmlkZXMgYSBjb252ZW5pZW50IHdheSB0byB2aXN1YWxpemUgaG93IHJvdXRlcyBpbiB0aGUgaGllcmFyY2h5IGFyZVxuICogbmVzdGVkLlxuICpcbiAqICAgaW1wb3J0IHsgUm91dGUsIGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuICogICBcbiAqICAgY29uc3Qgcm91dGVzID0gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4oXG4gKiAgICAgPFJvdXRlIGNvbXBvbmVudD17QXBwfT5cbiAqICAgICAgIDxSb3V0ZSBwYXRoPVwiaG9tZVwiIGNvbXBvbmVudD17RGFzaGJvYXJkfS8+XG4gKiAgICAgICA8Um91dGUgcGF0aD1cIm5ld3NcIiBjb21wb25lbnQ9e05ld3NGZWVkfS8+XG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgKVxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgdXNlZCB3aGVuIHlvdSBwcm92aWRlIDxSb3V0ZT4gY2hpbGRyZW5cbiAqIHRvIGEgPFJvdXRlcj4gY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRSb3V0ZSkge1xuICB2YXIgcm91dGVzID0gW107XG5cbiAgX3JlYWN0MlsnZGVmYXVsdCddLkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgaWYgKF9yZWFjdDJbJ2RlZmF1bHQnXS5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gQ29tcG9uZW50IGNsYXNzZXMgbWF5IGhhdmUgYSBzdGF0aWMgY3JlYXRlKiBtZXRob2QuXG4gICAgICBpZiAoZWxlbWVudC50eXBlLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCkge1xuICAgICAgICB2YXIgcm91dGUgPSBlbGVtZW50LnR5cGUuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQsIHBhcmVudFJvdXRlKTtcblxuICAgICAgICBpZiAocm91dGUpIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdXRlcy5wdXNoKGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcm91dGVzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYW4gYXJyYXkgb2Ygcm91dGVzIGZyb20gdGhlIGdpdmVuIG9iamVjdCB3aGljaFxuICogbWF5IGJlIGEgSlNYIHJvdXRlLCBhIHBsYWluIG9iamVjdCByb3V0ZSwgb3IgYW4gYXJyYXkgb2YgZWl0aGVyLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcyhyb3V0ZXMpIHtcbiAgaWYgKGlzUmVhY3RDaGlsZHJlbihyb3V0ZXMpKSB7XG4gICAgcm91dGVzID0gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4ocm91dGVzKTtcbiAgfSBlbHNlIGlmIChyb3V0ZXMgJiYgIUFycmF5LmlzQXJyYXkocm91dGVzKSkge1xuICAgIHJvdXRlcyA9IFtyb3V0ZXNdO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcztcbn1cbn0se1wicmVhY3RcIjoyOTUsXCJ3YXJuaW5nXCI6Mjk2fV0sMTM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9oaXN0b3J5TGliQ3JlYXRlSGFzaEhpc3RvcnkgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9jcmVhdGVIYXNoSGlzdG9yeScpO1xuXG52YXIgX2hpc3RvcnlMaWJDcmVhdGVIYXNoSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaXN0b3J5TGliQ3JlYXRlSGFzaEhpc3RvcnkpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF9Sb3V0aW5nQ29udGV4dCA9IHJlcXVpcmUoJy4vUm91dGluZ0NvbnRleHQnKTtcblxudmFyIF9Sb3V0aW5nQ29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0aW5nQ29udGV4dCk7XG5cbnZhciBfdXNlUm91dGVzID0gcmVxdWlyZSgnLi91c2VSb3V0ZXMnKTtcblxudmFyIF91c2VSb3V0ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlUm91dGVzKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDJbJ2RlZmF1bHQnXS5Qcm9wVHlwZXM7XG52YXIgZnVuYyA9IF9SZWFjdCRQcm9wVHlwZXMuZnVuYztcbnZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBBIDxSb3V0ZXI+IGlzIGEgaGlnaC1sZXZlbCBBUEkgZm9yIGF1dG9tYXRpY2FsbHkgc2V0dGluZyB1cFxuICogYSByb3V0ZXIgdGhhdCByZW5kZXJzIGEgPFJvdXRpbmdDb250ZXh0PiB3aXRoIGFsbCB0aGUgcHJvcHNcbiAqIGl0IG5lZWRzIGVhY2ggdGltZSB0aGUgVVJMIGNoYW5nZXMuXG4gKi9cblxudmFyIFJvdXRlciA9IChmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBfY3JlYXRlQ2xhc3MoUm91dGVyLCBudWxsLCBbe1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIGhpc3Rvcnk6IG9iamVjdCxcbiAgICAgIGNoaWxkcmVuOiBfUHJvcFR5cGVzLnJvdXRlcyxcbiAgICAgIHJvdXRlczogX1Byb3BUeXBlcy5yb3V0ZXMsIC8vIGFsaWFzIGZvciBjaGlsZHJlblxuICAgICAgY3JlYXRlRWxlbWVudDogZnVuYyxcbiAgICAgIG9uRXJyb3I6IGZ1bmMsXG4gICAgICBvblVwZGF0ZTogZnVuYyxcbiAgICAgIHBhcnNlUXVlcnlTdHJpbmc6IGZ1bmMsXG4gICAgICBzdHJpbmdpZnlRdWVyeTogZnVuY1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBudWxsLFxuICAgICAgcm91dGVzOiBudWxsLFxuICAgICAgcGFyYW1zOiBudWxsLFxuICAgICAgY29tcG9uZW50czogbnVsbFxuICAgIH07XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRocm93IGVycm9ycyBieSBkZWZhdWx0IHNvIHdlIGRvbid0IHNpbGVudGx5IHN3YWxsb3cgdGhlbSFcbiAgICAgIHRocm93IGVycm9yOyAvLyBUaGlzIGVycm9yIHByb2JhYmx5IG9jY3VycmVkIGluIGdldENoaWxkUm91dGVzIG9yIGdldENvbXBvbmVudHMuXG4gICAgfVxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgcm91dGVzID0gX3Byb3BzLnJvdXRlcztcbiAgICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IF9wcm9wcy5wYXJzZVF1ZXJ5U3RyaW5nO1xuICAgIHZhciBzdHJpbmdpZnlRdWVyeSA9IF9wcm9wcy5zdHJpbmdpZnlRdWVyeTtcblxuICAgIHZhciBjcmVhdGVIaXN0b3J5ID0gaGlzdG9yeSA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5O1xuICAgIH0gOiBfaGlzdG9yeUxpYkNyZWF0ZUhhc2hIaXN0b3J5MlsnZGVmYXVsdCddO1xuXG4gICAgdGhpcy5oaXN0b3J5ID0gX3VzZVJvdXRlczJbJ2RlZmF1bHQnXShjcmVhdGVIaXN0b3J5KSh7XG4gICAgICByb3V0ZXM6IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcyhyb3V0ZXMgfHwgY2hpbGRyZW4pLFxuICAgICAgcGFyc2VRdWVyeVN0cmluZzogcGFyc2VRdWVyeVN0cmluZyxcbiAgICAgIHN0cmluZ2lmeVF1ZXJ5OiBzdHJpbmdpZnlRdWVyeVxuICAgIH0pO1xuXG4gICAgdGhpcy5fdW5saXN0ZW4gPSB0aGlzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChlcnJvciwgc3RhdGUpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBfdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSwgX3RoaXMucHJvcHMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgX3dhcm5pbmcyWydkZWZhdWx0J10obmV4dFByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT47IGl0IHdpbGwgYmUgaWdub3JlZCcpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fdW5saXN0ZW4pIHRoaXMuX3VubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIGxvY2F0aW9uID0gX3N0YXRlLmxvY2F0aW9uO1xuICAgIHZhciByb3V0ZXMgPSBfc3RhdGUucm91dGVzO1xuICAgIHZhciBwYXJhbXMgPSBfc3RhdGUucGFyYW1zO1xuICAgIHZhciBjb21wb25lbnRzID0gX3N0YXRlLmNvbXBvbmVudHM7XG4gICAgdmFyIGNyZWF0ZUVsZW1lbnQgPSB0aGlzLnByb3BzLmNyZWF0ZUVsZW1lbnQ7XG5cbiAgICBpZiAobG9jYXRpb24gPT0gbnVsbCkgcmV0dXJuIG51bGw7IC8vIEFzeW5jIG1hdGNoXG5cbiAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1JvdXRpbmdDb250ZXh0MlsnZGVmYXVsdCddLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgcm91dGVzOiByb3V0ZXMsXG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufSkoX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJvdXRlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCIuL1Byb3BUeXBlc1wiOjEzMSxcIi4vUm91dGVVdGlsc1wiOjEzNSxcIi4vUm91dGluZ0NvbnRleHRcIjoxMzcsXCIuL3VzZVJvdXRlc1wiOjE0NixcImhpc3RvcnkvbGliL2NyZWF0ZUhhc2hIaXN0b3J5XCI6MTUzLFwicmVhY3RcIjoyOTUsXCJ3YXJuaW5nXCI6Mjk2fV0sMTM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gJ2Z1bmN0aW9uJyAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1N1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgJyArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX2dldFJvdXRlUGFyYW1zID0gcmVxdWlyZSgnLi9nZXRSb3V0ZVBhcmFtcycpO1xuXG52YXIgX2dldFJvdXRlUGFyYW1zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFJvdXRlUGFyYW1zKTtcblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyWydkZWZhdWx0J10uUHJvcFR5cGVzO1xudmFyIGFycmF5ID0gX1JlYWN0JFByb3BUeXBlcy5hcnJheTtcbnZhciBmdW5jID0gX1JlYWN0JFByb3BUeXBlcy5mdW5jO1xudmFyIG9iamVjdCA9IF9SZWFjdCRQcm9wVHlwZXMub2JqZWN0O1xuXG4vKipcbiAqIEEgPFJvdXRpbmdDb250ZXh0PiByZW5kZXJzIHRoZSBjb21wb25lbnQgdHJlZSBmb3IgYSBnaXZlbiByb3V0ZXIgc3RhdGVcbiAqIGFuZCBzZXRzIHRoZSBoaXN0b3J5IG9iamVjdCBhbmQgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGluZ0NvbnRleHQgPSAoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRpbmdDb250ZXh0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0aW5nQ29udGV4dCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGluZ0NvbnRleHQpO1xuXG4gICAgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgUm91dGluZ0NvbnRleHQucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb25cbiAgICB9O1xuICB9O1xuXG4gIFJvdXRpbmdDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudCA9PSBudWxsID8gbnVsbCA6IHRoaXMucHJvcHMuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfTtcblxuICBSb3V0aW5nQ29udGV4dC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGVzID0gX3Byb3BzLnJvdXRlcztcbiAgICB2YXIgcGFyYW1zID0gX3Byb3BzLnBhcmFtcztcbiAgICB2YXIgY29tcG9uZW50cyA9IF9wcm9wcy5jb21wb25lbnRzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuXG4gICAgaWYgKGNvbXBvbmVudHMpIHtcbiAgICAgIGVsZW1lbnQgPSBjb21wb25lbnRzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChlbGVtZW50LCBjb21wb25lbnRzLCBpbmRleCkge1xuICAgICAgICBpZiAoY29tcG9uZW50cyA9PSBudWxsKSByZXR1cm4gZWxlbWVudDsgLy8gRG9uJ3QgY3JlYXRlIG5ldyBjaGlsZHJlbiB1c2UgdGhlIGdyYW5kY2hpbGRyZW4uXG5cbiAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2luZGV4XTtcbiAgICAgICAgdmFyIHJvdXRlUGFyYW1zID0gX2dldFJvdXRlUGFyYW1zMlsnZGVmYXVsdCddKHJvdXRlLCBwYXJhbXMpO1xuICAgICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICAgIHJvdXRlUGFyYW1zOiByb3V0ZVBhcmFtcyxcbiAgICAgICAgICByb3V0ZXM6IHJvdXRlc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbGVtZW50KSBwcm9wcy5jaGlsZHJlbiA9IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHt9O1xuXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRzLmhhc093blByb3BlcnR5KGtleSkpIGVsZW1lbnRzW2tleV0gPSBfdGhpcy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNba2V5XSwgcHJvcHMpO1xuICAgICAgICAgIH1yZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLCBwcm9wcyk7XG4gICAgICB9LCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICBfaW52YXJpYW50MlsnZGVmYXVsdCddKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UgfHwgX3JlYWN0MlsnZGVmYXVsdCddLmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLCAnVGhlIHJvb3Qgcm91dGUgbXVzdCByZW5kZXIgYSBzaW5nbGUgZWxlbWVudCcpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFJvdXRpbmdDb250ZXh0LCBudWxsLCBbe1xuICAgIGtleTogJ3Byb3BUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIGhpc3Rvcnk6IG9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlRWxlbWVudDogZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgbG9jYXRpb246IG9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgcm91dGVzOiBhcnJheS5pc1JlcXVpcmVkLFxuICAgICAgcGFyYW1zOiBvYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgIGNvbXBvbmVudHM6IGFycmF5LmlzUmVxdWlyZWRcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSwge1xuICAgIGtleTogJ2RlZmF1bHRQcm9wcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZENvbnRleHRUeXBlcycsXG4gICAgdmFsdWU6IHtcbiAgICAgIGhpc3Rvcnk6IG9iamVjdC5pc1JlcXVpcmVkLFxuICAgICAgbG9jYXRpb246IG9iamVjdC5pc1JlcXVpcmVkXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH1dKTtcblxuICByZXR1cm4gUm91dGluZ0NvbnRleHQ7XG59KShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUm91dGluZ0NvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9nZXRSb3V0ZVBhcmFtc1wiOjE0MSxcImludmFyaWFudFwiOjczLFwicmVhY3RcIjoyOTV9XSwxMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5ydW5FbnRlckhvb2tzID0gcnVuRW50ZXJIb29rcztcbmV4cG9ydHMucnVuTGVhdmVIb29rcyA9IHJ1bkxlYXZlSG9va3M7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG5mdW5jdGlvbiBjcmVhdGVFbnRlckhvb2soaG9vaywgcm91dGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjYWxsYmFjaykge1xuICAgIGhvb2suYXBwbHkocm91dGUsIGFyZ3VtZW50cyk7XG5cbiAgICBpZiAoaG9vay5sZW5ndGggPCAzKSB7XG4gICAgICAvLyBBc3N1bWUgaG9vayBleGVjdXRlcyBzeW5jaHJvbm91c2x5IGFuZFxuICAgICAgLy8gYXV0b21hdGljYWxseSBjYWxsIHRoZSBjYWxsYmFjay5cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRFbnRlckhvb2tzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoaG9va3MsIHJvdXRlKSB7XG4gICAgaWYgKHJvdXRlLm9uRW50ZXIpIGhvb2tzLnB1c2goY3JlYXRlRW50ZXJIb29rKHJvdXRlLm9uRW50ZXIsIHJvdXRlKSk7XG5cbiAgICByZXR1cm4gaG9va3M7XG4gIH0sIFtdKTtcbn1cblxuLyoqXG4gKiBSdW5zIGFsbCBvbkVudGVyIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXJcbiAqIHdpdGggb25FbnRlcihuZXh0U3RhdGUsIHJlcGxhY2VTdGF0ZSwgY2FsbGJhY2spIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHJlZGlyZWN0SW5mbykgd2hlbiBmaW5pc2hlZC4gVGhlIGZpcnN0IGhvb2tcbiAqIHRvIHVzZSByZXBsYWNlU3RhdGUgc2hvcnQtY2lyY3VpdHMgdGhlIGxvb3AuXG4gKlxuICogSWYgYSBob29rIG5lZWRzIHRvIHJ1biBhc3luY2hyb25vdXNseSwgaXQgbWF5IHVzZSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLiBIb3dldmVyLCBkb2luZyBzbyB3aWxsIGNhdXNlIHRoZSB0cmFuc2l0aW9uIHRvIHBhdXNlLFxuICogd2hpY2ggY291bGQgbGVhZCB0byBhIG5vbi1yZXNwb25zaXZlIFVJIGlmIHRoZSBob29rIGlzIHNsb3cuXG4gKi9cblxuZnVuY3Rpb24gcnVuRW50ZXJIb29rcyhyb3V0ZXMsIG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIGhvb2tzID0gZ2V0RW50ZXJIb29rcyhyb3V0ZXMpO1xuXG4gIGlmICghaG9va3MubGVuZ3RoKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcmVkaXJlY3RJbmZvID0gdW5kZWZpbmVkO1xuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkge1xuICAgIHJlZGlyZWN0SW5mbyA9IHsgcGF0aG5hbWU6IHBhdGhuYW1lLCBxdWVyeTogcXVlcnksIHN0YXRlOiBzdGF0ZSB9O1xuICB9XG5cbiAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKGhvb2tzLmxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgaG9va3NbaW5kZXhdKG5leHRTdGF0ZSwgcmVwbGFjZVN0YXRlLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciB8fCByZWRpcmVjdEluZm8pIHtcbiAgICAgICAgZG9uZShlcnJvciwgcmVkaXJlY3RJbmZvKTsgLy8gTm8gbmVlZCB0byBjb250aW51ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBSdW5zIGFsbCBvbkxlYXZlIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXIuXG4gKi9cblxuZnVuY3Rpb24gcnVuTGVhdmVIb29rcyhyb3V0ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChyb3V0ZXNbaV0ub25MZWF2ZSkgcm91dGVzW2ldLm9uTGVhdmUuY2FsbChyb3V0ZXNbaV0pO1xuICB9XG59XG59LHtcIi4vQXN5bmNVdGlsc1wiOjEyM31dLDEzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfUGF0dGVyblV0aWxzID0gcmVxdWlyZSgnLi9QYXR0ZXJuVXRpbHMnKTtcblxuZnVuY3Rpb24gcm91dGVQYXJhbXNDaGFuZ2VkKHJvdXRlLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSkge1xuICBpZiAoIXJvdXRlLnBhdGgpIHJldHVybiBmYWxzZTtcblxuICB2YXIgcGFyYW1OYW1lcyA9IF9QYXR0ZXJuVXRpbHMuZ2V0UGFyYW1OYW1lcyhyb3V0ZS5wYXRoKTtcblxuICByZXR1cm4gcGFyYW1OYW1lcy5zb21lKGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcbiAgICByZXR1cm4gcHJldlN0YXRlLnBhcmFtc1twYXJhbU5hbWVdICE9PSBuZXh0U3RhdGUucGFyYW1zW3BhcmFtTmFtZV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByb3V0ZVF1ZXJ5Q2hhbmdlZChwcmV2U3RhdGUsIG5leHRTdGF0ZSkge1xuICByZXR1cm4gcHJldlN0YXRlLmxvY2F0aW9uLnNlYXJjaCAhPT0gbmV4dFN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB7IGxlYXZlUm91dGVzLCBlbnRlclJvdXRlcyB9IGRldGVybWluZWQgYnlcbiAqIHRoZSBjaGFuZ2UgZnJvbSBwcmV2U3RhdGUgdG8gbmV4dFN0YXRlLiBXZSBsZWF2ZSByb3V0ZXMgaWYgZWl0aGVyXG4gKiAxKSB0aGV5IGFyZSBub3QgaW4gdGhlIG5leHQgc3RhdGUgb3IgMikgdGhleSBhcmUgaW4gdGhlIG5leHQgc3RhdGVcbiAqIGJ1dCB0aGVpciBwYXJhbXMgaGF2ZSBjaGFuZ2VkIChpLmUuIC91c2Vycy8xMjMgPT4gL3VzZXJzLzQ1Nikgb3JcbiAqIDMpIHRoZXkgYXJlIGluIHRoZSBuZXh0IHN0YXRlIGJ1dCB0aGUgcXVlcnkgaGFzIGNoYW5nZWQgXG4gKiAoaS5lLiAvc2VhcmNoP3F1ZXJ5PWZvbyA9PiAvc2VhcmNoP3F1ZXJ5PWJhcilcbiAqXG4gKiBsZWF2ZVJvdXRlcyBhcmUgb3JkZXJlZCBzdGFydGluZyBhdCB0aGUgbGVhZiByb3V0ZSBvZiB0aGUgdHJlZVxuICogd2UncmUgbGVhdmluZyB1cCB0byB0aGUgY29tbW9uIHBhcmVudCByb3V0ZS4gZW50ZXJSb3V0ZXMgYXJlIG9yZGVyZWRcbiAqIGZyb20gdGhlIHRvcCBvZiB0aGUgdHJlZSB3ZSdyZSBlbnRlcmluZyBkb3duIHRvIHRoZSBsZWFmIHJvdXRlLlxuICovXG5mdW5jdGlvbiBjb21wdXRlQ2hhbmdlZFJvdXRlcyhwcmV2U3RhdGUsIG5leHRTdGF0ZSkge1xuICB2YXIgcHJldlJvdXRlcyA9IHByZXZTdGF0ZSAmJiBwcmV2U3RhdGUucm91dGVzO1xuICB2YXIgbmV4dFJvdXRlcyA9IG5leHRTdGF0ZS5yb3V0ZXM7XG5cbiAgdmFyIGxlYXZlUm91dGVzID0gdW5kZWZpbmVkLFxuICAgICAgZW50ZXJSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gIGlmIChwcmV2Um91dGVzKSB7XG4gICAgbGVhdmVSb3V0ZXMgPSBwcmV2Um91dGVzLmZpbHRlcihmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJldHVybiBuZXh0Um91dGVzLmluZGV4T2Yocm91dGUpID09PSAtMSB8fCByb3V0ZVBhcmFtc0NoYW5nZWQocm91dGUsIHByZXZTdGF0ZSwgbmV4dFN0YXRlKSB8fCByb3V0ZVF1ZXJ5Q2hhbmdlZChwcmV2U3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBvbkxlYXZlIGhvb2tzIHN0YXJ0IGF0IHRoZSBsZWFmIHJvdXRlLlxuICAgIGxlYXZlUm91dGVzLnJldmVyc2UoKTtcblxuICAgIGVudGVyUm91dGVzID0gbmV4dFJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICByZXR1cm4gcHJldlJvdXRlcy5pbmRleE9mKHJvdXRlKSA9PT0gLTEgfHwgbGVhdmVSb3V0ZXMuaW5kZXhPZihyb3V0ZSkgIT09IC0xO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGxlYXZlUm91dGVzID0gW107XG4gICAgZW50ZXJSb3V0ZXMgPSBuZXh0Um91dGVzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWF2ZVJvdXRlczogbGVhdmVSb3V0ZXMsXG4gICAgZW50ZXJSb3V0ZXM6IGVudGVyUm91dGVzXG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNvbXB1dGVDaGFuZ2VkUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUGF0dGVyblV0aWxzXCI6MTMwfV0sMTQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9Bc3luY1V0aWxzID0gcmVxdWlyZSgnLi9Bc3luY1V0aWxzJyk7XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudHNGb3JSb3V0ZShsb2NhdGlvbiwgcm91dGUsIGNhbGxiYWNrKSB7XG4gIGlmIChyb3V0ZS5jb21wb25lbnQgfHwgcm91dGUuY29tcG9uZW50cykge1xuICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlLmNvbXBvbmVudCB8fCByb3V0ZS5jb21wb25lbnRzKTtcbiAgfSBlbHNlIGlmIChyb3V0ZS5nZXRDb21wb25lbnQpIHtcbiAgICByb3V0ZS5nZXRDb21wb25lbnQobG9jYXRpb24sIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChyb3V0ZS5nZXRDb21wb25lbnRzKSB7XG4gICAgcm91dGUuZ2V0Q29tcG9uZW50cyhsb2NhdGlvbiwgY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBmZXRjaGVzIGFsbCBjb21wb25lbnRzIG5lZWRlZCBmb3IgdGhlIGdpdmVuIHJvdXRlclxuICogc3RhdGUgYW5kIGNhbGxzIGNhbGxiYWNrKGVycm9yLCBjb21wb25lbnRzKSB3aGVuIGZpbmlzaGVkLlxuICpcbiAqIE5vdGU6IFRoaXMgb3BlcmF0aW9uIG1heSBmaW5pc2ggc3luY2hyb25vdXNseSBpZiBubyByb3V0ZXMgaGF2ZSBhblxuICogYXN5bmNocm9ub3VzIGdldENvbXBvbmVudHMgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRzKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgX0FzeW5jVXRpbHMubWFwQXN5bmMobmV4dFN0YXRlLnJvdXRlcywgZnVuY3Rpb24gKHJvdXRlLCBpbmRleCwgY2FsbGJhY2spIHtcbiAgICBnZXRDb21wb25lbnRzRm9yUm91dGUobmV4dFN0YXRlLmxvY2F0aW9uLCByb3V0ZSwgY2FsbGJhY2spO1xuICB9LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldENvbXBvbmVudHM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9Bc3luY1V0aWxzXCI6MTIzfV0sMTQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGFuIG9iamVjdCBvZiBwYXJhbXMgdGhlIGdpdmVuIHJvdXRlIGNhcmVzIGFib3V0IGZyb21cbiAqIHRoZSBnaXZlbiBwYXJhbXMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBnZXRSb3V0ZVBhcmFtcyhyb3V0ZSwgcGFyYW1zKSB7XG4gIHZhciByb3V0ZVBhcmFtcyA9IHt9O1xuXG4gIGlmICghcm91dGUucGF0aCkgcmV0dXJuIHJvdXRlUGFyYW1zO1xuXG4gIHZhciBwYXJhbU5hbWVzID0gX1BhdHRlcm5VdGlscy5nZXRQYXJhbU5hbWVzKHJvdXRlLnBhdGgpO1xuXG4gIGZvciAodmFyIHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwKSAmJiBwYXJhbU5hbWVzLmluZGV4T2YocCkgIT09IC0xKSByb3V0ZVBhcmFtc1twXSA9IHBhcmFtc1twXTtcbiAgfXJldHVybiByb3V0ZVBhcmFtcztcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0Um91dGVQYXJhbXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9QYXR0ZXJuVXRpbHNcIjoxMzB9XSwxNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyogY29tcG9uZW50cyAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfUm91dGVyMiA9IHJlcXVpcmUoJy4vUm91dGVyJyk7XG5cbnZhciBfUm91dGVyMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlcjIpO1xuXG5leHBvcnRzLlJvdXRlciA9IF9Sb3V0ZXIzWydkZWZhdWx0J107XG5cbnZhciBfTGluazIgPSByZXF1aXJlKCcuL0xpbmsnKTtcblxudmFyIF9MaW5rMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpbmsyKTtcblxuZXhwb3J0cy5MaW5rID0gX0xpbmszWydkZWZhdWx0J107XG5cbnZhciBfSW5kZXhMaW5rMiA9IHJlcXVpcmUoJy4vSW5kZXhMaW5rJyk7XG5cbnZhciBfSW5kZXhMaW5rMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0luZGV4TGluazIpO1xuXG5leHBvcnRzLkluZGV4TGluayA9IF9JbmRleExpbmszWydkZWZhdWx0J107XG5cbi8qIGNvbXBvbmVudHMgKGNvbmZpZ3VyYXRpb24pICovXG5cbnZhciBfSW5kZXhSZWRpcmVjdDIgPSByZXF1aXJlKCcuL0luZGV4UmVkaXJlY3QnKTtcblxudmFyIF9JbmRleFJlZGlyZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0luZGV4UmVkaXJlY3QyKTtcblxuZXhwb3J0cy5JbmRleFJlZGlyZWN0ID0gX0luZGV4UmVkaXJlY3QzWydkZWZhdWx0J107XG5cbnZhciBfSW5kZXhSb3V0ZTIgPSByZXF1aXJlKCcuL0luZGV4Um91dGUnKTtcblxudmFyIF9JbmRleFJvdXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0luZGV4Um91dGUyKTtcblxuZXhwb3J0cy5JbmRleFJvdXRlID0gX0luZGV4Um91dGUzWydkZWZhdWx0J107XG5cbnZhciBfUmVkaXJlY3QyID0gcmVxdWlyZSgnLi9SZWRpcmVjdCcpO1xuXG52YXIgX1JlZGlyZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGlyZWN0Mik7XG5cbmV4cG9ydHMuUmVkaXJlY3QgPSBfUmVkaXJlY3QzWydkZWZhdWx0J107XG5cbnZhciBfUm91dGUyID0gcmVxdWlyZSgnLi9Sb3V0ZScpO1xuXG52YXIgX1JvdXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlMik7XG5cbmV4cG9ydHMuUm91dGUgPSBfUm91dGUzWydkZWZhdWx0J107XG5cbi8qIG1peGlucyAqL1xuXG52YXIgX0hpc3RvcnkyID0gcmVxdWlyZSgnLi9IaXN0b3J5Jyk7XG5cbnZhciBfSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IaXN0b3J5Mik7XG5cbmV4cG9ydHMuSGlzdG9yeSA9IF9IaXN0b3J5M1snZGVmYXVsdCddO1xuXG52YXIgX0xpZmVjeWNsZTIgPSByZXF1aXJlKCcuL0xpZmVjeWNsZScpO1xuXG52YXIgX0xpZmVjeWNsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaWZlY3ljbGUyKTtcblxuZXhwb3J0cy5MaWZlY3ljbGUgPSBfTGlmZWN5Y2xlM1snZGVmYXVsdCddO1xuXG52YXIgX1JvdXRlQ29udGV4dDIgPSByZXF1aXJlKCcuL1JvdXRlQ29udGV4dCcpO1xuXG52YXIgX1JvdXRlQ29udGV4dDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZUNvbnRleHQyKTtcblxuZXhwb3J0cy5Sb3V0ZUNvbnRleHQgPSBfUm91dGVDb250ZXh0M1snZGVmYXVsdCddO1xuXG4vKiB1dGlscyAqL1xuXG52YXIgX3VzZVJvdXRlczIgPSByZXF1aXJlKCcuL3VzZVJvdXRlcycpO1xuXG52YXIgX3VzZVJvdXRlczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXMyKTtcblxuZXhwb3J0cy51c2VSb3V0ZXMgPSBfdXNlUm91dGVzM1snZGVmYXVsdCddO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxuZXhwb3J0cy5jcmVhdGVSb3V0ZXMgPSBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXM7XG5cbnZhciBfUm91dGluZ0NvbnRleHQyID0gcmVxdWlyZSgnLi9Sb3V0aW5nQ29udGV4dCcpO1xuXG52YXIgX1JvdXRpbmdDb250ZXh0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRpbmdDb250ZXh0Mik7XG5cbmV4cG9ydHMuUm91dGluZ0NvbnRleHQgPSBfUm91dGluZ0NvbnRleHQzWydkZWZhdWx0J107XG5cbnZhciBfUHJvcFR5cGVzMiA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbnZhciBfUHJvcFR5cGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3BUeXBlczIpO1xuXG5leHBvcnRzLlByb3BUeXBlcyA9IF9Qcm9wVHlwZXMzWydkZWZhdWx0J107XG5cbnZhciBfbWF0Y2gyID0gcmVxdWlyZSgnLi9tYXRjaCcpO1xuXG52YXIgX21hdGNoMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoMik7XG5cbmV4cG9ydHMubWF0Y2ggPSBfbWF0Y2gzWydkZWZhdWx0J107XG5cbnZhciBfUm91dGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlcjIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBfUm91dGVyNFsnZGVmYXVsdCddO1xufSx7XCIuL0hpc3RvcnlcIjoxMjQsXCIuL0luZGV4TGlua1wiOjEyNSxcIi4vSW5kZXhSZWRpcmVjdFwiOjEyNixcIi4vSW5kZXhSb3V0ZVwiOjEyNyxcIi4vTGlmZWN5Y2xlXCI6MTI4LFwiLi9MaW5rXCI6MTI5LFwiLi9Qcm9wVHlwZXNcIjoxMzEsXCIuL1JlZGlyZWN0XCI6MTMyLFwiLi9Sb3V0ZVwiOjEzMyxcIi4vUm91dGVDb250ZXh0XCI6MTM0LFwiLi9Sb3V0ZVV0aWxzXCI6MTM1LFwiLi9Sb3V0ZXJcIjoxMzYsXCIuL1JvdXRpbmdDb250ZXh0XCI6MTM3LFwiLi9tYXRjaFwiOjE0NCxcIi4vdXNlUm91dGVzXCI6MTQ2fV0sMTQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gZGVlcEVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwIGluIGEpIHtcbiAgICAgIGlmIChhLmhhc093blByb3BlcnR5KHApICYmICghYi5oYXNPd25Qcm9wZXJ0eShwKSB8fCAhZGVlcEVxdWFsKGFbcF0sIGJbcF0pKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1yZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cblxuZnVuY3Rpb24gcGFyYW1zQXJlQWN0aXZlKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBhY3RpdmVQYXJhbXMpIHtcbiAgcmV0dXJuIHBhcmFtTmFtZXMuZXZlcnkoZnVuY3Rpb24gKHBhcmFtTmFtZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhcmFtVmFsdWVzW2luZGV4XSkgPT09IFN0cmluZyhhY3RpdmVQYXJhbXNbcGFyYW1OYW1lXSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRNYXRjaGluZ1JvdXRlKHBhdGhuYW1lLCBhY3RpdmVSb3V0ZXMsIGFjdGl2ZVBhcmFtcykge1xuICB2YXIgcm91dGUgPSB1bmRlZmluZWQsXG4gICAgICBwYXR0ZXJuID0gdW5kZWZpbmVkLFxuICAgICAgYmFzZW5hbWUgPSAnJztcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFjdGl2ZVJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHJvdXRlID0gYWN0aXZlUm91dGVzW2ldO1xuICAgIHBhdHRlcm4gPSByb3V0ZS5wYXRoIHx8ICcnO1xuXG4gICAgaWYgKHBhdHRlcm4uY2hhckF0KDApICE9PSAnLycpIHBhdHRlcm4gPSBiYXNlbmFtZS5yZXBsYWNlKC9cXC8qJC8sICcvJykgKyBwYXR0ZXJuOyAvLyBSZWxhdGl2ZSBwYXRocyBidWlsZCBvbiB0aGUgcGFyZW50J3MgcGF0aC5cblxuICAgIHZhciBfbWF0Y2hQYXR0ZXJuID0gX1BhdHRlcm5VdGlscy5tYXRjaFBhdHRlcm4ocGF0dGVybiwgcGF0aG5hbWUpO1xuXG4gICAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gX21hdGNoUGF0dGVybi5yZW1haW5pbmdQYXRobmFtZTtcbiAgICB2YXIgcGFyYW1OYW1lcyA9IF9tYXRjaFBhdHRlcm4ucGFyYW1OYW1lcztcbiAgICB2YXIgcGFyYW1WYWx1ZXMgPSBfbWF0Y2hQYXR0ZXJuLnBhcmFtVmFsdWVzO1xuXG4gICAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lID09PSAnJyAmJiBwYXJhbXNBcmVBY3RpdmUocGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMsIGFjdGl2ZVBhcmFtcykpIHJldHVybiByb3V0ZTtcblxuICAgIGJhc2VuYW1lID0gcGF0dGVybjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aG5hbWUgbWF0Y2hlcyB0aGUgYWN0aXZlIHJvdXRlc1xuICogYW5kIHBhcmFtcy5cbiAqL1xuZnVuY3Rpb24gcm91dGVJc0FjdGl2ZShwYXRobmFtZSwgYWN0aXZlUm91dGVzLCBhY3RpdmVQYXJhbXMsIGluZGV4T25seSkge1xuICB2YXIgcm91dGUgPSBnZXRNYXRjaGluZ1JvdXRlKHBhdGhuYW1lLCBhY3RpdmVSb3V0ZXMsIGFjdGl2ZVBhcmFtcyk7XG5cbiAgaWYgKHJvdXRlID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoaW5kZXhPbmx5KSByZXR1cm4gYWN0aXZlUm91dGVzLmxlbmd0aCA+IDEgJiYgYWN0aXZlUm91dGVzW2FjdGl2ZVJvdXRlcy5sZW5ndGggLSAxXSA9PT0gcm91dGUuaW5kZXhSb3V0ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYWxsIGtleS92YWx1ZSBwYWlycyBpbiB0aGUgZ2l2ZW4gcXVlcnkgYXJlXG4gKiBjdXJyZW50bHkgYWN0aXZlLlxuICovXG5mdW5jdGlvbiBxdWVyeUlzQWN0aXZlKHF1ZXJ5LCBhY3RpdmVRdWVyeSkge1xuICBpZiAoYWN0aXZlUXVlcnkgPT0gbnVsbCkgcmV0dXJuIHF1ZXJ5ID09IG51bGw7XG5cbiAgaWYgKHF1ZXJ5ID09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBkZWVwRXF1YWwocXVlcnksIGFjdGl2ZVF1ZXJ5KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSA8TGluaz4gdG8gdGhlIGdpdmVuIHBhdGhuYW1lL3F1ZXJ5IGNvbWJpbmF0aW9uIGlzXG4gKiBjdXJyZW50bHkgYWN0aXZlLlxuICovXG5mdW5jdGlvbiBpc0FjdGl2ZShwYXRobmFtZSwgcXVlcnksIGluZGV4T25seSwgbG9jYXRpb24sIHJvdXRlcywgcGFyYW1zKSB7XG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFyb3V0ZUlzQWN0aXZlKHBhdGhuYW1lLCByb3V0ZXMsIHBhcmFtcywgaW5kZXhPbmx5KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBxdWVyeUlzQWN0aXZlKHF1ZXJ5LCBsb2NhdGlvbi5xdWVyeSk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzQWN0aXZlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUGF0dGVyblV0aWxzXCI6MTMwfV0sMTQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX2hpc3RvcnlMaWJDcmVhdGVNZW1vcnlIaXN0b3J5ID0gcmVxdWlyZSgnaGlzdG9yeS9saWIvY3JlYXRlTWVtb3J5SGlzdG9yeScpO1xuXG52YXIgX2hpc3RvcnlMaWJDcmVhdGVNZW1vcnlIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hpc3RvcnlMaWJDcmVhdGVNZW1vcnlIaXN0b3J5KTtcblxudmFyIF9oaXN0b3J5TGliVXNlQmFzZW5hbWUgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi91c2VCYXNlbmFtZScpO1xuXG52YXIgX2hpc3RvcnlMaWJVc2VCYXNlbmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oaXN0b3J5TGliVXNlQmFzZW5hbWUpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF91c2VSb3V0ZXMgPSByZXF1aXJlKCcuL3VzZVJvdXRlcycpO1xuXG52YXIgX3VzZVJvdXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXMpO1xuXG52YXIgY3JlYXRlSGlzdG9yeSA9IF91c2VSb3V0ZXMyWydkZWZhdWx0J10oX2hpc3RvcnlMaWJVc2VCYXNlbmFtZTJbJ2RlZmF1bHQnXShfaGlzdG9yeUxpYkNyZWF0ZU1lbW9yeUhpc3RvcnkyWydkZWZhdWx0J10pKTtcblxuLyoqXG4gKiBBIGhpZ2gtbGV2ZWwgQVBJIHRvIGJlIHVzZWQgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIG1hdGNoZXMgYSBsb2NhdGlvbiB0byBhIHNldCBvZiByb3V0ZXMgYW5kIGNhbGxzXG4gKiBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgcmVuZGVyUHJvcHMpIHdoZW4gZmluaXNoZWQuXG4gKlxuICogTm90ZTogWW91IHByb2JhYmx5IGRvbid0IHdhbnQgdG8gdXNlIHRoaXMgaW4gYSBicm93c2VyLiBVc2VcbiAqIHRoZSBoaXN0b3J5Lmxpc3RlbiBBUEkgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2goX3JlZiwgY2FsbGJhY2spIHtcbiAgdmFyIHJvdXRlcyA9IF9yZWYucm91dGVzO1xuICB2YXIgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uO1xuICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IF9yZWYucGFyc2VRdWVyeVN0cmluZztcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gX3JlZi5zdHJpbmdpZnlRdWVyeTtcbiAgdmFyIGJhc2VuYW1lID0gX3JlZi5iYXNlbmFtZTtcblxuICBfaW52YXJpYW50MlsnZGVmYXVsdCddKGxvY2F0aW9uLCAnbWF0Y2ggbmVlZHMgYSBsb2NhdGlvbicpO1xuXG4gIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh7XG4gICAgcm91dGVzOiBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMocm91dGVzKSxcbiAgICBwYXJzZVF1ZXJ5U3RyaW5nOiBwYXJzZVF1ZXJ5U3RyaW5nLFxuICAgIHN0cmluZ2lmeVF1ZXJ5OiBzdHJpbmdpZnlRdWVyeSxcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVcbiAgfSk7XG5cbiAgLy8gQWxsb3cgbWF0Y2goeyBsb2NhdGlvbjogJy90aGUvcGF0aCcsIC4uLiB9KVxuICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKTtcblxuICBoaXN0b3J5Lm1hdGNoKGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIHJlZGlyZWN0TG9jYXRpb24sIG5leHRTdGF0ZSkge1xuICAgIGNhbGxiYWNrKGVycm9yLCByZWRpcmVjdExvY2F0aW9uLCBuZXh0U3RhdGUgJiYgX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfSk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG1hdGNoO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUm91dGVVdGlsc1wiOjEzNSxcIi4vdXNlUm91dGVzXCI6MTQ2LFwiaGlzdG9yeS9saWIvY3JlYXRlTWVtb3J5SGlzdG9yeVwiOjE1NSxcImhpc3RvcnkvbGliL3VzZUJhc2VuYW1lXCI6MTU4LFwiaW52YXJpYW50XCI6NzN9XSwxNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX0FzeW5jVXRpbHMgPSByZXF1aXJlKCcuL0FzeW5jVXRpbHMnKTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxuZnVuY3Rpb24gZ2V0Q2hpbGRSb3V0ZXMocm91dGUsIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICBpZiAocm91dGUuY2hpbGRSb3V0ZXMpIHtcbiAgICBjYWxsYmFjayhudWxsLCByb3V0ZS5jaGlsZFJvdXRlcyk7XG4gIH0gZWxzZSBpZiAocm91dGUuZ2V0Q2hpbGRSb3V0ZXMpIHtcbiAgICByb3V0ZS5nZXRDaGlsZFJvdXRlcyhsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBjaGlsZFJvdXRlcykge1xuICAgICAgY2FsbGJhY2soZXJyb3IsICFlcnJvciAmJiBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMoY2hpbGRSb3V0ZXMpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4Um91dGUocm91dGUsIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICBpZiAocm91dGUuaW5kZXhSb3V0ZSkge1xuICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlLmluZGV4Um91dGUpO1xuICB9IGVsc2UgaWYgKHJvdXRlLmdldEluZGV4Um91dGUpIHtcbiAgICByb3V0ZS5nZXRJbmRleFJvdXRlKGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4Um91dGUpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCAhZXJyb3IgJiYgX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVzKGluZGV4Um91dGUpWzBdKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnblBhcmFtcyhwYXJhbXMsIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKSB7XG4gIHJldHVybiBwYXJhbU5hbWVzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChwYXJhbXMsIHBhcmFtTmFtZSwgaW5kZXgpIHtcbiAgICB2YXIgcGFyYW1WYWx1ZSA9IHBhcmFtVmFsdWVzICYmIHBhcmFtVmFsdWVzW2luZGV4XTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtc1twYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0udW5zaGlmdChwYXJhbVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtTmFtZSBpbiBwYXJhbXMpIHtcbiAgICAgIHBhcmFtc1twYXJhbU5hbWVdID0gW3BhcmFtVmFsdWUsIHBhcmFtc1twYXJhbU5hbWVdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBwYXJhbVZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sIHBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcykge1xuICByZXR1cm4gYXNzaWduUGFyYW1zKHt9LCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVEZWVwKGJhc2VuYW1lLCByb3V0ZSwgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIHZhciBwYXR0ZXJuID0gcm91dGUucGF0aCB8fCAnJztcblxuICBpZiAocGF0dGVybi5jaGFyQXQoMCkgIT09ICcvJykgcGF0dGVybiA9IGJhc2VuYW1lLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIHBhdHRlcm47IC8vIFJlbGF0aXZlIHBhdGhzIGJ1aWxkIG9uIHRoZSBwYXJlbnQncyBwYXRoLlxuXG4gIHZhciBfbWF0Y2hQYXR0ZXJuID0gX1BhdHRlcm5VdGlscy5tYXRjaFBhdHRlcm4ocGF0dGVybiwgbG9jYXRpb24ucGF0aG5hbWUpO1xuXG4gIHZhciByZW1haW5pbmdQYXRobmFtZSA9IF9tYXRjaFBhdHRlcm4ucmVtYWluaW5nUGF0aG5hbWU7XG4gIHZhciBwYXJhbU5hbWVzID0gX21hdGNoUGF0dGVybi5wYXJhbU5hbWVzO1xuICB2YXIgcGFyYW1WYWx1ZXMgPSBfbWF0Y2hQYXR0ZXJuLnBhcmFtVmFsdWVzO1xuXG4gIHZhciBpc0V4YWN0TWF0Y2ggPSByZW1haW5pbmdQYXRobmFtZSA9PT0gJyc7XG5cbiAgaWYgKGlzRXhhY3RNYXRjaCAmJiByb3V0ZS5wYXRoKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgcm91dGVzOiBbcm91dGVdLFxuICAgICAgICBwYXJhbXM6IGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcylcbiAgICAgIH07XG5cbiAgICAgIGdldEluZGV4Um91dGUocm91dGUsIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4Um91dGUpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpbmRleFJvdXRlKSBtYXRjaC5yb3V0ZXMucHVzaChpbmRleFJvdXRlKTtcblxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1hdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfSBlbHNlIGlmIChyZW1haW5pbmdQYXRobmFtZSAhPSBudWxsIHx8IHJvdXRlLmNoaWxkUm91dGVzKSB7XG4gICAgLy8gRWl0aGVyIGEpIHRoaXMgcm91dGUgbWF0Y2hlZCBhdCBsZWFzdCBzb21lIG9mIHRoZSBwYXRoIG9yIGIpXG4gICAgLy8gd2UgZG9uJ3QgaGF2ZSB0byBsb2FkIHRoaXMgcm91dGUncyBjaGlsZHJlbiBhc3luY2hyb25vdXNseS4gSW5cbiAgICAvLyBlaXRoZXIgY2FzZSBjb250aW51ZSBjaGVja2luZyBmb3IgbWF0Y2hlcyBpbiB0aGUgc3VidHJlZS5cbiAgICBnZXRDaGlsZFJvdXRlcyhyb3V0ZSwgbG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgY2hpbGRSb3V0ZXMpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkUm91dGVzKSB7XG4gICAgICAgIC8vIENoZWNrIHRoZSBjaGlsZCByb3V0ZXMgdG8gc2VlIGlmIGFueSBvZiB0aGVtIG1hdGNoLlxuICAgICAgICBtYXRjaFJvdXRlcyhjaGlsZFJvdXRlcywgbG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgbWF0Y2gpIHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAvLyBBIGNoaWxkIHJvdXRlIG1hdGNoZWQhIEF1Z21lbnQgdGhlIG1hdGNoIGFuZCBwYXNzIGl0IHVwIHRoZSBzdGFjay5cbiAgICAgICAgICAgIG1hdGNoLnJvdXRlcy51bnNoaWZ0KHJvdXRlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1hdGNoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHBhdHRlcm4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgbWF0Y2hlcyB0aGUgZ2l2ZW4gbG9jYXRpb24gdG8gYSBzZXQgb2Ygcm91dGVzIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHN0YXRlKSB3aGVuIGZpbmlzaGVkLiBUaGUgc3RhdGUgb2JqZWN0IHdpbGwgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gcm91dGVzICAgICAgIEFuIGFycmF5IG9mIHJvdXRlcyB0aGF0IG1hdGNoZWQsIGluIGhpZXJhcmNoaWNhbCBvcmRlclxuICogLSBwYXJhbXMgICAgICAgQW4gb2JqZWN0IG9mIFVSTCBwYXJhbWV0ZXJzXG4gKlxuICogTm90ZTogVGhpcyBvcGVyYXRpb24gbWF5IGZpbmlzaCBzeW5jaHJvbm91c2x5IGlmIG5vIHJvdXRlcyBoYXZlIGFuXG4gKiBhc3luY2hyb25vdXMgZ2V0Q2hpbGRSb3V0ZXMgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgYmFzZW5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyAnJyA6IGFyZ3VtZW50c1szXTtcblxuICBfQXN5bmNVdGlscy5sb29wQXN5bmMocm91dGVzLmxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgbWF0Y2hSb3V0ZURlZXAoYmFzZW5hbWUsIHJvdXRlc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIG1hdGNoKSB7XG4gICAgICBpZiAoZXJyb3IgfHwgbWF0Y2gpIHtcbiAgICAgICAgZG9uZShlcnJvciwgbWF0Y2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG1hdGNoUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vQXN5bmNVdGlsc1wiOjEyMyxcIi4vUGF0dGVyblV0aWxzXCI6MTMwLFwiLi9Sb3V0ZVV0aWxzXCI6MTM1fV0sMTQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2hpc3RvcnlMaWJBY3Rpb25zID0gcmVxdWlyZSgnaGlzdG9yeS9saWIvQWN0aW9ucycpO1xuXG52YXIgX2hpc3RvcnlMaWJVc2VRdWVyaWVzID0gcmVxdWlyZSgnaGlzdG9yeS9saWIvdXNlUXVlcmllcycpO1xuXG52YXIgX2hpc3RvcnlMaWJVc2VRdWVyaWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hpc3RvcnlMaWJVc2VRdWVyaWVzKTtcblxudmFyIF9jb21wdXRlQ2hhbmdlZFJvdXRlczIgPSByZXF1aXJlKCcuL2NvbXB1dGVDaGFuZ2VkUm91dGVzJyk7XG5cbnZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcHV0ZUNoYW5nZWRSb3V0ZXMyKTtcblxudmFyIF9UcmFuc2l0aW9uVXRpbHMgPSByZXF1aXJlKCcuL1RyYW5zaXRpb25VdGlscycpO1xuXG52YXIgX2lzQWN0aXZlMiA9IHJlcXVpcmUoJy4vaXNBY3RpdmUnKTtcblxudmFyIF9pc0FjdGl2ZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0FjdGl2ZTIpO1xuXG52YXIgX2dldENvbXBvbmVudHMgPSByZXF1aXJlKCcuL2dldENvbXBvbmVudHMnKTtcblxudmFyIF9nZXRDb21wb25lbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbXBvbmVudHMpO1xuXG52YXIgX21hdGNoUm91dGVzID0gcmVxdWlyZSgnLi9tYXRjaFJvdXRlcycpO1xuXG52YXIgX21hdGNoUm91dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoUm91dGVzKTtcblxuZnVuY3Rpb24gaGFzQW55UHJvcGVydGllcyhvYmplY3QpIHtcbiAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KHApKSByZXR1cm4gdHJ1ZTtcbiAgfXJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNyZWF0ZUhpc3RvcnkgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjcmVhdGVcbiAqIGhpc3Rvcnkgb2JqZWN0cyB0aGF0IGtub3cgYWJvdXQgcm91dGluZy5cbiAqXG4gKiBFbmhhbmNlcyBoaXN0b3J5IG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIG1ldGhvZHM6XG4gKlxuICogLSBsaXN0ZW4oKGVycm9yLCBuZXh0U3RhdGUpID0+IHt9KVxuICogLSBsaXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUocm91dGUsIChuZXh0TG9jYXRpb24pID0+IHt9KVxuICogLSBtYXRjaChsb2NhdGlvbiwgKGVycm9yLCByZWRpcmVjdExvY2F0aW9uLCBuZXh0U3RhdGUpID0+IHt9KVxuICogLSBpc0FjdGl2ZShwYXRobmFtZSwgcXVlcnksIGluZGV4T25seT1mYWxzZSlcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVzKGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgIHZhciByb3V0ZXMgPSBvcHRpb25zLnJvdXRlcztcblxuICAgIHZhciBoaXN0b3J5T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ3JvdXRlcyddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gX2hpc3RvcnlMaWJVc2VRdWVyaWVzMlsnZGVmYXVsdCddKGNyZWF0ZUhpc3RvcnkpKGhpc3RvcnlPcHRpb25zKTtcbiAgICB2YXIgc3RhdGUgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGlzQWN0aXZlKHBhdGhuYW1lLCBxdWVyeSkge1xuICAgICAgdmFyIGluZGV4T25seSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzJdO1xuXG4gICAgICByZXR1cm4gX2lzQWN0aXZlM1snZGVmYXVsdCddKHBhdGhuYW1lLCBxdWVyeSwgaW5kZXhPbmx5LCBzdGF0ZS5sb2NhdGlvbiwgc3RhdGUucm91dGVzLCBzdGF0ZS5wYXJhbXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uRnJvbVJlZGlyZWN0SW5mbyhfcmVmKSB7XG4gICAgICB2YXIgcGF0aG5hbWUgPSBfcmVmLnBhdGhuYW1lO1xuICAgICAgdmFyIHF1ZXJ5ID0gX3JlZi5xdWVyeTtcbiAgICAgIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkuY3JlYXRlUGF0aChwYXRobmFtZSwgcXVlcnkpLCBzdGF0ZSwgX2hpc3RvcnlMaWJBY3Rpb25zLlJFUExBQ0UpO1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsTmV4dFN0YXRlID0gdW5kZWZpbmVkO1xuXG4gICAgZnVuY3Rpb24gbWF0Y2gobG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICBpZiAocGFydGlhbE5leHRTdGF0ZSAmJiBwYXJ0aWFsTmV4dFN0YXRlLmxvY2F0aW9uID09PSBsb2NhdGlvbikge1xuICAgICAgICAvLyBDb250aW51ZSBmcm9tIHdoZXJlIHdlIGxlZnQgb2ZmLlxuICAgICAgICBmaW5pc2hNYXRjaChwYXJ0aWFsTmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfbWF0Y2hSb3V0ZXMyWydkZWZhdWx0J10ocm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZSkge1xuICAgICAgICAgICAgZmluaXNoTWF0Y2goX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBsb2NhdGlvbjogbG9jYXRpb24gfSksIGNhbGxiYWNrKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmlzaE1hdGNoKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMgPSBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMzWydkZWZhdWx0J10oc3RhdGUsIG5leHRTdGF0ZSk7XG5cbiAgICAgIHZhciBsZWF2ZVJvdXRlcyA9IF9jb21wdXRlQ2hhbmdlZFJvdXRlcy5sZWF2ZVJvdXRlcztcbiAgICAgIHZhciBlbnRlclJvdXRlcyA9IF9jb21wdXRlQ2hhbmdlZFJvdXRlcy5lbnRlclJvdXRlcztcblxuICAgICAgX1RyYW5zaXRpb25VdGlscy5ydW5MZWF2ZUhvb2tzKGxlYXZlUm91dGVzKTtcblxuICAgICAgX1RyYW5zaXRpb25VdGlscy5ydW5FbnRlckhvb2tzKGVudGVyUm91dGVzLCBuZXh0U3RhdGUsIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RJbmZvKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWRpcmVjdEluZm8pIHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBjcmVhdGVMb2NhdGlvbkZyb21SZWRpcmVjdEluZm8ocmVkaXJlY3RJbmZvKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVE9ETzogRmV0Y2ggY29tcG9uZW50cyBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgICAgICAgIF9nZXRDb21wb25lbnRzMlsnZGVmYXVsdCddKG5leHRTdGF0ZSwgZnVuY3Rpb24gKGVycm9yLCBjb21wb25lbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogTWFrZSBtYXRjaCBhIHB1cmUgZnVuY3Rpb24gYW5kIGhhdmUgc29tZSBvdGhlciBBUElcbiAgICAgICAgICAgICAgLy8gZm9yIFwibWF0Y2ggYW5kIHVwZGF0ZSBzdGF0ZVwiLlxuICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBudWxsLCBzdGF0ZSA9IF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIHsgY29tcG9uZW50czogY29tcG9uZW50cyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBSb3V0ZUd1aWQgPSAxO1xuXG4gICAgZnVuY3Rpb24gZ2V0Um91dGVJRChyb3V0ZSkge1xuICAgICAgcmV0dXJuIHJvdXRlLl9faWRfXyB8fCAocm91dGUuX19pZF9fID0gUm91dGVHdWlkKyspO1xuICAgIH1cblxuICAgIHZhciBSb3V0ZUhvb2tzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRSb3V0ZUhvb2tzRm9yUm91dGVzKHJvdXRlcykge1xuICAgICAgcmV0dXJuIHJvdXRlcy5yZWR1Y2UoZnVuY3Rpb24gKGhvb2tzLCByb3V0ZSkge1xuICAgICAgICBob29rcy5wdXNoLmFwcGx5KGhvb2tzLCBSb3V0ZUhvb2tzW2dldFJvdXRlSUQocm91dGUpXSk7XG4gICAgICAgIHJldHVybiBob29rcztcbiAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uSG9vayhsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgIF9tYXRjaFJvdXRlczJbJ2RlZmF1bHQnXShyb3V0ZXMsIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIG5leHRTdGF0ZSkge1xuICAgICAgICBpZiAobmV4dFN0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAvLyBUT0RPOiBXZSBkaWRuJ3QgYWN0dWFsbHkgbWF0Y2ggYW55dGhpbmcsIGJ1dCBoYW5nXG4gICAgICAgICAgLy8gb250byBlcnJvci9uZXh0U3RhdGUgc28gd2UgZG9uJ3QgaGF2ZSB0byBtYXRjaFJvdXRlc1xuICAgICAgICAgIC8vIGFnYWluIGluIHRoZSBsaXN0ZW4gY2FsbGJhY2suXG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWNoZSBzb21lIHN0YXRlIGhlcmUgc28gd2UgZG9uJ3QgaGF2ZSB0b1xuICAgICAgICAvLyBtYXRjaFJvdXRlcygpIGFnYWluIGluIHRoZSBsaXN0ZW4gY2FsbGJhY2suXG4gICAgICAgIHBhcnRpYWxOZXh0U3RhdGUgPSBfZXh0ZW5kcyh7fSwgbmV4dFN0YXRlLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcblxuICAgICAgICB2YXIgaG9va3MgPSBnZXRSb3V0ZUhvb2tzRm9yUm91dGVzKF9jb21wdXRlQ2hhbmdlZFJvdXRlczNbJ2RlZmF1bHQnXShzdGF0ZSwgbmV4dFN0YXRlKS5sZWF2ZVJvdXRlcyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhvb2tzLmxlbmd0aDsgcmVzdWx0ID09IG51bGwgJiYgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgLy8gUGFzc2luZyB0aGUgbG9jYXRpb24gYXJnIGhlcmUgaW5kaWNhdGVzIHRvXG4gICAgICAgICAgLy8gdGhlIHVzZXIgdGhhdCB0aGlzIGlzIGEgdHJhbnNpdGlvbiBob29rLlxuICAgICAgICAgIHJlc3VsdCA9IGhvb2tzW2ldKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiZWZvcmVVbmxvYWRIb29rKCkge1xuICAgICAgLy8gU3luY2hyb25vdXNseSBjaGVjayB0byBzZWUgaWYgYW55IHJvdXRlIGhvb2tzIHdhbnRcbiAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGN1cnJlbnQgd2luZG93L3RhYiBmcm9tIGNsb3NpbmcuXG4gICAgICBpZiAoc3RhdGUucm91dGVzKSB7XG4gICAgICAgIHZhciBob29rcyA9IGdldFJvdXRlSG9va3NGb3JSb3V0ZXMoc3RhdGUucm91dGVzKTtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhvb2tzLmxlbmd0aDsgdHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnICYmIGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIC8vIFBhc3Npbmcgbm8gYXJncyBpbmRpY2F0ZXMgdG8gdGhlIHVzZXIgdGhhdCB0aGlzIGlzIGFcbiAgICAgICAgICAvLyBiZWZvcmV1bmxvYWQgaG9vay4gV2UgZG9uJ3Qga25vdyB0aGUgbmV4dCBsb2NhdGlvbi5cbiAgICAgICAgICBtZXNzYWdlID0gaG9va3NbaV0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmxpc3RlbkJlZm9yZSA9IHVuZGVmaW5lZCxcbiAgICAgICAgdW5saXN0ZW5CZWZvcmVVbmxvYWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgdGhlIGdpdmVuIGhvb2sgZnVuY3Rpb24gdG8gcnVuIGJlZm9yZSBsZWF2aW5nIHRoZSBnaXZlbiByb3V0ZS5cbiAgICAgKlxuICAgICAqIER1cmluZyBhIG5vcm1hbCB0cmFuc2l0aW9uLCB0aGUgaG9vayBmdW5jdGlvbiByZWNlaXZlcyB0aGUgbmV4dCBsb2NhdGlvblxuICAgICAqIGFzIGl0cyBvbmx5IGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBlaXRoZXIgYSkgYSBwcm9tcHQgbWVzc2FnZSB0byBzaG93XG4gICAgICogdGhlIHVzZXIsIHRvIG1ha2Ugc3VyZSB0aGV5IHdhbnQgdG8gbGVhdmUgdGhlIHBhZ2Ugb3IgYikgZmFsc2UsIHRvIHByZXZlbnRcbiAgICAgKiB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIER1cmluZyB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IChpbiBicm93c2VycykgdGhlIGhvb2sgcmVjZWl2ZXMgbm8gYXJndW1lbnRzLlxuICAgICAqIEluIHRoaXMgY2FzZSBpdCBtdXN0IHJldHVybiBhIHByb21wdCBtZXNzYWdlIHRvIHByZXZlbnQgdGhlIHRyYW5zaXRpb24uXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byB1bmJpbmQgdGhlIGxpc3RlbmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZShyb3V0ZSwgaG9vaykge1xuICAgICAgLy8gVE9ETzogV2FybiBpZiB0aGV5IHJlZ2lzdGVyIGZvciBhIHJvdXRlIHRoYXQgaXNuJ3QgY3VycmVudGx5XG4gICAgICAvLyBhY3RpdmUuIFRoZXkncmUgcHJvYmFibHkgZG9pbmcgc29tZXRoaW5nIHdyb25nLCBsaWtlIHJlLWNyZWF0aW5nXG4gICAgICAvLyByb3V0ZSBvYmplY3RzIG9uIGV2ZXJ5IGxvY2F0aW9uIGNoYW5nZS5cbiAgICAgIHZhciByb3V0ZUlEID0gZ2V0Um91dGVJRChyb3V0ZSk7XG4gICAgICB2YXIgaG9va3MgPSBSb3V0ZUhvb2tzW3JvdXRlSURdO1xuXG4gICAgICBpZiAoaG9va3MgPT0gbnVsbCkge1xuICAgICAgICB2YXIgdGhlcmVXZXJlTm9Sb3V0ZUhvb2tzID0gIWhhc0FueVByb3BlcnRpZXMoUm91dGVIb29rcyk7XG5cbiAgICAgICAgaG9va3MgPSBSb3V0ZUhvb2tzW3JvdXRlSURdID0gW2hvb2tdO1xuXG4gICAgICAgIGlmICh0aGVyZVdlcmVOb1JvdXRlSG9va3MpIHtcbiAgICAgICAgICAvLyBzZXR1cCB0cmFuc2l0aW9uICYgYmVmb3JldW5sb2FkIGhvb2tzXG4gICAgICAgICAgdW5saXN0ZW5CZWZvcmUgPSBoaXN0b3J5Lmxpc3RlbkJlZm9yZSh0cmFuc2l0aW9uSG9vayk7XG5cbiAgICAgICAgICBpZiAoaGlzdG9yeS5saXN0ZW5CZWZvcmVVbmxvYWQpIHVubGlzdGVuQmVmb3JlVW5sb2FkID0gaGlzdG9yeS5saXN0ZW5CZWZvcmVVbmxvYWQoYmVmb3JlVW5sb2FkSG9vayk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaG9va3MuaW5kZXhPZihob29rKSA9PT0gLTEpIHtcbiAgICAgICAgaG9va3MucHVzaChob29rKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gUm91dGVIb29rc1tyb3V0ZUlEXTtcblxuICAgICAgICBpZiAoaG9va3MgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBuZXdIb29rcyA9IGhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAobmV3SG9va3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgUm91dGVIb29rc1tyb3V0ZUlEXTtcblxuICAgICAgICAgICAgaWYgKCFoYXNBbnlQcm9wZXJ0aWVzKFJvdXRlSG9va3MpKSB7XG4gICAgICAgICAgICAgIC8vIHRlYXJkb3duIHRyYW5zaXRpb24gJiBiZWZvcmV1bmxvYWQgaG9va3NcbiAgICAgICAgICAgICAgaWYgKHVubGlzdGVuQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5CZWZvcmUoKTtcbiAgICAgICAgICAgICAgICB1bmxpc3RlbkJlZm9yZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodW5saXN0ZW5CZWZvcmVVbmxvYWQpIHtcbiAgICAgICAgICAgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCgpO1xuICAgICAgICAgICAgICAgIHVubGlzdGVuQmVmb3JlVW5sb2FkID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSb3V0ZUhvb2tzW3JvdXRlSURdID0gbmV3SG9va3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIEFQSSBmb3Igc3RhdGVmdWwgZW52aXJvbm1lbnRzLiBBcyB0aGUgbG9jYXRpb25cbiAgICAgKiBjaGFuZ2VzLCB3ZSB1cGRhdGUgc3RhdGUgYW5kIGNhbGwgdGhlIGxpc3RlbmVyLiBXZSBjYW4gYWxzb1xuICAgICAqIGdyYWNlZnVsbHkgaGFuZGxlIGVycm9ycyBhbmQgcmVkaXJlY3RzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgLy8gVE9ETzogT25seSB1c2UgYSBzaW5nbGUgaGlzdG9yeSBsaXN0ZW5lci4gT3RoZXJ3aXNlIHdlJ2xsXG4gICAgICAvLyBlbmQgdXAgd2l0aCBtdWx0aXBsZSBjb25jdXJyZW50IGNhbGxzIHRvIG1hdGNoLlxuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoc3RhdGUubG9jYXRpb24gPT09IGxvY2F0aW9uKSB7XG4gICAgICAgICAgbGlzdGVuZXIobnVsbCwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdGNoKGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIHJlZGlyZWN0TG9jYXRpb24sIG5leHRTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVkaXJlY3RMb2NhdGlvbikge1xuICAgICAgICAgICAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhyZWRpcmVjdExvY2F0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dFN0YXRlKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKG51bGwsIG5leHRTdGF0ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ0xvY2F0aW9uIFwiJXNcIiBkaWQgbm90IG1hdGNoIGFueSByb3V0ZXMnLCBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGlzQWN0aXZlOiBpc0FjdGl2ZSxcbiAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgIGxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZTogbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW5cbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gdXNlUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vVHJhbnNpdGlvblV0aWxzXCI6MTM4LFwiLi9jb21wdXRlQ2hhbmdlZFJvdXRlc1wiOjEzOSxcIi4vZ2V0Q29tcG9uZW50c1wiOjE0MCxcIi4vaXNBY3RpdmVcIjoxNDMsXCIuL21hdGNoUm91dGVzXCI6MTQ1LFwiaGlzdG9yeS9saWIvQWN0aW9uc1wiOjE0NyxcImhpc3RvcnkvbGliL3VzZVF1ZXJpZXNcIjoxNTksXCJ3YXJuaW5nXCI6Mjk2fV0sMTQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmFyZ3VtZW50c1s0XVs0OV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcImR1cFwiOjQ5fV0sMTQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmFyZ3VtZW50c1s0XVs1MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcImR1cFwiOjUwfV0sMTQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuc2F2ZVN0YXRlID0gc2F2ZVN0YXRlO1xuZXhwb3J0cy5yZWFkU3RhdGUgPSByZWFkU3RhdGU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cbnZhciBLZXlQcmVmaXggPSAnQEBIaXN0b3J5Lyc7XG52YXIgUXVvdGFFeGNlZWRlZEVycm9yID0gJ1F1b3RhRXhjZWVkZWRFcnJvcic7XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleShrZXkpIHtcbiAgcmV0dXJuIEtleVByZWZpeCArIGtleTtcbn1cblxuZnVuY3Rpb24gc2F2ZVN0YXRlKGtleSwgc3RhdGUpIHtcbiAgdHJ5IHtcbiAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShjcmVhdGVLZXkoa2V5KSwgSlNPTi5zdHJpbmdpZnkoc3RhdGUpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gUXVvdGFFeGNlZWRlZEVycm9yIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFByb2JhYmx5IGluIFNhZmFyaSBcInByaXZhdGUgbW9kZVwiIHdoZXJlIHNlc3Npb25TdG9yYWdlIHF1b3RhIGlzIDAuICM0MlxuICAgICAgX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHNhdmUgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgaW4gU2FmYXJpIHByaXZhdGUgbW9kZScpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZFN0YXRlKGtleSkge1xuICB2YXIganNvbiA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcblxuICBpZiAoanNvbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWdub3JlIGludmFsaWQgSlNPTi5cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbn0se1wid2FybmluZ1wiOjI5Nn1dLDE1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNTJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCJkdXBcIjo1Mn1dLDE1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNTNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCJkdXBcIjo1M31dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNTVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCIuL0RPTVV0aWxzXCI6MTUwLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE1MSxcIi4vY3JlYXRlSGlzdG9yeVwiOjE1NCxcImR1cFwiOjU1LFwiaW52YXJpYW50XCI6NzN9XSwxNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuYXJndW1lbnRzWzRdWzU2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cylcbn0se1wiLi9BY3Rpb25zXCI6MTQ3LFwiLi9ET01TdGF0ZVN0b3JhZ2VcIjoxNDksXCIuL0RPTVV0aWxzXCI6MTUwLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE1MSxcIi4vY3JlYXRlRE9NSGlzdG9yeVwiOjE1MixcImR1cFwiOjU2LFwiaW52YXJpYW50XCI6NzMsXCJ3YXJuaW5nXCI6Mjk2fV0sMTU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9kZWVwRXF1YWwgPSByZXF1aXJlKCdkZWVwLWVxdWFsJyk7XG5cbnZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IHJlcXVpcmUoJy4vcnVuVHJhbnNpdGlvbkhvb2snKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XG5cbnZhciBfZGVwcmVjYXRlID0gcmVxdWlyZSgnLi9kZXByZWNhdGUnKTtcblxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tS2V5KGxlbmd0aCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQYXRoKHN0cmluZykge1xuICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goL15odHRwcz86XFwvXFwvW15cXC9dKi8pO1xuXG4gIGlmIChtYXRjaCA9PSBudWxsKSByZXR1cm4gc3RyaW5nO1xuXG4gIF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnTG9jYXRpb24gcGF0aCBtdXN0IGJlIHBhdGhuYW1lICsgcXVlcnkgc3RyaW5nIG9ubHksIG5vdCBhIGZ1bGx5IHF1YWxpZmllZCBVUkwgbGlrZSBcIiVzXCInLCBzdHJpbmcpO1xuXG4gIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmXG4gIC8vYS5hY3Rpb24gPT09IGIuYWN0aW9uICYmIC8vIERpZmZlcmVudCBhY3Rpb24gIT09IGxvY2F0aW9uIGNoYW5nZS5cbiAgYS5rZXkgPT09IGIua2V5ICYmIF9kZWVwRXF1YWwyWydkZWZhdWx0J10oYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbnZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcblxuZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGdldEN1cnJlbnRMb2NhdGlvbiA9IG9wdGlvbnMuZ2V0Q3VycmVudExvY2F0aW9uO1xuICB2YXIgZmluaXNoVHJhbnNpdGlvbiA9IG9wdGlvbnMuZmluaXNoVHJhbnNpdGlvbjtcbiAgdmFyIHNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlO1xuICB2YXIgZ28gPSBvcHRpb25zLmdvO1xuICB2YXIga2V5TGVuZ3RoID0gb3B0aW9ucy5rZXlMZW5ndGg7XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gb3B0aW9ucy5nZXRVc2VyQ29uZmlybWF0aW9uO1xuXG4gIGlmICh0eXBlb2Yga2V5TGVuZ3RoICE9PSAnbnVtYmVyJykga2V5TGVuZ3RoID0gRGVmYXVsdEtleUxlbmd0aDtcblxuICB2YXIgdHJhbnNpdGlvbkhvb2tzID0gW107XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFuc2l0aW9uSG9va3MgPSB0cmFuc2l0aW9uSG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhbGxLZXlzID0gW107XG4gIHZhciBjaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnQoKSB7XG4gICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAmJiBwZW5kaW5nTG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcbiAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YocGVuZGluZ0xvY2F0aW9uLmtleSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obmV3TG9jYXRpb24pIHtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcblxuICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cbiAgICBpZiAobG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBhbGxLZXlzID0gW10uY29uY2F0KGFsbEtleXMuc2xpY2UoMCwgY3VycmVudCArIDEpLCBbbG9jYXRpb24ua2V5XSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlJFUExBQ0UpIHtcbiAgICAgIGFsbEtleXNbY3VycmVudF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgfVxuXG4gICAgY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIGxpc3RlbmVyKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9sb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgICAgYWxsS2V5cyA9IFtfbG9jYXRpb24ua2V5XTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKF9sb2NhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZUxpc3RlbmVycyA9IGNoYW5nZUxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKHRyYW5zaXRpb25Ib29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgIGRvbmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAoZ2V0VXNlckNvbmZpcm1hdGlvbiAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgICBjYWxsYmFjayhvayAhPT0gZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwZW5kaW5nTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbikge1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbnNBcmVFcXVhbChsb2NhdGlvbiwgbmV4dExvY2F0aW9uKSkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuXG4gICAgY29uZmlybVRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gbmV4dExvY2F0aW9uKSByZXR1cm47IC8vIFRyYW5zaXRpb24gd2FzIGludGVycnVwdGVkLlxuXG4gICAgICBpZiAob2spIHtcbiAgICAgICAgZmluaXNoVHJhbnNpdGlvbihuZXh0TG9jYXRpb24pO1xuICAgICAgICB1cGRhdGVMb2NhdGlvbihuZXh0TG9jYXRpb24pO1xuICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiAmJiBuZXh0TG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xuICAgICAgICB2YXIgbmV4dEluZGV4ID0gYWxsS2V5cy5pbmRleE9mKG5leHRMb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xICYmIG5leHRJbmRleCAhPT0gLTEpIGdvKHByZXZJbmRleCAtIG5leHRJbmRleCk7IC8vIFJlc3RvcmUgdGhlIFVSTC5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgX0FjdGlvbnMuUFVTSCwgY3JlYXRlS2V5KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgX0FjdGlvbnMuUkVQTEFDRSwgY3JlYXRlS2V5KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJhbmRvbUtleShrZXlMZW5ndGgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGF0aChwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gJy8nIDogYXJndW1lbnRzWzBdO1xuICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbMV07XG4gICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IF9BY3Rpb25zLlBPUCA6IGFyZ3VtZW50c1syXTtcbiAgICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gY3JlYXRlS2V5KCkgOiBhcmd1bWVudHNbM107XG5cbiAgICB2YXIgcGF0aG5hbWUgPSBleHRyYWN0UGF0aChwYXRoKTtcbiAgICB2YXIgc2VhcmNoID0gJyc7XG4gICAgdmFyIGhhc2ggPSAnJztcblxuICAgIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHJpbmcoaGFzaEluZGV4KTtcbiAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyaW5nKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICAgIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhzZWFyY2hJbmRleCk7XG4gICAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cmluZygwLCBzZWFyY2hJbmRleCk7XG4gICAgfVxuXG4gICAgaWYgKHBhdGhuYW1lID09PSAnJykgcGF0aG5hbWUgPSAnLyc7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgICBoYXNoOiBoYXNoLFxuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBrZXk6IGtleVxuICAgIH07XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICB1cGRhdGVMb2NhdGlvblN0YXRlKGxvY2F0aW9uLCBzdGF0ZSk7XG4gICAgICB1cGRhdGVMb2NhdGlvbihsb2NhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uU3RhdGUoZ2V0Q3VycmVudExvY2F0aW9uKCksIHN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMb2NhdGlvblN0YXRlKGxvY2F0aW9uLCBzdGF0ZSkge1xuICAgIGxvY2F0aW9uLnN0YXRlID0gX2V4dGVuZHMoe30sIGxvY2F0aW9uLnN0YXRlLCBzdGF0ZSk7XG4gICAgc2F2ZVN0YXRlKGxvY2F0aW9uLmtleSwgbG9jYXRpb24uc3RhdGUpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiByZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcbiAgICBpZiAodHJhbnNpdGlvbkhvb2tzLmluZGV4T2YoaG9vaykgPT09IC0xKSB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcbiAgICB0cmFuc2l0aW9uSG9va3MgPSB0cmFuc2l0aW9uSG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbSAhPT0gaG9vaztcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgdHJhbnNpdGlvblRvOiB0cmFuc2l0aW9uVG8sXG4gICAgcHVzaFN0YXRlOiBwdXNoU3RhdGUsXG4gICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlU3RhdGUsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNyZWF0ZUtleTogY3JlYXRlS2V5LFxuICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb24sXG5cbiAgICBzZXRTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShzZXRTdGF0ZSwgJ3NldFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBsb2NhdGlvbi5rZXkgdG8gc2F2ZSBzdGF0ZSBpbnN0ZWFkJyksXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZWdpc3RlclRyYW5zaXRpb25Ib29rLCAncmVnaXN0ZXJUcmFuc2l0aW9uSG9vayBpcyBkZXByZWNhdGVkOyB1c2UgbGlzdGVuQmVmb3JlIGluc3RlYWQnKSxcbiAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10odW5yZWdpc3RlclRyYW5zaXRpb25Ib29rLCAndW5yZWdpc3RlclRyYW5zaXRpb25Ib29rIGlzIGRlcHJlY2F0ZWQ7IHVzZSB0aGUgY2FsbGJhY2sgcmV0dXJuZWQgZnJvbSBsaXN0ZW5CZWZvcmUgaW5zdGVhZCcpXG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUhpc3Rvcnk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9BY3Rpb25zXCI6MTQ3LFwiLi9Bc3luY1V0aWxzXCI6MTQ4LFwiLi9kZXByZWNhdGVcIjoxNTYsXCIuL3J1blRyYW5zaXRpb25Ib29rXCI6MTU3LFwiZGVlcC1lcXVhbFwiOjE1LFwid2FybmluZ1wiOjI5Nn1dLDE1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCIuL0FjdGlvbnNcIjoxNDcsXCIuL2NyZWF0ZUhpc3RvcnlcIjoxNTQsXCJkdXBcIjo1OSxcImludmFyaWFudFwiOjczfV0sMTU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmFyZ3VtZW50c1s0XVs2MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcImR1cFwiOjYwLFwid2FybmluZ1wiOjI5Nn1dLDE1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNjVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCJkdXBcIjo2NSxcIndhcm5pbmdcIjoyOTZ9XSwxNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IHJlcXVpcmUoJy4vcnVuVHJhbnNpdGlvbkhvb2snKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XG5cbmZ1bmN0aW9uIHVzZUJhc2VuYW1lKGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgIHZhciBiYXNlbmFtZSA9IG9wdGlvbnMuYmFzZW5hbWU7XG5cbiAgICB2YXIgaGlzdG9yeU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgWydiYXNlbmFtZSddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShoaXN0b3J5T3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBhZGRCYXNlbmFtZShsb2NhdGlvbikge1xuICAgICAgaWYgKGJhc2VuYW1lICYmIGxvY2F0aW9uLmJhc2VuYW1lID09IG51bGwpIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZW5hbWUpID09PSAwKSB7XG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHJpbmcoYmFzZW5hbWUubGVuZ3RoKTtcbiAgICAgICAgICBsb2NhdGlvbi5iYXNlbmFtZSA9IGJhc2VuYW1lO1xuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSAnJykgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uYmFzZW5hbWUgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGVuZEJhc2VuYW1lKHBhdGgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZSA/IGJhc2VuYW1lICsgcGF0aCA6IHBhdGg7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHJlYWQgbWV0aG9kcyB3aXRoIGJhc2VuYW1lLWF3YXJlIHZlcnNpb25zLlxuICAgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShob29rKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW5CZWZvcmUoZnVuY3Rpb24gKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICBfcnVuVHJhbnNpdGlvbkhvb2syWydkZWZhdWx0J10oaG9vaywgYWRkQmFzZW5hbWUobG9jYXRpb24pLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgbGlzdGVuZXIoYWRkQmFzZW5hbWUobG9jYXRpb24pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIGFsbCB3cml0ZSBtZXRob2RzIHdpdGggYmFzZW5hbWUtYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoKSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgcHJlcGVuZEJhc2VuYW1lKHBhdGgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlLCBwcmVwZW5kQmFzZW5hbWUocGF0aCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlUGF0aChwcmVwZW5kQmFzZW5hbWUocGF0aCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlSHJlZihwcmVwZW5kQmFzZW5hbWUocGF0aCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGFkZEJhc2VuYW1lKGhpc3RvcnkuY3JlYXRlTG9jYXRpb24uYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcbiAgICAgIGxpc3RlbjogbGlzdGVuLFxuICAgICAgcHVzaFN0YXRlOiBwdXNoU3RhdGUsXG4gICAgICByZXBsYWNlU3RhdGU6IHJlcGxhY2VTdGF0ZSxcbiAgICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHVzZUJhc2VuYW1lO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vcnVuVHJhbnNpdGlvbkhvb2tcIjoxNTd9XSwxNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIF9xcyA9IHJlcXVpcmUoJ3FzJyk7XG5cbnZhciBfcXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXMpO1xuXG52YXIgX3J1blRyYW5zaXRpb25Ib29rID0gcmVxdWlyZSgnLi9ydW5UcmFuc2l0aW9uSG9vaycpO1xuXG52YXIgX3J1blRyYW5zaXRpb25Ib29rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3J1blRyYW5zaXRpb25Ib29rKTtcblxuZnVuY3Rpb24gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSB7XG4gIHJldHVybiBfcXMyWydkZWZhdWx0J10uc3RyaW5naWZ5KHF1ZXJ5LCB7IGFycmF5Rm9ybWF0OiAnYnJhY2tldHMnIH0pO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGFyc2VRdWVyeVN0cmluZyhxdWVyeVN0cmluZykge1xuICByZXR1cm4gX3FzMlsnZGVmYXVsdCddLnBhcnNlKHF1ZXJ5U3RyaW5nKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGNyZWF0ZUhpc3RvcnkgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjcmVhdGVcbiAqIGhpc3Rvcnkgb2JqZWN0cyB0aGF0IGtub3cgaG93IHRvIGhhbmRsZSBVUkwgcXVlcmllcy5cbiAqL1xuZnVuY3Rpb24gdXNlUXVlcmllcyhjcmVhdGVIaXN0b3J5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgICB2YXIgc3RyaW5naWZ5UXVlcnkgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuICAgIHZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gb3B0aW9ucy5wYXJzZVF1ZXJ5U3RyaW5nO1xuXG4gICAgdmFyIGhpc3RvcnlPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFsnc3RyaW5naWZ5UXVlcnknLCAncGFyc2VRdWVyeVN0cmluZyddKTtcblxuICAgIHZhciBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShoaXN0b3J5T3B0aW9ucyk7XG5cbiAgICBpZiAodHlwZW9mIHN0cmluZ2lmeVF1ZXJ5ICE9PSAnZnVuY3Rpb24nKSBzdHJpbmdpZnlRdWVyeSA9IGRlZmF1bHRTdHJpbmdpZnlRdWVyeTtcblxuICAgIGlmICh0eXBlb2YgcGFyc2VRdWVyeVN0cmluZyAhPT0gJ2Z1bmN0aW9uJykgcGFyc2VRdWVyeVN0cmluZyA9IGRlZmF1bHRQYXJzZVF1ZXJ5U3RyaW5nO1xuXG4gICAgZnVuY3Rpb24gYWRkUXVlcnkobG9jYXRpb24pIHtcbiAgICAgIGlmIChsb2NhdGlvbi5xdWVyeSA9PSBudWxsKSBsb2NhdGlvbi5xdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG5cbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBlbmRRdWVyeShwYXRobmFtZSwgcXVlcnkpIHtcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChxdWVyeSAmJiAocXVlcnlTdHJpbmcgPSBzdHJpbmdpZnlRdWVyeShxdWVyeSkpICE9PSAnJykgcmV0dXJuIHBhdGhuYW1lICsgKHBhdGhuYW1lLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgcXVlcnlTdHJpbmc7XG5cbiAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBhbGwgcmVhZCBtZXRob2RzIHdpdGggcXVlcnktYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbkJlZm9yZShmdW5jdGlvbiAobG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIF9ydW5UcmFuc2l0aW9uSG9vazJbJ2RlZmF1bHQnXShob29rLCBhZGRRdWVyeShsb2NhdGlvbiksIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBsaXN0ZW5lcihhZGRRdWVyeShsb2NhdGlvbikpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHdyaXRlIG1ldGhvZHMgd2l0aCBxdWVyeS1hd2FyZSB2ZXJzaW9ucy5cbiAgICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCBhcHBlbmRRdWVyeShwYXRobmFtZSwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlLCBhcHBlbmRRdWVyeShwYXRobmFtZSwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXRoKHBhdGhuYW1lLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlUGF0aChhcHBlbmRRdWVyeShwYXRobmFtZSwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGhuYW1lLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlSHJlZihhcHBlbmRRdWVyeShwYXRobmFtZSwgcXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBhZGRRdWVyeShoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uLmFwcGx5KGhpc3RvcnksIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuICAgICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgICBsaXN0ZW46IGxpc3RlbixcbiAgICAgIHB1c2hTdGF0ZTogcHVzaFN0YXRlLFxuICAgICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlU3RhdGUsXG4gICAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICAgIGNyZWF0ZUxvY2F0aW9uOiBjcmVhdGVMb2NhdGlvblxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSB1c2VRdWVyaWVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vcnVuVHJhbnNpdGlvbkhvb2tcIjoxNTcsXCJxc1wiOjE2MH1dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNjldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCIuL3BhcnNlXCI6MTYxLFwiLi9zdHJpbmdpZnlcIjoxNjIsXCJkdXBcIjo2OX1dLDE2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5hcmd1bWVudHNbNF1bNzBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKVxufSx7XCIuL3V0aWxzXCI6MTYzLFwiZHVwXCI6NzB9XSwxNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuYXJndW1lbnRzWzRdWzcxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cylcbn0se1wiLi91dGlsc1wiOjE2MyxcImR1cFwiOjcxfV0sMTYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmFyZ3VtZW50c1s0XVs3Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpXG59LHtcImR1cFwiOjcyfV0sMTY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjbGFzc2VzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgT3B0aW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ09wdGlvbicsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0YWRkTGFiZWxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBzdHJpbmcgcmVuZGVyZWQgaW4gY2FzZSBvZiBhbGxvd0NyZWF0ZSBvcHRpb24gcGFzc2VkIHRvIFJlYWN0U2VsZWN0XG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgKGJhc2VkIG9uIG1vdXNlIHBvc2l0aW9uKVxuXHRcdG1vdXNlRG93bjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgY2xpY2sgb24gb3B0aW9uIGVsZW1lbnRcblx0XHRtb3VzZUVudGVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgLy8gbWV0aG9kIHRvIGhhbmRsZSBtb3VzZUVudGVyIG9uIG9wdGlvbiBlbGVtZW50XG5cdFx0bW91c2VMZWF2ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBoYW5kbGUgbW91c2VMZWF2ZSBvbiBvcHRpb24gZWxlbWVudFxuXHRcdG9wdGlvbjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCAvLyBvYmplY3QgdGhhdCBpcyBiYXNlIGZvciB0aGF0IG9wdGlvblxuXHRcdHJlbmRlckZ1bmM6IFJlYWN0LlByb3BUeXBlcy5mdW5jIC8vIG1ldGhvZCBwYXNzZWQgdG8gUmVhY3RTZWxlY3QgY29tcG9uZW50IHRvIHJlbmRlciBsYWJlbCB0ZXh0XG5cdH0sXG5cblx0YmxvY2tFdmVudDogZnVuY3Rpb24gYmxvY2tFdmVudChldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0aWYgKGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnQScgfHwgISgnaHJlZicgaW4gZXZlbnQudGFyZ2V0KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC50YXJnZXQudGFyZ2V0KSB7XG5cdFx0XHR3aW5kb3cub3BlbihldmVudC50YXJnZXQuaHJlZik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZXZlbnQudGFyZ2V0LmhyZWY7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBvYmogPSB0aGlzLnByb3BzLm9wdGlvbjtcblx0XHR2YXIgcmVuZGVyZWRMYWJlbCA9IHRoaXMucHJvcHMucmVuZGVyRnVuYyhvYmopO1xuXHRcdHZhciBvcHRpb25DbGFzc2VzID0gY2xhc3Nlcyh0aGlzLnByb3BzLmNsYXNzTmFtZSwgb2JqLmNsYXNzTmFtZSk7XG5cblx0XHRyZXR1cm4gb2JqLmRpc2FibGVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyBjbGFzc05hbWU6IG9wdGlvbkNsYXNzZXMsXG5cdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmJsb2NrRXZlbnQsXG5cdFx0XHRcdG9uQ2xpY2s6IHRoaXMuYmxvY2tFdmVudCB9LFxuXHRcdFx0cmVuZGVyZWRMYWJlbFxuXHRcdCkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IGNsYXNzTmFtZTogb3B0aW9uQ2xhc3Nlcyxcblx0XHRcdFx0c3R5bGU6IG9iai5zdHlsZSxcblx0XHRcdFx0b25Nb3VzZUVudGVyOiB0aGlzLnByb3BzLm1vdXNlRW50ZXIsXG5cdFx0XHRcdG9uTW91c2VMZWF2ZTogdGhpcy5wcm9wcy5tb3VzZUxlYXZlLFxuXHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5wcm9wcy5tb3VzZURvd24sXG5cdFx0XHRcdG9uQ2xpY2s6IHRoaXMucHJvcHMubW91c2VEb3duLFxuXHRcdFx0XHR0aXRsZTogb2JqLnRpdGxlIH0sXG5cdFx0XHRvYmouY3JlYXRlID8gdGhpcy5wcm9wcy5hZGRMYWJlbFRleHQucmVwbGFjZSgne2xhYmVsfScsIG9iai5sYWJlbCkgOiByZW5kZXJlZExhYmVsXG5cdFx0KTtcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3B0aW9uO1xufSx7XCJjbGFzc25hbWVzXCI6MTQsXCJyZWFjdFwiOjI5NX1dLDE2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBkaXNhYmxlIHNvbWUgcnVsZXMgdW50aWwgd2UgcmVmYWN0b3IgbW9yZSBjb21wbGV0ZWx5OyBmaXhpbmcgdGhlbSBub3cgd291bGRcbiAgIGNhdXNlIGNvbmZsaWN0cyB3aXRoIHNvbWUgb3BlbiBQUnMgdW5uZWNlc3NhcmlseS4gKi9cbi8qIGVzbGludCByZWFjdC9qc3gtc29ydC1wcm9wLXR5cGVzOiAwLCByZWFjdC9zb3J0LWNvbXA6IDAsIHJlYWN0L3Byb3AtdHlwZXM6IDAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG52YXIgSW5wdXQgPSByZXF1aXJlKCdyZWFjdC1pbnB1dC1hdXRvc2l6ZScpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG52YXIgVmFsdWUgPSByZXF1aXJlKCcuL1ZhbHVlJyk7XG52YXIgU2luZ2xlVmFsdWUgPSByZXF1aXJlKCcuL1NpbmdsZVZhbHVlJyk7XG52YXIgT3B0aW9uID0gcmVxdWlyZSgnLi9PcHRpb24nKTtcblxudmFyIHJlcXVlc3RJZCA9IDA7XG5cbnZhciBTZWxlY3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cblx0ZGlzcGxheU5hbWU6ICdTZWxlY3QnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdGFkZExhYmVsVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gcGxhY2Vob2xkZXIgZGlzcGxheWVkIHdoZW4geW91IHdhbnQgdG8gYWRkIGEgbGFiZWwgb24gYSBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdGFsbG93Q3JlYXRlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBhbGxvdyBjcmVhdGlvbiBvZiBuZXcgZW50cmllc1xuXHRcdGFzeW5jT3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIGZ1bmN0aW9uIHRvIGNhbGwgdG8gZ2V0IG9wdGlvbnNcblx0XHRhdXRvbG9hZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdG8gYXV0by1sb2FkIHRoZSBkZWZhdWx0IGFzeW5jIG9wdGlvbnMgc2V0XG5cdFx0YmFja3NwYWNlUmVtb3ZlczogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgYmFja3NwYWNlIHJlbW92ZXMgYW4gaXRlbSBpZiB0aGVyZSBpcyBubyB0ZXh0IGlucHV0XG5cdFx0Y2FjaGVBc3luY1Jlc3VsdHM6IFJlYWN0LlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIGFsbG93IGNhY2hlXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG5cdFx0Y2xlYXJBbGxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyB0aXRsZSBmb3IgdGhlIFwiY2xlYXJcIiBjb250cm9sIHdoZW4gbXVsdGk6IHRydWVcblx0XHRjbGVhclZhbHVlVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gdGl0bGUgZm9yIHRoZSBcImNsZWFyXCIgY29udHJvbFxuXHRcdGNsZWFyYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIHNob3VsZCBpdCBiZSBwb3NzaWJsZSB0byByZXNldCB2YWx1ZVxuXHRcdGRlbGltaXRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gZGVsaW1pdGVyIHRvIHVzZSB0byBqb2luIG11bHRpcGxlIHZhbHVlc1xuXHRcdGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0aGUgU2VsZWN0IGlzIGRpc2FibGVkIG9yIG5vdFxuXHRcdGZpbHRlck9wdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBmaWx0ZXIgYSBzaW5nbGUgb3B0aW9uICAob3B0aW9uLCBmaWx0ZXJTdHJpbmcpXG5cdFx0ZmlsdGVyT3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG1ldGhvZCB0byBmaWx0ZXIgdGhlIG9wdGlvbnMgYXJyYXk6IGZ1bmN0aW9uIChbb3B0aW9uc10sIGZpbHRlclN0cmluZywgW3ZhbHVlc10pXG5cdFx0aWdub3JlQ2FzZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIHdoZXRoZXIgdG8gcGVyZm9ybSBjYXNlLWluc2Vuc2l0aXZlIGZpbHRlcmluZ1xuXHRcdGlucHV0UHJvcHM6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGN1c3RvbSBhdHRyaWJ1dGVzIGZvciB0aGUgSW5wdXQgKGluIHRoZSBTZWxlY3QtY29udHJvbCkgZS5nOiB7J2RhdGEtZm9vJzogJ2Jhcid9XG5cdFx0aXNMb2FkaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0aGUgU2VsZWN0IGlzIGxvYWRpbmcgZXh0ZXJuYWxseSBvciBub3QgKHN1Y2ggYXMgb3B0aW9ucyBiZWluZyBsb2FkZWQpXG5cdFx0bGFiZWxLZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIHBhdGggb2YgdGhlIGxhYmVsIHZhbHVlIGluIG9wdGlvbiBvYmplY3RzXG5cdFx0bWF0Y2hQb3M6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIChhbnl8c3RhcnQpIG1hdGNoIHRoZSBzdGFydCBvciBlbnRpcmUgc3RyaW5nIHdoZW4gZmlsdGVyaW5nXG5cdFx0bWF0Y2hQcm9wOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyAoYW55fGxhYmVsfHZhbHVlKSB3aGljaCBvcHRpb24gcHJvcGVydHkgdG8gZmlsdGVyIG9uXG5cdFx0bXVsdGk6IFJlYWN0LlByb3BUeXBlcy5ib29sLCAvLyBtdWx0aS12YWx1ZSBpbnB1dFxuXHRcdG5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIGZpZWxkIG5hbWUsIGZvciBoaWRkZW4gPGlucHV0IC8+IHRhZ1xuXHRcdG5ld09wdGlvbkNyZWF0b3I6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBmYWN0b3J5IHRvIGNyZWF0ZSBuZXcgb3B0aW9ucyB3aGVuIGFsbG93Q3JlYXRlIHNldFxuXHRcdG5vUmVzdWx0c1RleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0c1xuXHRcdG9uQmx1cjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQmx1ciBoYW5kbGVyOiBmdW5jdGlvbiAoZXZlbnQpIHt9XG5cdFx0b25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBvbkNoYW5nZSBoYW5kbGVyOiBmdW5jdGlvbiAobmV3VmFsdWUpIHt9XG5cdFx0b25Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uRm9jdXMgaGFuZGxlcjogZnVuY3Rpb24gKGV2ZW50KSB7fVxuXHRcdG9uSW5wdXRDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBvbklucHV0Q2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7fVxuXHRcdG9uT3B0aW9uTGFiZWxDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQ0xpY2sgaGFuZGxlciBmb3IgdmFsdWUgbGFiZWxzOiBmdW5jdGlvbiAodmFsdWUsIGV2ZW50KSB7fVxuXHRcdG9wdGlvbkNvbXBvbmVudDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9wdGlvbiBjb21wb25lbnQgdG8gcmVuZGVyIGluIGRyb3Bkb3duXG5cdFx0b3B0aW9uUmVuZGVyZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBvcHRpb25SZW5kZXJlcjogZnVuY3Rpb24gKG9wdGlvbikge31cblx0XHRvcHRpb25zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksIC8vIGFycmF5IG9mIG9wdGlvbnNcblx0XHRwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gZmllbGQgcGxhY2Vob2xkZXIsIGRpc3BsYXllZCB3aGVuIHRoZXJlJ3Mgbm8gdmFsdWVcblx0XHRzZWFyY2hhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gd2hldGhlciB0byBlbmFibGUgc2VhcmNoaW5nIGZlYXR1cmUgb3Igbm90XG5cdFx0c2VhcmNoaW5nVGV4dDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gbWVzc2FnZSB0byBkaXNwbGF5IHdoaWxzdCBvcHRpb25zIGFyZSBsb2FkaW5nIHZpYSBhc3luY09wdGlvbnNcblx0XHRzZWFyY2hQcm9tcHRUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBsYWJlbCB0byBwcm9tcHQgZm9yIHNlYXJjaCBpbnB1dFxuXHRcdHNpbmdsZVZhbHVlQ29tcG9uZW50OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgLy8gc2luZ2xlIHZhbHVlIGNvbXBvbmVudCB3aGVuIG11bHRpcGxlIGlzIHNldCB0byBmYWxzZVxuXHRcdHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuYW55LCAvLyBpbml0aWFsIGZpZWxkIHZhbHVlXG5cdFx0dmFsdWVDb21wb25lbnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyB2YWx1ZSBjb21wb25lbnQgdG8gcmVuZGVyIGluIG11bHRpcGxlIG1vZGVcblx0XHR2YWx1ZUtleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gcGF0aCBvZiB0aGUgbGFiZWwgdmFsdWUgaW4gb3B0aW9uIG9iamVjdHNcblx0XHR2YWx1ZVJlbmRlcmVyOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyAvLyB2YWx1ZVJlbmRlcmVyOiBmdW5jdGlvbiAob3B0aW9uKSB7fVxuXHR9LFxuXG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhZGRMYWJlbFRleHQ6ICdBZGQgXCJ7bGFiZWx9XCI/Jyxcblx0XHRcdGFsbG93Q3JlYXRlOiBmYWxzZSxcblx0XHRcdGFzeW5jT3B0aW9uczogdW5kZWZpbmVkLFxuXHRcdFx0YXV0b2xvYWQ6IHRydWUsXG5cdFx0XHRiYWNrc3BhY2VSZW1vdmVzOiB0cnVlLFxuXHRcdFx0Y2FjaGVBc3luY1Jlc3VsdHM6IHRydWUsXG5cdFx0XHRjbGFzc05hbWU6IHVuZGVmaW5lZCxcblx0XHRcdGNsZWFyQWxsVGV4dDogJ0NsZWFyIGFsbCcsXG5cdFx0XHRjbGVhclZhbHVlVGV4dDogJ0NsZWFyIHZhbHVlJyxcblx0XHRcdGNsZWFyYWJsZTogdHJ1ZSxcblx0XHRcdGRlbGltaXRlcjogJywnLFxuXHRcdFx0ZGlzYWJsZWQ6IGZhbHNlLFxuXHRcdFx0aWdub3JlQ2FzZTogdHJ1ZSxcblx0XHRcdGlucHV0UHJvcHM6IHt9LFxuXHRcdFx0aXNMb2FkaW5nOiBmYWxzZSxcblx0XHRcdGxhYmVsS2V5OiAnbGFiZWwnLFxuXHRcdFx0bWF0Y2hQb3M6ICdhbnknLFxuXHRcdFx0bWF0Y2hQcm9wOiAnYW55Jyxcblx0XHRcdG5hbWU6IHVuZGVmaW5lZCxcblx0XHRcdG5ld09wdGlvbkNyZWF0b3I6IHVuZGVmaW5lZCxcblx0XHRcdG5vUmVzdWx0c1RleHQ6ICdObyByZXN1bHRzIGZvdW5kJyxcblx0XHRcdG9uQ2hhbmdlOiB1bmRlZmluZWQsXG5cdFx0XHRvbklucHV0Q2hhbmdlOiB1bmRlZmluZWQsXG5cdFx0XHRvbk9wdGlvbkxhYmVsQ2xpY2s6IHVuZGVmaW5lZCxcblx0XHRcdG9wdGlvbkNvbXBvbmVudDogT3B0aW9uLFxuXHRcdFx0b3B0aW9uczogdW5kZWZpbmVkLFxuXHRcdFx0cGxhY2Vob2xkZXI6ICdTZWxlY3QuLi4nLFxuXHRcdFx0c2VhcmNoYWJsZTogdHJ1ZSxcblx0XHRcdHNlYXJjaGluZ1RleHQ6ICdTZWFyY2hpbmcuLi4nLFxuXHRcdFx0c2VhcmNoUHJvbXB0VGV4dDogJ1R5cGUgdG8gc2VhcmNoJyxcblx0XHRcdHNpbmdsZVZhbHVlQ29tcG9uZW50OiBTaW5nbGVWYWx1ZSxcblx0XHRcdHZhbHVlOiB1bmRlZmluZWQsXG5cdFx0XHR2YWx1ZUNvbXBvbmVudDogVmFsdWUsXG5cdFx0XHR2YWx1ZUtleTogJ3ZhbHVlJ1xuXHRcdH07XG5cdH0sXG5cblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC8qXG4gICAgKiBzZXQgYnkgZ2V0U3RhdGVGcm9tVmFsdWUgb24gY29tcG9uZW50V2lsbE1vdW50OlxuICAgICogLSB2YWx1ZVxuICAgICogLSB2YWx1ZXNcbiAgICAqIC0gZmlsdGVyZWRPcHRpb25zXG4gICAgKiAtIGlucHV0VmFsdWVcbiAgICAqIC0gcGxhY2Vob2xkZXJcbiAgICAqIC0gZm9jdXNlZE9wdGlvblxuICAgKi9cblx0XHRcdGlzRm9jdXNlZDogZmFsc2UsXG5cdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHRcdG9wdGlvbnM6IHRoaXMucHJvcHMub3B0aW9uc1xuXHRcdH07XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG5cdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdHRoaXMuX29wdGlvbnNDYWNoZSA9IHt9O1xuXHRcdHRoaXMuX29wdGlvbnNGaWx0ZXJTdHJpbmcgPSAnJztcblx0XHR0aGlzLl9jbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0XHRpZiAoIV90aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgbWVudUVsZW0gPSBSZWFjdERPTS5maW5kRE9NTm9kZShfdGhpcy5yZWZzLnNlbGVjdE1lbnVDb250YWluZXIpO1xuXHRcdFx0dmFyIGNvbnRyb2xFbGVtID0gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMucmVmcy5jb250cm9sKTtcblxuXHRcdFx0dmFyIGV2ZW50T2NjdXJlZE91dHNpZGVNZW51ID0gX3RoaXMuY2xpY2tlZE91dHNpZGVFbGVtZW50KG1lbnVFbGVtLCBldmVudCk7XG5cdFx0XHR2YXIgZXZlbnRPY2N1cmVkT3V0c2lkZUNvbnRyb2wgPSBfdGhpcy5jbGlja2VkT3V0c2lkZUVsZW1lbnQoY29udHJvbEVsZW0sIGV2ZW50KTtcblxuXHRcdFx0Ly8gSGlkZSBkcm9wZG93biBtZW51IGlmIGNsaWNrIG9jY3VycmVkIG91dHNpZGUgb2YgbWVudVxuXHRcdFx0aWYgKGV2ZW50T2NjdXJlZE91dHNpZGVNZW51ICYmIGV2ZW50T2NjdXJlZE91dHNpZGVDb250cm9sKSB7XG5cdFx0XHRcdF90aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRpc09wZW46IGZhbHNlXG5cdFx0XHRcdH0sIF90aGlzLl91bmJpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHRoaXMuX2JpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyICYmIGRvY3VtZW50LmF0dGFjaEV2ZW50KSB7XG5cdFx0XHRcdGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbmNsaWNrJywgX3RoaXMuX2Nsb3NlTWVudUlmQ2xpY2tlZE91dHNpZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpcy5fY2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHR0aGlzLl91bmJpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCFkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyICYmIGRvY3VtZW50LmRldGFjaEV2ZW50KSB7XG5cdFx0XHRcdGRvY3VtZW50LmRldGFjaEV2ZW50KCdvbmNsaWNrJywgX3RoaXMuX2Nsb3NlTWVudUlmQ2xpY2tlZE91dHNpZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpcy5fY2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHR0aGlzLnNldFN0YXRlKHRoaXMuZ2V0U3RhdGVGcm9tVmFsdWUodGhpcy5wcm9wcy52YWx1ZSkpO1xuXHR9LFxuXG5cdGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5hc3luY09wdGlvbnMgJiYgdGhpcy5wcm9wcy5hdXRvbG9hZCkge1xuXHRcdFx0dGhpcy5hdXRvbG9hZEFzeW5jT3B0aW9ucygpO1xuXHRcdH1cblx0fSxcblxuXHRjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX2JsdXJUaW1lb3V0KTtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fZm9jdXNUaW1lb3V0KTtcblx0XHRpZiAodGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHRoaXMuX3VuYmluZENsb3NlTWVudUlmQ2xpY2tlZE91dHNpZGUoKTtcblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xuXHRcdHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdFx0dmFyIG9wdGlvbnNDaGFuZ2VkID0gZmFsc2U7XG5cdFx0aWYgKEpTT04uc3RyaW5naWZ5KG5ld1Byb3BzLm9wdGlvbnMpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLnByb3BzLm9wdGlvbnMpKSB7XG5cdFx0XHRvcHRpb25zQ2hhbmdlZCA9IHRydWU7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0b3B0aW9uczogbmV3UHJvcHMub3B0aW9ucyxcblx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zOiB0aGlzLmZpbHRlck9wdGlvbnMobmV3UHJvcHMub3B0aW9ucylcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAobmV3UHJvcHMudmFsdWUgIT09IHRoaXMuc3RhdGUudmFsdWUgfHwgbmV3UHJvcHMucGxhY2Vob2xkZXIgIT09IHRoaXMucHJvcHMucGxhY2Vob2xkZXIgfHwgb3B0aW9uc0NoYW5nZWQpIHtcblx0XHRcdHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5ld1N0YXRlKSB7XG5cdFx0XHRcdF90aGlzMi5zZXRTdGF0ZShfdGhpczIuZ2V0U3RhdGVGcm9tVmFsdWUobmV3UHJvcHMudmFsdWUsIG5ld1N0YXRlICYmIG5ld1N0YXRlLm9wdGlvbnMgfHwgbmV3UHJvcHMub3B0aW9ucywgbmV3UHJvcHMucGxhY2Vob2xkZXIpKTtcblx0XHRcdH07XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5hc3luY09wdGlvbnMpIHtcblx0XHRcdFx0dGhpcy5sb2FkQXN5bmNPcHRpb25zKG5ld1Byb3BzLnZhbHVlLCB7fSwgc2V0U3RhdGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0U3RhdGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Y29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5fZm9jdXNBZnRlclVwZGF0ZSkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX2JsdXJUaW1lb3V0KTtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9mb2N1c1RpbWVvdXQpO1xuXHRcdFx0dGhpcy5fZm9jdXNUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmICghX3RoaXMzLmlzTW91bnRlZCgpKSByZXR1cm47XG5cdFx0XHRcdF90aGlzMy5nZXRJbnB1dE5vZGUoKS5mb2N1cygpO1xuXHRcdFx0XHRfdGhpczMuX2ZvY3VzQWZ0ZXJVcGRhdGUgPSBmYWxzZTtcblx0XHRcdH0sIDUwKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuX2ZvY3VzZWRPcHRpb25SZXZlYWwpIHtcblx0XHRcdGlmICh0aGlzLnJlZnMuZm9jdXNlZCAmJiB0aGlzLnJlZnMubWVudSkge1xuXHRcdFx0XHR2YXIgZm9jdXNlZERPTSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMucmVmcy5mb2N1c2VkKTtcblx0XHRcdFx0dmFyIG1lbnVET00gPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzLnJlZnMubWVudSk7XG5cdFx0XHRcdHZhciBmb2N1c2VkUmVjdCA9IGZvY3VzZWRET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcdHZhciBtZW51UmVjdCA9IG1lbnVET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRcdFx0aWYgKGZvY3VzZWRSZWN0LmJvdHRvbSA+IG1lbnVSZWN0LmJvdHRvbSB8fCBmb2N1c2VkUmVjdC50b3AgPCBtZW51UmVjdC50b3ApIHtcblx0XHRcdFx0XHRtZW51RE9NLnNjcm9sbFRvcCA9IGZvY3VzZWRET00ub2Zmc2V0VG9wICsgZm9jdXNlZERPTS5jbGllbnRIZWlnaHQgLSBtZW51RE9NLm9mZnNldEhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZm9jdXNlZE9wdGlvblJldmVhbCA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblxuXHRmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG5cdFx0dGhpcy5nZXRJbnB1dE5vZGUoKS5mb2N1cygpO1xuXHR9LFxuXG5cdGNsaWNrZWRPdXRzaWRlRWxlbWVudDogZnVuY3Rpb24gY2xpY2tlZE91dHNpZGVFbGVtZW50KGVsZW1lbnQsIGV2ZW50KSB7XG5cdFx0dmFyIGV2ZW50VGFyZ2V0ID0gZXZlbnQudGFyZ2V0ID8gZXZlbnQudGFyZ2V0IDogZXZlbnQuc3JjRWxlbWVudDtcblx0XHR3aGlsZSAoZXZlbnRUYXJnZXQgIT0gbnVsbCkge1xuXHRcdFx0aWYgKGV2ZW50VGFyZ2V0ID09PSBlbGVtZW50KSByZXR1cm4gZmFsc2U7XG5cdFx0XHRldmVudFRhcmdldCA9IGV2ZW50VGFyZ2V0Lm9mZnNldFBhcmVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Z2V0U3RhdGVGcm9tVmFsdWU6IGZ1bmN0aW9uIGdldFN0YXRlRnJvbVZhbHVlKHZhbHVlLCBvcHRpb25zLCBwbGFjZWhvbGRlcikge1xuXHRcdHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdFx0aWYgKCFvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0gdGhpcy5zdGF0ZS5vcHRpb25zO1xuXHRcdH1cblx0XHRpZiAoIXBsYWNlaG9sZGVyKSB7XG5cdFx0XHRwbGFjZWhvbGRlciA9IHRoaXMucHJvcHMucGxhY2Vob2xkZXI7XG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXQgaW50ZXJuYWwgZmlsdGVyIHN0cmluZ1xuXHRcdHRoaXMuX29wdGlvbnNGaWx0ZXJTdHJpbmcgPSAnJztcblxuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLmluaXRWYWx1ZXNBcnJheSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0dmFyIGZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zLCB2YWx1ZXMpO1xuXG5cdFx0dmFyIGZvY3VzZWRPcHRpb247XG5cdFx0dmFyIHZhbHVlRm9yU3RhdGUgPSBudWxsO1xuXHRcdGlmICghdGhpcy5wcm9wcy5tdWx0aSAmJiB2YWx1ZXMubGVuZ3RoKSB7XG5cdFx0XHRmb2N1c2VkT3B0aW9uID0gdmFsdWVzWzBdO1xuXHRcdFx0dmFsdWVGb3JTdGF0ZSA9IHZhbHVlc1swXVt0aGlzLnByb3BzLnZhbHVlS2V5XTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9jdXNlZE9wdGlvbiA9IHRoaXMuZ2V0Rmlyc3RGb2N1c2FibGVPcHRpb24oZmlsdGVyZWRPcHRpb25zKTtcblx0XHRcdHZhbHVlRm9yU3RhdGUgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdHJldHVybiB2W190aGlzNC5wcm9wcy52YWx1ZUtleV07XG5cdFx0XHR9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHZhbHVlRm9yU3RhdGUsXG5cdFx0XHR2YWx1ZXM6IHZhbHVlcyxcblx0XHRcdGlucHV0VmFsdWU6ICcnLFxuXHRcdFx0ZmlsdGVyZWRPcHRpb25zOiBmaWx0ZXJlZE9wdGlvbnMsXG5cdFx0XHRwbGFjZWhvbGRlcjogIXRoaXMucHJvcHMubXVsdGkgJiYgdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1swXVt0aGlzLnByb3BzLmxhYmVsS2V5XSA6IHBsYWNlaG9sZGVyLFxuXHRcdFx0Zm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvblxuXHRcdH07XG5cdH0sXG5cblx0Z2V0Rmlyc3RGb2N1c2FibGVPcHRpb246IGZ1bmN0aW9uIGdldEZpcnN0Rm9jdXNhYmxlT3B0aW9uKG9wdGlvbnMpIHtcblxuXHRcdGZvciAodmFyIG9wdGlvbkluZGV4ID0gMDsgb3B0aW9uSW5kZXggPCBvcHRpb25zLmxlbmd0aDsgKytvcHRpb25JbmRleCkge1xuXHRcdFx0aWYgKCFvcHRpb25zW29wdGlvbkluZGV4XS5kaXNhYmxlZCkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9uc1tvcHRpb25JbmRleF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGluaXRWYWx1ZXNBcnJheTogZnVuY3Rpb24gaW5pdFZhbHVlc0FycmF5KHZhbHVlcywgb3B0aW9ucykge1xuXHRcdHZhciBfdGhpczUgPSB0aGlzO1xuXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWVzID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHR2YWx1ZXMgPSB2YWx1ZXMgPT09ICcnID8gW10gOiB0aGlzLnByb3BzLm11bHRpID8gdmFsdWVzLnNwbGl0KHRoaXMucHJvcHMuZGVsaW1pdGVyKSA6IFt2YWx1ZXNdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWVzID0gdmFsdWVzICE9PSB1bmRlZmluZWQgJiYgdmFsdWVzICE9PSBudWxsID8gW3ZhbHVlc10gOiBbXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0aWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvcHRpb25zW2tleV0gJiYgKG9wdGlvbnNba2V5XVtfdGhpczUucHJvcHMudmFsdWVLZXldID09PSB2YWwgfHwgdHlwZW9mIG9wdGlvbnNba2V5XVtfdGhpczUucHJvcHMudmFsdWVLZXldID09PSAnbnVtYmVyJyAmJiBvcHRpb25zW2tleV1bX3RoaXM1LnByb3BzLnZhbHVlS2V5XS50b1N0cmluZygpID09PSB2YWwpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0aW9uc1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4geyB2YWx1ZTogdmFsLCBsYWJlbDogdmFsIH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSwgZm9jdXNBZnRlclVwZGF0ZSkge1xuXHRcdGlmIChmb2N1c0FmdGVyVXBkYXRlIHx8IGZvY3VzQWZ0ZXJVcGRhdGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5fZm9jdXNBZnRlclVwZGF0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHZhciBuZXdTdGF0ZSA9IHRoaXMuZ2V0U3RhdGVGcm9tVmFsdWUodmFsdWUpO1xuXHRcdG5ld1N0YXRlLmlzT3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMuZmlyZUNoYW5nZUV2ZW50KG5ld1N0YXRlKTtcblx0XHR0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcblx0fSxcblxuXHRzZWxlY3RWYWx1ZTogZnVuY3Rpb24gc2VsZWN0VmFsdWUodmFsdWUpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMubXVsdGkpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUpIHtcblx0XHRcdHRoaXMuYWRkVmFsdWUodmFsdWUpO1xuXHRcdH1cblx0XHR0aGlzLl91bmJpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlKCk7XG5cdH0sXG5cblx0YWRkVmFsdWU6IGZ1bmN0aW9uIGFkZFZhbHVlKHZhbHVlKSB7XG5cdFx0dGhpcy5zZXRWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlcy5jb25jYXQodmFsdWUpKTtcblx0fSxcblxuXHRwb3BWYWx1ZTogZnVuY3Rpb24gcG9wVmFsdWUoKSB7XG5cdFx0dGhpcy5zZXRWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlcy5zbGljZSgwLCB0aGlzLnN0YXRlLnZhbHVlcy5sZW5ndGggLSAxKSk7XG5cdH0sXG5cblx0cmVtb3ZlVmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVZhbHVlKHZhbHVlVG9SZW1vdmUpIHtcblx0XHR0aGlzLnNldFZhbHVlKHRoaXMuc3RhdGUudmFsdWVzLmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdmFsdWVUb1JlbW92ZTtcblx0XHR9KSk7XG5cdH0sXG5cblx0Y2xlYXJWYWx1ZTogZnVuY3Rpb24gY2xlYXJWYWx1ZShldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIGlnbm9yZSBpdC5cblx0XHRpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0dGhpcy5zZXRWYWx1ZShudWxsKTtcblx0fSxcblxuXHRyZXNldFZhbHVlOiBmdW5jdGlvbiByZXNldFZhbHVlKCkge1xuXHRcdHRoaXMuc2V0VmFsdWUodGhpcy5zdGF0ZS52YWx1ZSA9PT0gJycgPyBudWxsIDogdGhpcy5zdGF0ZS52YWx1ZSk7XG5cdH0sXG5cblx0Z2V0SW5wdXROb2RlOiBmdW5jdGlvbiBnZXRJbnB1dE5vZGUoKSB7XG5cdFx0dmFyIGlucHV0ID0gdGhpcy5yZWZzLmlucHV0O1xuXHRcdHJldHVybiB0aGlzLnByb3BzLnNlYXJjaGFibGUgPyBpbnB1dCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKGlucHV0KTtcblx0fSxcblxuXHRmaXJlQ2hhbmdlRXZlbnQ6IGZ1bmN0aW9uIGZpcmVDaGFuZ2VFdmVudChuZXdTdGF0ZSkge1xuXHRcdGlmIChuZXdTdGF0ZS52YWx1ZSAhPT0gdGhpcy5zdGF0ZS52YWx1ZSAmJiB0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uQ2hhbmdlKG5ld1N0YXRlLnZhbHVlLCBuZXdTdGF0ZS52YWx1ZXMpO1xuXHRcdH1cblx0fSxcblxuXHRoYW5kbGVNb3VzZURvd246IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdC8vIGZvciB0aGUgbm9uLXNlYXJjaGFibGUgc2VsZWN0LCBjbG9zZSB0aGUgZHJvcGRvd24gd2hlbiBidXR0b24gaXMgY2xpY2tlZFxuXHRcdGlmICh0aGlzLnN0YXRlLmlzT3BlbiAmJiAhdGhpcy5wcm9wcy5zZWFyY2hhYmxlKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiBmYWxzZVxuXHRcdFx0fSwgdGhpcy5fdW5iaW5kQ2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNPcGVuOiB0cnVlXG5cdFx0XHR9LCB0aGlzLl9iaW5kQ2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX29wZW5BZnRlckZvY3VzID0gdHJ1ZTtcblx0XHRcdHRoaXMuZ2V0SW5wdXROb2RlKCkuZm9jdXMoKTtcblx0XHR9XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duT25NZW51OiBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25Pbk1lbnUoZXZlbnQpIHtcblx0XHQvLyBpZiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBhIG1vdXNlZG93biBhbmQgbm90IHRoZSBwcmltYXJ5XG5cdFx0Ly8gYnV0dG9uLCBvciBpZiB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLCBpZ25vcmUgaXQuXG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdH0sXG5cblx0aGFuZGxlTW91c2VEb3duT25BcnJvdzogZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duT25BcnJvdyhldmVudCkge1xuXHRcdC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcblx0XHQvLyBidXR0b24sIG9yIGlmIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQsIGlnbm9yZSBpdC5cblx0XHRpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBldmVudC5idXR0b24gIT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gSWYgbm90IGZvY3VzZWQsIGhhbmRsZU1vdXNlRG93biB3aWxsIGhhbmRsZSBpdFxuXHRcdGlmICghdGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzT3BlbjogZmFsc2Vcblx0XHR9LCB0aGlzLl91bmJpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlKTtcblx0fSxcblxuXHRoYW5kbGVJbnB1dEZvY3VzOiBmdW5jdGlvbiBoYW5kbGVJbnB1dEZvY3VzKGV2ZW50KSB7XG5cdFx0dmFyIF90aGlzNiA9IHRoaXM7XG5cblx0XHR2YXIgbmV3SXNPcGVuID0gdGhpcy5zdGF0ZS5pc09wZW4gfHwgdGhpcy5fb3BlbkFmdGVyRm9jdXM7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc0ZvY3VzZWQ6IHRydWUsXG5cdFx0XHRpc09wZW46IG5ld0lzT3BlblxuXHRcdH0sIGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChuZXdJc09wZW4pIHtcblx0XHRcdFx0X3RoaXM2Ll9iaW5kQ2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X3RoaXM2Ll91bmJpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5fb3BlbkFmdGVyRm9jdXMgPSBmYWxzZTtcblx0XHRpZiAodGhpcy5wcm9wcy5vbkZvY3VzKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuXHRcdH1cblx0fSxcblxuXHRoYW5kbGVJbnB1dEJsdXI6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Qmx1cihldmVudCkge1xuXHRcdHZhciBfdGhpczcgPSB0aGlzO1xuXG5cdFx0dGhpcy5fYmx1clRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmIChfdGhpczcuX2ZvY3VzQWZ0ZXJVcGRhdGUgfHwgIV90aGlzNy5pc01vdW50ZWQoKSkgcmV0dXJuO1xuXHRcdFx0X3RoaXM3LnNldFN0YXRlKHtcblx0XHRcdFx0aXNGb2N1c2VkOiBmYWxzZSxcblx0XHRcdFx0aXNPcGVuOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fSwgNTApO1xuXHRcdGlmICh0aGlzLnByb3BzLm9uQmx1cikge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuXHRcdH1cblx0fSxcblxuXHRoYW5kbGVLZXlEb3duOiBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQpIHJldHVybjtcblx0XHRzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcblx0XHRcdGNhc2UgODpcblx0XHRcdFx0Ly8gYmFja3NwYWNlXG5cdFx0XHRcdGlmICghdGhpcy5zdGF0ZS5pbnB1dFZhbHVlICYmIHRoaXMucHJvcHMuYmFja3NwYWNlUmVtb3Zlcykge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0dGhpcy5wb3BWYWx1ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGNhc2UgOTpcblx0XHRcdFx0Ly8gdGFiXG5cdFx0XHRcdGlmIChldmVudC5zaGlmdEtleSB8fCAhdGhpcy5zdGF0ZS5pc09wZW4gfHwgIXRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbikge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHQvLyBlbnRlclxuXHRcdFx0XHRpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSByZXR1cm47XG5cdFx0XHRcdHRoaXMuc2VsZWN0Rm9jdXNlZE9wdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdC8vIGVzY2FwZVxuXHRcdFx0XHRpZiAodGhpcy5zdGF0ZS5pc09wZW4pIHtcblx0XHRcdFx0XHR0aGlzLnJlc2V0VmFsdWUoKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmNsZWFyYWJsZSkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJWYWx1ZShldmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHQvLyB1cFxuXHRcdFx0XHR0aGlzLmZvY3VzUHJldmlvdXNPcHRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHQvLyBkb3duXG5cdFx0XHRcdHRoaXMuZm9jdXNOZXh0T3B0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAxODg6XG5cdFx0XHRcdC8vICxcblx0XHRcdFx0aWYgKHRoaXMucHJvcHMuYWxsb3dDcmVhdGUgJiYgdGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RGb2N1c2VkT3B0aW9uKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9LFxuXG5cdC8vIEVuc3VyZXMgdGhhdCB0aGUgY3VycmVudGx5IGZvY3VzZWQgb3B0aW9uIGlzIGF2YWlsYWJsZSBpbiBmaWx0ZXJlZE9wdGlvbnMuXG5cdC8vIElmIG5vdCwgcmV0dXJucyB0aGUgZmlyc3QgYXZhaWxhYmxlIG9wdGlvbi5cblx0X2dldE5ld0ZvY3VzZWRPcHRpb246IGZ1bmN0aW9uIF9nZXROZXdGb2N1c2VkT3B0aW9uKGZpbHRlcmVkT3B0aW9ucykge1xuXHRcdGZvciAodmFyIGtleSBpbiBmaWx0ZXJlZE9wdGlvbnMpIHtcblx0XHRcdGlmIChmaWx0ZXJlZE9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBmaWx0ZXJlZE9wdGlvbnNba2V5XSA9PT0gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uKSB7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXJlZE9wdGlvbnNba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Rmlyc3RGb2N1c2FibGVPcHRpb24oZmlsdGVyZWRPcHRpb25zKTtcblx0fSxcblxuXHRoYW5kbGVJbnB1dENoYW5nZTogZnVuY3Rpb24gaGFuZGxlSW5wdXRDaGFuZ2UoZXZlbnQpIHtcblx0XHQvLyBhc3NpZ24gYW4gaW50ZXJuYWwgdmFyaWFibGUgYmVjYXVzZSB3ZSBuZWVkIHRvIHVzZVxuXHRcdC8vIHRoZSBsYXRlc3QgdmFsdWUgYmVmb3JlIHNldFN0YXRlKCkgaGFzIGNvbXBsZXRlZC5cblx0XHR0aGlzLl9vcHRpb25zRmlsdGVyU3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMub25JbnB1dENoYW5nZSkge1xuXHRcdFx0dGhpcy5wcm9wcy5vbklucHV0Q2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMuYXN5bmNPcHRpb25zKSB7XG5cdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0aXNMb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRpbnB1dFZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5sb2FkQXN5bmNPcHRpb25zKGV2ZW50LnRhcmdldC52YWx1ZSwge1xuXHRcdFx0XHRpc0xvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRpc09wZW46IHRydWVcblx0XHRcdH0sIHRoaXMuX2JpbmRDbG9zZU1lbnVJZkNsaWNrZWRPdXRzaWRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyh0aGlzLnN0YXRlLm9wdGlvbnMpO1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlLFxuXHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnM6IGZpbHRlcmVkT3B0aW9ucyxcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogdGhpcy5fZ2V0TmV3Rm9jdXNlZE9wdGlvbihmaWx0ZXJlZE9wdGlvbnMpXG5cdFx0XHR9LCB0aGlzLl9iaW5kQ2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0fVxuXHR9LFxuXG5cdGF1dG9sb2FkQXN5bmNPcHRpb25zOiBmdW5jdGlvbiBhdXRvbG9hZEFzeW5jT3B0aW9ucygpIHtcblx0XHR2YXIgX3RoaXM4ID0gdGhpcztcblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNMb2FkaW5nOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5sb2FkQXN5bmNPcHRpb25zKHRoaXMucHJvcHMudmFsdWUgfHwgJycsIHsgaXNMb2FkaW5nOiBmYWxzZSB9LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyB1cGRhdGUgd2l0aCBuZXcgb3B0aW9ucyBidXQgZG9uJ3QgZm9jdXNcblx0XHRcdF90aGlzOC5zZXRWYWx1ZShfdGhpczgucHJvcHMudmFsdWUsIGZhbHNlKTtcblx0XHR9KTtcblx0fSxcblxuXHRsb2FkQXN5bmNPcHRpb25zOiBmdW5jdGlvbiBsb2FkQXN5bmNPcHRpb25zKGlucHV0LCBzdGF0ZSwgY2FsbGJhY2spIHtcblx0XHRpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkgaW5wdXQgPSAnJztcblxuXHRcdHZhciBfdGhpczkgPSB0aGlzO1xuXG5cdFx0dmFyIHRoaXNSZXF1ZXN0SWQgPSB0aGlzLl9jdXJyZW50UmVxdWVzdElkID0gcmVxdWVzdElkKys7XG5cdFx0aWYgKHRoaXMucHJvcHMuY2FjaGVBc3luY1Jlc3VsdHMpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBjYWNoZUtleSA9IGlucHV0LnNsaWNlKDAsIGkpO1xuXHRcdFx0XHRpZiAodGhpcy5fb3B0aW9uc0NhY2hlW2NhY2hlS2V5XSAmJiAoaW5wdXQgPT09IGNhY2hlS2V5IHx8IHRoaXMuX29wdGlvbnNDYWNoZVtjYWNoZUtleV0uY29tcGxldGUpKSB7XG5cdFx0XHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zQ2FjaGVbY2FjaGVLZXldLm9wdGlvbnM7XG5cdFx0XHRcdFx0dmFyIGZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKTtcblx0XHRcdFx0XHR2YXIgbmV3U3RhdGUgPSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0XHRcdFx0ZmlsdGVyZWRPcHRpb25zOiBmaWx0ZXJlZE9wdGlvbnMsXG5cdFx0XHRcdFx0XHRmb2N1c2VkT3B0aW9uOiB0aGlzLl9nZXROZXdGb2N1c2VkT3B0aW9uKGZpbHRlcmVkT3B0aW9ucylcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBzdGF0ZSkge1xuXHRcdFx0XHRcdFx0aWYgKHN0YXRlLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdFx0bmV3U3RhdGVba2V5XSA9IHN0YXRlW2tleV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXHRcdFx0XHRcdGlmIChjYWxsYmFjaykgY2FsbGJhY2suY2FsbCh0aGlzLCBuZXdTdGF0ZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIG9wdGlvbnNSZXNwb25zZUhhbmRsZXIgPSBmdW5jdGlvbiBvcHRpb25zUmVzcG9uc2VIYW5kbGVyKGVyciwgZGF0YSkge1xuXHRcdFx0aWYgKGVycikgdGhyb3cgZXJyO1xuXHRcdFx0aWYgKF90aGlzOS5wcm9wcy5jYWNoZUFzeW5jUmVzdWx0cykge1xuXHRcdFx0XHRfdGhpczkuX29wdGlvbnNDYWNoZVtpbnB1dF0gPSBkYXRhO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXNSZXF1ZXN0SWQgIT09IF90aGlzOS5fY3VycmVudFJlcXVlc3RJZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgZmlsdGVyZWRPcHRpb25zID0gX3RoaXM5LmZpbHRlck9wdGlvbnMoZGF0YS5vcHRpb25zKTtcblx0XHRcdHZhciBuZXdTdGF0ZSA9IHtcblx0XHRcdFx0b3B0aW9uczogZGF0YS5vcHRpb25zLFxuXHRcdFx0XHRmaWx0ZXJlZE9wdGlvbnM6IGZpbHRlcmVkT3B0aW9ucyxcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbjogX3RoaXM5Ll9nZXROZXdGb2N1c2VkT3B0aW9uKGZpbHRlcmVkT3B0aW9ucylcblx0XHRcdH07XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gc3RhdGUpIHtcblx0XHRcdFx0aWYgKHN0YXRlLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRuZXdTdGF0ZVtrZXldID0gc3RhdGVba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0X3RoaXM5LnNldFN0YXRlKG5ld1N0YXRlKTtcblx0XHRcdGlmIChjYWxsYmFjaykgY2FsbGJhY2suY2FsbChfdGhpczksIG5ld1N0YXRlKTtcblx0XHR9O1xuXG5cdFx0dmFyIGFzeW5jT3B0cyA9IHRoaXMucHJvcHMuYXN5bmNPcHRpb25zKGlucHV0LCBvcHRpb25zUmVzcG9uc2VIYW5kbGVyKTtcblxuXHRcdGlmIChhc3luY09wdHMgJiYgdHlwZW9mIGFzeW5jT3B0cy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRhc3luY09wdHMudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRvcHRpb25zUmVzcG9uc2VIYW5kbGVyKG51bGwsIGRhdGEpO1xuXHRcdFx0fSwgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0XHRvcHRpb25zUmVzcG9uc2VIYW5kbGVyKGVycik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gZmlsdGVyT3B0aW9ucyhvcHRpb25zLCB2YWx1ZXMpIHtcblx0XHR2YXIgZmlsdGVyVmFsdWUgPSB0aGlzLl9vcHRpb25zRmlsdGVyU3RyaW5nO1xuXHRcdHZhciBleGNsdWRlID0gKHZhbHVlcyB8fCB0aGlzLnN0YXRlLnZhbHVlcykubWFwKGZ1bmN0aW9uIChpKSB7XG5cdFx0XHRyZXR1cm4gaS52YWx1ZTtcblx0XHR9KTtcblx0XHRpZiAodGhpcy5wcm9wcy5maWx0ZXJPcHRpb25zKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb25zLmNhbGwodGhpcywgb3B0aW9ucywgZmlsdGVyVmFsdWUsIGV4Y2x1ZGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZmlsdGVyT3B0aW9uID0gZnVuY3Rpb24gZmlsdGVyT3B0aW9uKG9wKSB7XG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLm11bHRpICYmIGV4Y2x1ZGUuaW5kZXhPZihvcFt0aGlzLnByb3BzLnZhbHVlS2V5XSkgPiAtMSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZiAodGhpcy5wcm9wcy5maWx0ZXJPcHRpb24pIHJldHVybiB0aGlzLnByb3BzLmZpbHRlck9wdGlvbi5jYWxsKHRoaXMsIG9wLCBmaWx0ZXJWYWx1ZSk7XG5cdFx0XHRcdHZhciB2YWx1ZVRlc3QgPSBTdHJpbmcob3BbdGhpcy5wcm9wcy52YWx1ZUtleV0pO1xuXHRcdFx0XHR2YXIgbGFiZWxUZXN0ID0gU3RyaW5nKG9wW3RoaXMucHJvcHMubGFiZWxLZXldKTtcblx0XHRcdFx0aWYgKHRoaXMucHJvcHMuaWdub3JlQ2FzZSkge1xuXHRcdFx0XHRcdHZhbHVlVGVzdCA9IHZhbHVlVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGxhYmVsVGVzdCA9IGxhYmVsVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gIWZpbHRlclZhbHVlIHx8IHRoaXMucHJvcHMubWF0Y2hQb3MgPT09ICdzdGFydCcgPyB0aGlzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlIHx8IHRoaXMucHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnICYmIGxhYmVsVGVzdC5zdWJzdHIoMCwgZmlsdGVyVmFsdWUubGVuZ3RoKSA9PT0gZmlsdGVyVmFsdWUgOiB0aGlzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMCB8fCB0aGlzLnByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMDtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gKG9wdGlvbnMgfHwgW10pLmZpbHRlcihmaWx0ZXJPcHRpb24sIHRoaXMpO1xuXHRcdH1cblx0fSxcblxuXHRzZWxlY3RGb2N1c2VkT3B0aW9uOiBmdW5jdGlvbiBzZWxlY3RGb2N1c2VkT3B0aW9uKCkge1xuXHRcdGlmICh0aGlzLnByb3BzLmFsbG93Q3JlYXRlICYmICF0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLnNlbGVjdFZhbHVlKHRoaXMuc3RhdGUuaW5wdXRWYWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2VsZWN0VmFsdWUodGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uKTtcblx0XHR9XG5cdH0sXG5cblx0Zm9jdXNPcHRpb246IGZ1bmN0aW9uIGZvY3VzT3B0aW9uKG9wKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmb2N1c2VkT3B0aW9uOiBvcFxuXHRcdH0pO1xuXHR9LFxuXG5cdGZvY3VzTmV4dE9wdGlvbjogZnVuY3Rpb24gZm9jdXNOZXh0T3B0aW9uKCkge1xuXHRcdHRoaXMuZm9jdXNBZGphY2VudE9wdGlvbignbmV4dCcpO1xuXHR9LFxuXG5cdGZvY3VzUHJldmlvdXNPcHRpb246IGZ1bmN0aW9uIGZvY3VzUHJldmlvdXNPcHRpb24oKSB7XG5cdFx0dGhpcy5mb2N1c0FkamFjZW50T3B0aW9uKCdwcmV2aW91cycpO1xuXHR9LFxuXG5cdGZvY3VzQWRqYWNlbnRPcHRpb246IGZ1bmN0aW9uIGZvY3VzQWRqYWNlbnRPcHRpb24oZGlyKSB7XG5cdFx0dGhpcy5fZm9jdXNlZE9wdGlvblJldmVhbCA9IHRydWU7XG5cdFx0dmFyIG9wcyA9IHRoaXMuc3RhdGUuZmlsdGVyZWRPcHRpb25zLmZpbHRlcihmdW5jdGlvbiAob3ApIHtcblx0XHRcdHJldHVybiAhb3AuZGlzYWJsZWQ7XG5cdFx0fSk7XG5cdFx0aWYgKCF0aGlzLnN0YXRlLmlzT3Blbikge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0aW5wdXRWYWx1ZTogJycsXG5cdFx0XHRcdGZvY3VzZWRPcHRpb246IHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbiB8fCBvcHNbZGlyID09PSAnbmV4dCcgPyAwIDogb3BzLmxlbmd0aCAtIDFdXG5cdFx0XHR9LCB0aGlzLl9iaW5kQ2xvc2VNZW51SWZDbGlja2VkT3V0c2lkZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICghb3BzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgZm9jdXNlZEluZGV4ID0gLTE7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gPT09IG9wc1tpXSkge1xuXHRcdFx0XHRmb2N1c2VkSW5kZXggPSBpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIGZvY3VzZWRPcHRpb24gPSBvcHNbMF07XG5cdFx0aWYgKGRpciA9PT0gJ25leHQnICYmIGZvY3VzZWRJbmRleCA+IC0xICYmIGZvY3VzZWRJbmRleCA8IG9wcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRmb2N1c2VkT3B0aW9uID0gb3BzW2ZvY3VzZWRJbmRleCArIDFdO1xuXHRcdH0gZWxzZSBpZiAoZGlyID09PSAncHJldmlvdXMnKSB7XG5cdFx0XHRpZiAoZm9jdXNlZEluZGV4ID4gMCkge1xuXHRcdFx0XHRmb2N1c2VkT3B0aW9uID0gb3BzW2ZvY3VzZWRJbmRleCAtIDFdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9jdXNlZE9wdGlvbiA9IG9wc1tvcHMubGVuZ3RoIC0gMV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Zm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvblxuXHRcdH0pO1xuXHR9LFxuXG5cdHVuZm9jdXNPcHRpb246IGZ1bmN0aW9uIHVuZm9jdXNPcHRpb24ob3ApIHtcblx0XHRpZiAodGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uID09PSBvcCkge1xuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdGZvY3VzZWRPcHRpb246IG51bGxcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRidWlsZE1lbnU6IGZ1bmN0aW9uIGJ1aWxkTWVudSgpIHtcblx0XHR2YXIgX3RoaXMxMCA9IHRoaXM7XG5cblx0XHR2YXIgZm9jdXNlZFZhbHVlID0gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uID8gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uW3RoaXMucHJvcHMudmFsdWVLZXldIDogbnVsbDtcblx0XHR2YXIgcmVuZGVyTGFiZWwgPSB0aGlzLnByb3BzLm9wdGlvblJlbmRlcmVyO1xuXHRcdGlmICghcmVuZGVyTGFiZWwpIHJlbmRlckxhYmVsID0gZnVuY3Rpb24gKG9wKSB7XG5cdFx0XHRyZXR1cm4gb3BbX3RoaXMxMC5wcm9wcy5sYWJlbEtleV07XG5cdFx0fTtcblx0XHRpZiAodGhpcy5zdGF0ZS5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9jdXNlZFZhbHVlID0gZm9jdXNlZFZhbHVlID09IG51bGwgPyB0aGlzLnN0YXRlLmZpbHRlcmVkT3B0aW9uc1swXSA6IGZvY3VzZWRWYWx1ZTtcblx0XHR9XG5cdFx0Ly8gQWRkIHRoZSBjdXJyZW50IHZhbHVlIHRvIHRoZSBmaWx0ZXJlZCBvcHRpb25zIGluIGxhc3QgcmVzb3J0XG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLnN0YXRlLmZpbHRlcmVkT3B0aW9ucztcblx0XHRpZiAodGhpcy5wcm9wcy5hbGxvd0NyZWF0ZSAmJiB0aGlzLnN0YXRlLmlucHV0VmFsdWUudHJpbSgpKSB7XG5cdFx0XHR2YXIgaW5wdXRWYWx1ZSA9IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZTtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLnNsaWNlKCk7XG5cdFx0XHR2YXIgbmV3T3B0aW9uID0gdGhpcy5wcm9wcy5uZXdPcHRpb25DcmVhdG9yID8gdGhpcy5wcm9wcy5uZXdPcHRpb25DcmVhdG9yKGlucHV0VmFsdWUpIDoge1xuXHRcdFx0XHR2YWx1ZTogaW5wdXRWYWx1ZSxcblx0XHRcdFx0bGFiZWw6IGlucHV0VmFsdWUsXG5cdFx0XHRcdGNyZWF0ZTogdHJ1ZVxuXHRcdFx0fTtcblx0XHRcdG9wdGlvbnMudW5zaGlmdChuZXdPcHRpb24pO1xuXHRcdH1cblx0XHR2YXIgb3BzID0gT2JqZWN0LmtleXMob3B0aW9ucykubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHZhciBvcCA9IG9wdGlvbnNba2V5XTtcblx0XHRcdHZhciBpc1NlbGVjdGVkID0gdGhpcy5zdGF0ZS52YWx1ZSA9PT0gb3BbdGhpcy5wcm9wcy52YWx1ZUtleV07XG5cdFx0XHR2YXIgaXNGb2N1c2VkID0gZm9jdXNlZFZhbHVlID09PSBvcFt0aGlzLnByb3BzLnZhbHVlS2V5XTtcblx0XHRcdHZhciBvcHRpb25DbGFzcyA9IGNsYXNzZXMoe1xuXHRcdFx0XHQnU2VsZWN0LW9wdGlvbic6IHRydWUsXG5cdFx0XHRcdCdpcy1zZWxlY3RlZCc6IGlzU2VsZWN0ZWQsXG5cdFx0XHRcdCdpcy1mb2N1c2VkJzogaXNGb2N1c2VkLFxuXHRcdFx0XHQnaXMtZGlzYWJsZWQnOiBvcC5kaXNhYmxlZFxuXHRcdFx0fSk7XG5cdFx0XHR2YXIgcmVmID0gaXNGb2N1c2VkID8gJ2ZvY3VzZWQnIDogbnVsbDtcblx0XHRcdHZhciBtb3VzZUVudGVyID0gdGhpcy5mb2N1c09wdGlvbi5iaW5kKHRoaXMsIG9wKTtcblx0XHRcdHZhciBtb3VzZUxlYXZlID0gdGhpcy51bmZvY3VzT3B0aW9uLmJpbmQodGhpcywgb3ApO1xuXHRcdFx0dmFyIG1vdXNlRG93biA9IHRoaXMuc2VsZWN0VmFsdWUuYmluZCh0aGlzLCBvcCk7XG5cdFx0XHR2YXIgb3B0aW9uUmVzdWx0ID0gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLm9wdGlvbkNvbXBvbmVudCwge1xuXHRcdFx0XHRrZXk6ICdvcHRpb24tJyArIG9wW3RoaXMucHJvcHMudmFsdWVLZXldLFxuXHRcdFx0XHRjbGFzc05hbWU6IG9wdGlvbkNsYXNzLFxuXHRcdFx0XHRyZW5kZXJGdW5jOiByZW5kZXJMYWJlbCxcblx0XHRcdFx0bW91c2VFbnRlcjogbW91c2VFbnRlcixcblx0XHRcdFx0bW91c2VMZWF2ZTogbW91c2VMZWF2ZSxcblx0XHRcdFx0bW91c2VEb3duOiBtb3VzZURvd24sXG5cdFx0XHRcdGNsaWNrOiBtb3VzZURvd24sXG5cdFx0XHRcdGFkZExhYmVsVGV4dDogdGhpcy5wcm9wcy5hZGRMYWJlbFRleHQsXG5cdFx0XHRcdG9wdGlvbjogb3AsXG5cdFx0XHRcdHJlZjogcmVmXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBvcHRpb25SZXN1bHQ7XG5cdFx0fSwgdGhpcyk7XG5cblx0XHRpZiAob3BzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIG9wcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIG5vUmVzdWx0c1RleHQsIHByb21wdENsYXNzO1xuXHRcdFx0aWYgKHRoaXMuaXNMb2FkaW5nKCkpIHtcblx0XHRcdFx0cHJvbXB0Q2xhc3MgPSAnU2VsZWN0LXNlYXJjaGluZyc7XG5cdFx0XHRcdG5vUmVzdWx0c1RleHQgPSB0aGlzLnByb3BzLnNlYXJjaGluZ1RleHQ7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuc3RhdGUuaW5wdXRWYWx1ZSB8fCAhdGhpcy5wcm9wcy5hc3luY09wdGlvbnMpIHtcblx0XHRcdFx0cHJvbXB0Q2xhc3MgPSAnU2VsZWN0LW5vcmVzdWx0cyc7XG5cdFx0XHRcdG5vUmVzdWx0c1RleHQgPSB0aGlzLnByb3BzLm5vUmVzdWx0c1RleHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwcm9tcHRDbGFzcyA9ICdTZWxlY3Qtc2VhcmNoLXByb21wdCc7XG5cdFx0XHRcdG5vUmVzdWx0c1RleHQgPSB0aGlzLnByb3BzLnNlYXJjaFByb21wdFRleHQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IHByb21wdENsYXNzIH0sXG5cdFx0XHRcdG5vUmVzdWx0c1RleHRcblx0XHRcdCk7XG5cdFx0fVxuXHR9LFxuXG5cdGhhbmRsZU9wdGlvbkxhYmVsQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZU9wdGlvbkxhYmVsQ2xpY2sodmFsdWUsIGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMucHJvcHMub25PcHRpb25MYWJlbENsaWNrKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uT3B0aW9uTGFiZWxDbGljayh2YWx1ZSwgZXZlbnQpO1xuXHRcdH1cblx0fSxcblxuXHRpc0xvYWRpbmc6IGZ1bmN0aW9uIGlzTG9hZGluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5pc0xvYWRpbmcgfHwgdGhpcy5zdGF0ZS5pc0xvYWRpbmc7XG5cdH0sXG5cblx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0dmFyIHNlbGVjdENsYXNzID0gY2xhc3NlcygnU2VsZWN0JywgdGhpcy5wcm9wcy5jbGFzc05hbWUsIHtcblx0XHRcdCdTZWxlY3QtLW11bHRpJzogdGhpcy5wcm9wcy5tdWx0aSxcblx0XHRcdCdpcy1zZWFyY2hhYmxlJzogdGhpcy5wcm9wcy5zZWFyY2hhYmxlLFxuXHRcdFx0J2lzLW9wZW4nOiB0aGlzLnN0YXRlLmlzT3Blbixcblx0XHRcdCdpcy1mb2N1c2VkJzogdGhpcy5zdGF0ZS5pc0ZvY3VzZWQsXG5cdFx0XHQnaXMtbG9hZGluZyc6IHRoaXMuaXNMb2FkaW5nKCksXG5cdFx0XHQnaXMtZGlzYWJsZWQnOiB0aGlzLnByb3BzLmRpc2FibGVkLFxuXHRcdFx0J2hhcy12YWx1ZSc6IHRoaXMuc3RhdGUudmFsdWVcblx0XHR9KTtcblx0XHR2YXIgdmFsdWUgPSBbXTtcblx0XHRpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuXHRcdFx0dGhpcy5zdGF0ZS52YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRcdHZhciBvbk9wdGlvbkxhYmVsQ2xpY2sgPSB0aGlzLmhhbmRsZU9wdGlvbkxhYmVsQ2xpY2suYmluZCh0aGlzLCB2YWwpO1xuXHRcdFx0XHR2YXIgb25SZW1vdmUgPSB0aGlzLnJlbW92ZVZhbHVlLmJpbmQodGhpcywgdmFsKTtcblx0XHRcdFx0dmFyIHZhbHVlQ29tcG9uZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLnZhbHVlQ29tcG9uZW50LCB7XG5cdFx0XHRcdFx0a2V5OiB2YWwudmFsdWUsXG5cdFx0XHRcdFx0b3B0aW9uOiB2YWwsXG5cdFx0XHRcdFx0cmVuZGVyZXI6IHRoaXMucHJvcHMudmFsdWVSZW5kZXJlcixcblx0XHRcdFx0XHRvcHRpb25MYWJlbENsaWNrOiAhIXRoaXMucHJvcHMub25PcHRpb25MYWJlbENsaWNrLFxuXHRcdFx0XHRcdG9uT3B0aW9uTGFiZWxDbGljazogb25PcHRpb25MYWJlbENsaWNrLFxuXHRcdFx0XHRcdG9uUmVtb3ZlOiBvblJlbW92ZSxcblx0XHRcdFx0XHRkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0dmFsdWUucHVzaCh2YWx1ZUNvbXBvbmVudCk7XG5cdFx0XHR9LCB0aGlzKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSAmJiAoIXRoaXMucHJvcHMubXVsdGkgfHwgIXZhbHVlLmxlbmd0aCkpIHtcblx0XHRcdHZhciB2YWwgPSB0aGlzLnN0YXRlLnZhbHVlc1swXSB8fCBudWxsO1xuXHRcdFx0aWYgKHRoaXMucHJvcHMudmFsdWVSZW5kZXJlciAmJiAhIXRoaXMuc3RhdGUudmFsdWVzLmxlbmd0aCkge1xuXHRcdFx0XHR2YWx1ZS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoVmFsdWUsIHtcblx0XHRcdFx0XHRrZXk6IDAsXG5cdFx0XHRcdFx0b3B0aW9uOiB2YWwsXG5cdFx0XHRcdFx0cmVuZGVyZXI6IHRoaXMucHJvcHMudmFsdWVSZW5kZXJlcixcblx0XHRcdFx0XHRkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCB9KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgc2luZ2xlVmFsdWVDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuc2luZ2xlVmFsdWVDb21wb25lbnQsIHtcblx0XHRcdFx0XHRrZXk6ICdwbGFjZWhvbGRlcicsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbCxcblx0XHRcdFx0XHRwbGFjZWhvbGRlcjogdGhpcy5zdGF0ZS5wbGFjZWhvbGRlclxuXHRcdFx0XHR9KTtcblx0XHRcdFx0dmFsdWUucHVzaChzaW5nbGVWYWx1ZUNvbXBvbmVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gbG9hZGluZyBzcGlubmVyXG5cdFx0dmFyIGxvYWRpbmcgPSB0aGlzLmlzTG9hZGluZygpID8gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWxvYWRpbmctem9uZScsICdhcmlhLWhpZGRlbic6ICd0cnVlJyB9LFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWxvYWRpbmcnIH0pXG5cdFx0KSA6IG51bGw7XG5cblx0XHQvLyBjbGVhciBcInhcIiBidXR0b25cblx0XHR2YXIgY2xlYXIgPSB0aGlzLnByb3BzLmNsZWFyYWJsZSAmJiB0aGlzLnN0YXRlLnZhbHVlICYmICF0aGlzLnByb3BzLmRpc2FibGVkICYmICF0aGlzLmlzTG9hZGluZygpID8gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyLXpvbmUnLCB0aXRsZTogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCwgJ2FyaWEtbGFiZWwnOiB0aGlzLnByb3BzLm11bHRpID8gdGhpcy5wcm9wcy5jbGVhckFsbFRleHQgOiB0aGlzLnByb3BzLmNsZWFyVmFsdWVUZXh0LCBvbk1vdXNlRG93bjogdGhpcy5jbGVhclZhbHVlLCBvblRvdWNoRW5kOiB0aGlzLmNsZWFyVmFsdWUsIG9uQ2xpY2s6IHRoaXMuY2xlYXJWYWx1ZSB9LFxuXHRcdFx0UmVhY3QuY3JlYXRlRWxlbWVudCgnc3BhbicsIHsgY2xhc3NOYW1lOiAnU2VsZWN0LWNsZWFyJywgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiAnJnRpbWVzOycgfSB9KVxuXHRcdCkgOiBudWxsO1xuXG5cdFx0Ly8gaW5kaWNhdG9yIGFycm93XG5cdFx0dmFyIGFycm93ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdCdzcGFuJyxcblx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWFycm93LXpvbmUnLCBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd25PbkFycm93IH0sXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6ICdTZWxlY3QtYXJyb3cnLCBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd25PbkFycm93IH0pXG5cdFx0KTtcblxuXHRcdHZhciBtZW51O1xuXHRcdHZhciBtZW51UHJvcHM7XG5cdFx0aWYgKHRoaXMuc3RhdGUuaXNPcGVuKSB7XG5cdFx0XHRtZW51UHJvcHMgPSB7XG5cdFx0XHRcdHJlZjogJ21lbnUnLFxuXHRcdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtbWVudScsXG5cdFx0XHRcdG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bk9uTWVudVxuXHRcdFx0fTtcblx0XHRcdG1lbnUgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyByZWY6ICdzZWxlY3RNZW51Q29udGFpbmVyJywgY2xhc3NOYW1lOiAnU2VsZWN0LW1lbnUtb3V0ZXInIH0sXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdFx0bWVudVByb3BzLFxuXHRcdFx0XHRcdHRoaXMuYnVpbGRNZW51KClcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHR2YXIgaW5wdXQ7XG5cdFx0dmFyIGlucHV0UHJvcHMgPSB7XG5cdFx0XHRyZWY6ICdpbnB1dCcsXG5cdFx0XHRjbGFzc05hbWU6ICdTZWxlY3QtaW5wdXQgJyArICh0aGlzLnByb3BzLmlucHV0UHJvcHMuY2xhc3NOYW1lIHx8ICcnKSxcblx0XHRcdHRhYkluZGV4OiB0aGlzLnByb3BzLnRhYkluZGV4IHx8IDAsXG5cdFx0XHRvbkZvY3VzOiB0aGlzLmhhbmRsZUlucHV0Rm9jdXMsXG5cdFx0XHRvbkJsdXI6IHRoaXMuaGFuZGxlSW5wdXRCbHVyXG5cdFx0fTtcblx0XHRmb3IgKHZhciBrZXkgaW4gdGhpcy5wcm9wcy5pbnB1dFByb3BzKSB7XG5cdFx0XHRpZiAodGhpcy5wcm9wcy5pbnB1dFByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5ICE9PSAnY2xhc3NOYW1lJykge1xuXHRcdFx0XHRpbnB1dFByb3BzW2tleV0gPSB0aGlzLnByb3BzLmlucHV0UHJvcHNba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcblx0XHRcdGlmICh0aGlzLnByb3BzLnNlYXJjaGFibGUpIHtcblx0XHRcdFx0aW5wdXQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCBfZXh0ZW5kcyh7IHZhbHVlOiB0aGlzLnN0YXRlLmlucHV0VmFsdWUsIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlLCBtaW5XaWR0aDogJzUnIH0sIGlucHV0UHJvcHMpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0XHRpbnB1dFByb3BzLFxuXHRcdFx0XHRcdCfCoCdcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCF0aGlzLnByb3BzLm11bHRpIHx8ICF0aGlzLnN0YXRlLnZhbHVlcy5sZW5ndGgpIHtcblx0XHRcdGlucHV0ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWlucHV0JyB9LFxuXHRcdFx0XHQnwqAnXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2RpdicsXG5cdFx0XHR7IHJlZjogJ3dyYXBwZXInLCBjbGFzc05hbWU6IHNlbGVjdENsYXNzIH0sXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ2hpZGRlbicsIHJlZjogJ3ZhbHVlJywgbmFtZTogdGhpcy5wcm9wcy5uYW1lLCB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSwgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQgfSksXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtY29udHJvbCcsIHJlZjogJ2NvbnRyb2wnLCBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93biwgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLCBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZU1vdXNlRG93biB9LFxuXHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0aW5wdXQsXG5cdFx0XHRcdGxvYWRpbmcsXG5cdFx0XHRcdGNsZWFyLFxuXHRcdFx0XHRhcnJvd1xuXHRcdFx0KSxcblx0XHRcdG1lbnVcblx0XHQpO1xuXHR9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdDtcbn0se1wiLi9PcHRpb25cIjoxNjQsXCIuL1NpbmdsZVZhbHVlXCI6MTY2LFwiLi9WYWx1ZVwiOjE2NyxcImNsYXNzbmFtZXNcIjoxNCxcInJlYWN0XCI6Mjk1LFwicmVhY3QtZG9tXCI6MTE2LFwicmVhY3QtaW5wdXQtYXV0b3NpemVcIjoxMTd9XSwxNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBTaW5nbGVWYWx1ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdTaW5nbGVWYWx1ZScsXG5cblx0cHJvcFR5cGVzOiB7XG5cdFx0cGxhY2Vob2xkZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIHRoaXMgaXMgZGVmYXVsdCB2YWx1ZSBwcm92aWRlZCBieSBSZWFjdC1TZWxlY3QgYmFzZWQgY29tcG9uZW50XG5cdFx0dmFsdWU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QgLy8gc2VsZWN0ZWQgb3B0aW9uXG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBjbGFzc05hbWVzID0gY2xhc3NlcygnU2VsZWN0LXBsYWNlaG9sZGVyJywgdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnZhbHVlLmNsYXNzTmFtZSk7XG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHtcblx0XHRcdFx0Y2xhc3NOYW1lOiBjbGFzc05hbWVzLFxuXHRcdFx0XHRzdHlsZTogdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnZhbHVlLnN0eWxlLFxuXHRcdFx0XHR0aXRsZTogdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLnZhbHVlLnRpdGxlXG5cdFx0XHR9LFxuXHRcdFx0dGhpcy5wcm9wcy5wbGFjZWhvbGRlclxuXHRcdCk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbmdsZVZhbHVlO1xufSx7XCJjbGFzc25hbWVzXCI6MTQsXCJyZWFjdFwiOjI5NX1dLDE2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgY2xhc3NlcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIFZhbHVlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG5cdGRpc3BsYXlOYW1lOiAnVmFsdWUnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdGRpc2FibGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gZGlzYWJsZWQgcHJvcCBwYXNzZWQgdG8gUmVhY3RTZWxlY3Rcblx0XHRvbk9wdGlvbkxhYmVsQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIG9uIHZhbHVlIGxhYmVsXG5cdFx0b25SZW1vdmU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBtZXRob2QgdG8gaGFuZGxlIHJlbW92ZSBvZiB0aGF0IHZhbHVlXG5cdFx0b3B0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIC8vIG9wdGlvbiBwYXNzZWQgdG8gY29tcG9uZW50XG5cdFx0b3B0aW9uTGFiZWxDbGljazogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIGluZGljYXRlcyBpZiBvbk9wdGlvbkxhYmVsQ2xpY2sgc2hvdWxkIGJlIGhhbmRsZWRcblx0XHRyZW5kZXJlcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMgLy8gbWV0aG9kIHRvIHJlbmRlciBvcHRpb24gbGFiZWwgcGFzc2VkIHRvIFJlYWN0U2VsZWN0XG5cdH0sXG5cblx0YmxvY2tFdmVudDogZnVuY3Rpb24gYmxvY2tFdmVudChldmVudCkge1xuXHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9LFxuXG5cdGhhbmRsZU9uUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVPblJlbW92ZShldmVudCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuXHRcdFx0dGhpcy5wcm9wcy5vblJlbW92ZShldmVudCk7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHRcdHZhciBsYWJlbCA9IHRoaXMucHJvcHMub3B0aW9uLmxhYmVsO1xuXHRcdGlmICh0aGlzLnByb3BzLnJlbmRlcmVyKSB7XG5cdFx0XHRsYWJlbCA9IHRoaXMucHJvcHMucmVuZGVyZXIodGhpcy5wcm9wcy5vcHRpb24pO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5wcm9wcy5vblJlbW92ZSAmJiAhdGhpcy5wcm9wcy5vcHRpb25MYWJlbENsaWNrKSB7XG5cdFx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjbGFzc05hbWU6IGNsYXNzZXMoJ1NlbGVjdC12YWx1ZScsIHRoaXMucHJvcHMub3B0aW9uLmNsYXNzTmFtZSksXG5cdFx0XHRcdFx0c3R5bGU6IHRoaXMucHJvcHMub3B0aW9uLnN0eWxlLFxuXHRcdFx0XHRcdHRpdGxlOiB0aGlzLnByb3BzLm9wdGlvbi50aXRsZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRsYWJlbFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5vcHRpb25MYWJlbENsaWNrKSB7XG5cdFx0XHRsYWJlbCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdhJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6IGNsYXNzZXMoJ1NlbGVjdC1pdGVtLWxhYmVsX19hJywgdGhpcy5wcm9wcy5vcHRpb24uY2xhc3NOYW1lKSxcblx0XHRcdFx0XHRvbk1vdXNlRG93bjogdGhpcy5ibG9ja0V2ZW50LFxuXHRcdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMucHJvcHMub25PcHRpb25MYWJlbENsaWNrLFxuXHRcdFx0XHRcdG9uQ2xpY2s6IHRoaXMucHJvcHMub25PcHRpb25MYWJlbENsaWNrLFxuXHRcdFx0XHRcdHN0eWxlOiB0aGlzLnByb3BzLm9wdGlvbi5zdHlsZSxcblx0XHRcdFx0XHR0aXRsZTogdGhpcy5wcm9wcy5vcHRpb24udGl0bGUgfSxcblx0XHRcdFx0bGFiZWxcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbGFzc2VzKCdTZWxlY3QtaXRlbScsIHRoaXMucHJvcHMub3B0aW9uLmNsYXNzTmFtZSksXG5cdFx0XHRcdHN0eWxlOiB0aGlzLnByb3BzLm9wdGlvbi5zdHlsZSxcblx0XHRcdFx0dGl0bGU6IHRoaXMucHJvcHMub3B0aW9uLnRpdGxlIH0sXG5cdFx0XHRSZWFjdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnc3BhbicsXG5cdFx0XHRcdHsgY2xhc3NOYW1lOiAnU2VsZWN0LWl0ZW0taWNvbicsXG5cdFx0XHRcdFx0b25Nb3VzZURvd246IHRoaXMuYmxvY2tFdmVudCxcblx0XHRcdFx0XHRvbkNsaWNrOiB0aGlzLmhhbmRsZU9uUmVtb3ZlLFxuXHRcdFx0XHRcdG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlT25SZW1vdmUgfSxcblx0XHRcdFx0J8OXJ1xuXHRcdFx0KSxcblx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCdzcGFuJyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICdTZWxlY3QtaXRlbS1sYWJlbCcgfSxcblx0XHRcdFx0bGFiZWxcblx0XHRcdClcblx0XHQpO1xuXHR9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbHVlO1xufSx7XCJjbGFzc25hbWVzXCI6MTQsXCJyZWFjdFwiOjI5NX1dLDE2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQXV0b0ZvY3VzVXRpbHNcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvZm9jdXNOb2RlJyk7XG5cbnZhciBNaXhpbiA9IHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgIGZvY3VzTm9kZShmaW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgQXV0b0ZvY3VzVXRpbHMgPSB7XG4gIE1peGluOiBNaXhpbixcblxuICBmb2N1c0RPTUNvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIGZvY3VzTm9kZShSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCkpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9Gb2N1c1V0aWxzO1xufSx7XCIuL1JlYWN0TW91bnRcIjoyMzIsXCIuL2ZpbmRET01Ob2RlXCI6Mjc0LFwiZmJqcy9saWIvZm9jdXNOb2RlXCI6Mjh9XSwxNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1IEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSA9IHJlcXVpcmUoJy4vRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlJyk7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0lucHV0RXZlbnQnKTtcblxudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTsgLy8gVGFiLCBSZXR1cm4sIEVzYywgU3BhY2VcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xuXG52YXIgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnQ29tcG9zaXRpb25FdmVudCcgaW4gd2luZG93O1xuXG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHtcbiAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xufVxuXG4vLyBXZWJraXQgb2ZmZXJzIGEgdmVyeSB1c2VmdWwgYHRleHRJbnB1dGAgZXZlbnQgdGhhdCBjYW4gYmUgdXNlZCB0b1xuLy8gZGlyZWN0bHkgcmVwcmVzZW50IGBiZWZvcmVJbnB1dGAuIFRoZSBJRSBgdGV4dGlucHV0YCBldmVudCBpcyBub3QgYXNcbi8vIHVzZWZ1bCwgc28gd2UgZG9uJ3QgdXNlIGl0LlxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlICYmICFpc1ByZXN0bygpO1xuXG4vLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxudmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpO1xuXG4vKipcbiAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG4gKiB0ZXh0IGlucHV0IGV2ZW50cy4gUmVseSBvbiBrZXlwcmVzcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMjtcbn1cblxudmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbnZhciBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZShTUEFDRUJBUl9DT0RFKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkJlZm9yZUlucHV0OiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsIHRvcExldmVsVHlwZXMudG9wVGV4dElucHV0LCB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ29tcG9zaXRpb25FbmQ6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsIHRvcExldmVsVHlwZXMudG9wS2V5VXAsIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblN0YXJ0OiBudWxsIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZTogbnVsbCB9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Db21wb3NpdGlvblVwZGF0ZTogbnVsbCB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsIH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGUsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGV2ZW50VHlwZTtcbiAgdmFyIGZhbGxiYWNrRGF0YTtcblxuICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudCkge1xuICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gIH0gZWxzZSBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICB9XG5cbiAgaWYgKCFldmVudFR5cGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSkge1xuICAgIC8vIFRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIGlzIHN0b3JlZCBzdGF0aWNhbGx5IGFuZCBtdXN0IG5vdCBiZVxuICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cbiAgICBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbiAmJiBldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydCkge1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmdldFBvb2xlZCh0b3BMZXZlbFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcbiAgICAgIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmdldFBvb2xlZChldmVudFR5cGUsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgaWYgKGZhbGxiYWNrRGF0YSkge1xuICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgcHJvcGVydHkgb2YgbmF0aXZlIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UuXG4gICAgZXZlbnQuZGF0YSA9IGZhbGxiYWNrRGF0YTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VzdG9tRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGlmIChjdXN0b21EYXRhICE9PSBudWxsKSB7XG4gICAgICBldmVudC5kYXRhID0gY3VzdG9tRGF0YTtcbiAgICB9XG4gIH1cblxuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogSWYgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50cyBhcmUgYXZhaWxhYmxlLCBvdXIgZ29hbCBpcyB0byBtYWtlXG4gICAgICAgKiB1c2Ugb2YgdGhlbS4gSG93ZXZlciwgdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2U6IHRoZSBzcGFjZWJhciBrZXkuXG4gICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgKiBjYW5jZWxzIGNoYXJhY3RlciBpbnNlcnRpb24sIGJ1dCBpdCAqYWxzbyogY2F1c2VzIHRoZSBicm93c2VyXG4gICAgICAgKiB0byBmYWxsIGJhY2sgdG8gaXRzIGRlZmF1bHQgc3BhY2ViYXIgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZVxuICAgICAgICogcGFnZS5cbiAgICAgICAqXG4gICAgICAgKiBUcmFja2luZyBhdDpcbiAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAqXG4gICAgICAgKiBUbyBhdm9pZCB0aGlzIGlzc3VlLCB1c2UgdGhlIGtleXByZXNzIGV2ZW50IGFzIGlmIG5vIGB0ZXh0SW5wdXRgXG4gICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgKi9cbiAgICAgIHZhciB3aGljaCA9IG5hdGl2ZUV2ZW50LndoaWNoO1xuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcblxuICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBibGFja2xpc3QgaXQuXG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYXJzO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIEZvciBvdGhlciBuYXRpdmUgZXZlbnQgdHlwZXMsIGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gVGhlIGZhbGxiYWNrIHN0cmluZyBmb3IgdGhpcyBgYmVmb3JlSW5wdXRgIGV2ZW50LlxuICovXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCB8fCBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGNoYXJzO1xuXG4gIGlmIChjYW5Vc2VUZXh0SW5wdXRFdmVudCkge1xuICAgIGNoYXJzID0gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBjaGFycyA9IGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgfVxuXG4gIC8vIElmIG5vIGNoYXJhY3RlcnMgYXJlIGJlaW5nIGluc2VydGVkLCBubyBCZWZvcmVJbnB1dCBldmVudCBzaG91bGRcbiAgLy8gYmUgZmlyZWQuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuICogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDUvI2V2ZW50cy1pbnB1dGV2ZW50cy5cbiAqXG4gKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG4gKiBhdmFpbGFibGUgaW4gQ2hyb21lLCBTYWZhcmksIE9wZXJhLCBhbmQgSUUuIFRoaXMgZXZlbnQgZmlyZXMgYWZ0ZXJcbiAqIGBvbktleVByZXNzYCBhbmQgYG9uQ29tcG9zaXRpb25FbmRgLCBidXQgYmVmb3JlIGBvbklucHV0YC5cbiAqXG4gKiBgYmVmb3JlSW5wdXRgIGlzIHNwZWMnZCBidXQgbm90IGltcGxlbWVudGVkIGluIGFueSBicm93c2VycywgYW5kXG4gKiB0aGUgYGlucHV0YCBldmVudCBkb2VzIG5vdCBwcm92aWRlIGFueSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBoYXNcbiAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuICogYXZhaWxhYmxlIGV2ZW50IHRvIGlkZW50aWZ5IHRoZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGluc2VydGVkXG4gKiBpbnRvIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBsdWdpbiBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyBgY29tcG9zaXRpb25gIGV2ZW50cywgdGh1c1xuICogYWxsb3dpbmcgdXMgdG8gc2hhcmUgY29tcG9zaXRpb24gZmFsbGJhY2sgY29kZSBmb3IgYm90aCBgYmVmb3JlSW5wdXRgIGFuZFxuICogYGNvbXBvc2l0aW9uYCBldmVudCB0eXBlcy5cbiAqL1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFtleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpLCBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpXTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luO1xufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6MTgxLFwiLi9FdmVudFByb3BhZ2F0b3JzXCI6MTg1LFwiLi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGVcIjoxODYsXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIjoyNTcsXCIuL1N5bnRoZXRpY0lucHV0RXZlbnRcIjoyNjEsXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjIwLFwiZmJqcy9saWIva2V5T2ZcIjozOH1dLDE3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBNb3N0IHN0eWxlIHByb3BlcnRpZXMgY2FuIGJlIHVuc2V0IGJ5IGRvaW5nIC5zdHlsZVtwcm9wXSA9ICcnIGJ1dCBJRThcbiAqIGRvZXNuJ3QgbGlrZSBkb2luZyB0aGF0IHdpdGggc2hvcnRoYW5kIHByb3BlcnRpZXMgc28gZm9yIHRoZSBwcm9wZXJ0aWVzIHRoYXRcbiAqIElFOCBicmVha3Mgb24sIHdoaWNoIGFyZSBsaXN0ZWQgaGVyZSwgd2UgaW5zdGVhZCB1bnNldCBlYWNoIG9mIHRoZVxuICogaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLiBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzODUuXG4gKiBUaGUgNC12YWx1ZSAnY2xvY2snIHByb3BlcnRpZXMgbGlrZSBtYXJnaW4sIHBhZGRpbmcsIGJvcmRlci13aWR0aCBzZWVtIHRvXG4gKiBiZWhhdmUgd2l0aG91dCBhbnkgcHJvYmxlbXMuIEN1cmlvdXNseSwgbGlzdC1zdHlsZSB3b3JrcyB0b28gd2l0aG91dCBhbnlcbiAqIHNwZWNpYWwgcHJvZGRpbmcuXG4gKi9cbnZhciBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMgPSB7XG4gIGJhY2tncm91bmQ6IHtcbiAgICBiYWNrZ3JvdW5kQXR0YWNobWVudDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRydWUsXG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlXG4gIH0sXG4gIGJhY2tncm91bmRQb3NpdGlvbjoge1xuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICBvdXRsaW5lV2lkdGg6IHRydWUsXG4gICAgb3V0bGluZVN0eWxlOiB0cnVlLFxuICAgIG91dGxpbmVDb2xvcjogdHJ1ZVxuICB9XG59O1xuXG52YXIgQ1NTUHJvcGVydHkgPSB7XG4gIGlzVW5pdGxlc3NOdW1iZXI6IGlzVW5pdGxlc3NOdW1iZXIsXG4gIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5O1xufSx7fV0sMTcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlPcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgY2FtZWxpemVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZScpO1xudmFyIGRhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKCcuL2Rhbmdlcm91c1N0eWxlVmFsdWUnKTtcbnZhciBoeXBoZW5hdGVTdHlsZU5hbWUgPSByZXF1aXJlKCdmYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUnKTtcbnZhciBtZW1vaXplU3RyaW5nT25seSA9IHJlcXVpcmUoJ2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSBmYWxzZTtcbnZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgdGVtcFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHRyeSB7XG4gICAgLy8gSUU4IHRocm93cyBcIkludmFsaWQgYXJndW1lbnQuXCIgaWYgcmVzZXR0aW5nIHNob3J0aGFuZCBzdHlsZSBwcm9wZXJ0aWVzLlxuICAgIHRlbXBTdHlsZS5mb250ID0gJyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyA9IHRydWU7XG4gIH1cbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuXG4gIC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuICB2YXIgYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuID0gLztcXHMqJC87XG5cbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG5cbiAgdmFyIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpKSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLCBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiAnICsgJ1RyeSBcIiVzOiAlc1wiIGluc3RlYWQuJywgbmFtZSwgdmFsdWUucmVwbGFjZShiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4sICcnKSkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JTdHlsZXM6IGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgc2VyaWFsaXplZCArPSBwcm9jZXNzU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUpICsgJzsnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgbXVsdGlwbGUgc3R5bGVzIG9uIGEgbm9kZS4gIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzXG4gICAqICcnIChlbXB0eSBzdHJpbmcpLCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICAgKi9cbiAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uIChub2RlLCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdKTtcbiAgICAgIGlmIChzdHlsZU5hbWUgPT09ICdmbG9hdCcpIHtcbiAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVGbG9hdEFjY2Vzc29yO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUpIHtcbiAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhwYW5zaW9uID0gaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgJiYgQ1NTUHJvcGVydHkuc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zW3N0eWxlTmFtZV07XG4gICAgICAgIGlmIChleHBhbnNpb24pIHtcbiAgICAgICAgICAvLyBTaG9ydGhhbmQgcHJvcGVydHkgdGhhdCBJRTggd29uJ3QgbGlrZSB1bnNldHRpbmcsIHNvIHVuc2V0IGVhY2hcbiAgICAgICAgICAvLyBjb21wb25lbnQgdG8gcGxhY2F0ZSBpdFxuICAgICAgICAgIGZvciAodmFyIGluZGl2aWR1YWxTdHlsZU5hbWUgaW4gZXhwYW5zaW9uKSB7XG4gICAgICAgICAgICBzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKENTU1Byb3BlcnR5T3BlcmF0aW9ucywgJ0NTU1Byb3BlcnR5T3BlcmF0aW9ucycsIHtcbiAgc2V0VmFsdWVGb3JTdHlsZXM6ICdzZXRWYWx1ZUZvclN0eWxlcydcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0NTU1Byb3BlcnR5XCI6MTcwLFwiLi9SZWFjdFBlcmZcIjoyMzgsXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIjoyNzEsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MjAsXCJmYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZVwiOjIyLFwiZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lXCI6MzMsXCJmYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seVwiOjQwLFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMTcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ2FsbGJhY2tRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCBwc2V1ZG8tZXZlbnQgbW9kdWxlIHRvIGhlbHAga2VlcCB0cmFjayBvZiBjb21wb25lbnRzIHdhaXRpbmcgdG9cbiAqIGJlIG5vdGlmaWVkIHdoZW4gdGhlaXIgRE9NIHJlcHJlc2VudGF0aW9ucyBhcmUgYXZhaWxhYmxlIGZvciB1c2UuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIGBQb29sZWRDbGFzc2AsIHNvIHlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byBpbnN0YW50aWF0ZSB0aGlzLlxuICogSW5zdGVhZCwgdXNlIGBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpYC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RNb3VudFJlYWR5XG4gKiBAaW1wbGVtZW50cyBQb29sZWRDbGFzc1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbn1cblxuYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIEludm9rZWQgd2hlbiBgbm90aWZ5QWxsYCBpcyBpbnZva2VkLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgQ29udGV4dCB0byBjYWxsIGBjYWxsYmFja2Agd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBhbGwgZW5xdWV1ZWQgY2FsbGJhY2tzIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGlzIGludm9rZWQgYWZ0ZXJcbiAgICogdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIGNvbXBvbmVudCBoYXMgYmVlbiBjcmVhdGVkIG9yIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbm90aWZ5QWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAhKGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcy5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUG9vbGVkQ2xhc3NcIjoxOTAsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0fV0sMTczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDaGFuZ2VFdmVudFBsdWdpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DaGFuZ2U6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNoYW5nZUNhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UsIHRvcExldmVsVHlwZXMudG9wQ2xpY2ssIHRvcExldmVsVHlwZXMudG9wRm9jdXMsIHRvcExldmVsVHlwZXMudG9wSW5wdXQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2VdXG4gIH1cbn07XG5cbi8qKlxuICogRm9yIElFIHNoaW1zXG4gKi9cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKCEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDgpO1xufVxuXG5mdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmNoYW5nZSwgYWN0aXZlRWxlbWVudElELCBuYXRpdmVFdmVudCwgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpKTtcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SUQpIHtcbiAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgYWN0aXZlRWxlbWVudElEID0gdGFyZ2V0SUQ7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG59XG5cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25jaGFuZ2UnLCBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KTtcbiAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldElERm9yQ2hhbmdlRXZlbnQodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFRhcmdldElEO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50c1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgIC8vIENhc3QgdG8gYSBzdHJpbmcgc28gd2UgY2FuIGRvIGVxdWFsaXR5IGNoZWNrcy5cbiAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSAnJyArIHZhbDtcbiAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLnNldC5jYWxsKHRoaXMsIHZhbCk7XG4gIH1cbn07XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBTdGFydHMgdHJhY2tpbmcgcHJvcGVydHljaGFuZ2UgZXZlbnRzIG9uIHRoZSBwYXNzZWQtaW4gZWxlbWVudFxuICogYW5kIG92ZXJyaWRlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiBkaXN0aW5ndWlzaCB1c2VyIGV2ZW50cyBmcm9tXG4gKiB2YWx1ZSBjaGFuZ2VzIGluIEpTLlxuICovXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJRCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SUQgPSB0YXJnZXRJRDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLCAndmFsdWUnKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWN0aXZlRWxlbWVudCwgJ3ZhbHVlJywgbmV3VmFsdWVQcm9wKTtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGRlbGV0ZSByZXN0b3JlcyB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVmaW5pdGlvblxuICBkZWxldGUgYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcblxuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG59XG5cbi8qKlxuICogKEZvciBvbGQgSUUuKSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgdmFsdWUgPSBuYXRpdmVFdmVudC5zcmNFbGVtZW50LnZhbHVlO1xuICBpZiAodmFsdWUgPT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB2YWx1ZTtcblxuICBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KTtcbn1cblxuLyoqXG4gKiBJZiBhIGBjaGFuZ2VgIGV2ZW50IHNob3VsZCBiZSBmaXJlZCwgcmV0dXJucyB0aGUgdGFyZ2V0J3MgSUQuXG4gKi9cbmZ1bmN0aW9uIGdldFRhcmdldElERm9ySW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgLy8gSW4gSUU4LCB3ZSBjYW4gY2FwdHVyZSBhbG1vc3QgYWxsIC52YWx1ZSBjaGFuZ2VzIGJ5IGFkZGluZyBhXG4gICAgLy8gcHJvcGVydHljaGFuZ2UgaGFuZGxlciBhbmQgbG9va2luZyBmb3IgZXZlbnRzIHdpdGggcHJvcGVydHlOYW1lXG4gICAgLy8gZXF1YWwgdG8gJ3ZhbHVlJ1xuICAgIC8vIEluIElFOSwgcHJvcGVydHljaGFuZ2UgZmlyZXMgZm9yIG1vc3QgaW5wdXQgZXZlbnRzIGJ1dCBpcyBidWdneSBhbmRcbiAgICAvLyBkb2Vzbid0IGZpcmUgd2hlbiB0ZXh0IGlzIGRlbGV0ZWQsIGJ1dCBjb252ZW5pZW50bHksIHNlbGVjdGlvbmNoYW5nZVxuICAgIC8vIGFwcGVhcnMgdG8gZmlyZSBpbiBhbGwgb2YgdGhlIHJlbWFpbmluZyBjYXNlcyBzbyB3ZSBjYXRjaCB0aG9zZSBhbmRcbiAgICAvLyBmb3J3YXJkIHRoZSBldmVudCBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICAvLyBJbiBlaXRoZXIgY2FzZSwgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIHRoZSBldmVudCBoYW5kbGVyIGlmIHRoZSB2YWx1ZVxuICAgIC8vIGlzIGNoYW5nZWQgZnJvbSBKUyBzbyB3ZSByZWRlZmluZSBhIHNldHRlciBmb3IgYC52YWx1ZWAgdGhhdCB1cGRhdGVzXG4gICAgLy8gb3VyIGFjdGl2ZUVsZW1lbnRWYWx1ZSB2YXJpYWJsZSwgYWxsb3dpbmcgdXMgdG8gaWdub3JlIHRob3NlIGNoYW5nZXNcbiAgICAvL1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRSh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93bikge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQudmFsdWUgIT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50SUQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvckNsaWNrRXZlbnQodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLiBUaGlzIGV2ZW50IGZpcmVzIGF0IGEgdGltZSB3aGVuIGl0J3MgcG9zc2libGUgdG9cbiAqIGNoYW5nZSB0aGUgZWxlbWVudCdzIHZhbHVlIHdpdGhvdXQgc2VlaW5nIGEgZmxpY2tlci5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBzZWxlY3RcbiAqL1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuXG4gICAgdmFyIGdldFRhcmdldElERnVuYywgaGFuZGxlRXZlbnRGdW5jO1xuICAgIGlmIChzaG91bGRVc2VDaGFuZ2VFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGlmIChkb2VzQ2hhbmdlRXZlbnRCdWJibGUpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDaGFuZ2VFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0b3BMZXZlbFRhcmdldCkpIHtcbiAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9yQ2xpY2tFdmVudDtcbiAgICB9XG5cbiAgICBpZiAoZ2V0VGFyZ2V0SURGdW5jKSB7XG4gICAgICB2YXIgdGFyZ2V0SUQgPSBnZXRUYXJnZXRJREZ1bmModG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCk7XG4gICAgICBpZiAodGFyZ2V0SUQpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCB0YXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgZXZlbnQudHlwZSA9ICdjaGFuZ2UnO1xuICAgICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuICAgICAgaGFuZGxlRXZlbnRGdW5jKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5nZUV2ZW50UGx1Z2luO1xufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6MTgxLFwiLi9FdmVudFBsdWdpbkh1YlwiOjE4MixcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE4NSxcIi4vUmVhY3RVcGRhdGVzXCI6MjUwLFwiLi9TeW50aGV0aWNFdmVudFwiOjI1OSxcIi4vZ2V0RXZlbnRUYXJnZXRcIjoyODAsXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIjoyODUsXCIuL2lzVGV4dElucHV0RWxlbWVudFwiOjI4NixcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MjAsXCJmYmpzL2xpYi9rZXlPZlwiOjM4fV0sMTc0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDbGllbnRSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBuZXh0UmVhY3RSb290SW5kZXggPSAwO1xuXG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSB7XG4gIGNyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5leHRSZWFjdFJvb3RJbmRleCsrO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudFJlYWN0Um9vdEluZGV4O1xufSx7fV0sMTc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERhbmdlciA9IHJlcXVpcmUoJy4vRGFuZ2VyJyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcblxudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuICAvLyByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiBIb3dldmVyLCB1c2luZyBgdW5kZWZpbmVkYCBpcyBub3QgYWxsb3dlZCBieSBhbGxcbiAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuXG4gIC8vIGZpeCByZW5kZXIgb3JkZXIgZXJyb3IgaW4gc2FmYXJpXG4gIC8vIElFOCB3aWxsIHRocm93IGVycm9yIHdoZW4gaW5kZXggb3V0IG9mIGxpc3Qgc2l6ZS5cbiAgdmFyIGJlZm9yZUNoaWxkID0gaW5kZXggPj0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG51bGwgOiBwYXJlbnROb2RlLmNoaWxkTm9kZXMuaXRlbShpbmRleCk7XG5cbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2RlLCBiZWZvcmVDaGlsZCk7XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG4gKi9cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSB7XG5cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICB1cGRhdGVUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24gKHVwZGF0ZXMsIG1hcmt1cExpc3QpIHtcbiAgICB2YXIgdXBkYXRlO1xuICAgIC8vIE1hcHBpbmcgZnJvbSBwYXJlbnQgSURzIHRvIGluaXRpYWwgY2hpbGQgb3JkZXJpbmdzLlxuICAgIHZhciBpbml0aWFsQ2hpbGRyZW4gPSBudWxsO1xuICAgIC8vIExpc3Qgb2YgY2hpbGRyZW4gdGhhdCB3aWxsIGJlIG1vdmVkIG9yIHJlbW92ZWQuXG4gICAgdmFyIHVwZGF0ZWRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNbaV07XG4gICAgICBpZiAodXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcgfHwgdXBkYXRlLnR5cGUgPT09IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFKSB7XG4gICAgICAgIHZhciB1cGRhdGVkSW5kZXggPSB1cGRhdGUuZnJvbUluZGV4O1xuICAgICAgICB2YXIgdXBkYXRlZENoaWxkID0gdXBkYXRlLnBhcmVudE5vZGUuY2hpbGROb2Rlc1t1cGRhdGVkSW5kZXhdO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSB1cGRhdGUucGFyZW50SUQ7XG5cbiAgICAgICAgIXVwZGF0ZWRDaGlsZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzVXBkYXRlcygpOiBVbmFibGUgdG8gZmluZCBjaGlsZCAlcyBvZiBlbGVtZW50LiBUaGlzICcgKyAncHJvYmFibHkgbWVhbnMgdGhlIERPTSB3YXMgdW5leHBlY3RlZGx5IG11dGF0ZWQgKGUuZy4sIGJ5IHRoZSAnICsgJ2Jyb3dzZXIpLCB1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgJyArICduZXN0aW5nIHRhZ3MgbGlrZSA8Zm9ybT4sIDxwPiwgb3IgPGE+LCBvciB1c2luZyBub24tU1ZHIGVsZW1lbnRzICcgKyAnaW4gYW4gPHN2Zz4gcGFyZW50LiBUcnkgaW5zcGVjdGluZyB0aGUgY2hpbGQgbm9kZXMgb2YgdGhlIGVsZW1lbnQgJyArICd3aXRoIFJlYWN0IElEIGAlc2AuJywgdXBkYXRlZEluZGV4LCBwYXJlbnRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGluaXRpYWxDaGlsZHJlbiA9IGluaXRpYWxDaGlsZHJlbiB8fCB7fTtcbiAgICAgICAgaW5pdGlhbENoaWxkcmVuW3BhcmVudElEXSA9IGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gfHwgW107XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF1bdXBkYXRlZEluZGV4XSA9IHVwZGF0ZWRDaGlsZDtcblxuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4gPSB1cGRhdGVkQ2hpbGRyZW4gfHwgW107XG4gICAgICAgIHVwZGF0ZWRDaGlsZHJlbi5wdXNoKHVwZGF0ZWRDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlcmVkTWFya3VwO1xuICAgIC8vIG1hcmt1cExpc3QgaXMgZWl0aGVyIGEgbGlzdCBvZiBtYXJrdXAgb3IganVzdCBhIGxpc3Qgb2YgZWxlbWVudHNcbiAgICBpZiAobWFya3VwTGlzdC5sZW5ndGggJiYgdHlwZW9mIG1hcmt1cExpc3RbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyZWRNYXJrdXAgPSBtYXJrdXBMaXN0O1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB1cGRhdGVkIGNoaWxkcmVuIGZpcnN0IHNvIHRoYXQgYHRvSW5kZXhgIGlzIGNvbnNpc3RlbnQuXG4gICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1cGRhdGVkQ2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodXBkYXRlZENoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHVwZGF0ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUDpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCByZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLCB1cGRhdGUudG9JbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORzpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHVwZGF0ZS5wYXJlbnROb2RlLCBpbml0aWFsQ2hpbGRyZW5bdXBkYXRlLnBhcmVudElEXVt1cGRhdGUuZnJvbUluZGV4XSwgdXBkYXRlLnRvSW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVA6XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5UOlxuICAgICAgICAgIHNldFRleHRDb250ZW50KHVwZGF0ZS5wYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgLy8gQWxyZWFkeSByZW1vdmVkIGJ5IHRoZSBmb3ItbG9vcCBhYm92ZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKERPTUNoaWxkcmVuT3BlcmF0aW9ucywgJ0RPTUNoaWxkcmVuT3BlcmF0aW9ucycsIHtcbiAgdXBkYXRlVGV4dENvbnRlbnQ6ICd1cGRhdGVUZXh0Q29udGVudCdcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTUNoaWxkcmVuT3BlcmF0aW9ucztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0RhbmdlclwiOjE3OCxcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIjoyMzQsXCIuL1JlYWN0UGVyZlwiOjIzOCxcIi4vc2V0SW5uZXJIVE1MXCI6MjkwLFwiLi9zZXRUZXh0Q29udGVudFwiOjI5MSxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwxNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBET01Qcm9wZXJ0eVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuZnVuY3Rpb24gY2hlY2tNYXNrKHZhbHVlLCBiaXRtYXNrKSB7XG4gIHJldHVybiAodmFsdWUgJiBiaXRtYXNrKSA9PT0gYml0bWFzaztcbn1cblxudmFyIERPTVByb3BlcnR5SW5qZWN0aW9uID0ge1xuICAvKipcbiAgICogTWFwcGluZyBmcm9tIG5vcm1hbGl6ZWQsIGNhbWVsY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gYSBjb25maWd1cmF0aW9uIHRoYXRcbiAgICogc3BlY2lmaWVzIGhvdyB0aGUgYXNzb2NpYXRlZCBET00gcHJvcGVydHkgc2hvdWxkIGJlIGFjY2Vzc2VkIG9yIHJlbmRlcmVkLlxuICAgKi9cbiAgTVVTVF9VU0VfQVRUUklCVVRFOiAweDEsXG4gIE1VU1RfVVNFX1BST1BFUlRZOiAweDIsXG4gIEhBU19TSURFX0VGRkVDVFM6IDB4NCxcbiAgSEFTX0JPT0xFQU5fVkFMVUU6IDB4OCxcbiAgSEFTX05VTUVSSUNfVkFMVUU6IDB4MTAsXG4gIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOiAweDIwIHwgMHgxMCxcbiAgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTogMHg0MCxcblxuICAvKipcbiAgICogSW5qZWN0IHNvbWUgc3BlY2lhbGl6ZWQga25vd2xlZGdlIGFib3V0IHRoZSBET00uIFRoaXMgdGFrZXMgYSBjb25maWcgb2JqZWN0XG4gICAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gdGhhdCBnaXZlbiBhbiBhdHRyaWJ1dGUgbmFtZSB3aWxsIHJldHVybiB0cnVlXG4gICAqIGlmIGl0IGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00gdmVyYmF0aW0uIFVzZWZ1bCBmb3IgZGF0YS0qIG9yIGFyaWEtKlxuICAgKiBhdHRyaWJ1dGVzIHdoZXJlIGl0J3MgaW1wb3NzaWJsZSB0byBlbnVtZXJhdGUgYWxsIG9mIHRoZSBwb3NzaWJsZVxuICAgKiBhdHRyaWJ1dGUgbmFtZXMsXG4gICAqXG4gICAqIFByb3BlcnRpZXM6IG9iamVjdCBtYXBwaW5nIERPTSBwcm9wZXJ0eSBuYW1lIHRvIG9uZSBvZiB0aGVcbiAgICogRE9NUHJvcGVydHlJbmplY3Rpb24gY29uc3RhbnRzIG9yIG51bGwuIElmIHlvdXIgYXR0cmlidXRlIGlzbid0IGluIGhlcmUsXG4gICAqIGl0IHdvbid0IGdldCB3cml0dGVuIHRvIHRoZSBET00uXG4gICAqXG4gICAqIERPTUF0dHJpYnV0ZU5hbWVzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lLiBBdHRyaWJ1dGUgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlICoqbG93ZXJjYXNlKipcbiAgICogbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lc3BhY2UgVVJMLiAoQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIG5vIG5hbWVzcGFjZS4pXG4gICAqXG4gICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cbiAgICogUHJvcGVydHkgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG4gICAqIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLCB0aGUgbXV0YXRpb24gbWV0aG9kIHNob3VsZCB1bnNldCB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICovXG4gIGluamVjdERPTVByb3BlcnR5Q29uZmlnOiBmdW5jdGlvbiAoZG9tUHJvcGVydHlDb25maWcpIHtcbiAgICB2YXIgSW5qZWN0aW9uID0gRE9NUHJvcGVydHlJbmplY3Rpb247XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lc3BhY2VzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXNwYWNlcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblxuICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIFByb3BlcnRpZXMpIHtcbiAgICAgICEhRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91XFwncmUgdHJ5aW5nIHRvIGluamVjdCBET00gcHJvcGVydHkgJyArICdcXCclc1xcJyB3aGljaCBoYXMgYWxyZWFkeSBiZWVuIGluamVjdGVkLiBZb3UgbWF5IGJlIGFjY2lkZW50YWxseSAnICsgJ2luamVjdGluZyB0aGUgc2FtZSBET00gcHJvcGVydHkgY29uZmlnIHR3aWNlLCBvciB5b3UgbWF5IGJlICcgKyAnaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy4nLCBwcm9wTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgbG93ZXJDYXNlZCA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgcHJvcENvbmZpZyA9IFByb3BlcnRpZXNbcHJvcE5hbWVdO1xuXG4gICAgICB2YXIgcHJvcGVydHlJbmZvID0ge1xuICAgICAgICBhdHRyaWJ1dGVOYW1lOiBsb3dlckNhc2VkLFxuICAgICAgICBhdHRyaWJ1dGVOYW1lc3BhY2U6IG51bGwsXG4gICAgICAgIHByb3BlcnR5TmFtZTogcHJvcE5hbWUsXG4gICAgICAgIG11dGF0aW9uTWV0aG9kOiBudWxsLFxuXG4gICAgICAgIG11c3RVc2VBdHRyaWJ1dGU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFKSxcbiAgICAgICAgbXVzdFVzZVByb3BlcnR5OiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKSxcbiAgICAgICAgaGFzU2lkZUVmZmVjdHM6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUyksXG4gICAgICAgIGhhc0Jvb2xlYW5WYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRSksXG4gICAgICAgIGhhc051bWVyaWNWYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSksXG4gICAgICAgIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFKVxuICAgICAgfTtcblxuICAgICAgISghcHJvcGVydHlJbmZvLm11c3RVc2VBdHRyaWJ1dGUgfHwgIXByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBDYW5ub3QgcmVxdWlyZSB1c2luZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHk6ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICEocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSB8fCAhcHJvcGVydHlJbmZvLmhhc1NpZGVFZmZlY3RzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdET01Qcm9wZXJ0eTogUHJvcGVydGllcyB0aGF0IGhhdmUgc2lkZSBlZmZlY3RzIG11c3QgdXNlIHByb3BlcnR5OiAlcycsIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAhKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgKyBwcm9wZXJ0eUluZm8uaGFzTnVtZXJpY1ZhbHVlICsgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRE9NUHJvcGVydHk6IFZhbHVlIGNhbiBiZSBvbmUgb2YgYm9vbGVhbiwgb3ZlcmxvYWRlZCBib29sZWFuLCBvciAnICsgJ251bWVyaWMgdmFsdWUsIGJ1dCBub3QgYSBjb21iaW5hdGlvbjogJXMnLCBwcm9wTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkXSA9IHByb3BOYW1lO1xuICAgICAgfVxuXG4gICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gRE9NQXR0cmlidXRlTmFtZXNbcHJvcE5hbWVdO1xuICAgICAgICBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbYXR0cmlidXRlTmFtZV0gPSBwcm9wTmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZSA9IERPTUF0dHJpYnV0ZU5hbWVzcGFjZXNbcHJvcE5hbWVdO1xuICAgICAgfVxuXG4gICAgICBpZiAoRE9NUHJvcGVydHlOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZSA9IERPTVByb3BlcnR5TmFtZXNbcHJvcE5hbWVdO1xuICAgICAgfVxuXG4gICAgICBpZiAoRE9NTXV0YXRpb25NZXRob2RzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2QgPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgfVxuXG4gICAgICBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BOYW1lXSA9IHByb3BlcnR5SW5mbztcbiAgICB9XG4gIH1cbn07XG52YXIgZGVmYXVsdFZhbHVlQ2FjaGUgPSB7fTtcblxuLyoqXG4gKiBET01Qcm9wZXJ0eSBleHBvcnRzIGxvb2t1cCBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgbGlrZSBmdW5jdGlvbnM6XG4gKlxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2lkJ11cbiAqICAgdHJ1ZVxuICogICA+IERPTVByb3BlcnR5LmlzVmFsaWRbJ2Zvb2JhciddXG4gKiAgIHVuZGVmaW5lZFxuICpcbiAqIEFsdGhvdWdoIHRoaXMgbWF5IGJlIGNvbmZ1c2luZywgaXQgcGVyZm9ybXMgYmV0dGVyIGluIGdlbmVyYWwuXG4gKlxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9rZXktZXhpc3RzXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1taXNzaW5nXG4gKi9cbnZhciBET01Qcm9wZXJ0eSA9IHtcblxuICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG5cbiAgLyoqXG4gICAqIE1hcCBmcm9tIHByb3BlcnR5IFwic3RhbmRhcmQgbmFtZVwiIHRvIGFuIG9iamVjdCB3aXRoIGluZm8gYWJvdXQgaG93IHRvIHNldFxuICAgKiB0aGUgcHJvcGVydHkgaW4gdGhlIERPTS4gRWFjaCBvYmplY3QgY29udGFpbnM6XG4gICAqXG4gICAqIGF0dHJpYnV0ZU5hbWU6XG4gICAqICAgVXNlZCB3aGVuIHJlbmRlcmluZyBtYXJrdXAgb3Igd2l0aCBgKkF0dHJpYnV0ZSgpYC5cbiAgICogYXR0cmlidXRlTmFtZXNwYWNlXG4gICAqIHByb3BlcnR5TmFtZTpcbiAgICogICBVc2VkIG9uIERPTSBub2RlIGluc3RhbmNlcy4gKFRoaXMgaW5jbHVkZXMgcHJvcGVydGllcyB0aGF0IG11dGF0ZSBkdWUgdG9cbiAgICogICBleHRlcm5hbCBmYWN0b3JzLilcbiAgICogbXV0YXRpb25NZXRob2Q6XG4gICAqICAgSWYgbm9uLW51bGwsIHVzZWQgaW5zdGVhZCBvZiB0aGUgcHJvcGVydHkgb3IgYHNldEF0dHJpYnV0ZSgpYCBhZnRlclxuICAgKiAgIGluaXRpYWwgcmVuZGVyLlxuICAgKiBtdXN0VXNlQXR0cmlidXRlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgYWNjZXNzZWQgYW5kIG11dGF0ZWQgdXNpbmcgYCpBdHRyaWJ1dGUoKWAuXG4gICAqICAgKFRoaXMgaW5jbHVkZXMgYW55dGhpbmcgdGhhdCBmYWlscyBgPHByb3BOYW1lPiBpbiA8ZWxlbWVudD5gLilcbiAgICogbXVzdFVzZVByb3BlcnR5OlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IG11c3QgYmUgYWNjZXNzZWQgYW5kIG11dGF0ZWQgYXMgYW4gb2JqZWN0IHByb3BlcnR5LlxuICAgKiBoYXNTaWRlRWZmZWN0czpcbiAgICogICBXaGV0aGVyIG9yIG5vdCBzZXR0aW5nIGEgdmFsdWUgY2F1c2VzIHNpZGUgZWZmZWN0cyBzdWNoIGFzIHRyaWdnZXJpbmdcbiAgICogICByZXNvdXJjZXMgdG8gYmUgbG9hZGVkIG9yIHRleHQgc2VsZWN0aW9uIGNoYW5nZXMuIElmIHRydWUsIHdlIHJlYWQgZnJvbVxuICAgKiAgIHRoZSBET00gYmVmb3JlIHVwZGF0aW5nIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBvbmx5IHNldCBpZiBpdCBoYXNcbiAgICogICBjaGFuZ2VkLlxuICAgKiBoYXNCb29sZWFuVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIGhhc051bWVyaWNWYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBudW1lcmljIGFuZCBzaG91bGQgYmVcbiAgICogICByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIHBvc2l0aXZlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBwb3NpdGl2ZVxuICAgKiAgIG51bWVyaWMgYW5kIHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS5cbiAgICogICBSZW1vdmVkIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW5cbiAgICogICBzdHJpY3RseSBlcXVhbCB0byB0cnVlOyBwcmVzZW50IHdpdGggYSB2YWx1ZSBvdGhlcndpc2UuXG4gICAqL1xuICBwcm9wZXJ0aWVzOiB7fSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGxvd2VyY2FzZSBwcm9wZXJ0eSBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbiwgdXNlZFxuICAgKiB0byB3YXJuIGluIHRoZSBjYXNlIG9mIG1pc3NpbmcgcHJvcGVydGllcy4gQXZhaWxhYmxlIG9ubHkgaW4gX19ERVZfXy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldFBvc3NpYmxlU3RhbmRhcmROYW1lOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge30gOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbGwgb2YgdGhlIGlzQ3VzdG9tQXR0cmlidXRlKCkgZnVuY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGluamVjdGVkLlxuICAgKi9cbiAgX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zOiBbXSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgY3VzdG9tIGF0dHJpYnV0ZS5cbiAgICogQG1ldGhvZFxuICAgKi9cbiAgaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpc0N1c3RvbUF0dHJpYnV0ZUZuID0gRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zW2ldO1xuICAgICAgaWYgKGlzQ3VzdG9tQXR0cmlidXRlRm4oYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVmYXVsdCBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBET00gcHJvcGVydHkgKGkuZS4sIG5vdCBhblxuICAgKiBhdHRyaWJ1dGUpLiBNb3N0IGRlZmF1bHQgdmFsdWVzIGFyZSAnJyBvciBmYWxzZSwgYnV0IG5vdCBhbGwuIFdvcnNlIHlldCxcbiAgICogc29tZSAoaW4gcGFydGljdWxhciwgYHR5cGVgKSB2YXJ5IGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBlbGVtZW50LlxuICAgKlxuICAgKiBUT0RPOiBJcyBpdCBiZXR0ZXIgdG8gZ3JhYiBhbGwgdGhlIHBvc3NpYmxlIHByb3BlcnRpZXMgd2hlbiBjcmVhdGluZyBhblxuICAgKiBlbGVtZW50IHRvIGF2b2lkIGhhdmluZyB0byBjcmVhdGUgdGhlIHNhbWUgZWxlbWVudCB0d2ljZT9cbiAgICovXG4gIGdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbiAobm9kZU5hbWUsIHByb3ApIHtcbiAgICB2YXIgbm9kZURlZmF1bHRzID0gZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdO1xuICAgIHZhciB0ZXN0RWxlbWVudDtcbiAgICBpZiAoIW5vZGVEZWZhdWx0cykge1xuICAgICAgZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdID0gbm9kZURlZmF1bHRzID0ge307XG4gICAgfVxuICAgIGlmICghKHByb3AgaW4gbm9kZURlZmF1bHRzKSkge1xuICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcbiAgICAgIG5vZGVEZWZhdWx0c1twcm9wXSA9IHRlc3RFbGVtZW50W3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZURlZmF1bHRzW3Byb3BdO1xuICB9LFxuXG4gIGluamVjdGlvbjogRE9NUHJvcGVydHlJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHk7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNH1dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xuXG52YXIgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIgPSByZXF1aXJlKCcuL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLy8gU2ltcGxpZmllZCBzdWJzZXRcbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IC9eW2EtekEtWl9dW1xcd1xcLlxcLV0qJC87XG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCBwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICYmICF2YWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzTnVtZXJpY1ZhbHVlICYmIGlzTmFOKHZhbHVlKSB8fCBwcm9wZXJ0eUluZm8uaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUgJiYgdmFsdWUgPCAxIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSBmYWxzZTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IHRydWUsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAga2V5OiB0cnVlLFxuICAgIHJlZjogdHJ1ZVxuICB9O1xuICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuXG4gIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAocmVhY3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiByZWFjdFByb3BzW25hbWVdIHx8IHdhcm5lZFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIGRhdGEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG4gICAgdmFyIHN0YW5kYXJkTmFtZSA9IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKGxvd2VyQ2FzZWROYW1lKSA/IGxvd2VyQ2FzZWROYW1lIDogRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcblxuICAgIC8vIEZvciBub3csIG9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBzdWdnZXN0ZWQgY29ycmVjdGlvbi4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIGxvZ2dpbmcgdG9vIG11Y2ggd2hlbiB1c2luZyB0cmFuc2ZlclByb3BzVG8uXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoc3RhbmRhcmROYW1lID09IG51bGwsICdVbmtub3duIERPTSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIHN0YW5kYXJkTmFtZSkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIERPTSBwcm9wZXJ0aWVzLlxuICovXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIElEIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5lc2NhcGVkIElELlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIoaWQpO1xuICB9LFxuXG4gIHNldEF0dHJpYnV0ZUZvcklEOiBmdW5jdGlvbiAobm9kZSwgaWQpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSwgaWQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPVwiXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIGEgY3VzdG9tIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgZW1wdHkgc3RyaW5nIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uIChub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZUF0dHJpYnV0ZSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgICAgICAgLy8gYHNldEF0dHJpYnV0ZWAgd2l0aCBvYmplY3RzIGJlY29tZXMgb25seSBgW29iamVjdF1gIGluIElFOC85LFxuICAgICAgICAvLyAoJycgKyB2YWx1ZSkgbWFrZXMgaXQgb3V0cHV0IHRoZSBjb3JyZWN0IHRvU3RyaW5nKCktdmFsdWUuXG4gICAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgLy8gTXVzdCBleHBsaWNpdGx5IGNhc3QgdmFsdWVzIGZvciBIQVNfU0lERV9FRkZFQ1RTLXByb3BlcnRpZXMgdG8gdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHR5cGUgYmVmb3JlIGNvbXBhcmluZzsgb25seSBgdmFsdWVgIGRvZXMgYW5kIGlzIHN0cmluZy5cbiAgICAgICAgaWYgKCFwcm9wZXJ0eUluZm8uaGFzU2lkZUVmZmVjdHMgfHwgJycgKyBub2RlW3Byb3BOYW1lXSAhPT0gJycgKyB2YWx1ZSkge1xuICAgICAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgICAgICAvLyBgdG9TdHJpbmdgZWQgYnkgSUU4LzkuXG4gICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgfSxcblxuICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24gKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGUsIG5hbWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IHByb3BlcnR5SW5mby5tdXRhdGlvbk1ldGhvZDtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZUF0dHJpYnV0ZSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gRE9NUHJvcGVydHkuZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkobm9kZS5ub2RlTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICBpZiAoIXByb3BlcnR5SW5mby5oYXNTaWRlRWZmZWN0cyB8fCAnJyArIG5vZGVbcHJvcE5hbWVdICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKERPTVByb3BlcnR5T3BlcmF0aW9ucywgJ0RPTVByb3BlcnR5T3BlcmF0aW9ucycsIHtcbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogJ3NldFZhbHVlRm9yUHJvcGVydHknLFxuICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogJ3NldFZhbHVlRm9yQXR0cmlidXRlJyxcbiAgZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogJ2RlbGV0ZVZhbHVlRm9yUHJvcGVydHknXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE3NixcIi4vUmVhY3RQZXJmXCI6MjM4LFwiLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlclwiOjI4OCxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMTc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGFuZ2VyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoJ2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCcpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldE1hcmt1cFdyYXAnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIE9QRU5fVEFHX05BTUVfRVhQID0gL14oPFteIFxcLz5dKykvO1xudmFyIFJFU1VMVF9JTkRFWF9BVFRSID0gJ2RhdGEtZGFuZ2VyLWluZGV4JztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBmcm9tIGEgc3RyaW5nIG9mIG1hcmt1cC5cbiAqXG4gKiBOT1RFOiBFeHRyYWN0aW5nIHRoZSBgbm9kZU5hbWVgIGRvZXMgbm90IHJlcXVpcmUgYSByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2hcbiAqIGJlY2F1c2Ugd2UgbWFrZSBhc3N1bXB0aW9ucyBhYm91dCBSZWFjdC1nZW5lcmF0ZWQgbWFya3VwIChpLmUuIHRoZXJlIGFyZSBub1xuICogc3BhY2VzIHN1cnJvdW5kaW5nIHRoZSBvcGVuaW5nIHRhZyBhbmQgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGF0dHJpYnV0ZSkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7c3RyaW5nfSBOb2RlIG5hbWUgb2YgdGhlIHN1cHBsaWVkIG1hcmt1cC5cbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vZXh0cmFjdC1ub2RlbmFtZVxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgcmV0dXJuIG1hcmt1cC5zdWJzdHJpbmcoMSwgbWFya3VwLmluZGV4T2YoJyAnKSk7XG59XG5cbnZhciBEYW5nZXIgPSB7XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgbWFya3VwIGludG8gYW4gYXJyYXkgb2Ygbm9kZXMuIFRoZSBtYXJrdXAgaXMgZXhwZWN0ZWQgdG8gcmVuZGVyXG4gICAqIGludG8gYSBsaXN0IG9mIHJvb3Qgbm9kZXMuIEFsc28sIHRoZSBsZW5ndGggb2YgYHJlc3VsdExpc3RgIGFuZFxuICAgKiBgbWFya3VwTGlzdGAgc2hvdWxkIGJlIHRoZSBzYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncyB0byByZW5kZXIuXG4gICAqIEByZXR1cm4ge2FycmF5PERPTUVsZW1lbnQ+fSBMaXN0IG9mIHJlbmRlcmVkIG5vZGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UmVuZGVyTWFya3VwOiBmdW5jdGlvbiAobWFya3VwTGlzdCkge1xuICAgICFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgJyArICd0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5ICcgKyAnYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArICdSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIG5vZGVOYW1lO1xuICAgIHZhciBtYXJrdXBCeU5vZGVOYW1lID0ge307XG4gICAgLy8gR3JvdXAgbWFya3VwIGJ5IGBub2RlTmFtZWAgaWYgYSB3cmFwIGlzIG5lY2Vzc2FyeSwgZWxzZSBieSAnKicuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrdXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAhbWFya3VwTGlzdFtpXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cExpc3RbaV0pO1xuICAgICAgbm9kZU5hbWUgPSBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSA/IG5vZGVOYW1lIDogJyonO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSB8fCBbXTtcbiAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdW2ldID0gbWFya3VwTGlzdFtpXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcbiAgICB2YXIgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9IDA7XG4gICAgZm9yIChub2RlTmFtZSBpbiBtYXJrdXBCeU5vZGVOYW1lKSB7XG4gICAgICBpZiAoIW1hcmt1cEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1hcmt1cExpc3RCeU5vZGVOYW1lID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV07XG5cbiAgICAgIC8vIFRoaXMgZm9yLWluIGxvb3Agc2tpcHMgdGhlIGhvbGVzIG9mIHRoZSBzcGFyc2UgYXJyYXkuIFRoZSBvcmRlciBvZlxuICAgICAgLy8gaXRlcmF0aW9uIHNob3VsZCBmb2xsb3cgdGhlIG9yZGVyIG9mIGFzc2lnbm1lbnQsIHdoaWNoIGhhcHBlbnMgdG8gbWF0Y2hcbiAgICAgIC8vIG51bWVyaWNhbCBpbmRleCBvcmRlciwgYnV0IHdlIGRvbid0IHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciByZXN1bHRJbmRleDtcbiAgICAgIGZvciAocmVzdWx0SW5kZXggaW4gbWFya3VwTGlzdEJ5Tm9kZU5hbWUpIHtcbiAgICAgICAgaWYgKG1hcmt1cExpc3RCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkge1xuICAgICAgICAgIHZhciBtYXJrdXAgPSBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF07XG5cbiAgICAgICAgICAvLyBQdXNoIHRoZSByZXF1ZXN0ZWQgbWFya3VwIHdpdGggYW4gYWRkaXRpb25hbCBSRVNVTFRfSU5ERVhfQVRUUlxuICAgICAgICAgIC8vIGF0dHJpYnV0ZS4gIElmIHRoZSBtYXJrdXAgZG9lcyBub3Qgc3RhcnQgd2l0aCBhIDwgY2hhcmFjdGVyLCBpdFxuICAgICAgICAgIC8vIHdpbGwgYmUgZGlzY2FyZGVkIGJlbG93ICh3aXRoIGFuIGFwcHJvcHJpYXRlIGNvbnNvbGUuZXJyb3IpLlxuICAgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XSA9IG1hcmt1cC5yZXBsYWNlKE9QRU5fVEFHX05BTUVfRVhQLFxuICAgICAgICAgIC8vIFRoaXMgaW5kZXggd2lsbCBiZSBwYXJzZWQgYmFjayBvdXQgYmVsb3cuXG4gICAgICAgICAgJyQxICcgKyBSRVNVTFRfSU5ERVhfQVRUUiArICc9XCInICsgcmVzdWx0SW5kZXggKyAnXCIgJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVuZGVyIGVhY2ggZ3JvdXAgb2YgbWFya3VwIHdpdGggc2ltaWxhciB3cmFwcGluZyBgbm9kZU5hbWVgLlxuICAgICAgdmFyIHJlbmRlck5vZGVzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cExpc3RCeU5vZGVOYW1lLmpvaW4oJycpLCBlbXB0eUZ1bmN0aW9uIC8vIERvIG5vdGhpbmcgc3BlY2lhbCB3aXRoIDxzY3JpcHQ+IHRhZ3MuXG4gICAgICApO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlbmRlck5vZGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciByZW5kZXJOb2RlID0gcmVuZGVyTm9kZXNbal07XG4gICAgICAgIGlmIChyZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZSAmJiByZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUikpIHtcblxuICAgICAgICAgIHJlc3VsdEluZGV4ID0gK3JlbmRlck5vZGUuZ2V0QXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcbiAgICAgICAgICByZW5kZXJOb2RlLnJlbW92ZUF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG5cbiAgICAgICAgICAhIXJlc3VsdExpc3QuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RhbmdlcjogQXNzaWduaW5nIHRvIGFuIGFscmVhZHktb2NjdXBpZWQgcmVzdWx0IGluZGV4LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHJlc3VsdExpc3RbcmVzdWx0SW5kZXhdID0gcmVuZGVyTm9kZTtcblxuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG1hdGNoIHJlc3VsdExpc3QubGVuZ3RoIGFuZCBtYXJrdXBMaXN0Lmxlbmd0aCB3aGVuXG4gICAgICAgICAgLy8gd2UncmUgZG9uZS5cbiAgICAgICAgICByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhbmdlcjogRGlzY2FyZGluZyB1bmV4cGVjdGVkIG5vZGU6JywgcmVuZGVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbHRob3VnaCByZXN1bHRMaXN0IHdhcyBwb3B1bGF0ZWQgb3V0IG9mIG9yZGVyLCBpdCBzaG91bGQgbm93IGJlIGEgZGVuc2VcbiAgICAvLyBhcnJheS5cbiAgICAhKHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPT09IHJlc3VsdExpc3QubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEYW5nZXI6IERpZCBub3QgYXNzaWduIHRvIGV2ZXJ5IGluZGV4IG9mIHJlc3VsdExpc3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgIShyZXN1bHRMaXN0Lmxlbmd0aCA9PT0gbWFya3VwTGlzdC5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RhbmdlcjogRXhwZWN0ZWQgbWFya3VwIHRvIHJlbmRlciAlcyBub2RlcywgYnV0IHJlbmRlcmVkICVzLicsIG1hcmt1cExpc3QubGVuZ3RoLCByZXN1bHRMaXN0Lmxlbmd0aCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIHJlc3VsdExpc3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGEgbm9kZSB3aXRoIGEgc3RyaW5nIG9mIG1hcmt1cCBhdCBpdHMgY3VycmVudCBwb3NpdGlvbiB3aXRoaW4gaXRzXG4gICAqIHBhcmVudC4gVGhlIG1hcmt1cCBtdXN0IHJlbmRlciBpbnRvIGEgc2luZ2xlIHJvb3Qgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBvbGRDaGlsZCBDaGlsZCBub2RlIHRvIHJlcGxhY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRvIHJlbmRlciBpbiBwbGFjZSBvZiB0aGUgY2hpbGQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cDogZnVuY3Rpb24gKG9sZENoaWxkLCBtYXJrdXApIHtcbiAgICAhRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgJyArICd3b3JrZXIgdGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSAnICsgJ2dsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgKyAnUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgIW1hcmt1cCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgIShvbGRDaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSAnICsgJzxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgJyArICdhbmQvb3Igc2xvdy4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIHRvIHRoZSByb290IHlvdSBtdXN0IHVzZSAnICsgJ3NlcnZlciByZW5kZXJpbmcuIFNlZSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBuZXdDaGlsZDtcbiAgICBpZiAodHlwZW9mIG1hcmt1cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0NoaWxkID0gbWFya3VwO1xuICAgIH1cbiAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFuZ2VyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMCxcImZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cFwiOjI1LFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiOjI2LFwiZmJqcy9saWIvZ2V0TWFya3VwV3JhcFwiOjMwLFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwxNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBba2V5T2YoeyBSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBTaW1wbGVFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBUYXBFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQ2hhbmdlRXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgU2VsZWN0RXZlbnRQbHVnaW46IG51bGwgfSksIGtleU9mKHsgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbCB9KV07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7XG59LHtcImZianMvbGliL2tleU9mXCI6Mzh9XSwxODA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVudGVyTGVhdmVFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xudmFyIGdldEZpcnN0UmVhY3RET00gPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET007XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2YoeyBvbk1vdXNlRW50ZXI6IG51bGwgfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7IG9uTW91c2VMZWF2ZTogbnVsbCB9KSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcl1cbiAgfVxufTtcblxudmFyIGV4dHJhY3RlZEV2ZW50cyA9IFtudWxsLCBudWxsXTtcblxudmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBGb3IgYWxtb3N0IGV2ZXJ5IGludGVyYWN0aW9uIHdlIGNhcmUgYWJvdXQsIHRoZXJlIHdpbGwgYmUgYm90aCBhIHRvcC1sZXZlbFxuICAgKiBgbW91c2VvdmVyYCBhbmQgYG1vdXNlb3V0YCBldmVudCB0aGF0IG9jY3Vycy4gT25seSB1c2UgYG1vdXNlb3V0YCBzbyB0aGF0XG4gICAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAgICogYnJvd3NlciBmcm9tIG91dHNpZGUgd2lsbCBub3QgZmlyZSBhIGBtb3VzZW91dGAgZXZlbnQuIEluIHRoaXMgY2FzZSwgd2UgdXNlXG4gICAqIHRoZSBgbW91c2VvdmVyYCB0b3AtbGV2ZWwgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAc2VlIHtFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzfVxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiYgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBpbiBvciBtb3VzZSBvdXQgLSBpZ25vcmluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aW47XG4gICAgaWYgKHRvcExldmVsVGFyZ2V0LndpbmRvdyA9PT0gdG9wTGV2ZWxUYXJnZXQpIHtcbiAgICAgIC8vIGB0b3BMZXZlbFRhcmdldGAgaXMgcHJvYmFibHkgYSB3aW5kb3cgb2JqZWN0LlxuICAgICAgd2luID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICAgIHZhciBkb2MgPSB0b3BMZXZlbFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZnJvbTtcbiAgICB2YXIgdG87XG4gICAgdmFyIGZyb21JRCA9ICcnO1xuICAgIHZhciB0b0lEID0gJyc7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgZnJvbSA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgZnJvbUlEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICAgIHRvID0gZ2V0Rmlyc3RSZWFjdERPTShuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCk7XG4gICAgICBpZiAodG8pIHtcbiAgICAgICAgdG9JRCA9IFJlYWN0TW91bnQuZ2V0SUQodG8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG8gPSB3aW47XG4gICAgICB9XG4gICAgICB0byA9IHRvIHx8IHdpbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbSA9IHdpbjtcbiAgICAgIHRvID0gdG9wTGV2ZWxUYXJnZXQ7XG4gICAgICB0b0lEID0gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VMZWF2ZSwgZnJvbUlELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbTtcbiAgICBsZWF2ZS5yZWxhdGVkVGFyZ2V0ID0gdG87XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvSUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0bztcbiAgICBlbnRlci5yZWxhdGVkVGFyZ2V0ID0gZnJvbTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKTtcblxuICAgIGV4dHJhY3RlZEV2ZW50c1swXSA9IGxlYXZlO1xuICAgIGV4dHJhY3RlZEV2ZW50c1sxXSA9IGVudGVyO1xuXG4gICAgcmV0dXJuIGV4dHJhY3RlZEV2ZW50cztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjtcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE4MSxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE4NSxcIi4vUmVhY3RNb3VudFwiOjIzMixcIi4vU3ludGhldGljTW91c2VFdmVudFwiOjI2MyxcImZianMvbGliL2tleU9mXCI6Mzh9XSwxODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50Q29uc3RhbnRzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IGtleU1pcnJvcih7IGJ1YmJsZWQ6IG51bGwsIGNhcHR1cmVkOiBudWxsIH0pO1xuXG4vKipcbiAqIFR5cGVzIG9mIHJhdyBzaWduYWxzIGZyb20gdGhlIGJyb3dzZXIgY2F1Z2h0IGF0IHRoZSB0b3AgbGV2ZWwuXG4gKi9cbnZhciB0b3BMZXZlbFR5cGVzID0ga2V5TWlycm9yKHtcbiAgdG9wQWJvcnQ6IG51bGwsXG4gIHRvcEJsdXI6IG51bGwsXG4gIHRvcENhblBsYXk6IG51bGwsXG4gIHRvcENhblBsYXlUaHJvdWdoOiBudWxsLFxuICB0b3BDaGFuZ2U6IG51bGwsXG4gIHRvcENsaWNrOiBudWxsLFxuICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG4gIHRvcENvbnRleHRNZW51OiBudWxsLFxuICB0b3BDb3B5OiBudWxsLFxuICB0b3BDdXQ6IG51bGwsXG4gIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICB0b3BEcmFnOiBudWxsLFxuICB0b3BEcmFnRW5kOiBudWxsLFxuICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gIHRvcERyYWdFeGl0OiBudWxsLFxuICB0b3BEcmFnTGVhdmU6IG51bGwsXG4gIHRvcERyYWdPdmVyOiBudWxsLFxuICB0b3BEcmFnU3RhcnQ6IG51bGwsXG4gIHRvcERyb3A6IG51bGwsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiBudWxsLFxuICB0b3BFbXB0aWVkOiBudWxsLFxuICB0b3BFbmNyeXB0ZWQ6IG51bGwsXG4gIHRvcEVuZGVkOiBudWxsLFxuICB0b3BFcnJvcjogbnVsbCxcbiAgdG9wRm9jdXM6IG51bGwsXG4gIHRvcElucHV0OiBudWxsLFxuICB0b3BLZXlEb3duOiBudWxsLFxuICB0b3BLZXlQcmVzczogbnVsbCxcbiAgdG9wS2V5VXA6IG51bGwsXG4gIHRvcExvYWQ6IG51bGwsXG4gIHRvcExvYWRlZERhdGE6IG51bGwsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiBudWxsLFxuICB0b3BMb2FkU3RhcnQ6IG51bGwsXG4gIHRvcE1vdXNlRG93bjogbnVsbCxcbiAgdG9wTW91c2VNb3ZlOiBudWxsLFxuICB0b3BNb3VzZU91dDogbnVsbCxcbiAgdG9wTW91c2VPdmVyOiBudWxsLFxuICB0b3BNb3VzZVVwOiBudWxsLFxuICB0b3BQYXN0ZTogbnVsbCxcbiAgdG9wUGF1c2U6IG51bGwsXG4gIHRvcFBsYXk6IG51bGwsXG4gIHRvcFBsYXlpbmc6IG51bGwsXG4gIHRvcFByb2dyZXNzOiBudWxsLFxuICB0b3BSYXRlQ2hhbmdlOiBudWxsLFxuICB0b3BSZXNldDogbnVsbCxcbiAgdG9wU2Nyb2xsOiBudWxsLFxuICB0b3BTZWVrZWQ6IG51bGwsXG4gIHRvcFNlZWtpbmc6IG51bGwsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogbnVsbCxcbiAgdG9wU3RhbGxlZDogbnVsbCxcbiAgdG9wU3VibWl0OiBudWxsLFxuICB0b3BTdXNwZW5kOiBudWxsLFxuICB0b3BUZXh0SW5wdXQ6IG51bGwsXG4gIHRvcFRpbWVVcGRhdGU6IG51bGwsXG4gIHRvcFRvdWNoQ2FuY2VsOiBudWxsLFxuICB0b3BUb3VjaEVuZDogbnVsbCxcbiAgdG9wVG91Y2hNb3ZlOiBudWxsLFxuICB0b3BUb3VjaFN0YXJ0OiBudWxsLFxuICB0b3BWb2x1bWVDaGFuZ2U6IG51bGwsXG4gIHRvcFdhaXRpbmc6IG51bGwsXG4gIHRvcFdoZWVsOiBudWxsXG59KTtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0ge1xuICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzLFxuICBQcm9wYWdhdGlvblBoYXNlczogUHJvcGFnYXRpb25QaGFzZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRDb25zdGFudHM7XG59LHtcImZianMvbGliL2tleU1pcnJvclwiOjM3fV0sMTgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5IdWJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5VdGlscycpO1xudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vUmVhY3RFcnJvclV0aWxzJyk7XG5cbnZhciBhY2N1bXVsYXRlSW50byA9IHJlcXVpcmUoJy4vYWNjdW11bGF0ZUludG8nKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKCcuL2ZvckVhY2hBY2N1bXVsYXRlZCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogSW50ZXJuYWwgc3RvcmUgZm9yIGV2ZW50IGxpc3RlbmVyc1xuICovXG52YXIgbGlzdGVuZXJCYW5rID0ge307XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24gKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCB0cnVlKTtcbn07XG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlVG9wTGV2ZWwgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciB2YWxpZCA9IEluc3RhbmNlSGFuZGxlICYmIEluc3RhbmNlSGFuZGxlLnRyYXZlcnNlVHdvUGhhc2UgJiYgSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VFbnRlckxlYXZlO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh2YWxpZCwgJ0luc3RhbmNlSGFuZGxlIG5vdCBpbmplY3RlZCBiZWZvcmUgdXNlIScpIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB1bmlmaWVkIGludGVyZmFjZSBmb3IgZXZlbnQgcGx1Z2lucyB0byBiZSBpbnN0YWxsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gKlxuICogRXZlbnQgcGx1Z2lucyBjYW4gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuICogICAgIFJlcXVpcmVkLiBXaGVuIGEgdG9wLWxldmVsIGV2ZW50IGlzIGZpcmVkLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0b1xuICogICAgIGV4dHJhY3Qgc3ludGhldGljIGV2ZW50cyB0aGF0IHdpbGwgaW4gdHVybiBiZSBxdWV1ZWQgYW5kIGRpc3BhdGNoZWQuXG4gKlxuICogICBgZXZlbnRUeXBlc2Age29iamVjdH1cbiAqICAgICBPcHRpb25hbCwgcGx1Z2lucyB0aGF0IGZpcmUgZXZlbnRzIG11c3QgcHVibGlzaCBhIG1hcHBpbmcgb2YgcmVnaXN0cmF0aW9uXG4gKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuICogICAgIGJlIG9iamVjdHMgdGhhdCBjb250YWluIGByZWdpc3RyYXRpb25OYW1lYCBvciBgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNgLlxuICpcbiAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG4gKiAgICAgT3B0aW9uYWwsIGFsbG93cyBwbHVnaW5zIHRvIG92ZXJyaWRlIGhvdyBhbiBldmVudCBnZXRzIGRpc3BhdGNoZWQuIEJ5XG4gKiAgICAgZGVmYXVsdCwgdGhlIGxpc3RlbmVyIGlzIHNpbXBseSBpbnZva2VkLlxuICpcbiAqIEVhY2ggcGx1Z2luIHRoYXQgaXMgaW5qZWN0ZWQgaW50byBgRXZlbnRzUGx1Z2luSHViYCBpcyBpbW1lZGlhdGVseSBvcGVyYWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBFdmVudFBsdWdpbkh1YiA9IHtcblxuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkTW91bnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0TW91bnQ6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkSW5zdGFuY2VIYW5kbGVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uIChJbmplY3RlZEluc3RhbmNlSGFuZGxlKSB7XG4gICAgICBJbnN0YW5jZUhhbmRsZSA9IEluamVjdGVkSW5zdGFuY2VIYW5kbGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldEluc3RhbmNlSGFuZGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZUluc3RhbmNlSGFuZGxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW5zdGFuY2VIYW5kbGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG5cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLFxuXG4gIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYGxpc3RlbmVyYCBhdCBgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXWAuIElzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBzdG9yZS5cbiAgICovXG4gIHB1dExpc3RlbmVyOiBmdW5jdGlvbiAoaWQsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgISh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXIpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXSA9IGxpc3RlbmVyO1xuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIpIHtcbiAgICAgIFBsdWdpbk1vZHVsZS5kaWRQdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259IFRoZSBzdG9yZWQgY2FsbGJhY2suXG4gICAqL1xuICBnZXRMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIG5ldmVyIGJlIG51bGwgLS0gd2hlbiBpcyBpdD9cbiAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBsaXN0ZW5lcnMgZm9yIHRoZSBET00gZWxlbWVudCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICovXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogZnVuY3Rpb24gKGlkKSB7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiBsaXN0ZW5lckJhbmspIHtcbiAgICAgIGlmICghbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIpIHtcbiAgICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWxsb3dzIHJlZ2lzdGVyZWQgcGx1Z2lucyBhbiBvcHBvcnR1bml0eSB0byBleHRyYWN0IGV2ZW50cyBmcm9tIHRvcC1sZXZlbFxuICAgKiBuYXRpdmUgYnJvd3NlciBldmVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdG9wTGV2ZWxUYXJnZXQgVGhlIGxpc3RlbmluZyBjb21wb25lbnQgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUYXJnZXRJRCBJRCBvZiBgdG9wTGV2ZWxUYXJnZXRgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gICAqIEByZXR1cm4geyp9IEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZXZlbnRzO1xuICAgIHZhciBwbHVnaW5zID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gTm90IGV2ZXJ5IHBsdWdpbiBpbiB0aGUgb3JkZXJpbmcgbWF5IGJlIGxvYWRlZCBhdCBydW50aW1lLlxuICAgICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICB2YXIgZXh0cmFjdGVkRXZlbnRzID0gcG9zc2libGVQbHVnaW4uZXh0cmFjdEV2ZW50cyh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYWxsIHN5bnRoZXRpYyBldmVudHMgb24gdGhlIGV2ZW50IHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbiAoc2ltdWxhdGVkKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGlmIChzaW11bGF0ZWQpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLCBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCk7XG4gICAgfVxuICAgICEhZXZlbnRRdWV1ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgJyArICdhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAvLyBUaGlzIHdvdWxkIGJlIGEgZ29vZCB0aW1lIHRvIHJldGhyb3cgaWYgYW55IG9mIHRoZSBldmVudCBoYW5kbGVycyB0aHJldy5cbiAgICBSZWFjdEVycm9yVXRpbHMucmV0aHJvd0NhdWdodEVycm9yKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZXNlIGFyZSBuZWVkZWQgZm9yIHRlc3RzIG9ubHkuIERvIG5vdCB1c2UhXG4gICAqL1xuICBfX3B1cmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgbGlzdGVuZXJCYW5rID0ge307XG4gIH0sXG5cbiAgX19nZXRMaXN0ZW5lckJhbms6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCI6MTgzLFwiLi9FdmVudFBsdWdpblV0aWxzXCI6MTg0LFwiLi9SZWFjdEVycm9yVXRpbHNcIjoyMjMsXCIuL2FjY3VtdWxhdGVJbnRvXCI6MjY5LFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIjoyNzYsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMTgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5SZWdpc3RyeVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xudmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgaWYgKCFFdmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgRXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgUGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgdmFyIHBsdWdpbkluZGV4ID0gRXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgICEocGx1Z2luSW5kZXggPiAtMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW5zIHRoYXQgZG8gbm90IGV4aXN0IGluICcgKyAndGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgJyArICdtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LicsIHBsdWdpbk5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuICAgIHZhciBwdWJsaXNoZWRFdmVudHMgPSBQbHVnaW5Nb2R1bGUuZXZlbnRUeXBlcztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAhcHVibGlzaEV2ZW50Rm9yUGx1Z2luKHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgISFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICsgJ2V2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLCByZWdpc3RyYXRpb25OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblxuICAvKipcbiAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gICAqL1xuICBwbHVnaW5zOiBbXSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gICAqL1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG5cbiAgLyoqXG4gICAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gICAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogZnVuY3Rpb24gKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgICEhRXZlbnRQbHVnaW5PcmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gJyArICdvbmNlLiBZb3UgYXJlIGxpa2VseSB0cnlpbmcgdG8gbG9hZCBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cbiAgICBFdmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcbiAgICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAgICpcbiAgICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24gKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHwgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IFBsdWdpbk1vZHVsZSkge1xuICAgICAgICAhIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zICcgKyAndXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQSBzeW50aGV0aWMgZXZlbnQuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gZXZlbnQuZGlzcGF0Y2hDb25maWc7XG4gICAgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHJldHVybiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVdIHx8IG51bGw7XG4gICAgfVxuICAgIGZvciAodmFyIHBoYXNlIGluIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW5Nb2R1bGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uICgpIHtcbiAgICBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnMubGVuZ3RoID0gMDtcblxuICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICBpZiAoZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiByZWdpc3RyYXRpb25OYW1lTW9kdWxlcykge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwxODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZSgnLi9SZWFjdEVycm9yVXRpbHMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogSW5qZWN0ZWQgZGVwZW5kZW5jaWVzOlxuICovXG5cbi8qKlxuICogLSBgTW91bnRgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IGNhbiBjb252ZXJ0IGJldHdlZW4gUmVhY3QgZG9tIElEcyBhbmRcbiAqICAgYWN0dWFsIG5vZGUgcmVmZXJlbmNlcy5cbiAqL1xudmFyIGluamVjdGlvbiA9IHtcbiAgTW91bnQ6IG51bGwsXG4gIGluamVjdE1vdW50OiBmdW5jdGlvbiAoSW5qZWN0ZWRNb3VudCkge1xuICAgIGluamVjdGlvbi5Nb3VudCA9IEluamVjdGVkTW91bnQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlICYmIEluamVjdGVkTW91bnQuZ2V0SUQsICdFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RNb3VudCguLi4pOiBJbmplY3RlZCBNb3VudCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGdldE5vZGUgb3IgZ2V0SUQuJykgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbmZ1bmN0aW9uIGlzRW5kaXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbDtcbn1cblxuZnVuY3Rpb24gaXNNb3ZlaXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZSB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlO1xufVxuZnVuY3Rpb24gaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24gfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG59XG5cbnZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBpZHNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJRHMpO1xuICAgIHZhciBJRHNMZW4gPSBpZHNJc0FyciA/IGRpc3BhdGNoSURzLmxlbmd0aCA6IGRpc3BhdGNoSURzID8gMSA6IDA7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID8gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIDogZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbiwgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCB0aGUgZXZlbnQgdG8gdGhlIGxpc3RlbmVyLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbXVsYXRlZCBJZiB0aGUgZXZlbnQgaXMgc2ltdWxhdGVkIChjaGFuZ2VzIGV4biBiZWhhdmlvcilcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIEFwcGxpY2F0aW9uLWxldmVsIGNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gZG9tSUQgRE9NIGlkIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgbGlzdGVuZXIsIGRvbUlEKSB7XG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBpbmplY3Rpb24uTW91bnQuZ2V0Tm9kZShkb21JRCk7XG4gIGlmIChzaW11bGF0ZWQpIHtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoKHR5cGUsIGxpc3RlbmVyLCBldmVudCwgZG9tSUQpO1xuICB9IGVsc2Uge1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sodHlwZSwgbGlzdGVuZXIsIGV2ZW50LCBkb21JRCk7XG4gIH1cbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMuXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSURzID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzW2ldLCBkaXNwYXRjaElEc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaElEcyk7XG4gIH1cbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcywgYnV0IHN0b3BzXG4gKiBhdCB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHJldHVybmluZyB0cnVlLCBhbmQgcmV0dXJucyB0aGF0IGlkLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJuc1xuICogdHJ1ZSwgb3IgbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIElEcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGlmIChkaXNwYXRjaExpc3RlbmVyc1tpXShldmVudCwgZGlzcGF0Y2hJRHNbaV0pKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaElEc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMoZXZlbnQsIGRpc3BhdGNoSURzKSkge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoSURzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAc2VlIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsXG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUoZXZlbnQpIHtcbiAgdmFyIHJldCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KTtcbiAgZXZlbnQuX2Rpc3BhdGNoSURzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBFeGVjdXRpb24gb2YgYSBcImRpcmVjdFwiIGRpc3BhdGNoIC0gdGhlcmUgbXVzdCBiZSBhdCBtb3N0IG9uZSBkaXNwYXRjaFxuICogYWNjdW11bGF0ZWQgb24gdGhlIGV2ZW50IG9yIGl0IGlzIGNvbnNpZGVyZWQgYW4gZXJyb3IuIEl0IGRvZXNuJ3QgcmVhbGx5IG1ha2VcbiAqIHNlbnNlIGZvciBhbiBldmVudCB3aXRoIG11bHRpcGxlIGRpc3BhdGNoZXMgKGJ1YmJsZWQpIHRvIGtlZXAgdHJhY2sgb2YgdGhlXG4gKiByZXR1cm4gdmFsdWVzIGF0IGVhY2ggZGlzcGF0Y2ggZXhlY3V0aW9uLCBidXQgaXQgZG9lcyB0ZW5kIHRvIG1ha2Ugc2Vuc2Ugd2hlblxuICogZGVhbGluZyB3aXRoIFwiZGlyZWN0XCIgZGlzcGF0Y2hlcy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGV4ZWN1dGluZyB0aGUgc2luZ2xlIGRpc3BhdGNoLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICAhIUFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZXhlY3V0ZURpcmVjdERpc3BhdGNoKC4uLik6IEludmFsaWQgYGV2ZW50YC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHZhciByZXMgPSBkaXNwYXRjaExpc3RlbmVyID8gZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOiBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiBudW1iZXIgb2YgZGlzcGF0Y2hlcyBhY2N1bXVsYXRlZCBpcyBncmVhdGVyIHRoYW4gMC5cbiAqL1xuZnVuY3Rpb24gaGFzRGlzcGF0Y2hlcyhldmVudCkge1xuICByZXR1cm4gISFldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG59XG5cbi8qKlxuICogR2VuZXJhbCB1dGlsaXRpZXMgdGhhdCBhcmUgdXNlZnVsIGluIGNyZWF0aW5nIGN1c3RvbSBFdmVudCBQbHVnaW5zLlxuICovXG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHtcbiAgaXNFbmRpc2g6IGlzRW5kaXNoLFxuICBpc01vdmVpc2g6IGlzTW92ZWlzaCxcbiAgaXNTdGFydGlzaDogaXNTdGFydGlzaCxcblxuICBleGVjdXRlRGlyZWN0RGlzcGF0Y2g6IGV4ZWN1dGVEaXJlY3REaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG5cbiAgZ2V0Tm9kZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGluamVjdGlvbi5Nb3VudC5nZXROb2RlKGlkKTtcbiAgfSxcbiAgZ2V0SUQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGluamVjdGlvbi5Nb3VudC5nZXRJRChub2RlKTtcbiAgfSxcblxuICBpbmplY3Rpb246IGluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblV0aWxzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxODEsXCIuL1JlYWN0RXJyb3JVdGlsc1wiOjIyMyxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwxODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFByb3BhZ2F0b3JzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcblxudmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG52YXIgZ2V0TGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcjtcblxuLyoqXG4gKiBTb21lIGV2ZW50IHR5cGVzIGhhdmUgYSBub3Rpb24gb2YgZGlmZmVyZW50IHJlZ2lzdHJhdGlvbiBuYW1lcyBmb3IgZGlmZmVyZW50XG4gKiBcInBoYXNlc1wiIG9mIHByb3BhZ2F0aW9uLiBUaGlzIGZpbmRzIGxpc3RlbmVycyBieSBhIGdpdmVuIHBoYXNlLlxuICovXG5mdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaWQsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGRvbUlELCB1cHdhcmRzLCBldmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRvbUlELCAnRGlzcGF0Y2hpbmcgaWQgbXVzdCBub3QgYmUgbnVsbCcpIDogdW5kZWZpbmVkO1xuICB9XG4gIHZhciBwaGFzZSA9IHVwd2FyZHMgPyBQcm9wYWdhdGlvblBoYXNlcy5idWJibGVkIDogUHJvcGFnYXRpb25QaGFzZXMuY2FwdHVyZWQ7XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShkb21JRCwgZXZlbnQsIHBoYXNlKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSURzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSURzLCBkb21JRCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRpc3BhdGNoZXMgKG11c3QgYmUgZW50aXJlbHkgY29sbGVjdGVkIGJlZm9yZSBkaXNwYXRjaGluZyAtIHNlZSB1bml0XG4gKiB0ZXN0cykuIExhemlseSBhbGxvY2F0ZSB0aGUgYXJyYXkgdG8gY29uc2VydmUgbWVtb3J5LiAgV2UgbXVzdCBsb29wIHRocm91Z2hcbiAqIGVhY2ggZXZlbnQgYW5kIHBlcmZvcm0gdGhlIHRyYXZlcnNhbCBmb3IgZWFjaCBvbmUuIFdlIGNhbm5vdCBwZXJmb3JtIGFcbiAqIHNpbmdsZSB0cmF2ZXJzYWwgZm9yIHRoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBldmVudHMgYmVjYXVzZSBlYWNoIGV2ZW50IG1heVxuICogaGF2ZSBhIGRpZmZlcmVudCB0YXJnZXQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZShldmVudC5kaXNwYXRjaE1hcmtlciwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZWAsIGJ1dCBza2lwcyBvdmVyIHRoZSB0YXJnZXRJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmdldEluc3RhbmNlSGFuZGxlKCkudHJhdmVyc2VUd29QaGFzZVNraXBUYXJnZXQoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIHdpdGhvdXQgcmVnYXJkIHRvIGRpcmVjdGlvbiwgZG9lcyBub3QgbG9vayBmb3IgcGhhc2VkXG4gKiByZWdpc3RyYXRpb24gbmFtZXMuIFNhbWUgYXMgYGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlYCBidXQgd2l0aG91dFxuICogcmVxdWlyaW5nIHRoYXQgdGhlIGBkaXNwYXRjaE1hcmtlcmAgYmUgdGhlIHNhbWUgYXMgdGhlIGRpc3BhdGNoZWQgSUQuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGlkLCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgaWQpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuZGlzcGF0Y2hNYXJrZXIsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KTtcbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbUlELCB0b0lEKSB7XG4gIEV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5nZXRJbnN0YW5jZUhhbmRsZSgpLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tSUQsIHRvSUQsIGFjY3VtdWxhdGVEaXNwYXRjaGVzLCBsZWF2ZSwgZW50ZXIpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG4vKipcbiAqIEEgc21hbGwgc2V0IG9mIHByb3BhZ2F0aW9uIHBhdHRlcm5zLCBlYWNoIG9mIHdoaWNoIHdpbGwgYWNjZXB0IGEgc21hbGwgYW1vdW50XG4gKiBvZiBpbmZvcm1hdGlvbiwgYW5kIGdlbmVyYXRlIGEgc2V0IG9mIFwiZGlzcGF0Y2ggcmVhZHkgZXZlbnQgb2JqZWN0c1wiIC0gd2hpY2hcbiAqIGFyZSBzZXRzIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGFubm90YXRlZCB3aXRoIGEgc2V0IG9mIGRpc3BhdGNoZWRcbiAqIGxpc3RlbmVyIGZ1bmN0aW9ucy9pZHMuIFRoZSBBUEkgaXMgZGVzaWduZWQgdGhpcyB3YXkgdG8gZGlzY291cmFnZSB0aGVzZVxuICogcHJvcGFnYXRpb24gc3RyYXRlZ2llcyBmcm9tIGFjdHVhbGx5IGV4ZWN1dGluZyB0aGUgZGlzcGF0Y2hlcywgc2luY2Ugd2VcbiAqIGFsd2F5cyB3YW50IHRvIGNvbGxlY3QgdGhlIGVudGlyZSBzZXQgb2YgZGlzcGF0Y2hlcyBiZWZvcmUgZXhlY3V0aW5nIGV2ZW50IGFcbiAqIHNpbmdsZSBvbmUuXG4gKlxuICogQGNvbnN0cnVjdG9yIEV2ZW50UHJvcGFnYXRvcnNcbiAqL1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSB7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCxcbiAgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6IGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxODEsXCIuL0V2ZW50UGx1Z2luSHViXCI6MTgyLFwiLi9hY2N1bXVsYXRlSW50b1wiOjI2OSxcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6Mjc2LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwxODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9zdGFydFRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cblxuYXNzaWduKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgIHRoaXMuX3N0YXJ0VGV4dCA9IG51bGw7XG4gICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgdGV4dCBvZiBpbnB1dC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0VGV4dDogZnVuY3Rpb24gKCkge1xuICAgIGlmICgndmFsdWUnIGluIHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIGRpZmZlcmluZyBzdWJzdHJpbmcgYmV0d2VlbiB0aGUgaW5pdGlhbGx5IHN0b3JlZFxuICAgKiB0ZXh0IGNvbnRlbnQgYW5kIHRoZSBjdXJyZW50IGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fZmFsbGJhY2tUZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICAgIH1cblxuICAgIHZhciBzdGFydDtcbiAgICB2YXIgc3RhcnRWYWx1ZSA9IHRoaXMuX3N0YXJ0VGV4dDtcbiAgICB2YXIgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aDtcbiAgICB2YXIgZW5kO1xuICAgIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICAgIHZhciBlbmRMZW5ndGggPSBlbmRWYWx1ZS5sZW5ndGg7XG5cbiAgICBmb3IgKHN0YXJ0ID0gMDsgc3RhcnQgPCBzdGFydExlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRdICE9PSBlbmRWYWx1ZVtzdGFydF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gICAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbGljZVRhaWwgPSBlbmQgPiAxID8gMSAtIGVuZCA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgc2xpY2VUYWlsKTtcbiAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlO1xufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1Bvb2xlZENsYXNzXCI6MTkwLFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6MjgzfV0sMTg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBIVE1MRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xudmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xudmFyIEhBU19CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFO1xudmFyIEhBU19TSURFX0VGRkVDVFMgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUztcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG5cbnZhciBoYXNTVkc7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHZhciBpbXBsZW1lbnRhdGlvbiA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uO1xuICBoYXNTVkcgPSBpbXBsZW1lbnRhdGlvbiAmJiBpbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIGltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ2h0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmUnLCAnMS4xJyk7XG59XG5cbnZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZCgvXihkYXRhfGFyaWEpLVthLXpfXVthLXpcXGRfLlxcLV0qJC8pLFxuICBQcm9wZXJ0aWVzOiB7XG4gICAgLyoqXG4gICAgICogU3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIGFjY2VwdDogbnVsbCxcbiAgICBhY2NlcHRDaGFyc2V0OiBudWxsLFxuICAgIGFjY2Vzc0tleTogbnVsbCxcbiAgICBhY3Rpb246IG51bGwsXG4gICAgYWxsb3dGdWxsU2NyZWVuOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhbGxvd1RyYW5zcGFyZW5jeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGFsdDogbnVsbCxcbiAgICBhc3luYzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b0NvbXBsZXRlOiBudWxsLFxuICAgIC8vIGF1dG9Gb2N1cyBpcyBwb2x5ZmlsbGVkL25vcm1hbGl6ZWQgYnkgQXV0b0ZvY3VzVXRpbHNcbiAgICAvLyBhdXRvRm9jdXM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9QbGF5OiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjYXB0dXJlOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjZWxsUGFkZGluZzogbnVsbCxcbiAgICBjZWxsU3BhY2luZzogbnVsbCxcbiAgICBjaGFyU2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY2hhbGxlbmdlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgY2hlY2tlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjbGFzc0lEOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gVG8gc2V0IGNsYXNzTmFtZSBvbiBTVkcgZWxlbWVudHMsIGl0J3MgbmVjZXNzYXJ5IHRvIHVzZSAuc2V0QXR0cmlidXRlO1xuICAgIC8vIHRoaXMgd29ya3Mgb24gSFRNTCBlbGVtZW50cyB0b28gaW4gYWxsIGJyb3dzZXJzIGV4Y2VwdCBJRTguIENvbnZlbmllbnRseSxcbiAgICAvLyBJRTggZG9lc24ndCBzdXBwb3J0IFNWRyBhbmQgc28gd2UgY2FuIHNpbXBseSB1c2UgdGhlIGF0dHJpYnV0ZSBpblxuICAgIC8vIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBTVkcgYW5kIHRoZSBwcm9wZXJ0eSBpbiBicm93c2VycyB0aGF0IGRvbid0LFxuICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGUgZWxlbWVudCBpcyBIVE1MIG9yIFNWRy5cbiAgICBjbGFzc05hbWU6IGhhc1NWRyA/IE1VU1RfVVNFX0FUVFJJQlVURSA6IE1VU1RfVVNFX1BST1BFUlRZLFxuICAgIGNvbHM6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIGNvbFNwYW46IG51bGwsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBjb250ZW50RWRpdGFibGU6IG51bGwsXG4gICAgY29udGV4dE1lbnU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjb250cm9sczogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjb29yZHM6IG51bGwsXG4gICAgY3Jvc3NPcmlnaW46IG51bGwsXG4gICAgZGF0YTogbnVsbCwgLy8gRm9yIGA8b2JqZWN0IC8+YCBhY3RzIGFzIGBzcmNgLlxuICAgIGRhdGVUaW1lOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZGVmZXI6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRpcjogbnVsbCxcbiAgICBkaXNhYmxlZDogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZG93bmxvYWQ6IEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUsXG4gICAgZHJhZ2dhYmxlOiBudWxsLFxuICAgIGVuY1R5cGU6IG51bGwsXG4gICAgZm9ybTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1BY3Rpb246IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtRW5jVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1NZXRob2Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb3JtTm9WYWxpZGF0ZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZm9ybVRhcmdldDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZyYW1lQm9yZGVyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBoZWlnaHQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoaWRkZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGhpZ2g6IG51bGwsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBodG1sRm9yOiBudWxsLFxuICAgIGh0dHBFcXVpdjogbnVsbCxcbiAgICBpY29uOiBudWxsLFxuICAgIGlkOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBpbnB1dE1vZGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGtleVBhcmFtczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGtleVR5cGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBsYWJlbDogbnVsbCxcbiAgICBsYW5nOiBudWxsLFxuICAgIGxpc3Q6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBsb29wOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGxvdzogbnVsbCxcbiAgICBtYW5pZmVzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmdpbkhlaWdodDogbnVsbCxcbiAgICBtYXJnaW5XaWR0aDogbnVsbCxcbiAgICBtYXg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYUdyb3VwOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBtaW46IG51bGwsXG4gICAgbWluTGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbXV0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbmFtZTogbnVsbCxcbiAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcGVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcHRpbXVtOiBudWxsLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcG9zdGVyOiBudWxsLFxuICAgIHByZWxvYWQ6IG51bGwsXG4gICAgcmFkaW9Hcm91cDogbnVsbCxcbiAgICByZWFkT25seTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZWw6IG51bGwsXG4gICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByb3dzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICByb3dTcGFuOiBudWxsLFxuICAgIHNhbmRib3g6IG51bGwsXG4gICAgc2NvcGU6IG51bGwsXG4gICAgc2NvcGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzY3JvbGxpbmc6IG51bGwsXG4gICAgc2VhbWxlc3M6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNlbGVjdGVkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNoYXBlOiBudWxsLFxuICAgIHNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNpemVzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogbnVsbCxcbiAgICBzcmM6IG51bGwsXG4gICAgc3JjRG9jOiBNVVNUX1VTRV9QUk9QRVJUWSxcbiAgICBzcmNTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdGFydDogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc3RlcDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBzdW1tYXJ5OiBudWxsLFxuICAgIHRhYkluZGV4OiBudWxsLFxuICAgIHRhcmdldDogbnVsbCxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIHVzZU1hcDogbnVsbCxcbiAgICB2YWx1ZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfU0lERV9FRkZFQ1RTLFxuICAgIHdpZHRoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgd21vZGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3cmFwOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogUkRGYSBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWJvdXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkYXRhdHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGlubGlzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHByZWZpeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIC8vIHByb3BlcnR5IGlzIGFsc28gc3VwcG9ydGVkIGZvciBPcGVuR3JhcGggaW4gbWV0YSB0YWdzLlxuICAgIHByb3BlcnR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcmVzb3VyY2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAndHlwZW9mJzogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHZvY2FiOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG5cbiAgICAvKipcbiAgICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgICAqL1xuICAgIC8vIGF1dG9DYXBpdGFsaXplIGFuZCBhdXRvQ29ycmVjdCBhcmUgc3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yXG4gICAgLy8ga2V5Ym9hcmQgaGludHMuXG4gICAgYXV0b0NhcGl0YWxpemU6IG51bGwsXG4gICAgYXV0b0NvcnJlY3Q6IG51bGwsXG4gICAgLy8gYXV0b1NhdmUgYWxsb3dzIFdlYktpdC9CbGluayB0byBwZXJzaXN0IHZhbHVlcyBvZiBpbnB1dCBmaWVsZHMgb24gcGFnZSByZWxvYWRzXG4gICAgYXV0b1NhdmU6IG51bGwsXG4gICAgLy8gaXRlbVByb3AsIGl0ZW1TY29wZSwgaXRlbVR5cGUgYXJlIGZvclxuICAgIC8vIE1pY3JvZGF0YSBzdXBwb3J0LiBTZWUgaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG4gICAgaXRlbVByb3A6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBpdGVtU2NvcGU6IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGl0ZW1UeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gaXRlbUlEIGFuZCBpdGVtUmVmIGFyZSBmb3IgTWljcm9kYXRhIHN1cHBvcnQgYXMgd2VsbCBidXRcbiAgICAvLyBvbmx5IHNwZWNpZmllZCBpbiB0aGUgdGhlIFdIQVRXRyBzcGVjIGRvY3VtZW50LiBTZWVcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9taWNyb2RhdGEuaHRtbCNtaWNyb2RhdGEtZG9tLWFwaVxuICAgIGl0ZW1JRDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGl0ZW1SZWY6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyByZXN1bHRzIHNob3cgbG9va2luZyBnbGFzcyBpY29uIGFuZCByZWNlbnQgc2VhcmNoZXMgb24gaW5wdXRcbiAgICAvLyBzZWFyY2ggZmllbGRzIGluIFdlYktpdC9CbGlua1xuICAgIHJlc3VsdHM6IG51bGwsXG4gICAgLy8gSUUtb25seSBhdHRyaWJ1dGUgdGhhdCBzcGVjaWZpZXMgc2VjdXJpdHkgcmVzdHJpY3Rpb25zIG9uIGFuIGlmcmFtZVxuICAgIC8vIGFzIGFuIGFsdGVybmF0aXZlIHRvIHRoZSBzYW5kYm94IGF0dHJpYnV0ZSBvbiBJRTwxMFxuICAgIHNlY3VyaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgLy8gSUUtb25seSBhdHRyaWJ1dGUgdGhhdCBjb250cm9scyBmb2N1cyBiZWhhdmlvclxuICAgIHVuc2VsZWN0YWJsZTogTVVTVF9VU0VfQVRUUklCVVRFXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXG4gICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcbiAgfSxcbiAgRE9NUHJvcGVydHlOYW1lczoge1xuICAgIGF1dG9DYXBpdGFsaXplOiAnYXV0b2NhcGl0YWxpemUnLFxuICAgIGF1dG9Db21wbGV0ZTogJ2F1dG9jb21wbGV0ZScsXG4gICAgYXV0b0NvcnJlY3Q6ICdhdXRvY29ycmVjdCcsXG4gICAgYXV0b0ZvY3VzOiAnYXV0b2ZvY3VzJyxcbiAgICBhdXRvUGxheTogJ2F1dG9wbGF5JyxcbiAgICBhdXRvU2F2ZTogJ2F1dG9zYXZlJyxcbiAgICAvLyBgZW5jb2RpbmdgIGlzIGVxdWl2YWxlbnQgdG8gYGVuY3R5cGVgLCBJRTggbGFja3MgYW4gYGVuY3R5cGVgIHNldHRlci5cbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9mb3Jtcy5odG1sI2RvbS1mcy1lbmNvZGluZ1xuICAgIGVuY1R5cGU6ICdlbmNvZGluZycsXG4gICAgaHJlZkxhbmc6ICdocmVmbGFuZycsXG4gICAgcmFkaW9Hcm91cDogJ3JhZGlvZ3JvdXAnLFxuICAgIHNwZWxsQ2hlY2s6ICdzcGVsbGNoZWNrJyxcbiAgICBzcmNEb2M6ICdzcmNkb2MnLFxuICAgIHNyY1NldDogJ3NyY3NldCdcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUHJvcGVydHlDb25maWc7XG59LHtcIi4vRE9NUHJvcGVydHlcIjoxNzYsXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjIwfV0sMTg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgJ2J1dHRvbic6IHRydWUsXG4gICdjaGVja2JveCc6IHRydWUsXG4gICdpbWFnZSc6IHRydWUsXG4gICdoaWRkZW4nOiB0cnVlLFxuICAncmFkaW8nOiB0cnVlLFxuICAncmVzZXQnOiB0cnVlLFxuICAnc3VibWl0JzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcykge1xuICAhKGlucHV0UHJvcHMuY2hlY2tlZExpbmsgPT0gbnVsbCB8fCBpbnB1dFByb3BzLnZhbHVlTGluayA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIHZhbHVlTGluay4gSWYgeW91IHdhbnQgdG8gdXNlICcgKyAnY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcyk7XG4gICEoaW5wdXRQcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0UHJvcHMub25DaGFuZ2UgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHByb3ZpZGUgYSB2YWx1ZUxpbmsgYW5kIGEgdmFsdWUgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50ICcgKyAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gJyArICdJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZCBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byAnICsgJ3VzZSBjaGVja2VkTGluaycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgfSxcbiAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIG9uQ2hhbmdlOiBSZWFjdFByb3BUeXBlcy5mdW5jXG59O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gKi9cbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0ge1xuICBjaGVja1Byb3BUeXBlczogZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BzLCBvd25lcikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIHRhZ05hbWUsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBmb3JtIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcykge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3BcbiAgICogICAgICAgICAgICAgb3IgbGluay5cbiAgICovXG4gIGdldENoZWNrZWQ6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnQgY2hhbmdlIGV2ZW50IHRvIGhhbmRsZVxuICAgKi9cbiAgZXhlY3V0ZU9uQ2hhbmdlOiBmdW5jdGlvbiAoaW5wdXRQcm9wcywgZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsucmVxdWVzdENoYW5nZShldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5vbkNoYW5nZS5jYWxsKHVuZGVmaW5lZCwgZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1wiOjI0MCxcIi4vUmVhY3RQcm9wVHlwZXNcIjoyNDEsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMTg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBPYmplY3QuYXNzaWduXG4gKi9cblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5hc3NpZ25cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2VzKSB7XG4gIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gdGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG4gIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgbmV4dEluZGV4ID0gMTsgbmV4dEluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgbmV4dEluZGV4KyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tuZXh0SW5kZXhdO1xuICAgIGlmIChuZXh0U291cmNlID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBmcm9tID0gT2JqZWN0KG5leHRTb3VyY2UpO1xuXG4gICAgLy8gV2UgZG9uJ3QgY3VycmVudGx5IHN1cHBvcnQgYWNjZXNzb3JzIG5vciBwcm94aWVzLiBUaGVyZWZvcmUgdGhpc1xuICAgIC8vIGNvcHkgY2Fubm90IHRocm93LiBJZiB3ZSBldmVyIHN1cHBvcnRlZCB0aGlzIHRoZW4gd2UgbXVzdCBoYW5kbGVcbiAgICAvLyBleGNlcHRpb25zIGFuZCBzaWRlLWVmZmVjdHMuIFdlIGRvbid0IHN1cHBvcnQgc3ltYm9scyBzbyB0aGV5IHdvbid0XG4gICAgLy8gYmUgdHJhbnNmZXJyZWQuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ247XG59LHt9XSwxOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgZml2ZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGluc3RhbmNlLmRlc3RydWN0b3IoKTtcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgfVxufTtcblxudmFyIERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG52YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcyAob3B0aW9uYWwpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyLFxuICBmaXZlQXJndW1lbnRQb29sZXI6IGZpdmVBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0fV0sMTkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgnLi9SZWFjdERPTScpO1xudmFyIFJlYWN0RE9NU2VydmVyID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlcnZlcicpO1xudmFyIFJlYWN0SXNvbW9ycGhpYyA9IHJlcXVpcmUoJy4vUmVhY3RJc29tb3JwaGljJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZSgnLi9kZXByZWNhdGVkJyk7XG5cbi8vIGB2ZXJzaW9uYCB3aWxsIGJlIGFkZGVkIGhlcmUgYnkgUmVhY3RJc29tb3JwaGljLlxudmFyIFJlYWN0ID0ge307XG5cbmFzc2lnbihSZWFjdCwgUmVhY3RJc29tb3JwaGljKTtcblxuYXNzaWduKFJlYWN0LCB7XG4gIC8vIFJlYWN0RE9NXG4gIGZpbmRET01Ob2RlOiBkZXByZWNhdGVkKCdmaW5kRE9NTm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00uZmluZERPTU5vZGUpLFxuICByZW5kZXI6IGRlcHJlY2F0ZWQoJ3JlbmRlcicsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00ucmVuZGVyKSxcbiAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogZGVwcmVjYXRlZCgndW5tb3VudENvbXBvbmVudEF0Tm9kZScsICdSZWFjdERPTScsICdyZWFjdC1kb20nLCBSZWFjdERPTSwgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSksXG5cbiAgLy8gUmVhY3RET01TZXJ2ZXJcbiAgcmVuZGVyVG9TdHJpbmc6IGRlcHJlY2F0ZWQoJ3JlbmRlclRvU3RyaW5nJywgJ1JlYWN0RE9NU2VydmVyJywgJ3JlYWN0LWRvbS9zZXJ2ZXInLCBSZWFjdERPTVNlcnZlciwgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcpLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogZGVwcmVjYXRlZCgncmVuZGVyVG9TdGF0aWNNYXJrdXAnLCAnUmVhY3RET01TZXJ2ZXInLCAncmVhY3QtZG9tL3NlcnZlcicsIFJlYWN0RE9NU2VydmVyLCBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0YXRpY01hcmt1cClcbn0pO1xuXG5SZWFjdC5fX1NFQ1JFVF9ET01fRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCA9IFJlYWN0RE9NO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0RE9NXCI6MjAyLFwiLi9SZWFjdERPTVNlcnZlclwiOjIxMixcIi4vUmVhY3RJc29tb3JwaGljXCI6MjMwLFwiLi9kZXByZWNhdGVkXCI6MjcyfV0sMTkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG5cbnZhciBmaW5kRE9NTm9kZSA9IHJlcXVpcmUoJy4vZmluZERPTU5vZGUnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZGlkV2FybktleSA9ICdfZ2V0RE9NTm9kZURpZFdhcm4nO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gVGhlIHJvb3Qgbm9kZSBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGdldERPTU5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzLmNvbnN0cnVjdG9yW2RpZFdhcm5LZXldLCAnJXMuZ2V0RE9NTm9kZSguLi4pIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgJyArICdSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSkgaW5zdGVhZC4nLCBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKS5nZXROYW1lKCkgfHwgdGhpcy50YWdOYW1lIHx8ICdVbmtub3duJykgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb25zdHJ1Y3RvcltkaWRXYXJuS2V5XSA9IHRydWU7XG4gICAgcmV0dXJuIGZpbmRET01Ob2RlKHRoaXMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RJbnN0YW5jZU1hcFwiOjIyOSxcIi4vZmluZERPTU5vZGVcIjoyNzQsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDE5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50RW1pdHRlck1peGluJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCcuL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG4vKipcbiAqIFN1bW1hcnkgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgZXZlbnQgaGFuZGxpbmc6XG4gKlxuICogIC0gVG9wLWxldmVsIGRlbGVnYXRpb24gaXMgdXNlZCB0byB0cmFwIG1vc3QgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLiBUaGlzXG4gKiAgICBtYXkgb25seSBvY2N1ciBpbiB0aGUgbWFpbiB0aHJlYWQgYW5kIGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZlxuICogICAgUmVhY3RFdmVudExpc3RlbmVyLCB3aGljaCBpcyBpbmplY3RlZCBhbmQgY2FuIHRoZXJlZm9yZSBzdXBwb3J0IHBsdWdnYWJsZVxuICogICAgZXZlbnQgc291cmNlcy4gVGhpcyBpcyB0aGUgb25seSB3b3JrIHRoYXQgb2NjdXJzIGluIHRoZSBtYWluIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gZmFsc2U7XG52YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcblxuLy8gRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIHdoaWNoIGRvbid0IGNvbnNpc3RlbnRseSBidWJibGUgKHdoaWNoIHdlIHRyYXAgYXQgYVxuLy8gbG93ZXIgbm9kZSB0aGFuIGBkb2N1bWVudGApLCBiaW5kaW5nIGF0IGBkb2N1bWVudGAgd291bGQgY2F1c2UgZHVwbGljYXRlXG4vLyBldmVudHMgc28gd2UgZG9uJ3QgaW5jbHVkZSB0aGVtIGhlcmVcbnZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gIHRvcEFib3J0OiAnYWJvcnQnLFxuICB0b3BCbHVyOiAnYmx1cicsXG4gIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgdG9wQ2FuUGxheVRocm91Z2g6ICdjYW5wbGF5dGhyb3VnaCcsXG4gIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gIHRvcENsaWNrOiAnY2xpY2snLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgdG9wSW5wdXQ6ICdpbnB1dCcsXG4gIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gIHRvcEtleVVwOiAna2V5dXAnLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wUGF1c2U6ICdwYXVzZScsXG4gIHRvcFBsYXk6ICdwbGF5JyxcbiAgdG9wUGxheWluZzogJ3BsYXlpbmcnLFxuICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICB0b3BTY3JvbGw6ICdzY3JvbGwnLFxuICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICB0b3BUZXh0SW5wdXQ6ICd0ZXh0SW5wdXQnLFxuICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcbiAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZycsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcignbXlJRCcsICdvbkNsaWNrJywgbXlGdW5jdGlvbik7XG4gKlxuICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBhc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmNpZXNbaV07XG4gICAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wV2hlZWwsICd3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ21vdXNld2hlZWwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmlyZWZveCBuZWVkcyB0byBjYXB0dXJlIGEgZGlmZmVyZW50IG1vdXNlIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Rlc3RzL3Njcm9sbC5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BXaGVlbCwgJ0RPTU1vdXNlU2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wU2Nyb2xsKSB7XG5cbiAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsICdzY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fCBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1cycsIG1vdW50QXQpO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcEJsdXIsICdibHVyJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgIC8vIElFIGhhcyBgZm9jdXNpbmAgYW5kIGBmb2N1c291dGAgZXZlbnRzIHdoaWNoIGJ1YmJsZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMDgvMDQvZGVsZWdhdGluZ190aGUuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1c2luJywgbW91bnRBdCk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BCbHVyLCAnZm9jdXNvdXQnLCBtb3VudEF0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEJsdXJdID0gdHJ1ZTtcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KGRlcGVuZGVuY3ksIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSwgbW91bnRBdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVucyB0byB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUgZXZlbnRzLiBXZSBjYWNoZSBzY3JvbGwgdmFsdWVzIHNvIHRoYXRcbiAgICogYXBwbGljYXRpb24gY29kZSBjYW4gYWNjZXNzIHRoZW0gd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd3MuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUpIHtcbiAgICAgIHZhciByZWZyZXNoID0gVmlld3BvcnRNZXRyaWNzLnJlZnJlc2hTY3JvbGxWYWx1ZXM7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgIGlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiBFdmVudFBsdWdpbkh1Yi5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luSHViLnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLFxuXG4gIHB1dExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcixcblxuICBnZXRMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXIsXG5cbiAgZGVsZXRlTGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyLFxuXG4gIGRlbGV0ZUFsbExpc3RlbmVyczogRXZlbnRQbHVnaW5IdWIuZGVsZXRlQWxsTGlzdGVuZXJzXG5cbn0pO1xuXG5SZWFjdFBlcmYubWVhc3VyZU1ldGhvZHMoUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLCAnUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJywge1xuICBwdXRMaXN0ZW5lcjogJ3B1dExpc3RlbmVyJyxcbiAgZGVsZXRlTGlzdGVuZXI6ICdkZWxldGVMaXN0ZW5lcidcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE4MSxcIi4vRXZlbnRQbHVnaW5IdWJcIjoxODIsXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIjoxODMsXCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW5cIjoyMjQsXCIuL1JlYWN0UGVyZlwiOjIzOCxcIi4vVmlld3BvcnRNZXRyaWNzXCI6MjY4LFwiLi9pc0V2ZW50U3VwcG9ydGVkXCI6Mjg1fV0sMTk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZFJlY29uY2lsZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gaW5zdGFudGlhdGVDaGlsZChjaGlsZEluc3RhbmNlcywgY2hpbGQsIG5hbWUpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGtleVVuaXF1ZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsIG5hbWUpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmIChjaGlsZCAhPSBudWxsICYmIGtleVVuaXF1ZSkge1xuICAgIGNoaWxkSW5zdGFuY2VzW25hbWVdID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFjdENoaWxkUmVjb25jaWxlciBwcm92aWRlcyBoZWxwZXJzIGZvciBpbml0aWFsaXppbmcgb3IgdXBkYXRpbmcgYSBzZXQgb2ZcbiAqIGNoaWxkcmVuLiBJdHMgb3V0cHV0IGlzIHN1aXRhYmxlIGZvciBwYXNzaW5nIGl0IG9udG8gUmVhY3RNdWx0aUNoaWxkIHdoaWNoXG4gKiBkb2VzIGRpZmZlZCByZW9yZGVyaW5nIGFuZCBpbnNlcnRpb24uXG4gKi9cbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFwibW91bnQgaW1hZ2VcIiBmb3IgZWFjaCBvZiB0aGUgc3VwcGxpZWQgY2hpbGRyZW4uIEluIHRoZSBjYXNlXG4gICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5lc3RlZENoaWxkTm9kZXMgTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgc2V0IG9mIGNoaWxkIGluc3RhbmNlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG4gICAgdHJhdmVyc2VBbGxDaGlsZHJlbihuZXN0ZWRDaGlsZE5vZGVzLCBpbnN0YW50aWF0ZUNoaWxkLCBjaGlsZEluc3RhbmNlcyk7XG4gICAgcmV0dXJuIGNoaWxkSW5zdGFuY2VzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSByZW5kZXJlZCBjaGlsZHJlbiBhbmQgcmV0dXJucyBhIG5ldyBzZXQgb2YgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gcHJldkNoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDaGlsZHJlbiBGbGF0IGNoaWxkIGVsZW1lbnQgbWFwcy5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBBIG5ldyBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgLy8gV2UgY3VycmVudGx5IGRvbid0IGhhdmUgYSB3YXkgdG8gdHJhY2sgbW92ZXMgaGVyZSBidXQgaWYgd2UgdXNlIGl0ZXJhdG9yc1xuICAgIC8vIGluc3RlYWQgb2YgZm9yLi5pbiB3ZSBjYW4gemlwIHRoZSBpdGVyYXRvcnMgYW5kIGNoZWNrIGlmIGFuIGl0ZW0gaGFzXG4gICAgLy8gbW92ZWQuXG4gICAgLy8gVE9ETzogSWYgbm90aGluZyBoYXMgY2hhbmdlZCwgcmV0dXJuIHRoZSBwcmV2Q2hpbGRyZW4gb2JqZWN0IHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gcXVpY2tseSBiYWlsb3V0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQuXG4gICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBuYW1lO1xuICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2Q2hpbGQgJiYgcHJldkNoaWxkLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgIGlmIChwcmV2Q2hpbGQgIT0gbnVsbCAmJiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDaGlsZCwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDaGlsZCwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGNoaWxkIG11c3QgYmUgaW5zdGFudGlhdGVkIGJlZm9yZSBpdCdzIG1vdW50ZWQuXG4gICAgICAgIHZhciBuZXh0Q2hpbGRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dEVsZW1lbnQsIG51bGwpO1xuICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBuZXh0Q2hpbGRJbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVW5tb3VudCBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IHJlbmRlcmVkQ2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAocmVuZGVyZWRDaGlsZHJlbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSByZW5kZXJlZENoaWxkcmVuW25hbWVdO1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChyZW5kZXJlZENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkUmVjb25jaWxlcjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0UmVjb25jaWxlclwiOjI0MyxcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiOjI4NCxcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjoyOTIsXCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW5cIjoyOTMsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDE5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDaGlsZHJlblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyO1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKD8hXFwvKS9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICcvLycpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogdHJhdmVyc2FsLiBBbGxvd3MgYXZvaWRpbmcgYmluZGluZyBjYWxsYmFja3MuXG4gKlxuICogQGNvbnN0cnVjdG9yIEZvckVhY2hCb29rS2VlcGluZ1xuICogQHBhcmFtIHshZnVuY3Rpb259IGZvckVhY2hGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIHRyYXZlcnNhbCB3aXRoLlxuICogQHBhcmFtIHs/Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIGNvbnRleHQgd2l0aC5cbiAqL1xuZnVuY3Rpb24gRm9yRWFjaEJvb2tLZWVwaW5nKGZvckVhY2hGdW5jdGlvbiwgZm9yRWFjaENvbnRleHQpIHtcbiAgdGhpcy5mdW5jID0gZm9yRWFjaEZ1bmN0aW9uO1xuICB0aGlzLmNvbnRleHQgPSBmb3JFYWNoQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5Gb3JFYWNoQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsIHR3b0FyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkKGJvb2tLZWVwaW5nLCBjaGlsZCwgbmFtZSkge1xuICB2YXIgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmM7XG4gIHZhciBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xufVxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICB0aGlzLmtleVByZWZpeCA9IG51bGw7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQ7XG4gIHZhciBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXg7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgdmFyIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG4gIHZhciBtYXBwZWRDaGlsZCA9IGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsXG4gICAgICAvLyBLZWVwIGJvdGggdGhlIChtYXBwZWQpIGFuZCBvbGQga2V5cyBpZiB0aGV5IGRpZmZlciwganVzdCBhc1xuICAgICAgLy8gdHJhdmVyc2VBbGxDaGlsZHJlbiB1c2VkIHRvIGRvIGZvciBvYmplY3RzIGFzIGNoaWxkcmVuXG4gICAgICBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQgIT09IGNoaWxkID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSB8fCAnJykgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCBhcnJheSwgcHJlZml4LCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gIGlmIChwcmVmaXggIT0gbnVsbCkge1xuICAgIGVzY2FwZWRQcmVmaXggPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkocHJlZml4KSArICcvJztcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGFycmF5LCBlc2NhcGVkUHJlZml4LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGEgY2hpbGRyZW4gb2JqZWN0ICh0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmApIGFuZFxuICogcmV0dXJuIGFuIGFycmF5IHdpdGggYXBwcm9wcmlhdGVseSByZS1rZXllZCBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjtcbn0se1wiLi9Qb29sZWRDbGFzc1wiOjE5MCxcIi4vUmVhY3RFbGVtZW50XCI6MjE5LFwiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCI6MjkzLFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiOjI2fV0sMTk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDbGFzc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucycpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xudmFyIGtleU9mID0gcmVxdWlyZSgnZmJqcy9saWIva2V5T2YnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgTUlYSU5TX0tFWSA9IGtleU9mKHsgbWl4aW5zOiBudWxsIH0pO1xuXG4vKipcbiAqIFBvbGljaWVzIHRoYXQgZGVzY3JpYmUgbWV0aG9kcyBpbiBgUmVhY3RDbGFzc0ludGVyZmFjZWAuXG4gKi9cbnZhciBTcGVjUG9saWN5ID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgbWF5IGJlIGRlZmluZWQgb25seSBvbmNlIGJ5IHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIG9yIG1peGluLlxuICAgKi9cbiAgREVGSU5FX09OQ0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIGJ5IGJvdGggdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gYW5kIG1peGlucy5cbiAgICogU3Vic2VxdWVudCBkZWZpbml0aW9ucyB3aWxsIGJlIGNoYWluZWQuIFRoZXNlIG1ldGhvZHMgbXVzdCByZXR1cm4gdm9pZC5cbiAgICovXG4gIERFRklORV9NQU5ZOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgb3ZlcnJpZGluZyB0aGUgYmFzZSBjbGFzcy5cbiAgICovXG4gIE9WRVJSSURFX0JBU0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIGFyZSBzaW1pbGFyIHRvIERFRklORV9NQU5ZLCBleGNlcHQgd2UgYXNzdW1lIHRoZXkgcmV0dXJuXG4gICAqIG9iamVjdHMuIFdlIHRyeSB0byBtZXJnZSB0aGUga2V5cyBvZiB0aGUgcmV0dXJuIHZhbHVlcyBvZiBhbGwgdGhlIG1peGVkIGluXG4gICAqIGZ1bmN0aW9ucy4gSWYgdGhlcmUgaXMgYSBrZXkgY29uZmxpY3Qgd2UgdGhyb3cuXG4gICAqL1xuICBERUZJTkVfTUFOWV9NRVJHRUQ6IG51bGxcbn0pO1xuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxudmFyIHdhcm5lZFNldFByb3BzID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuU2V0UHJvcHMoKSB7XG4gIGlmICghd2FybmVkU2V0UHJvcHMpIHtcbiAgICB3YXJuZWRTZXRQcm9wcyA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdzZXRQcm9wcyguLi4pIGFuZCByZXBsYWNlUHJvcHMoLi4uKSBhcmUgZGVwcmVjYXRlZC4gJyArICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLicpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAqIG9yIG5hdGl2ZSBjb21wb25lbnRzLlxuICpcbiAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENsYXNzYCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFJlYWN0Q2xhc3NJbnRlcmZhY2VcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RDbGFzc0ludGVyZmFjZSA9IHtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHthcnJheX1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc3RhdGljczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBwcm9wVHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAqXG4gICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuXG4gIC8qKlxuICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAqIEBub3NpZGVlZmZlY3RzXG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgcmVuZGVyOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8vID09PT0gQWR2YW5jZWQgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudCdzIGN1cnJlbnRseSBtb3VudGVkIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogU3BlY1BvbGljeS5PVkVSUklERV9CQVNFXG5cbn07XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICpcbiAqIEFsdGhvdWdoIHRoZXNlIGFyZSBkZWNsYXJlZCBsaWtlIGluc3RhbmNlIHByb3BlcnRpZXMgaW4gdGhlIHNwZWNpZmljYXRpb25cbiAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAqIGFuZCBhcmUgYWNjZXNzaWJsZSBvbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0aGUgcHJvdG90eXBlLiBEZXNwaXRlXG4gKiBiZWluZyBzdGF0aWMsIHRoZXkgbXVzdCBiZSBkZWZpbmVkIG91dHNpZGUgb2YgdGhlIFwic3RhdGljc1wiIGtleSB1bmRlclxuICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICovXG52YXIgUkVTRVJWRURfU1BFQ19LRVlTID0ge1xuICBkaXNwbGF5TmFtZTogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY2hpbGRDb250ZXh0KTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBhc3NpZ24oe30sIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHRUeXBlcyk7XG4gIH0sXG4gIGNvbnRleHRUeXBlczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCk7XG4gICAgfVxuICAgIENvbnN0cnVjdG9yLmNvbnRleHRUeXBlcyA9IGFzc2lnbih7fSwgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLCBjb250ZXh0VHlwZXMpO1xuICB9LFxuICAvKipcbiAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAqIGF1dG9tYXRpYyBtZXJnaW5nLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGdldERlZmF1bHRQcm9wcykge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcywgZ2V0RGVmYXVsdFByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgIH1cbiAgfSxcbiAgcHJvcFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gIH0sXG4gIHN0YXRpY3M6IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfSxcbiAgYXV0b2JpbmQ6IGZ1bmN0aW9uICgpIHt9IH07XG5cbi8vIG5vb3BcbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIGludmFyaWFudCBzbyBjb21wb25lbnRzXG4gICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG5vdCBpbiBfX0RFVl9fXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpIHtcbiAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpID8gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXSA6IG51bGw7XG5cbiAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICsgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBEaXNhbGxvdyBkZWZpbmluZyBtZXRob2RzIG1vcmUgdGhhbiBvbmNlIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gIGlmIChwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICsgJ3RvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG4gKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc3Nlcy5cbiAqL1xuZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgISh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgISFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gIC8vIGNoYWluaW5nIG9yZGVyIGlzIGFwcGxpZWQgdG8gbWV0aG9kcyB3aXRoIERFRklORV9NQU5ZIHBvbGljeSwgd2hldGhlclxuICAvLyBtaXhpbnMgYXJlIGxpc3RlZCBiZWZvcmUgb3IgYWZ0ZXIgdGhlc2UgbWV0aG9kcyBpbiB0aGUgc3BlYy5cbiAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICBSRVNFUlZFRF9TUEVDX0tFWVMubWl4aW5zKENvbnN0cnVjdG9yLCBzcGVjLm1peGlucyk7XG4gIH1cblxuICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAvLyBXZSBoYXZlIGFscmVhZHkgaGFuZGxlZCBtaXhpbnMgaW4gYSBzcGVjaWFsIGNhc2UgYWJvdmUuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcGVydHkgPSBzcGVjW25hbWVdO1xuICAgIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUocHJvdG8sIG5hbWUpO1xuXG4gICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNldHVwIG1ldGhvZHMgb24gcHJvdG90eXBlOlxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBtZW1iZXIgbWV0aG9kcyBzaG91bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgYm91bmQ6XG4gICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgIC8vIDIuIE92ZXJyaWRkZW4gbWV0aG9kcyAodGhhdCB3ZXJlIG1peGVkIGluKS5cbiAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgdmFyIHNob3VsZEF1dG9CaW5kID0gaXNGdW5jdGlvbiAmJiAhaXNSZWFjdENsYXNzTWV0aG9kICYmICFpc0FscmVhZHlEZWZpbmVkICYmIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgaWYgKCFwcm90by5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXAgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm90by5fX3JlYWN0QXV0b0JpbmRNYXBbbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUuXG4gICAgICAgICAgIShpc1JlYWN0Q2xhc3NNZXRob2QgJiYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEIHx8IHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArICd3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuJywgc3BlY1BvbGljeSwgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcbiAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICBpZiAoIXN0YXRpY3MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICBpZiAoIXN0YXRpY3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc1Jlc2VydmVkID0gKG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTKTtcbiAgICAhIWlzUmVzZXJ2ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgKyAncHJvcGVydHksIGAlc2AsIHRoYXQgc2hvdWxkblxcJ3QgYmUgb24gdGhlIFwic3RhdGljc1wiIGtleS4gRGVmaW5lIGl0ICcgKyAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICsgJ2NvbnN0cnVjdG9yLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBpc0luaGVyaXRlZCA9IChuYW1lIGluIENvbnN0cnVjdG9yKTtcbiAgICAhIWlzSW5oZXJpdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICsgJ2R1ZSB0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAhKG9uZVtrZXldID09PSB1bmRlZmluZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICsgJ21heSBiZSBkdWUgdG8gYSBtaXhpbjsgaW4gcGFydGljdWxhciwgdGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHR3byAnICsgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArICd3aXRoIGNsYXNoaW5nIGtleXMuJywga2V5KSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBvbmVba2V5XSA9IHR3b1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb25lO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgbWVyZ2VzIHRoZWlyIHJldHVybiB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgdmFyIGEgPSBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgdmFyIGMgPSB7fTtcbiAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGEpO1xuICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYik7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29tcG9uZW50IENvbXBvbmVudCB3aG9zZSBtZXRob2QgaXMgZ29pbmcgdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWV0aG9kIHRvIGJlIGJvdW5kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBib3VuZCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyLCBuby11bmRlZiAqL1xuICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbiAobmV3VGhpcykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYmluZCgpOiBSZWFjdCBjb21wb25lbnQgbWV0aG9kcyBtYXkgb25seSBiZSBib3VuZCB0byB0aGUgJyArICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsIGNvbXBvbmVudE5hbWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICsgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgIH1cbiAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJvdW5kTWV0aG9kO1xufVxuXG4vKipcbiAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICovXG5mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICBmb3IgKHZhciBhdXRvQmluZEtleSBpbiBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgaWYgKGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRNYXAuaGFzT3duUHJvcGVydHkoYXV0b0JpbmRLZXkpKSB7XG4gICAgICB2YXIgbWV0aG9kID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZE1hcFthdXRvQmluZEtleV07XG4gICAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAqIHRoZXJlZm9yZSBub3QgYWxyZWFkeSBwYXJ0IG9mIHRoZSBtb2Rlcm4gUmVhY3RDb21wb25lbnQuXG4gKi9cbnZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFRPRE86IFRoaXMgd2lsbCBiZSBkZXByZWNhdGVkIGJlY2F1c2Ugc3RhdGUgc2hvdWxkIGFsd2F5cyBrZWVwIGEgY29uc2lzdGVudFxuICAgKiB0eXBlIHNpZ25hdHVyZSBhbmQgdGhlIG9ubHkgdXNlIGNhc2UgZm9yIHRoaXMsIGlzIHRvIGF2b2lkIHRoYXQuXG4gICAqL1xuICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgKiBAZmluYWxcbiAgICogQHB1YmxpY1xuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgc2V0UHJvcHM6IGZ1bmN0aW9uIChwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5TZXRQcm9wcygpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFByb3BzKHRoaXMsIHBhcnRpYWxQcm9wcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2UgYWxsIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwdWJsaWNcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJlcGxhY2VQcm9wczogZnVuY3Rpb24gKG5ld1Byb3BzLCBjYWxsYmFjaykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuU2V0UHJvcHMoKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlUHJvcHModGhpcywgbmV3UHJvcHMpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHt9O1xuYXNzaWduKFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q2xhc3NNaXhpbik7XG5cbi8qKlxuICogTW9kdWxlIGZvciBjcmVhdGluZyBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RDbGFzc1xuICovXG52YXIgUmVhY3RDbGFzcyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNyZWF0ZUNsYXNzOiBmdW5jdGlvbiAoc3BlYykge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnICYmIHRoaXMuZ2V0SW5pdGlhbFN0YXRlLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAhKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbCcsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9O1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gUmVkdWNlIHRpbWUgc3BlbnQgZG9pbmcgbG9va3VwcyBieSBzZXR0aW5nIHRoZXNlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RNaXhpbjogZnVuY3Rpb24gKG1peGluKSB7XG4gICAgICBpbmplY3RlZE1peGlucy5wdXNoKG1peGluKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUmVhY3RDb21wb25lbnRcIjoxOTcsXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3ROb29wVXBkYXRlUXVldWVcIjoyMzYsXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCI6MjM5LFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCI6MjQwLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiOjI3LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi9rZXlNaXJyb3JcIjozNyxcImZianMvbGliL2tleU9mXCI6MzgsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwxOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdW5kZWZpbmVkO1xuICB9XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogRGVwcmVjYXRlZCBBUElzLiBUaGVzZSBBUElzIHVzZWQgdG8gZXhpc3Qgb24gY2xhc3NpYyBSZWFjdCBjbGFzc2VzIGJ1dCBzaW5jZVxuICogd2Ugd291bGQgbGlrZSB0byBkZXByZWNhdGUgdGhlbSwgd2UncmUgbm90IGdvaW5nIHRvIG1vdmUgdGhlbSBvdmVyIHRvIHRoaXNcbiAqIG1vZGVybiBiYXNlIGNsYXNzLiBJbnN0ZWFkLCB3ZSBkZWZpbmUgYSBnZXR0ZXIgdGhhdCB3YXJucyBpZiBpdCdzIGFjY2Vzc2VkLlxuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgZGVwcmVjYXRlZEFQSXMgPSB7XG4gICAgZ2V0RE9NTm9kZTogWydnZXRET01Ob2RlJywgJ1VzZSBSZWFjdERPTS5maW5kRE9NTm9kZShjb21wb25lbnQpIGluc3RlYWQuJ10sXG4gICAgaXNNb3VudGVkOiBbJ2lzTW91bnRlZCcsICdJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiAnICsgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLiddLFxuICAgIHJlcGxhY2VQcm9wczogWydyZXBsYWNlUHJvcHMnLCAnSW5zdGVhZCwgY2FsbCByZW5kZXIgYWdhaW4gYXQgdGhlIHRvcCBsZXZlbC4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXSxcbiAgICBzZXRQcm9wczogWydzZXRQcm9wcycsICdJbnN0ZWFkLCBjYWxsIHJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLiddXG4gIH07XG4gIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbiAobWV0aG9kTmFtZSwgaW5mbykge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgIH1cbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3ROb29wVXBkYXRlUXVldWVcIjoyMzYsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2VtcHR5T2JqZWN0XCI6MjcsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDE5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RET01JRE9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlY29uY2lsZXIgdGhhdCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuIFRPRE86IFRoZXNlIGNhbGxlcnMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgdG8gYXZvaWQgdGhlXG4gKiBuZWVkIGZvciB0aGlzIGluamVjdGlvbi5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IFJlYWN0RE9NSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyxcblxuICByZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBSZWFjdERPTUlET3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQsXG5cbiAgLyoqXG4gICAqIElmIGEgcGFydGljdWxhciBlbnZpcm9ubWVudCByZXF1aXJlcyB0aGF0IHNvbWUgcmVzb3VyY2VzIGJlIGNsZWFuZWQgdXAsXG4gICAqIHNwZWNpZnkgdGhpcyBpbiB0aGUgaW5qZWN0ZWQgTWl4aW4uIEluIHRoZSBET00sIHdlIHdvdWxkIGxpa2VseSB3YW50IHRvXG4gICAqIHB1cmdlIGFueSBjYWNoZWQgbm9kZSBJRCBsb29rdXBzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdW5tb3VudElERnJvbUVudmlyb25tZW50OiBmdW5jdGlvbiAocm9vdE5vZGVJRCkge1xuICAgIFJlYWN0TW91bnQucHVyZ2VJRChyb290Tm9kZUlEKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xufSx7XCIuL1JlYWN0RE9NSURPcGVyYXRpb25zXCI6MjA3LFwiLi9SZWFjdE1vdW50XCI6MjMyfV0sMTk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY2xlYW51cCBob29rLiAoc2VydmVyIHZzLlxuICAgKiBicm93c2VyIGV0YykuIEV4YW1wbGU6IEEgYnJvd3NlciBzeXN0ZW0gY2FjaGVzIERPTSBub2RlcyBiYXNlZCBvbiBjb21wb25lbnRcbiAgICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAgICovXG4gIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcblxuICAvKipcbiAgICogT3B0aW9uYWxseSBpbmplY3RhYmxlIGhvb2sgZm9yIHN3YXBwaW5nIG91dCBtb3VudCBpbWFnZXMgaW4gdGhlIG1pZGRsZSBvZlxuICAgKiB0aGUgdHJlZS5cbiAgICovXG4gIHJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQ6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcbiAgICAgICEhaW5qZWN0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQgPSBlbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEO1xuICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID0gZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgIGluamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSB7XG4gIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyIHx8IG51bGw7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG5TdGF0ZWxlc3NDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICByZXR1cm4gQ29tcG9uZW50KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy51cGRhdGVyKTtcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblxuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlUXVldWVcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcblxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX21vdW50T3JkZXIgPSAwO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVzIGFuZCBSZWFjdFVwZGF0ZVF1ZXVlLlxuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gbmV4dE1vdW50SUQrKztcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuXG4gICAgdmFyIHB1YmxpY1Byb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzKTtcbiAgICB2YXIgcHVibGljQ29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KGNvbnRleHQpO1xuXG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBwdWJsaWMgY2xhc3NcbiAgICB2YXIgaW5zdDtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgLy8gVGhpcyBpcyBhIHdheSB0byBkZXRlY3QgaWYgQ29tcG9uZW50IGlzIGEgc3RhdGVsZXNzIGFycm93IGZ1bmN0aW9uXG4gICAgLy8gY29tcG9uZW50LCB3aGljaCBpcyBub3QgbmV3YWJsZS4gSXQgbWlnaHQgbm90IGJlIDEwMCUgcmVsaWFibGUgYnV0IGlzXG4gICAgLy8gc29tZXRoaW5nIHdlIGNhbiBkbyB1bnRpbCB3ZSBzdGFydCBkZXRlY3RpbmcgdGhhdCBDb21wb25lbnQgZXh0ZW5kc1xuICAgIC8vIFJlYWN0LkNvbXBvbmVudC4gV2UgYWxyZWFkeSBhc3N1bWUgdGhhdCB0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nLlxuICAgIHZhciBjYW5JbnN0YW50aWF0ZSA9ICgncHJvdG90eXBlJyBpbiBDb21wb25lbnQpO1xuXG4gICAgaWYgKGNhbkluc3RhbnRpYXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbnN0ID0gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgUmVhY3RVcGRhdGVRdWV1ZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3QgPSBuZXcgQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCBSZWFjdFVwZGF0ZVF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNhbkluc3RhbnRpYXRlIHx8IGluc3QgPT09IG51bGwgfHwgaW5zdCA9PT0gZmFsc2UgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGluc3QpKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSBpbnN0O1xuICAgICAgaW5zdCA9IG5ldyBTdGF0ZWxlc3NDb21wb25lbnQoQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGxhdGVyIGluIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQsIGJ1dCBhZGQgYW4gZWFybHlcbiAgICAgIC8vIHdhcm5pbmcgbm93IHRvIGhlbHAgZGVidWdnaW5nXG4gICAgICBpZiAoaW5zdC5yZW5kZXIgPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgLCByZXR1cm5lZCAnICsgJ251bGwvZmFsc2UgZnJvbSBhIHN0YXRlbGVzcyBjb21wb25lbnQsIG9yIHRyaWVkIHRvIHJlbmRlciBhbiAnICsgJ2VsZW1lbnQgd2hvc2UgdHlwZSBpcyBhIGZ1bmN0aW9uIHRoYXQgaXNuXFwndCBhIFJlYWN0IGNvbXBvbmVudC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2Ugc3VwcG9ydCBFUzYgaW5oZXJpdGluZyBmcm9tIFJlYWN0LkNvbXBvbmVudCwgdGhlIG1vZHVsZSBwYXR0ZXJuLFxuICAgICAgICAvLyBhbmQgc3RhdGVsZXNzIGNvbXBvbmVudHMsIGJ1dCBub3QgRVM2IGNsYXNzZXMgdGhhdCBkb24ndCBleHRlbmRcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgfHwgIWNhbkluc3RhbnRpYXRlIHx8ICEoaW5zdCBpbnN0YW5jZW9mIENvbXBvbmVudCksICclcyguLi4pOiBSZWFjdCBjb21wb25lbnQgY2xhc3NlcyBtdXN0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBzaG91bGQgYmUgc2V0IHVwIGluIHRoZSBjb25zdHJ1Y3RvciwgYnV0IGFzIGEgY29udmVuaWVuY2UgZm9yXG4gICAgLy8gc2ltcGxlciBjbGFzcyBhYnN0cmFjdGlvbnMsIHdlIHNldCB0aGVtIHVwIGFmdGVyIHRoZSBmYWN0LlxuICAgIGluc3QucHJvcHMgPSBwdWJsaWNQcm9wcztcbiAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgIGluc3QucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgIGluc3QudXBkYXRlciA9IFJlYWN0VXBkYXRlUXVldWU7XG5cbiAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3Q7XG5cbiAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmcm9tIHRoZSBpbnN0YW5jZSBiYWNrIHRvIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIFJlYWN0SW5zdGFuY2VNYXAuc2V0KGluc3QsIHRoaXMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFNpbmNlIHBsYWluIEpTIGNsYXNzZXMgYXJlIGRlZmluZWQgd2l0aG91dCBhbnkgc3BlY2lhbCBpbml0aWFsaXphdGlvblxuICAgICAgLy8gbG9naWMsIHdlIGNhbiBub3QgY2F0Y2ggY29tbW9uIGVycm9ycyBlYXJseS4gVGhlcmVmb3JlLCB3ZSBoYXZlIHRvXG4gICAgICAvLyBjYXRjaCB0aGVtIGhlcmUsIGF0IGluaXRpYWxpemF0aW9uIHRpbWUsIGluc3RlYWQuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXRJbml0aWFsU3RhdGUgfHwgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXREZWZhdWx0UHJvcHMgfHwgaW5zdC5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LnByb3BUeXBlcywgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuY29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICsgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnRTaG91bGRVcGRhdGUgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZFVubW91bnQgIT09ICdmdW5jdGlvbicsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgaWYgKGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpbnN0LnN0YXRlID0gaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5zdGF0ZTogbXVzdCBiZSBzZXQgdG8gYW4gb2JqZWN0IG9yIG51bGwnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgLy8gV2hlbiBtb3VudGluZywgY2FsbHMgdG8gYHNldFN0YXRlYCBieSBgY29tcG9uZW50V2lsbE1vdW50YCB3aWxsIHNldFxuICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlYCB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIuXG4gICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgaW5zdC5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUoaW5zdC5wcm9wcywgaW5zdC5jb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgYSBzdGF0ZWxlc3MgY29tcG9uZW50LCB3ZSBub3cgcmVuZGVyXG4gICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQocmVuZGVyZWRFbGVtZW50KTtcblxuICAgIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgIGlmIChpbnN0LmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkTW91bnQsIGluc3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQpIHtcbiAgICAgIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICB9XG5cbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcblxuICAgIC8vIFJlc2V0IHBlbmRpbmcgZmllbGRzXG4gICAgLy8gRXZlbiBpZiB0aGlzIGNvbXBvbmVudCBpcyBzY2hlZHVsZWQgZm9yIGFub3RoZXIgdXBkYXRlIGluIFJlYWN0VXBkYXRlcyxcbiAgICAvLyBpdCB3b3VsZCBzdGlsbCBiZSBpZ25vcmVkIGJlY2F1c2UgdGhlc2UgZmllbGRzIGFyZSByZXNldC5cbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIC8vIFRoZXNlIGZpZWxkcyBkbyBub3QgcmVhbGx5IG5lZWQgdG8gYmUgcmVzZXQgc2luY2UgdGhpcyBvYmplY3QgaXMgbm9cbiAgICAvLyBsb25nZXIgYWNjZXNzaWJsZS5cbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLy8gRGVsZXRlIHRoZSByZWZlcmVuY2UgZnJvbSB0aGUgaW5zdGFuY2UgdG8gdGhpcyBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIC8vIHdoaWNoIGFsbG93IHRoZSBpbnRlcm5hbHMgdG8gYmUgcHJvcGVybHkgY2xlYW5lZCB1cCBldmVuIGlmIHRoZSB1c2VyXG4gICAgLy8gbGVha3MgYSByZWZlcmVuY2UgdG8gdGhlIHB1YmxpYyBpbnN0YW5jZS5cbiAgICBSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KTtcblxuICAgIC8vIFNvbWUgZXhpc3RpbmcgY29tcG9uZW50cyByZWx5IG9uIGluc3QucHJvcHMgZXZlbiBhZnRlciB0aGV5J3ZlIGJlZW5cbiAgICAvLyBkZXN0cm95ZWQgKGluIGV2ZW50IGhhbmRsZXJzKS5cbiAgICAvLyBUT0RPOiBpbnN0LnByb3BzID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LnN0YXRlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBpbnN0LmNvbnRleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2BcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYXNrQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IENvbXBvbmVudC5jb250ZXh0VHlwZXM7XG4gICAgaWYgKCFjb250ZXh0VHlwZXMpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG4gICAgbWFza2VkQ29udGV4dCA9IHt9O1xuICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYCwgYW5kIGFzc2VydHMgdGhhdCB0aGV5IGFyZSB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChDb21wb25lbnQuY29udGV4dFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5jb250ZXh0VHlwZXMsIG1hc2tlZENvbnRleHQsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY3VycmVudENvbnRleHRcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIChjdXJyZW50Q29udGV4dCkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IGluc3QuZ2V0Q2hpbGRDb250ZXh0ICYmIGluc3QuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgISh0eXBlb2YgQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byAnICsgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZENvbnRleHQpIHtcbiAgICAgICAgIShuYW1lIGluIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFzc2lnbih7fSwgY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIHByb3BzIGJ5IHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIHVuc3BlY2lmaWVkIHByb3BzIGFuZFxuICAgKiBhc3NlcnRpbmcgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkLiBEb2VzIG5vdCBtdXRhdGUgaXRzIGFyZ3VtZW50OyByZXR1cm5zXG4gICAqIGEgbmV3IHByb3BzIG9iamVjdCB3aXRoIGRlZmF1bHRzIG1lcmdlZCBpbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5ld1Byb3BzXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzUHJvcHM6IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGlmIChDb21wb25lbnQucHJvcFR5cGVzKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5wcm9wVHlwZXMsIG5ld1Byb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3UHJvcHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrUHJvcFR5cGVzOiBmdW5jdGlvbiAocHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuICAgIC8vIHZhbGlkYXRpb24uXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLmdldE5hbWUoKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgJyArICdmcm9tIFJlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIFdlIG1heSB3YW50IHRvIGV4dGVuZCB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIGVycm9ycyBpblxuICAgICAgICAgIC8vIHRvcC1sZXZlbCByZW5kZXIgY2FsbHMsIHNvIEknbSBhYnN0cmFjdGluZyBpdCBhd2F5IGludG9cbiAgICAgICAgICAvLyBhIGZ1bmN0aW9uIHRvIG1pbmltaXplIHJlZmFjdG9yaW5nIGluIHRoZSBmdXR1cmVcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0odGhpcyk7XG5cbiAgICAgICAgICBpZiAobG9jYXRpb24gPT09IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCkge1xuICAgICAgICAgICAgLy8gUHJlZmFjZSBnaXZlcyB1cyBzb21ldGhpbmcgdG8gYmxhY2tsaXN0IGluIHdhcm5pbmcgbW9kdWxlXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIENvbnRleHQgVHlwZXM6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIG5leHRDb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5fY29udGV4dDtcblxuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIHByZXZDb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIGFueSBvZiBgX3BlbmRpbmdFbGVtZW50YCwgYF9wZW5kaW5nU3RhdGVRdWV1ZWAsIG9yIGBfcGVuZGluZ0ZvcmNlVXBkYXRlYFxuICAgKiBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQodGhpcywgdGhpcy5fcGVuZGluZ0VsZW1lbnQgfHwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9jb250ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgIT09IG51bGwgfHwgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jb250ZXh0LCB0aGlzLl9jb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYW4gdXBkYXRlIHRvIGEgbW91bnRlZCBjb21wb25lbnQuIFRoZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGFuZFxuICAgKiBzaG91bGRDb21wb25lbnRVcGRhdGUgbWV0aG9kcyBhcmUgY2FsbGVkLCB0aGVuIChhc3N1bWluZyB0aGUgdXBkYXRlIGlzbid0XG4gICAqIHNraXBwZWQpIHRoZSByZW1haW5pbmcgdXBkYXRlIGxpZmVjeWNsZSBtZXRob2RzIGFyZSBjYWxsZWQgYW5kIHRoZSBET01cbiAgICogcmVwcmVzZW50YXRpb24gaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2UGFyZW50RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dFBhcmVudEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZQYXJlbnRFbGVtZW50LCBuZXh0UGFyZW50RWxlbWVudCwgcHJldlVubWFza2VkQ29udGV4dCwgbmV4dFVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgbmV4dENvbnRleHQgPSB0aGlzLl9jb250ZXh0ID09PSBuZXh0VW5tYXNrZWRDb250ZXh0ID8gaW5zdC5jb250ZXh0IDogdGhpcy5fcHJvY2Vzc0NvbnRleHQobmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgdmFyIG5leHRQcm9wcztcblxuICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYSBwcm9wcyB1cGRhdGUgdmVyc3VzIGEgc2ltcGxlIHN0YXRlIHVwZGF0ZVxuICAgIGlmIChwcmV2UGFyZW50RWxlbWVudCA9PT0gbmV4dFBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIFNraXAgY2hlY2tpbmcgcHJvcCB0eXBlcyBhZ2FpbiAtLSB3ZSBkb24ndCByZWFkIGluc3QucHJvcHMgdG8gYXZvaWRcbiAgICAgIC8vIHdhcm5pbmcgZm9yIERPTSBjb21wb25lbnQgcHJvcHMgaW4gdGhpcyB1cGdyYWRlXG4gICAgICBuZXh0UHJvcHMgPSBuZXh0UGFyZW50RWxlbWVudC5wcm9wcztcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dFByb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKG5leHRQYXJlbnRFbGVtZW50LnByb3BzKTtcbiAgICAgIC8vIEFuIHVwZGF0ZSBoZXJlIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIGJ1dCBpbW1lZGlhdGVseSBzZXRcbiAgICAgIC8vIF9wZW5kaW5nU3RhdGVRdWV1ZSB3aGljaCB3aWxsIGVuc3VyZSB0aGF0IGFueSBzdGF0ZSB1cGRhdGVzIGdldHNcbiAgICAgIC8vIGltbWVkaWF0ZWx5IHJlY29uY2lsZWQgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgbmV4dCBiYXRjaC5cblxuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG5cbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlIHx8ICFpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fCBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBzaG91bGRVcGRhdGUgIT09ICd1bmRlZmluZWQnLCAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAvLyBXaWxsIHNldCBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAuXG4gICAgICB0aGlzLl9wZXJmb3JtQ29tcG9uZW50VXBkYXRlKG5leHRQYXJlbnRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCBuZXh0VW5tYXNrZWRDb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgaXQncyBkZXRlcm1pbmVkIHRoYXQgYSBjb21wb25lbnQgc2hvdWxkIG5vdCB1cGRhdGUsIHdlIHN0aWxsIHdhbnRcbiAgICAgIC8vIHRvIHNldCBwcm9wcyBhbmQgc3RhdGUgYnV0IHdlIHNob3J0Y3V0IHRoZSByZXN0IG9mIHRoZSB1cGRhdGUuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRQYXJlbnRFbGVtZW50O1xuICAgICAgdGhpcy5fY29udGV4dCA9IG5leHRVbm1hc2tlZENvbnRleHQ7XG4gICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuICAgIH1cbiAgfSxcblxuICBfcHJvY2Vzc1BlbmRpbmdTdGF0ZTogZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgcXVldWUgPSB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZTtcbiAgICB2YXIgcmVwbGFjZSA9IHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGU7XG4gICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgIGlmICghcXVldWUpIHtcbiAgICAgIHJldHVybiBpbnN0LnN0YXRlO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlICYmIHF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHF1ZXVlWzBdO1xuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSBhc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgIGZvciAodmFyIGkgPSByZXBsYWNlID8gMSA6IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcnRpYWwgPSBxdWV1ZVtpXTtcbiAgICAgIGFzc2lnbihuZXh0U3RhdGUsIHR5cGVvZiBwYXJ0aWFsID09PSAnZnVuY3Rpb24nID8gcGFydGlhbC5jYWxsKGluc3QsIG5leHRTdGF0ZSwgcHJvcHMsIGNvbnRleHQpIDogcGFydGlhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfSxcblxuICAvKipcbiAgICogTWVyZ2VzIG5ldyBwcm9wcyBhbmQgc3RhdGUsIG5vdGlmaWVzIGRlbGVnYXRlIG1ldGhvZHMgb2YgdXBkYXRlIGFuZFxuICAgKiBwZXJmb3JtcyB1cGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBOZXh0IGVsZW1lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcyBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlIE5leHQgb2JqZWN0IHRvIHNldCBhcyBzdGF0ZS5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dCBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSB1bm1hc2tlZENvbnRleHRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCwgdHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgaGFzQ29tcG9uZW50RGlkVXBkYXRlID0gQm9vbGVhbihpbnN0LmNvbXBvbmVudERpZFVwZGF0ZSk7XG4gICAgdmFyIHByZXZQcm9wcztcbiAgICB2YXIgcHJldlN0YXRlO1xuICAgIHZhciBwcmV2Q29udGV4dDtcbiAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICBwcmV2UHJvcHMgPSBpbnN0LnByb3BzO1xuICAgICAgcHJldlN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICAgIHByZXZDb250ZXh0ID0gaW5zdC5jb250ZXh0O1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHtcbiAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy5fY29udGV4dCA9IHVubWFza2VkQ29udGV4dDtcbiAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cbiAgICB0aGlzLl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCh0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoaW5zdC5jb21wb25lbnREaWRVcGRhdGUuYmluZChpbnN0LCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCBpbnN0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCBhbmQgdXBkYXRlIHRoZSBET00gYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBfdXBkYXRlUmVuZGVyZWRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2Q29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICB2YXIgcHJldlJlbmRlcmVkRWxlbWVudCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIG5leHRSZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgbmV4dFJlbmRlcmVkRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVzZSB0d28gSURzIGFyZSBhY3R1YWxseSB0aGUgc2FtZSEgQnV0IG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhhdC5cbiAgICAgIHZhciB0aGlzSUQgPSB0aGlzLl9yb290Tm9kZUlEO1xuICAgICAgdmFyIHByZXZDb21wb25lbnRJRCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fcm9vdE5vZGVJRDtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0UmVuZGVyZWRFbGVtZW50KTtcbiAgICAgIHZhciBuZXh0TWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCB0aGlzSUQsIHRyYW5zYWN0aW9uLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpKTtcbiAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbiAocHJldkNvbXBvbmVudElELCBuZXh0TWFya3VwKSB7XG4gICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEKHByZXZDb21wb25lbnRJRCwgbmV4dE1hcmt1cCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciByZW5kZXJlZENvbXBvbmVudCA9IGluc3QucmVuZGVyKCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFdlIGFsbG93IGF1dG8tbW9ja3MgdG8gcHJvY2VlZCBhcyBpZiB0aGV5J3JlIHJldHVybmluZyBudWxsLlxuICAgICAgaWYgKHR5cGVvZiByZW5kZXJlZENvbXBvbmVudCA9PT0gJ3VuZGVmaW5lZCcgJiYgaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbmRlcmVkQ29tcG9uZW50O1xuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgIShcbiAgICAvLyBUT0RPOiBBbiBgaXNWYWxpZE5vZGVgIGZ1bmN0aW9uIHdvdWxkIHByb2JhYmx5IGJlIG1vcmUgYXBwcm9wcmlhdGVcbiAgICByZW5kZXJlZENvbXBvbmVudCA9PT0gbnVsbCB8fCByZW5kZXJlZENvbXBvbmVudCA9PT0gZmFsc2UgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHJlbmRlcmVkQ29tcG9uZW50KSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3RDb21wb25lbnQgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExhemlseSBhbGxvY2F0ZXMgdGhlIHJlZnMgb2JqZWN0IGFuZCBzdG9yZXMgYGNvbXBvbmVudGAgYXMgYHJlZmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgUmVmZXJlbmNlIG5hbWUuXG4gICAqIEBwYXJhbSB7Y29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHN0b3JlIGFzIGByZWZgLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF0dGFjaFJlZjogZnVuY3Rpb24gKHJlZiwgY29tcG9uZW50KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgIShpbnN0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBoYXZlIHJlZnMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIHZhciBwdWJsaWNDb21wb25lbnRJbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudCAmJiBjb21wb25lbnQuZ2V0TmFtZSA/IGNvbXBvbmVudC5nZXROYW1lKCkgOiAnYSBjb21wb25lbnQnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHVibGljQ29tcG9uZW50SW5zdGFuY2UgIT0gbnVsbCwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzICcgKyAnKFNlZSByZWYgXCIlc1wiIGluICVzIGNyZWF0ZWQgYnkgJXMpLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuJywgcmVmLCBjb21wb25lbnROYW1lLCB0aGlzLmdldE5hbWUoKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHZhciByZWZzID0gaW5zdC5yZWZzID09PSBlbXB0eU9iamVjdCA/IGluc3QucmVmcyA9IHt9IDogaW5zdC5yZWZzO1xuICAgIHJlZnNbcmVmXSA9IHB1YmxpY0NvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRhY2hlcyBhIHJlZmVyZW5jZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGV0YWNoUmVmOiBmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIHJlZnMgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCkucmVmcztcbiAgICBkZWxldGUgcmVmc1tyZWZdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSBpdFxuICAgKiBpbiBlcnJvciBtZXNzYWdlcy5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvciBudWxsLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldE5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IgJiYgY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLm5hbWUgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29tcG9uZW50IC0gaS5lLiB3aGF0XG4gICAqIGlzIGV4cG9zZWQgYnkgcmVmcyBhbmQgcmV0dXJuZWQgYnkgcmVuZGVyLiBDYW4gYmUgbnVsbCBmb3Igc3RhdGVsZXNzXG4gICAqIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSB0aGUgcHVibGljIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgaWYgKGluc3QgaW5zdGFuY2VvZiBTdGF0ZWxlc3NDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdDtcbiAgfSxcblxuICAvLyBTdHViXG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG5cbn07XG5cblJlYWN0UGVyZi5tZWFzdXJlTWV0aG9kcyhSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLCB7XG4gIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICB1cGRhdGVDb21wb25lbnQ6ICd1cGRhdGVDb21wb25lbnQnLFxuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCdcbn0pO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSB7XG5cbiAgTWl4aW46IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0Q29tcG9uZW50RW52aXJvbm1lbnRcIjoxOTksXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MjAxLFwiLi9SZWFjdEVsZW1lbnRcIjoyMTksXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjoyMjksXCIuL1JlYWN0UGVyZlwiOjIzOCxcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjoyMzksXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoyNDAsXCIuL1JlYWN0UmVjb25jaWxlclwiOjI0MyxcIi4vUmVhY3RVcGRhdGVRdWV1ZVwiOjI0OSxcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjoyOTIsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2VtcHR5T2JqZWN0XCI6MjcsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDIwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDdXJyZW50T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSB7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDdXJyZW50T3duZXI7XG59LHt9XSwyMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVxuICovXG5cbi8qIGdsb2JhbHMgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRDb21wb25lbnQnKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEluamVjdGlvbicpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuXG52YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG52YXIgcmVuZGVyU3VidHJlZUludG9Db250YWluZXIgPSByZXF1aXJlKCcuL3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuUmVhY3REZWZhdWx0SW5qZWN0aW9uLmluamVjdCgpO1xuXG52YXIgcmVuZGVyID0gUmVhY3RQZXJmLm1lYXN1cmUoJ1JlYWN0JywgJ3JlbmRlcicsIFJlYWN0TW91bnQucmVuZGVyKTtcblxudmFyIFJlYWN0ID0ge1xuICBmaW5kRE9NTm9kZTogZmluZERPTU5vZGUsXG4gIHJlbmRlcjogcmVuZGVyLFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyxcbiAgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXG59O1xuXG4vLyBJbmplY3QgdGhlIHJ1bnRpbWUgaW50byBhIGRldnRvb2xzIGdsb2JhbCBob29rIHJlZ2FyZGxlc3Mgb2YgYnJvd3Nlci5cbi8vIEFsbG93cyBmb3IgZGVidWdnaW5nIHdoZW4gdGhlIGhvb2sgaXMgaW5qZWN0ZWQgb24gdGhlIHBhZ2UuXG4vKiBlc2xpbnQtZW5hYmxlIGNhbWVsY2FzZSAqL1xuaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3Qoe1xuICAgIEN1cnJlbnRPd25lcjogUmVhY3RDdXJyZW50T3duZXIsXG4gICAgSW5zdGFuY2VIYW5kbGVzOiBSZWFjdEluc3RhbmNlSGFuZGxlcyxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBSZWNvbmNpbGVyOiBSZWFjdFJlY29uY2lsZXIsXG4gICAgVGV4dENvbXBvbmVudDogUmVhY3RET01UZXh0Q29tcG9uZW50XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG5cbiAgICAvLyBGaXJzdCBjaGVjayBpZiBkZXZ0b29scyBpcyBub3QgaW5zdGFsbGVkXG4gICAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUgb3IgRmlyZWZveCwgcHJvdmlkZSBhIGRvd25sb2FkIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZGV2dG9vbHMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBpbiBJRTgsIGNoZWNrIHRvIHNlZSBpZiB3ZSBhcmUgaW4gY29tcGF0aWJpbGl0eSBtb2RlIGFuZCBwcm92aWRlXG4gICAgLy8gaW5mb3JtYXRpb24gb24gcHJldmVudGluZyBjb21wYXRpYmlsaXR5IG1vZGVcbiAgICB2YXIgaWVDb21wYXRpYmlsaXR5TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCA4O1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWllQ29tcGF0aWJpbGl0eU1vZGUsICdJbnRlcm5ldCBFeHBsb3JlciBpcyBydW5uaW5nIGluIGNvbXBhdGliaWxpdHkgbW9kZTsgcGxlYXNlIGFkZCB0aGUgJyArICdmb2xsb3dpbmcgdGFnIHRvIHlvdXIgSFRNTCB0byBwcmV2ZW50IHRoaXMgZnJvbSBoYXBwZW5pbmc6ICcgKyAnPG1ldGEgaHR0cC1lcXVpdj1cIlgtVUEtQ29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJJRT1lZGdlXCIgLz4nKSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBleHBlY3RlZEZlYXR1cmVzID0gW1xuICAgIC8vIHNoaW1zXG4gICAgQXJyYXkuaXNBcnJheSwgQXJyYXkucHJvdG90eXBlLmV2ZXJ5LCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsIEFycmF5LnByb3RvdHlwZS5tYXAsIERhdGUubm93LCBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCwgT2JqZWN0LmtleXMsIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsIFN0cmluZy5wcm90b3R5cGUudHJpbSxcblxuICAgIC8vIHNoYW1zXG4gICAgT2JqZWN0LmNyZWF0ZSwgT2JqZWN0LmZyZWV6ZV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctcG9seWZpbGxzJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoyMDEsXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiOjIxMyxcIi4vUmVhY3REZWZhdWx0SW5qZWN0aW9uXCI6MjE2LFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjIyOCxcIi4vUmVhY3RNb3VudFwiOjIzMixcIi4vUmVhY3RQZXJmXCI6MjM4LFwiLi9SZWFjdFJlY29uY2lsZXJcIjoyNDMsXCIuL1JlYWN0VXBkYXRlc1wiOjI1MCxcIi4vUmVhY3RWZXJzaW9uXCI6MjUxLFwiLi9maW5kRE9NTm9kZVwiOjI3NCxcIi4vcmVuZGVyU3VidHJlZUludG9Db250YWluZXJcIjoyODksXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MjAsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQnV0dG9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbW91c2VMaXN0ZW5lck5hbWVzID0ge1xuICBvbkNsaWNrOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrOiB0cnVlLFxuICBvbk1vdXNlRG93bjogdHJ1ZSxcbiAgb25Nb3VzZU1vdmU6IHRydWUsXG4gIG9uTW91c2VVcDogdHJ1ZSxcblxuICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlVXBDYXB0dXJlOiB0cnVlXG59O1xuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8YnV0dG9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgZG9lcyBub3QgcmVjZWl2ZSBtb3VzZSBldmVudHNcbiAqIHdoZW4gYGRpc2FibGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTUJ1dHRvbiA9IHtcbiAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9XG5cbiAgICAvLyBDb3B5IHRoZSBwcm9wcywgZXhjZXB0IHRoZSBtb3VzZSBsaXN0ZW5lcnNcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFtb3VzZUxpc3RlbmVyTmFtZXNba2V5XSkge1xuICAgICAgICBuYXRpdmVQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01CdXR0b247XG59LHt9XSwyMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUNvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKiBnbG9iYWwgaGFzT3duUHJvcGVydHk6dHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBdXRvRm9jdXNVdGlscyA9IHJlcXVpcmUoJy4vQXV0b0ZvY3VzVXRpbHMnKTtcbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUJ1dHRvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01CdXR0b24nKTtcbnZhciBSZWFjdERPTUlucHV0ID0gcmVxdWlyZSgnLi9SZWFjdERPTUlucHV0Jyk7XG52YXIgUmVhY3RET01PcHRpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NT3B0aW9uJyk7XG52YXIgUmVhY3RET01TZWxlY3QgPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0Jyk7XG52YXIgUmVhY3RET01UZXh0YXJlYSA9IHJlcXVpcmUoJy4vUmVhY3RET01UZXh0YXJlYScpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdE11bHRpQ2hpbGQgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZGVsZXRlTGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlTGlzdGVuZXI7XG52YXIgbGlzdGVuVG8gPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIubGlzdGVuVG87XG52YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geyAnc3RyaW5nJzogdHJ1ZSwgJ251bWJlcic6IHRydWUgfTtcblxudmFyIFNUWUxFID0ga2V5T2YoeyBzdHlsZTogbnVsbCB9KTtcblxudmFyIEVMRU1FTlRfTk9ERV9UWVBFID0gMTtcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG50cnkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd0ZXN0JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHt9IH0pO1xuICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG59IGNhdGNoIChlKSB7fVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oaW50ZXJuYWxJbnN0YW5jZSkge1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHZhciBvd25lciA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lciB8fCBudWxsO1xuICAgIGlmIChvd25lcikge1xuICAgICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICByZXR1cm4gJyBUaGlzIERPTSBub2RlIHdhcyByZW5kZXJlZCBieSBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbnZhciBsZWdhY3lQcm9wc0Rlc2NyaXB0b3I7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBsZWdhY3lQcm9wc0Rlc2NyaXB0b3IgPSB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLl9yZWFjdEludGVybmFsQ29tcG9uZW50O1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5wcm9wcyBvZiBhIERPTSBub2RlOyBpbnN0ZWFkLCAnICsgJ3JlY3JlYXRlIHRoZSBwcm9wcyBhcyBgcmVuZGVyYCBkaWQgb3JpZ2luYWxseSBvciByZWFkIHRoZSBET00gJyArICdwcm9wZXJ0aWVzL2F0dHJpYnV0ZXMgZGlyZWN0bHkgZnJvbSB0aGlzIG5vZGUgKGUuZy4sICcgKyAndGhpcy5yZWZzLmJveC5jbGFzc05hbWUpLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeUdldERPTU5vZGUoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERPTUNvbXBvbmVudDogRG8gbm90IGFjY2VzcyAuZ2V0RE9NTm9kZSgpIG9mIGEgRE9NIG5vZGU7ICcgKyAnaW5zdGVhZCwgdXNlIHRoZSBub2RlIGRpcmVjdGx5LiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBsZWdhY3lJc01vdW50ZWQoKSB7XG4gIHZhciBjb21wb25lbnQgPSB0aGlzLl9yZWFjdEludGVybmFsQ29tcG9uZW50O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3RET01Db21wb25lbnQ6IERvIG5vdCBhY2Nlc3MgLmlzTW91bnRlZCgpIG9mIGEgRE9NIG5vZGUuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuICEhY29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiBsZWdhY3lTZXRTdGF0ZUV0YygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5fcmVhY3RJbnRlcm5hbENvbXBvbmVudDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RE9NQ29tcG9uZW50OiBEbyBub3QgYWNjZXNzIC5zZXRTdGF0ZSgpLCAucmVwbGFjZVN0YXRlKCksIG9yICcgKyAnLmZvcmNlVXBkYXRlKCkgb2YgYSBET00gbm9kZS4gVGhpcyBpcyBhIG5vLW9wLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlZ2FjeVNldFByb3BzKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERPTUNvbXBvbmVudDogRG8gbm90IGFjY2VzcyAuc2V0UHJvcHMoKSBvZiBhIERPTSBub2RlLiAnICsgJ0luc3RlYWQsIGNhbGwgUmVhY3RET00ucmVuZGVyIGFnYWluIGF0IHRoZSB0b3AgbGV2ZWwuJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjb21wb25lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlU2V0UHJvcHNJbnRlcm5hbChjb21wb25lbnQsIHBhcnRpYWxQcm9wcyk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwoY29tcG9uZW50LCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVnYWN5UmVwbGFjZVByb3BzKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgdmFyIGNvbXBvbmVudCA9IHRoaXMuX3JlYWN0SW50ZXJuYWxDb21wb25lbnQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdERPTUNvbXBvbmVudDogRG8gbm90IGFjY2VzcyAucmVwbGFjZVByb3BzKCkgb2YgYSBET00gbm9kZS4gJyArICdJbnN0ZWFkLCBjYWxsIFJlYWN0RE9NLnJlbmRlciBhZ2FpbiBhdCB0aGUgdG9wIGxldmVsLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogdW5kZWZpbmVkO1xuICB9XG4gIGlmICghY29tcG9uZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVJlcGxhY2VQcm9wc0ludGVybmFsKGNvbXBvbmVudCwgcGFydGlhbFByb3BzKTtcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbChjb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcmllbmRseVN0cmluZ2lmeShvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgcmV0dXJuICdbJyArIG9iai5tYXAoZnJpZW5kbHlTdHJpbmdpZnkpLmpvaW4oJywgJykgKyAnXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYWlycyA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBrZXlFc2NhcGVkID0gL15bYS16JF9dW1xcdyRfXSokL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KTtcbiAgICAgICAgICBwYWlycy5wdXNoKGtleUVzY2FwZWQgKyAnOiAnICsgZnJpZW5kbHlTdHJpbmdpZnkob2JqW2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICd7JyArIHBhaXJzLmpvaW4oJywgJykgKyAnfSc7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAnW2Z1bmN0aW9uIG9iamVjdF0nO1xuICB9XG4gIC8vIERpZmZlcnMgZnJvbSBKU09OLnN0cmluZ2lmeSBpbiB0aGF0IHVuZGVmaW5lZCBiZWNhdXNlcyB1bmRlZmluZWQgYW5kIHRoYXRcbiAgLy8gaW5mIGFuZCBuYW4gZG9uJ3QgYmVjb21lIG51bGxcbiAgcmV0dXJuIFN0cmluZyhvYmopO1xufVxuXG52YXIgc3R5bGVNdXRhdGlvbldhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gY2hlY2tBbmRXYXJuRm9yTXV0YXRlZFN0eWxlKHN0eWxlMSwgc3R5bGUyLCBjb21wb25lbnQpIHtcbiAgaWYgKHN0eWxlMSA9PSBudWxsIHx8IHN0eWxlMiA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzaGFsbG93RXF1YWwoc3R5bGUxLCBzdHlsZTIpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuX3RhZztcbiAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gIHZhciBvd25lck5hbWU7XG4gIGlmIChvd25lcikge1xuICAgIG93bmVyTmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgfVxuXG4gIHZhciBoYXNoID0gb3duZXJOYW1lICsgJ3wnICsgY29tcG9uZW50TmFtZTtcblxuICBpZiAoc3R5bGVNdXRhdGlvbldhcm5pbmcuaGFzT3duUHJvcGVydHkoaGFzaCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdHlsZU11dGF0aW9uV2FybmluZ1toYXNoXSA9IHRydWU7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgJXNgIHdhcyBwYXNzZWQgYSBzdHlsZSBvYmplY3QgdGhhdCBoYXMgcHJldmlvdXNseSBiZWVuIG11dGF0ZWQuICcgKyAnTXV0YXRpbmcgYHN0eWxlYCBpcyBkZXByZWNhdGVkLiBDb25zaWRlciBjbG9uaW5nIGl0IGJlZm9yZWhhbmQuIENoZWNrICcgKyAndGhlIGByZW5kZXJgICVzLiBQcmV2aW91cyBzdHlsZTogJXMuIE11dGF0ZWQgc3R5bGU6ICVzLicsIGNvbXBvbmVudE5hbWUsIG93bmVyID8gJ29mIGAnICsgb3duZXJOYW1lICsgJ2AnIDogJ3VzaW5nIDwnICsgY29tcG9uZW50TmFtZSArICc+JywgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUxKSwgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUyKSkgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wc1xuICovXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2b2lkRWxlbWVudFRhZ3NbY29tcG9uZW50Ll90YWddKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5jaGlsZHJlbiA9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwsICclcyBpcyBhIHZvaWQgZWxlbWVudCB0YWcgYW5kIG11c3Qgbm90IGhhdmUgYGNoaWxkcmVuYCBvciAnICsgJ3VzZSBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLiVzJywgY29tcG9uZW50Ll90YWcsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyID8gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAnICsgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIuZ2V0TmFtZSgpICsgJy4nIDogJycpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICEodHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJiAnX19odG1sJyBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArICdQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgJyArICdmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5pbm5lckhUTUwgPT0gbnVsbCwgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IHVuZGVmaW5lZDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghcHJvcHMuY29udGVudEVkaXRhYmxlIHx8IHByb3BzLmNoaWxkcmVuID09IG51bGwsICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgKyAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArICd0aG9zZSBub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgJyArICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJykgOiB1bmRlZmluZWQ7XG4gIH1cbiAgIShwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgJyArICdub3QgYSBzdHJpbmcuIEZvciBleGFtcGxlLCBzdHlsZT17e21hcmdpblJpZ2h0OiBzcGFjaW5nICsgXFwnZW1cXCd9fSB3aGVuICcgKyAndXNpbmcgSlNYLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZW5xdWV1ZVB1dExpc3RlbmVyKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lciwgdHJhbnNhY3Rpb24pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJRTggaGFzIG5vIEFQSSBmb3IgZXZlbnQgY2FwdHVyaW5nIGFuZCB0aGUgYG9uU2Nyb2xsYCBldmVudCBkb2Vzbid0XG4gICAgLy8gYnViYmxlLlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHJlZ2lzdHJhdGlvbk5hbWUgIT09ICdvblNjcm9sbCcgfHwgaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSksICdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnQnKSA6IHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gIGlmIChjb250YWluZXIpIHtcbiAgICB2YXIgZG9jID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSA/IGNvbnRhaW5lci5vd25lckRvY3VtZW50IDogY29udGFpbmVyO1xuICAgIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGRvYyk7XG4gIH1cbiAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShwdXRMaXN0ZW5lciwge1xuICAgIGlkOiBpZCxcbiAgICByZWdpc3RyYXRpb25OYW1lOiByZWdpc3RyYXRpb25OYW1lLFxuICAgIGxpc3RlbmVyOiBsaXN0ZW5lclxuICB9KTtcbn1cblxuZnVuY3Rpb24gcHV0TGlzdGVuZXIoKSB7XG4gIHZhciBsaXN0ZW5lclRvUHV0ID0gdGhpcztcbiAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnB1dExpc3RlbmVyKGxpc3RlbmVyVG9QdXQuaWQsIGxpc3RlbmVyVG9QdXQucmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXJUb1B1dC5saXN0ZW5lcik7XG59XG5cbi8vIFRoZXJlIGFyZSBzbyBtYW55IG1lZGlhIGV2ZW50cywgaXQgbWFrZXMgc2Vuc2UgdG8ganVzdFxuLy8gbWFpbnRhaW4gYSBsaXN0IHJhdGhlciB0aGFuIGNyZWF0ZSBhIGB0cmFwQnViYmxlZEV2ZW50YCBmb3IgZWFjaFxudmFyIG1lZGlhRXZlbnRzID0ge1xuICB0b3BBYm9ydDogJ2Fib3J0JyxcbiAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgdG9wUGxheTogJ3BsYXknLFxuICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICB0b3BSYXRlQ2hhbmdlOiAncmF0ZWNoYW5nZScsXG4gIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgdG9wU3RhbGxlZDogJ3N0YWxsZWQnLFxuICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgdG9wVm9sdW1lQ2hhbmdlOiAndm9sdW1lY2hhbmdlJyxcbiAgdG9wV2FpdGluZzogJ3dhaXRpbmcnXG59O1xuXG5mdW5jdGlvbiB0cmFwQnViYmxlZEV2ZW50c0xvY2FsKCkge1xuICB2YXIgaW5zdCA9IHRoaXM7XG4gIC8vIElmIGEgY29tcG9uZW50IHJlbmRlcnMgdG8gbnVsbCBvciBpZiBhbm90aGVyIGNvbXBvbmVudCBmYXRhbHMgYW5kIGNhdXNlc1xuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHRyZWUgdG8gYmUgY29ycnVwdGVkLCBgbm9kZWAgaGVyZSBjYW4gYmUgbnVsbC5cbiAgIWluc3QuX3Jvb3ROb2RlSUQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTXVzdCBiZSBtb3VudGVkIHRvIHRyYXAgZXZlbnRzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpbnN0Ll9yb290Tm9kZUlEKTtcbiAgIW5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICBzd2l0Y2ggKGluc3QuX3RhZykge1xuICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICd2aWRlbyc6XG4gICAgY2FzZSAnYXVkaW8nOlxuXG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW107XG4gICAgICAvLyBjcmVhdGUgbGlzdGVuZXIgZm9yIGVhY2ggbWVkaWEgZXZlbnRcbiAgICAgIGZvciAodmFyIGV2ZW50IGluIG1lZGlhRXZlbnRzKSB7XG4gICAgICAgIGlmIChtZWRpYUV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzLnB1c2goUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlc1tldmVudF0sIG1lZGlhRXZlbnRzW2V2ZW50XSwgbm9kZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ltZyc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wRXJyb3IsICdlcnJvcicsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcExvYWQsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZm9ybSc6XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wUmVzZXQsICdyZXNldCcsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdCwgJ3N1Ym1pdCcsIG5vZGUpXTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdW50UmVhZHlJbnB1dFdyYXBwZXIoKSB7XG4gIFJlYWN0RE9NSW5wdXQubW91bnRSZWFkeVdyYXBwZXIodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyKCkge1xuICBSZWFjdERPTVNlbGVjdC5wb3N0VXBkYXRlV3JhcHBlcih0aGlzKTtcbn1cblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsIGNhc2VkIHRhZ3MuXG5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICAnYXJlYSc6IHRydWUsXG4gICdiYXNlJzogdHJ1ZSxcbiAgJ2JyJzogdHJ1ZSxcbiAgJ2NvbCc6IHRydWUsXG4gICdlbWJlZCc6IHRydWUsXG4gICdocic6IHRydWUsXG4gICdpbWcnOiB0cnVlLFxuICAnaW5wdXQnOiB0cnVlLFxuICAna2V5Z2VuJzogdHJ1ZSxcbiAgJ2xpbmsnOiB0cnVlLFxuICAnbWV0YSc6IHRydWUsXG4gICdwYXJhbSc6IHRydWUsXG4gICdzb3VyY2UnOiB0cnVlLFxuICAndHJhY2snOiB0cnVlLFxuICAnd2JyJzogdHJ1ZVxufTtcblxuLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbnZhciBuZXdsaW5lRWF0aW5nVGFncyA9IHtcbiAgJ2xpc3RpbmcnOiB0cnVlLFxuICAncHJlJzogdHJ1ZSxcbiAgJ3RleHRhcmVhJzogdHJ1ZVxufTtcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0gYXNzaWduKHtcbiAgJ21lbnVpdGVtJzogdHJ1ZVxufSwgb21pdHRlZENsb3NlVGFncyk7XG5cbi8vIFdlIGFjY2VwdCBhbnkgdGFnIHRvIGJlIHJlbmRlcmVkIGJ1dCBzaW5jZSB0aGlzIGdldHMgaW5qZWN0ZWQgaW50byBhcmJpdHJhcnlcbi8vIEhUTUwsIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgaXQncyBhIHNhZmUgdGFnLlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVxuXG52YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87IC8vIFNpbXBsaWZpZWQgc3Vic2V0XG52YXIgdmFsaWRhdGVkVGFnQ2FjaGUgPSB7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9ICh7fSkuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZykge1xuICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkVGFnQ2FjaGUsIHRhZykpIHtcbiAgICAhVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIHRhZzogJXMnLCB0YWcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YWxpZGF0ZWRUYWdDYWNoZVt0YWddID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ2hpbGRDb250ZXh0RGV2KGNvbnRleHQsIGluc3QpIHtcbiAgLy8gUGFzcyBkb3duIG91ciB0YWcgbmFtZSB0byBjaGlsZCBjb21wb25lbnRzIGZvciB2YWxpZGF0aW9uIHB1cnBvc2VzXG4gIGNvbnRleHQgPSBhc3NpZ24oe30sIGNvbnRleHQpO1xuICB2YXIgaW5mbyA9IGNvbnRleHRbdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXldO1xuICBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKGluZm8sIGluc3QuX3RhZywgaW5zdCk7XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudCh0YWdOYW1lLCBwcm9wcykge1xuICByZXR1cm4gdGFnTmFtZS5pbmRleE9mKCctJykgPj0gMCB8fCBwcm9wcy5pcyAhPSBudWxsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUmVhY3QgY2xhc3MgdGhhdCBpcyBpZGVtcG90ZW50IGFuZCBjYXBhYmxlIG9mIGNvbnRhaW5pbmcgb3RoZXJcbiAqIFJlYWN0IGNvbXBvbmVudHMuIEl0IGFjY2VwdHMgZXZlbnQgbGlzdGVuZXJzIGFuZCBET00gcHJvcGVydGllcyB0aGF0IGFyZVxuICogdmFsaWQgYWNjb3JkaW5nIHRvIGBET01Qcm9wZXJ0eWAuXG4gKlxuICogIC0gRXZlbnQgbGlzdGVuZXJzOiBgb25DbGlja2AsIGBvbk1vdXNlRG93bmAsIGV0Yy5cbiAqICAtIERPTSBwcm9wZXJ0aWVzOiBgY2xhc3NOYW1lYCwgYG5hbWVgLCBgdGl0bGVgLCBldGMuXG4gKlxuICogVGhlIGBzdHlsZWAgcHJvcGVydHkgZnVuY3Rpb25zIGRpZmZlcmVudGx5IGZyb20gdGhlIERPTSBBUEkuIEl0IGFjY2VwdHMgYW5cbiAqIG9iamVjdCBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBSZWFjdERPTUNvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RNdWx0aUNoaWxkXG4gKi9cbmZ1bmN0aW9uIFJlYWN0RE9NQ29tcG9uZW50KHRhZykge1xuICB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpO1xuICB0aGlzLl90YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBudWxsO1xuICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICB0aGlzLl93cmFwcGVyU3RhdGUgPSBudWxsO1xuICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuICB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXMgPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRoaXMuX3VucHJvY2Vzc2VkQ29udGV4dERldiA9IG51bGw7XG4gICAgdGhpcy5fcHJvY2Vzc2VkQ29udGV4dERldiA9IG51bGw7XG4gIH1cbn1cblxuUmVhY3RET01Db21wb25lbnQuZGlzcGxheU5hbWUgPSAnUmVhY3RET01Db21wb25lbnQnO1xuXG5SZWFjdERPTUNvbXBvbmVudC5NaXhpbiA9IHtcblxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG4gICAqIGlzIG5vdCBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBUaGUgcm9vdCBET00gSUQgZm9yIHRoaXMgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAocm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgY2FzZSAnaW1nJzpcbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAgICAgbGlzdGVuZXJzOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBSZWFjdERPTUlucHV0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgUmVhY3RET01PcHRpb24ubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgUmVhY3RET01TZWxlY3QubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQgPSBSZWFjdERPTVNlbGVjdC5wcm9jZXNzQ2hpbGRDb250ZXh0KHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIFJlYWN0RE9NVGV4dGFyZWEubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldE5hdGl2ZVByb3BzKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSkge1xuICAgICAgICB2YWxpZGF0ZURPTU5lc3RpbmcodGhpcy5fdGFnLCB0aGlzLCBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuX3VucHJvY2Vzc2VkQ29udGV4dERldiA9IGNvbnRleHQ7XG4gICAgICB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2ID0gcHJvY2Vzc0NoaWxkQ29udGV4dERldihjb250ZXh0LCB0aGlzKTtcbiAgICAgIGNvbnRleHQgPSB0aGlzLl9wcm9jZXNzZWRDb250ZXh0RGV2O1xuICAgIH1cblxuICAgIHZhciBtb3VudEltYWdlO1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGNvbnRleHRbUmVhY3RNb3VudC5vd25lckRvY3VtZW50Q29udGV4dEtleV07XG4gICAgICB2YXIgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSk7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0QXR0cmlidXRlRm9ySUQoZWwsIHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgLy8gUG9wdWxhdGUgbm9kZSBjYWNoZVxuICAgICAgUmVhY3RNb3VudC5nZXRJRChlbCk7XG4gICAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKHt9LCBwcm9wcywgdHJhbnNhY3Rpb24sIGVsKTtcbiAgICAgIHRoaXMuX2NyZWF0ZUluaXRpYWxDaGlsZHJlbih0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGVsKTtcbiAgICAgIG1vdW50SW1hZ2UgPSBlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRhZ09wZW4gPSB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uLCBwcm9wcyk7XG4gICAgICB2YXIgdGFnQ29udGVudCA9IHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KTtcbiAgICAgIGlmICghdGFnQ29udGVudCAmJiBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10pIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnLz4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnPicgKyB0YWdDb250ZW50ICsgJzwvJyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgKyAnPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl90YWcpIHtcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShtb3VudFJlYWR5SW5wdXRXcmFwcGVyLCB0aGlzKTtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShBdXRvRm9jdXNVdGlscy5mb2N1c0RPTUNvbXBvbmVudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdW50SW1hZ2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgb3BlbiB0YWcgYW5kIGFsbCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGJlY2F1c2UgZXZlbnRzIGdldCByZWdpc3RlcmVkLlxuICAgKlxuICAgKiBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllcyBpcyBmYXN0ZXIgdGhhbiBpdGVyYXRpbmcgb3ZlciBhcnJheXMuXG4gICAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vb2JqLXZzLWFyci1pdGVyYXRpb25cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBvZiBvcGVuaW5nIHRhZy5cbiAgICovXG4gIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzKSB7XG4gICAgdmFyIHJldCA9ICc8JyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICBmb3IgKHZhciBwcm9wS2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgcHJvcFZhbHVlLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIFNlZSBgX3VwZGF0ZURPTVByb3BlcnRpZXNgLiBzdHlsZSBibG9ja1xuICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcFZhbHVlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBhc3NpZ24oe30sIHByb3BzLnN0eWxlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvcFZhbHVlID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrdXAgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fdGFnICE9IG51bGwgJiYgaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBwcm9wcykpIHtcbiAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlKHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclByb3BlcnR5KHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3Igc3RhdGljIHBhZ2VzLCBubyBuZWVkIHRvIHB1dCBSZWFjdCBJRCBhbmQgY2hlY2tzdW0uIFNhdmVzIGxvdHMgb2ZcbiAgICAvLyBieXRlcy5cbiAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hcmt1cEZvcklEID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHJldHVybiByZXQgKyAnICcgKyBtYXJrdXBGb3JJRDtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIHRhZ3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7c3RyaW5nfSBDb250ZW50IG1hcmt1cC5cbiAgICovXG4gIF9jcmVhdGVDb250ZW50TWFya3VwOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIHJldCA9ICcnO1xuXG4gICAgLy8gSW50ZW50aW9uYWwgdXNlIG9mICE9IHRvIGF2b2lkIGNhdGNoaW5nIHplcm8vZmFsc2UuXG4gICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgIGlmIChpbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICByZXQgPSBpbm5lckhUTUwuX19odG1sO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgdmFyIGNoaWxkcmVuVG9Vc2UgPSBjb250ZW50VG9Vc2UgIT0gbnVsbCA/IG51bGwgOiBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgICByZXQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoY29udGVudFRvVXNlKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIHJldCA9IG1vdW50SW1hZ2VzLmpvaW4oJycpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3bGluZUVhdGluZ1RhZ3NbdGhpcy5fdGFnXSAmJiByZXQuY2hhckF0KDApID09PSAnXFxuJykge1xuICAgICAgLy8gdGV4dC9odG1sIGlnbm9yZXMgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiB0aGVzZSB0YWdzIGlmIGl0J3MgYSBuZXdsaW5lXG4gICAgICAvLyBQcmVmZXIgdG8gYnJlYWsgYXBwbGljYXRpb24veG1sIG92ZXIgdGV4dC9odG1sIChmb3Igbm93KSBieSBhZGRpbmdcbiAgICAgIC8vIGEgbmV3bGluZSBzcGVjaWZpY2FsbHkgdG8gZ2V0IGVhdGVuIGJ5IHRoZSBwYXJzZXIuIChBbHRlcm5hdGVseSBmb3JcbiAgICAgIC8vIHRleHRhcmVhcywgcmVwbGFjaW5nIFwiXlxcblwiIHdpdGggXCJcXHJcXG5cIiBkb2Vzbid0IGdldCBlYXRlbiwgYW5kIHRoZSBmaXJzdFxuICAgICAgLy8gXFxyIGlzIG5vcm1hbGl6ZWQgb3V0IGJ5IEhUTUxUZXh0QXJlYUVsZW1lbnQjdmFsdWUuKVxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbC1wb2x5Z2xvdC8jbmV3bGluZXMtaW4tdGV4dGFyZWEtYW5kLXByZT5cbiAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI2VsZW1lbnQtcmVzdHJpY3Rpb25zPlxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjbmV3bGluZXM+XG4gICAgICAvLyBTZWU6IFBhcnNpbmcgb2YgXCJ0ZXh0YXJlYVwiIFwibGlzdGluZ1wiIGFuZCBcInByZVwiIGVsZW1lbnRzXG4gICAgICAvLyAgZnJvbSA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keT5cbiAgICAgIHJldHVybiAnXFxuJyArIHJldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sXG5cbiAgX2NyZWF0ZUluaXRpYWxDaGlsZHJlbjogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCwgZWwpIHtcbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIHNldElubmVySFRNTChlbCwgaW5uZXJIVE1MLl9faHRtbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFZhbGlkYXRlIHRoYXQgdGV4dCBpcyBhbGxvd2VkIGFzIGEgY2hpbGQgb2YgdGhpcyBub2RlXG4gICAgICAgIHNldFRleHRDb250ZW50KGVsLCBjb250ZW50VG9Vc2UpO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG1vdW50SW1hZ2VzID0gdGhpcy5tb3VudENoaWxkcmVuKGNoaWxkcmVuVG9Vc2UsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb3VudEltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG1vdW50SW1hZ2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjZWl2ZXMgYSBuZXh0IGVsZW1lbnQgYW5kIHVwZGF0ZXMgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgbmF0aXZlIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KSB7XG4gICAgdmFyIGxhc3RQcm9wcyA9IHByZXZFbGVtZW50LnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTUlucHV0LmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gSWYgdGhlIGNvbnRleHQgaXMgcmVmZXJlbmNlLWVxdWFsIHRvIHRoZSBvbGQgb25lLCBwYXNzIGRvd24gdGhlIHNhbWVcbiAgICAgIC8vIHByb2Nlc3NlZCBvYmplY3Qgc28gdGhlIHVwZGF0ZSBiYWlsb3V0IGluIFJlYWN0UmVjb25jaWxlciBiZWhhdmVzXG4gICAgICAvLyBjb3JyZWN0bHkgKGFuZCBpZGVudGljYWxseSBpbiBkZXYgYW5kIHByb2QpLiBTZWUgIzUwMDUuXG4gICAgICBpZiAodGhpcy5fdW5wcm9jZXNzZWRDb250ZXh0RGV2ICE9PSBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX3VucHJvY2Vzc2VkQ29udGV4dERldiA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NlZENvbnRleHREZXYgPSBwcm9jZXNzQ2hpbGRDb250ZXh0RGV2KGNvbnRleHQsIHRoaXMpO1xuICAgICAgfVxuICAgICAgY29udGV4dCA9IHRoaXMuX3Byb2Nlc3NlZENvbnRleHREZXY7XG4gICAgfVxuXG4gICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMobGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBudWxsKTtcbiAgICB0aGlzLl91cGRhdGVET01DaGlsZHJlbihsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgaWYgKCFjYW5EZWZpbmVQcm9wZXJ0eSAmJiB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgLy8gPHNlbGVjdD4gdmFsdWUgdXBkYXRlIG5lZWRzIHRvIG9jY3VyIGFmdGVyIDxvcHRpb24+IGNoaWxkcmVuXG4gICAgICAvLyByZWNvbmNpbGlhdGlvblxuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShwb3N0VXBkYXRlU2VsZWN0V3JhcHBlciwgdGhpcyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBwcm9wZXJ0aWVzIGJ5IGRldGVjdGluZyBkaWZmZXJlbmNlcyBpbiBwcm9wZXJ0eSB2YWx1ZXMgYW5kXG4gICAqIHVwZGF0aW5nIHRoZSBET00gYXMgbmVjZXNzYXJ5LiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JhYmx5IHRoZSBzaW5nbGUgbW9zdFxuICAgKiBjcml0aWNhbCBwYXRoIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAqXG4gICAqIFRPRE86IEJlbmNobWFyayB3aGV0aGVyIGNoZWNraW5nIGZvciBjaGFuZ2VkIHZhbHVlcyBpbiBtZW1vcnkgYWN0dWFsbHlcbiAgICogICAgICAgaW1wcm92ZXMgcGVyZm9ybWFuY2UgKGVzcGVjaWFsbHkgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnRzKS5cbiAgICogVE9ETzogQmVuY2htYXJrIHRoZSBlZmZlY3RzIG9mIHB1dHRpbmcgdGhpcyBhdCB0aGUgdG9wIHNpbmNlIDk5JSBvZiBwcm9wc1xuICAgKiAgICAgICBkbyBub3QgY2hhbmdlIGZvciBhIGdpdmVuIHJlY29uY2lsaWF0aW9uLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgYXJlYXMgdGhhdCBjYW4gYmUgaW1wcm92ZWQgd2l0aCBjYWNoaW5nLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgbm9kZSkge1xuICAgIHZhciBwcm9wS2V5O1xuICAgIHZhciBzdHlsZU5hbWU7XG4gICAgdmFyIHN0eWxlVXBkYXRlcztcbiAgICBmb3IgKHByb3BLZXkgaW4gbGFzdFByb3BzKSB7XG4gICAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8ICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgdmFyIGxhc3RTdHlsZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5O1xuICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgICBpZiAobGFzdFN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgaWYgKGxhc3RQcm9wc1twcm9wS2V5XSkge1xuICAgICAgICAgIC8vIE9ubHkgY2FsbCBkZWxldGVMaXN0ZW5lciBpZiB0aGVyZSB3YXMgYSBsaXN0ZW5lciBwcmV2aW91c2x5IG9yXG4gICAgICAgICAgLy8gZWxzZSB3aWxsRGVsZXRlTGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2hlbiB0aGVyZSB3YXNuJ3QgYWN0dWFsbHkgYVxuICAgICAgICAgIC8vIGxpc3RlbmVyIChlLmcuLCBvbkNsaWNrPXtudWxsfSlcbiAgICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BLZXldIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICAgIH1cbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBuZXh0UHJvcCA9IG5leHRQcm9wc1twcm9wS2V5XTtcbiAgICAgIHZhciBsYXN0UHJvcCA9IHByb3BLZXkgPT09IFNUWUxFID8gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgOiBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3ApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZSh0aGlzLl9wcmV2aW91c1N0eWxlQ29weSwgdGhpcy5fcHJldmlvdXNTdHlsZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gbmV4dFByb3A7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHRQcm9wID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBhc3NpZ24oe30sIG5leHRQcm9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgLy8gVW5zZXQgc3R5bGVzIG9uIGBsYXN0UHJvcGAgYnV0IG5vdCBvbiBgbmV4dFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFVwZGF0ZSBzdHlsZXMgdGhhdCBjaGFuZ2VkIHNpbmNlIGBsYXN0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmIGxhc3RQcm9wW3N0eWxlTmFtZV0gIT09IG5leHRQcm9wW3N0eWxlTmFtZV0pIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IG5leHRQcm9wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGVucXVldWVQdXRMaXN0ZW5lcih0aGlzLl9yb290Tm9kZUlELCBwcm9wS2V5LCBuZXh0UHJvcCwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgZGVsZXRlTGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICAgIH1cbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuICAgICAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0YW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuICAgICAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHlsZVVwZGF0ZXMpIHtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgfVxuICAgICAgQ1NTUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlVXBkYXRlcyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNvbmNpbGVzIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSB2YXJpb3VzIHByb3BlcnRpZXMgdGhhdCBhZmZlY3QgdGhlXG4gICAqIGNoaWxkcmVuIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqL1xuICBfdXBkYXRlRE9NQ2hpbGRyZW46IGZ1bmN0aW9uIChsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbGFzdENvbnRlbnQgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBsYXN0UHJvcHMuY2hpbGRyZW5dID8gbGFzdFByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICB2YXIgbmV4dENvbnRlbnQgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcblxuICAgIHZhciBsYXN0SHRtbCA9IGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJiBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuICAgIHZhciBuZXh0SHRtbCA9IG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJiBuZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuXG4gICAgLy8gTm90ZSB0aGUgdXNlIG9mIGAhPWAgd2hpY2ggY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZC5cbiAgICB2YXIgbGFzdENoaWxkcmVuID0gbGFzdENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBsYXN0UHJvcHMuY2hpbGRyZW47XG4gICAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRDb250ZW50ICE9IG51bGwgPyBudWxsIDogbmV4dFByb3BzLmNoaWxkcmVuO1xuXG4gICAgLy8gSWYgd2UncmUgc3dpdGNoaW5nIGZyb20gY2hpbGRyZW4gdG8gY29udGVudC9odG1sIG9yIHZpY2UgdmVyc2EsIHJlbW92ZVxuICAgIC8vIHRoZSBvbGQgY29udGVudFxuICAgIHZhciBsYXN0SGFzQ29udGVudE9ySHRtbCA9IGxhc3RDb250ZW50ICE9IG51bGwgfHwgbGFzdEh0bWwgIT0gbnVsbDtcbiAgICB2YXIgbmV4dEhhc0NvbnRlbnRPckh0bWwgPSBuZXh0Q29udGVudCAhPSBudWxsIHx8IG5leHRIdG1sICE9IG51bGw7XG4gICAgaWYgKGxhc3RDaGlsZHJlbiAhPSBudWxsICYmIG5leHRDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG51bGwsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGxhc3RIYXNDb250ZW50T3JIdG1sICYmICFuZXh0SGFzQ29udGVudE9ySHRtbCkge1xuICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIGlmIChsYXN0Q29udGVudCAhPT0gbmV4dENvbnRlbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyArIG5leHRDb250ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRIdG1sICE9IG51bGwpIHtcbiAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVNYXJrdXAoJycgKyBuZXh0SHRtbCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnM7XG4gICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC51bm1vdW50V3JhcHBlcih0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wb25lbnRzIGxpa2UgPGh0bWw+IDxoZWFkPiBhbmQgPGJvZHk+IGNhbid0IGJlIHJlbW92ZWQgb3IgYWRkZWRcbiAgICAgICAgICogZWFzaWx5IGluIGEgY3Jvc3MtYnJvd3NlciB3YXksIGhvd2V2ZXIgaXQncyB2YWx1YWJsZSB0byBiZSBhYmxlIHRvXG4gICAgICAgICAqIHRha2UgYWR2YW50YWdlIG9mIFJlYWN0J3MgcmVjb25jaWxpYXRpb24gZm9yIHN0eWxpbmcgYW5kIDx0aXRsZT5cbiAgICAgICAgICogbWFuYWdlbWVudC4gU28gd2UganVzdCBkb2N1bWVudCBpdCBhbmQgdGhyb3cgaW4gZGFuZ2Vyb3VzIGNhc2VzLlxuICAgICAgICAgKi9cbiAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJzwlcz4gdHJpZWQgdG8gdW5tb3VudC4gQmVjYXVzZSBvZiBjcm9zcy1icm93c2VyIHF1aXJrcyBpdCBpcyAnICsgJ2ltcG9zc2libGUgdG8gdW5tb3VudCBzb21lIHRvcC1sZXZlbCBjb21wb25lbnRzIChlZyA8aHRtbD4sICcgKyAnPGhlYWQ+LCBhbmQgPGJvZHk+KSByZWxpYWJseSBhbmQgZWZmaWNpZW50bHkuIFRvIGZpeCB0aGlzLCBoYXZlIGEgJyArICdzaW5nbGUgdG9wLWxldmVsIGNvbXBvbmVudCB0aGF0IG5ldmVyIHVubW91bnRzIHJlbmRlciB0aGVzZSAnICsgJ2VsZW1lbnRzLicsIHRoaXMuX3RhZykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLnVubW91bnRDaGlsZHJlbigpO1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5kZWxldGVBbGxMaXN0ZW5lcnModGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZSA9IG51bGw7XG4gICAgaWYgKHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcykge1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXM7XG4gICAgICBub2RlLl9yZWFjdEludGVybmFsQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcyA9IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIGdldFB1YmxpY0luc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXMpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuXG4gICAgICBub2RlLl9yZWFjdEludGVybmFsQ29tcG9uZW50ID0gdGhpcztcbiAgICAgIG5vZGUuZ2V0RE9NTm9kZSA9IGxlZ2FjeUdldERPTU5vZGU7XG4gICAgICBub2RlLmlzTW91bnRlZCA9IGxlZ2FjeUlzTW91bnRlZDtcbiAgICAgIG5vZGUuc2V0U3RhdGUgPSBsZWdhY3lTZXRTdGF0ZUV0YztcbiAgICAgIG5vZGUucmVwbGFjZVN0YXRlID0gbGVnYWN5U2V0U3RhdGVFdGM7XG4gICAgICBub2RlLmZvcmNlVXBkYXRlID0gbGVnYWN5U2V0U3RhdGVFdGM7XG4gICAgICBub2RlLnNldFByb3BzID0gbGVnYWN5U2V0UHJvcHM7XG4gICAgICBub2RlLnJlcGxhY2VQcm9wcyA9IGxlZ2FjeVJlcGxhY2VQcm9wcztcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobm9kZSwgbGVnYWN5UHJvcHNEZXNjcmlwdG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1cGRhdGVDb21wb25lbnQgd2lsbCB1cGRhdGUgdGhpcyBwcm9wZXJ0eSBvbiBzdWJzZXF1ZW50IHJlbmRlcnNcbiAgICAgICAgICBub2RlLnByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudCB3aWxsIHVwZGF0ZSB0aGlzIHByb3BlcnR5IG9uIHN1YnNlcXVlbnQgcmVuZGVyc1xuICAgICAgICBub2RlLnByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX25vZGVXaXRoTGVnYWN5UHJvcGVydGllcyA9IG5vZGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub2RlV2l0aExlZ2FjeVByb3BlcnRpZXM7XG4gIH1cblxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NQ29tcG9uZW50LCAnUmVhY3RET01Db21wb25lbnQnLCB7XG4gIG1vdW50Q29tcG9uZW50OiAnbW91bnRDb21wb25lbnQnLFxuICB1cGRhdGVDb21wb25lbnQ6ICd1cGRhdGVDb21wb25lbnQnXG59KTtcblxuYXNzaWduKFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RET01Db21wb25lbnQuTWl4aW4sIFJlYWN0TXVsdGlDaGlsZC5NaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9BdXRvRm9jdXNVdGlsc1wiOjE2OCxcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCI6MTcxLFwiLi9ET01Qcm9wZXJ0eVwiOjE3NixcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6MTc3LFwiLi9FdmVudENvbnN0YW50c1wiOjE4MSxcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6MTkzLFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiOjE5OCxcIi4vUmVhY3RET01CdXR0b25cIjoyMDMsXCIuL1JlYWN0RE9NSW5wdXRcIjoyMDgsXCIuL1JlYWN0RE9NT3B0aW9uXCI6MjA5LFwiLi9SZWFjdERPTVNlbGVjdFwiOjIxMCxcIi4vUmVhY3RET01UZXh0YXJlYVwiOjIxNCxcIi4vUmVhY3RNb3VudFwiOjIzMixcIi4vUmVhY3RNdWx0aUNoaWxkXCI6MjMzLFwiLi9SZWFjdFBlcmZcIjoyMzgsXCIuL1JlYWN0VXBkYXRlUXVldWVcIjoyNDksXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOjI3MyxcIi4vaXNFdmVudFN1cHBvcnRlZFwiOjI4NSxcIi4vc2V0SW5uZXJIVE1MXCI6MjkwLFwiLi9zZXRUZXh0Q29udGVudFwiOjI5MSxcIi4vdmFsaWRhdGVET01OZXN0aW5nXCI6Mjk0LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNCxcImZianMvbGliL2tleU9mXCI6MzgsXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIjo0MyxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDIwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRmFjdG9yaWVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcblxudmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL21hcE9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGFnIG5hbWUgKGUuZy4gYGRpdmApLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgYTogJ2EnLFxuICBhYmJyOiAnYWJicicsXG4gIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgYXJlYTogJ2FyZWEnLFxuICBhcnRpY2xlOiAnYXJ0aWNsZScsXG4gIGFzaWRlOiAnYXNpZGUnLFxuICBhdWRpbzogJ2F1ZGlvJyxcbiAgYjogJ2InLFxuICBiYXNlOiAnYmFzZScsXG4gIGJkaTogJ2JkaScsXG4gIGJkbzogJ2JkbycsXG4gIGJpZzogJ2JpZycsXG4gIGJsb2NrcXVvdGU6ICdibG9ja3F1b3RlJyxcbiAgYm9keTogJ2JvZHknLFxuICBicjogJ2JyJyxcbiAgYnV0dG9uOiAnYnV0dG9uJyxcbiAgY2FudmFzOiAnY2FudmFzJyxcbiAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICBjaXRlOiAnY2l0ZScsXG4gIGNvZGU6ICdjb2RlJyxcbiAgY29sOiAnY29sJyxcbiAgY29sZ3JvdXA6ICdjb2xncm91cCcsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gIGRkOiAnZGQnLFxuICBkZWw6ICdkZWwnLFxuICBkZXRhaWxzOiAnZGV0YWlscycsXG4gIGRmbjogJ2RmbicsXG4gIGRpYWxvZzogJ2RpYWxvZycsXG4gIGRpdjogJ2RpdicsXG4gIGRsOiAnZGwnLFxuICBkdDogJ2R0JyxcbiAgZW06ICdlbScsXG4gIGVtYmVkOiAnZW1iZWQnLFxuICBmaWVsZHNldDogJ2ZpZWxkc2V0JyxcbiAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICBmaWd1cmU6ICdmaWd1cmUnLFxuICBmb290ZXI6ICdmb290ZXInLFxuICBmb3JtOiAnZm9ybScsXG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIGhlYWQ6ICdoZWFkJyxcbiAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgaHI6ICdocicsXG4gIGh0bWw6ICdodG1sJyxcbiAgaTogJ2knLFxuICBpZnJhbWU6ICdpZnJhbWUnLFxuICBpbWc6ICdpbWcnLFxuICBpbnB1dDogJ2lucHV0JyxcbiAgaW5zOiAnaW5zJyxcbiAga2JkOiAna2JkJyxcbiAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxlZ2VuZDogJ2xlZ2VuZCcsXG4gIGxpOiAnbGknLFxuICBsaW5rOiAnbGluaycsXG4gIG1haW46ICdtYWluJyxcbiAgbWFwOiAnbWFwJyxcbiAgbWFyazogJ21hcmsnLFxuICBtZW51OiAnbWVudScsXG4gIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICBtZXRhOiAnbWV0YScsXG4gIG1ldGVyOiAnbWV0ZXInLFxuICBuYXY6ICduYXYnLFxuICBub3NjcmlwdDogJ25vc2NyaXB0JyxcbiAgb2JqZWN0OiAnb2JqZWN0JyxcbiAgb2w6ICdvbCcsXG4gIG9wdGdyb3VwOiAnb3B0Z3JvdXAnLFxuICBvcHRpb246ICdvcHRpb24nLFxuICBvdXRwdXQ6ICdvdXRwdXQnLFxuICBwOiAncCcsXG4gIHBhcmFtOiAncGFyYW0nLFxuICBwaWN0dXJlOiAncGljdHVyZScsXG4gIHByZTogJ3ByZScsXG4gIHByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICBxOiAncScsXG4gIHJwOiAncnAnLFxuICBydDogJ3J0JyxcbiAgcnVieTogJ3J1YnknLFxuICBzOiAncycsXG4gIHNhbXA6ICdzYW1wJyxcbiAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgc2VjdGlvbjogJ3NlY3Rpb24nLFxuICBzZWxlY3Q6ICdzZWxlY3QnLFxuICBzbWFsbDogJ3NtYWxsJyxcbiAgc291cmNlOiAnc291cmNlJyxcbiAgc3BhbjogJ3NwYW4nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3ViOiAnc3ViJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICBzdXA6ICdzdXAnLFxuICB0YWJsZTogJ3RhYmxlJyxcbiAgdGJvZHk6ICd0Ym9keScsXG4gIHRkOiAndGQnLFxuICB0ZXh0YXJlYTogJ3RleHRhcmVhJyxcbiAgdGZvb3Q6ICd0Zm9vdCcsXG4gIHRoOiAndGgnLFxuICB0aGVhZDogJ3RoZWFkJyxcbiAgdGltZTogJ3RpbWUnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHI6ICd0cicsXG4gIHRyYWNrOiAndHJhY2snLFxuICB1OiAndScsXG4gIHVsOiAndWwnLFxuICAndmFyJzogJ3ZhcicsXG4gIHZpZGVvOiAndmlkZW8nLFxuICB3YnI6ICd3YnInLFxuXG4gIC8vIFNWR1xuICBjaXJjbGU6ICdjaXJjbGUnLFxuICBjbGlwUGF0aDogJ2NsaXBQYXRoJyxcbiAgZGVmczogJ2RlZnMnLFxuICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gIGc6ICdnJyxcbiAgaW1hZ2U6ICdpbWFnZScsXG4gIGxpbmU6ICdsaW5lJyxcbiAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG4gIG1hc2s6ICdtYXNrJyxcbiAgcGF0aDogJ3BhdGgnLFxuICBwYXR0ZXJuOiAncGF0dGVybicsXG4gIHBvbHlnb246ICdwb2x5Z29uJyxcbiAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuICByZWN0OiAncmVjdCcsXG4gIHN0b3A6ICdzdG9wJyxcbiAgc3ZnOiAnc3ZnJyxcbiAgdGV4dDogJ3RleHQnLFxuICB0c3BhbjogJ3RzcGFuJ1xuXG59LCBjcmVhdGVET01GYWN0b3J5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZhY3Rvcmllcztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjIwLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9tYXBPYmplY3RcIjozOX1dLDIwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01GZWF0dXJlRmxhZ3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHtcbiAgdXNlQ3JlYXRlRWxlbWVudDogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GZWF0dXJlRmxhZ3M7XG59LHt9XSwyMDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlET3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBFcnJvcnMgZm9yIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHVwZGF0ZWQgd2l0aCBgdXBkYXRlUHJvcGVydHlCeUlEKClgLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlSW5uZXJIVE1MQnlJRCgpYC4nLFxuICBzdHlsZTogJ2BzdHlsZWAgbXVzdCBiZSBzZXQgdXNpbmcgYHVwZGF0ZVN0eWxlc0J5SUQoKWAuJ1xufTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIHVzZWQgdG8gcHJvY2VzcyB1cGRhdGVzIHRvIERPTSBub2Rlcy5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgcHJvcGVydHkgdmFsdWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAgICogdXBkYXRlIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdmFsaWQgcHJvcGVydHkgbmFtZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IGZ1bmN0aW9uIChpZCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgISFJTlZBTElEX1BST1BFUlRZX0VSUk9SUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLCBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgLy8gZnJvbSB0aGUgRE9NIG5vZGUgaW5zdGVhZCBvZiBpbmFkdmVydGFudGx5IHNldHRpbmcgdG8gYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIERPTSBub2RlIHRoYXQgZXhpc3RzIGluIHRoZSBkb2N1bWVudCB3aXRoIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIERhbmdlcm91cyBtYXJrdXAgdG8gaW5qZWN0IGluIHBsYWNlIG9mIGNoaWxkLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBmdW5jdGlvbiAoaWQsIG1hcmt1cCkge1xuICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAobm9kZSwgbWFya3VwKTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogZnVuY3Rpb24gKHVwZGF0ZXMsIG1hcmt1cCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdXBkYXRlc1tpXS5wYXJlbnROb2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHVwZGF0ZXNbaV0ucGFyZW50SUQpO1xuICAgIH1cbiAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbWFya3VwKTtcbiAgfVxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0RE9NSURPcGVyYXRpb25zLCAnUmVhY3RET01JRE9wZXJhdGlvbnMnLCB7XG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRDogJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCcsXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogJ2Rhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcydcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSURPcGVyYXRpb25zO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zXCI6MTc1LFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjoxNzcsXCIuL1JlYWN0TW91bnRcIjoyMzIsXCIuL1JlYWN0UGVyZlwiOjIzOCxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlucHV0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBpbnN0YW5jZXNCeVJlYWN0SUQgPSB7fTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIHRoZXNlIG9wdGlvbmFsXG4gKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKlxuICogSWYgYGNoZWNrZWRgIG9yIGB2YWx1ZWAgYXJlIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnNcbiAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIHRoZXkgYXJlIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBub3RcbiAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuICogdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcbiAqIHdpdGggYW4gZW1wdHkgdmFsdWUgKG9yIGBkZWZhdWx0VmFsdWVgKS5cbiAqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuICovXG52YXIgUmVhY3RET01JbnB1dCA9IHtcbiAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHByb3BzKTtcblxuICAgIHZhciBuYXRpdmVQcm9wcyA9IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCdpbnB1dCcsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmRlZmF1bHRDaGVja2VkIHx8IGZhbHNlLFxuICAgICAgaW5pdGlhbFZhbHVlOiBkZWZhdWx0VmFsdWUgIT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IG51bGwsXG4gICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpXG4gICAgfTtcbiAgfSxcblxuICBtb3VudFJlYWR5V3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICAvLyBDYW4ndCBiZSBpbiBtb3VudFdyYXBwZXIgb3IgZWxzZSBzZXJ2ZXIgcmVuZGVyaW5nIGxlYWtzLlxuICAgIGluc3RhbmNlc0J5UmVhY3RJRFtpbnN0Ll9yb290Tm9kZUlEXSA9IGluc3Q7XG4gIH0sXG5cbiAgdW5tb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RJRFtpbnN0Ll9yb290Tm9kZUlEXTtcbiAgfSxcblxuICB1cGRhdGVXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gVE9ETzogU2hvdWxkbid0IHRoaXMgYmUgZ2V0Q2hlY2tlZChwcm9wcyk/XG4gICAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuICAgIGlmIChjaGVja2VkICE9IG51bGwpIHtcbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAnY2hlY2tlZCcsIGNoZWNrZWQgfHwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgUmVhY3RET01JRE9wZXJhdGlvbnMudXBkYXRlUHJvcGVydHlCeUlEKGluc3QuX3Jvb3ROb2RlSUQsICd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShldmVudCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuXG4gIC8vIEhlcmUgd2UgdXNlIGFzYXAgdG8gd2FpdCB1bnRpbCBhbGwgdXBkYXRlcyBoYXZlIHByb3BhZ2F0ZWQsIHdoaWNoXG4gIC8vIGlzIGltcG9ydGFudCB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE2OThcbiAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuXG4gIHZhciBuYW1lID0gcHJvcHMubmFtZTtcbiAgaWYgKHByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgdmFyIHJvb3ROb2RlID0gUmVhY3RNb3VudC5nZXROb2RlKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcblxuICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgcXVlcnlSb290ID0gcXVlcnlSb290LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgLy8gSWYgYHJvb3ROb2RlLmZvcm1gIHdhcyBub24tbnVsbCwgdGhlbiB3ZSBjb3VsZCB0cnkgYGZvcm0uZWxlbWVudHNgLFxuICAgIC8vIGJ1dCB0aGF0IHNvbWV0aW1lcyBiZWhhdmVzIHN0cmFuZ2VseSBpbiBJRTguIFdlIGNvdWxkIGFsc28gdHJ5IHVzaW5nXG4gICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgIC8vIGFuZCB3b24ndCBpbmNsdWRlIGlucHV0cyB0aGF0IHVzZSB0aGUgSFRNTDUgYGZvcm09YCBhdHRyaWJ1dGUuIFNpbmNlXG4gICAgLy8gdGhlIGlucHV0IG1pZ2h0IG5vdCBldmVuIGJlIGluIGEgZm9ybSwgbGV0J3MganVzdCB1c2UgdGhlIGdsb2JhbFxuICAgIC8vIGBxdWVyeVNlbGVjdG9yQWxsYCB0byBlbnN1cmUgd2UgZG9uJ3QgbWlzcyBhbnl0aGluZy5cbiAgICB2YXIgZ3JvdXAgPSBxdWVyeVJvb3QucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbbmFtZT0nICsgSlNPTi5zdHJpbmdpZnkoJycgKyBuYW1lKSArICddW3R5cGU9XCJyYWRpb1wiXScpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG90aGVyTm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHwgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgcmFkaW8gYnV0dG9ucyByZW5kZXJlZCBieSBkaWZmZXJlbnQgY29waWVzIG9mIFJlYWN0XG4gICAgICAvLyBhbmQgdGhlIHNhbWUgbmFtZSBhcmUgcmVuZGVyZWQgaW50byB0aGUgc2FtZSBmb3JtIChzYW1lIGFzICMxOTM5KS5cbiAgICAgIC8vIFRoYXQncyBwcm9iYWJseSBva2F5OyB3ZSBkb24ndCBzdXBwb3J0IGl0IGp1c3QgYXMgd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgLy8gbWl4aW5nIFJlYWN0IHdpdGggbm9uLVJlYWN0LlxuICAgICAgdmFyIG90aGVySUQgPSBSZWFjdE1vdW50LmdldElEKG90aGVyTm9kZSk7XG4gICAgICAhb3RoZXJJRCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgJyArICdzYW1lIGBuYW1lYCBpcyBub3Qgc3VwcG9ydGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBvdGhlckluc3RhbmNlID0gaW5zdGFuY2VzQnlSZWFjdElEW290aGVySURdO1xuICAgICAgIW90aGVySW5zdGFuY2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET01JbnB1dDogVW5rbm93biByYWRpbyBidXR0b24gSUQgJXMuJywgb3RoZXJJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuICAgICAgLy8gYXMgYXBwcm9wcmlhdGUuXG4gICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9MaW5rZWRWYWx1ZVV0aWxzXCI6MTg4LFwiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiOjIwNyxcIi4vUmVhY3RNb3VudFwiOjIzMixcIi4vUmVhY3RVcGRhdGVzXCI6MjUwLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNH1dLDIwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NT3B0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZHJlbicpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlbGVjdCcpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHZhbHVlQ29udGV4dEtleSA9IFJlYWN0RE9NU2VsZWN0LnZhbHVlQ29udGV4dEtleTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxvcHRpb24+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01PcHRpb24gPSB7XG4gIG1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBjb250ZXh0KSB7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnNlbGVjdGVkID09IG51bGwsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICsgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBMb29rIHVwIHdoZXRoZXIgdGhpcyBvcHRpb24gaXMgJ3NlbGVjdGVkJyB2aWEgY29udGV4dFxuICAgIHZhciBzZWxlY3RWYWx1ZSA9IGNvbnRleHRbdmFsdWVDb250ZXh0S2V5XTtcblxuICAgIC8vIElmIGNvbnRleHQga2V5IGlzIG51bGwgKGUuZy4sIG5vIHNwZWNpZmllZCB2YWx1ZSBvciBhZnRlciBpbml0aWFsIG1vdW50KVxuICAgIC8vIG9yIG1pc3NpbmcgKGUuZy4sIGZvciA8ZGF0YWxpc3Q+KSwgd2UgZG9uJ3QgY2hhbmdlIHByb3BzLnNlbGVjdGVkXG4gICAgdmFyIHNlbGVjdGVkID0gbnVsbDtcbiAgICBpZiAoc2VsZWN0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdFZhbHVlKSkge1xuICAgICAgICAvLyBtdWx0aXBsZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCcnICsgc2VsZWN0VmFsdWVbaV0gPT09ICcnICsgcHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWQgPSAnJyArIHNlbGVjdFZhbHVlID09PSAnJyArIHByb3BzLnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHsgc2VsZWN0ZWQ6IHNlbGVjdGVkIH07XG4gIH0sXG5cbiAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBuYXRpdmVQcm9wcyA9IGFzc2lnbih7IHNlbGVjdGVkOiB1bmRlZmluZWQsIGNoaWxkcmVuOiB1bmRlZmluZWQgfSwgcHJvcHMpO1xuXG4gICAgLy8gUmVhZCBzdGF0ZSBvbmx5IGZyb20gaW5pdGlhbCBtb3VudCBiZWNhdXNlIDxzZWxlY3Q+IHVwZGF0ZXMgdmFsdWVcbiAgICAvLyBtYW51YWxseTsgd2UgbmVlZCB0aGUgaW5pdGlhbCBzdGF0ZSBvbmx5IGZvciBzZXJ2ZXIgcmVuZGVyaW5nXG4gICAgaWYgKGluc3QuX3dyYXBwZXJTdGF0ZS5zZWxlY3RlZCAhPSBudWxsKSB7XG4gICAgICBuYXRpdmVQcm9wcy5zZWxlY3RlZCA9IGluc3QuX3dyYXBwZXJTdGF0ZS5zZWxlY3RlZDtcbiAgICB9XG5cbiAgICB2YXIgY29udGVudCA9ICcnO1xuXG4gICAgLy8gRmxhdHRlbiBjaGlsZHJlbiBhbmQgd2FybiBpZiB0aGV5IGFyZW4ndCBzdHJpbmdzIG9yIG51bWJlcnM7XG4gICAgLy8gaW52YWxpZCB0eXBlcyBhcmUgaWdub3JlZC5cbiAgICBSZWFjdENoaWxkcmVuLmZvckVhY2gocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGNoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmx5IHN0cmluZ3MgYW5kIG51bWJlcnMgYXJlIHN1cHBvcnRlZCBhcyA8b3B0aW9uPiBjaGlsZHJlbi4nKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG5hdGl2ZVByb3BzLmNoaWxkcmVuID0gY29udGVudDtcbiAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0Q2hpbGRyZW5cIjoxOTUsXCIuL1JlYWN0RE9NU2VsZWN0XCI6MjEwLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTVNlbGVjdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciB2YWx1ZUNvbnRleHRLZXkgPSAnX19SZWFjdERPTVNlbGVjdF92YWx1ZSQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICBpZiAodGhpcy5fcm9vdE5vZGVJRCAmJiB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSkge1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gZmFsc2U7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcblxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHRoaXMsIHByb3BzLCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgdmFsdWVQcm9wTmFtZXMgPSBbJ3ZhbHVlJywgJ2RlZmF1bHRWYWx1ZSddO1xuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tTZWxlY3RQcm9wVHlwZXMoaW5zdCwgcHJvcHMpIHtcbiAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCdzZWxlY3QnLCBwcm9wcywgb3duZXIpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVQcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKEFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiAnICsgJ2BtdWx0aXBsZWAgaXMgdHJ1ZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpKSA6IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gaW5zdFxuICogQHBhcmFtIHtib29sZWFufSBtdWx0aXBsZVxuICogQHBhcmFtIHsqfSBwcm9wVmFsdWUgQSBzdHJpbmdhYmxlICh3aXRoIGBtdWx0aXBsZWAsIGEgbGlzdCBvZiBzdHJpbmdhYmxlcykuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKGluc3QsIG11bHRpcGxlLCBwcm9wVmFsdWUpIHtcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGk7XG4gIHZhciBvcHRpb25zID0gUmVhY3RNb3VudC5nZXROb2RlKGluc3QuX3Jvb3ROb2RlSUQpLm9wdGlvbnM7XG5cbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkob3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICBpZiAob3B0aW9uc1tpXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBEbyBub3Qgc2V0IGBzZWxlY3QudmFsdWVgIGFzIGV4YWN0IGJlaGF2aW9yIGlzbid0IGNvbnNpc3RlbnQgYWNyb3NzIGFsbFxuICAgIC8vIGJyb3dzZXJzIGZvciBhbGwgY2FzZXMuXG4gICAgc2VsZWN0ZWRWYWx1ZSA9ICcnICsgcHJvcFZhbHVlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8c2VsZWN0PiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSB7XG4gIHZhbHVlQ29udGV4dEtleTogdmFsdWVDb250ZXh0S2V5LFxuXG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZSxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgcGVuZGluZ1VwZGF0ZTogZmFsc2UsXG4gICAgICBpbml0aWFsVmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdCksXG4gICAgICB3YXNNdWx0aXBsZTogQm9vbGVhbihwcm9wcy5tdWx0aXBsZSlcbiAgICB9O1xuICB9LFxuXG4gIHByb2Nlc3NDaGlsZENvbnRleHQ6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcywgY29udGV4dCkge1xuICAgIC8vIFBhc3MgZG93biBpbml0aWFsIHZhbHVlIHNvIGluaXRpYWwgZ2VuZXJhdGVkIG1hcmt1cCBoYXMgY29ycmVjdFxuICAgIC8vIGBzZWxlY3RlZGAgYXR0cmlidXRlc1xuICAgIHZhciBjaGlsZENvbnRleHQgPSBhc3NpZ24oe30sIGNvbnRleHQpO1xuICAgIGNoaWxkQ29udGV4dFt2YWx1ZUNvbnRleHRLZXldID0gaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtcbiAgICByZXR1cm4gY2hpbGRDb250ZXh0O1xuICB9LFxuXG4gIHBvc3RVcGRhdGVXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gQWZ0ZXIgdGhlIGluaXRpYWwgbW91bnQsIHdlIGNvbnRyb2wgc2VsZWN0ZWQtbmVzcyBtYW51YWxseSBzbyBkb24ndCBwYXNzXG4gICAgLy8gdGhlIGNvbnRleHQgdmFsdWUgZG93blxuICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgICB2YXIgd2FzTXVsdGlwbGUgPSBpbnN0Ll93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7XG4gICAgaW5zdC5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlID0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSk7XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHdhc011bHRpcGxlICE9PSBCb29sZWFuKHByb3BzLm11bHRpcGxlKSkge1xuICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHJlYXBwbHkgYGRlZmF1bHRWYWx1ZWAgaWYgYG11bHRpcGxlYCBpcyB0b2dnbGVkLlxuICAgICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXZlcnQgdGhlIHNlbGVjdCBiYWNrIHRvIGl0cyBkZWZhdWx0IHVuc2VsZWN0ZWQgc3RhdGUuXG4gICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLm11bHRpcGxlID8gW10gOiAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuXG4gIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlID0gdHJ1ZTtcbiAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQsIHRoaXMpO1xuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Q7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9MaW5rZWRWYWx1ZVV0aWxzXCI6MTg4LFwiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9SZWFjdE1vdW50XCI6MjMyLFwiLi9SZWFjdFVwZGF0ZXNcIjoyNTAsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDIxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZWxlY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZSgnLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Jyk7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcicpO1xuXG4vKipcbiAqIFdoaWxlIGBpc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG9uIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGFuZCBgY29sbGFwc2VkYFxuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBSYW5nZSBvYmplY3QsIElFMTEgc29tZXRpbWVzIGdldHMgdGhlbSB3cm9uZy5cbiAqIElmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYW5kIG9mZnNldHMgYXJlIHRoZSBzYW1lLCB0aGUgcmFuZ2UgaXMgY29sbGFwc2VkLlxuICovXG5mdW5jdGlvbiBpc0NvbGxhcHNlZChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgcmV0dXJuIGFuY2hvck5vZGUgPT09IGZvY3VzTm9kZSAmJiBhbmNob3JPZmZzZXQgPT09IGZvY3VzT2Zmc2V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgYW5jaG9yIGFuZCBmb2N1cyBub2RlL29mZnNldCBwYWlycyBmb3IgSUUuXG4gKlxuICogVGhlIGNhdGNoIGhlcmUgaXMgdGhhdCBJRSdzIHNlbGVjdGlvbiBBUEkgZG9lc24ndCBwcm92aWRlIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZm9yd2FyZCBvciBiYWNrd2FyZCwgc28gd2UgaGF2ZSB0b1xuICogYmVoYXZlIGFzIHRob3VnaCBpdCdzIGFsd2F5cyBmb3J3YXJkLlxuICpcbiAqIElFIHRleHQgZGlmZmVycyBmcm9tIG1vZGVybiBzZWxlY3Rpb24gaW4gdGhhdCBpdCBiZWhhdmVzIGFzIHRob3VnaFxuICogYmxvY2sgZWxlbWVudHMgZW5kIHdpdGggYSBuZXcgbGluZS4gVGhpcyBtZWFucyBjaGFyYWN0ZXIgb2Zmc2V0cyB3aWxsXG4gKiBkaWZmZXIgYmV0d2VlbiB0aGUgdHdvIEFQSXMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldElFT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb247XG4gIHZhciBzZWxlY3RlZFJhbmdlID0gc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gIHZhciBzZWxlY3RlZExlbmd0aCA9IHNlbGVjdGVkUmFuZ2UudGV4dC5sZW5ndGg7XG5cbiAgLy8gRHVwbGljYXRlIHNlbGVjdGlvbiBzbyB3ZSBjYW4gbW92ZSByYW5nZSB3aXRob3V0IGJyZWFraW5nIHVzZXIgc2VsZWN0aW9uLlxuICB2YXIgZnJvbVN0YXJ0ID0gc2VsZWN0ZWRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgZnJvbVN0YXJ0Lm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcblxuICB2YXIgc3RhcnRPZmZzZXQgPSBmcm9tU3RhcnQudGV4dC5sZW5ndGg7XG4gIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIHNlbGVjdGVkTGVuZ3RoO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0T2Zmc2V0LFxuICAgIGVuZDogZW5kT2Zmc2V0XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgdmFyIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG5cbiAgLy8gSW4gRmlyZWZveCwgcmFuZ2Uuc3RhcnRDb250YWluZXIgYW5kIHJhbmdlLmVuZENvbnRhaW5lciBjYW4gYmUgXCJhbm9ueW1vdXNcbiAgLy8gZGl2c1wiLCBlLmcuIHRoZSB1cC9kb3duIGJ1dHRvbnMgb24gYW4gPGlucHV0IHR5cGU9XCJudW1iZXJcIj4uIEFub255bW91c1xuICAvLyBkaXZzIGRvIG5vdCBzZWVtIHRvIGV4cG9zZSBwcm9wZXJ0aWVzLCB0cmlnZ2VyaW5nIGEgXCJQZXJtaXNzaW9uIGRlbmllZFxuICAvLyBlcnJvclwiIGlmIGFueSBvZiBpdHMgcHJvcGVydGllcyBhcmUgYWNjZXNzZWQuIFRoZSBvbmx5IHNlZW1pbmdseSBwb3NzaWJsZVxuICAvLyB3YXkgdG8gYXZvaWQgZXJyb3JpbmcgaXMgdG8gYWNjZXNzIGEgcHJvcGVydHkgdGhhdCB0eXBpY2FsbHkgd29ya3MgZm9yXG4gIC8vIG5vbi1hbm9ueW1vdXMgZGl2cyBhbmQgY2F0Y2ggYW55IGVycm9yIHRoYXQgbWF5IG90aGVyd2lzZSBhcmlzZS4gU2VlXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICBjdXJyZW50UmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuXG4gIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblxuICB2YXIgdGVtcFJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgdGVtcFJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgdGVtcFJhbmdlLnNldEVuZChjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIsIGN1cnJlbnRSYW5nZS5zdGFydE9mZnNldCk7XG5cbiAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQodGVtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsIHRlbXBSYW5nZS5lbmRDb250YWluZXIsIHRlbXBSYW5nZS5lbmRPZmZzZXQpO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAodHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlW2dldFRleHRDb250ZW50QWNjZXNzb3IoKV0ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gdHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJyA/IHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnRNYXJrZXIubm9kZSwgc3RhcnRNYXJrZXIub2Zmc2V0KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciB1c2VJRU9mZnNldHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ3NlbGVjdGlvbicgaW4gZG9jdW1lbnQgJiYgISgnZ2V0U2VsZWN0aW9uJyBpbiB3aW5kb3cpO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICovXG4gIGdldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IGdldElFT2Zmc2V0cyA6IGdldE1vZGVybk9mZnNldHMsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb2Zmc2V0c1xuICAgKi9cbiAgc2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gc2V0SUVPZmZzZXRzIDogc2V0TW9kZXJuT2Zmc2V0c1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdGlvbjtcbn0se1wiLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XCI6MjgyLFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6MjgzLFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMH1dLDIxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01TZXJ2ZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEluamVjdGlvbicpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIFJlYWN0RE9NU2VydmVyID0ge1xuICByZW5kZXJUb1N0cmluZzogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiBSZWFjdFNlcnZlclJlbmRlcmluZy5yZW5kZXJUb1N0YXRpY01hcmt1cCxcbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VydmVyO1xufSx7XCIuL1JlYWN0RGVmYXVsdEluamVjdGlvblwiOjIxNixcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcIjoyNDcsXCIuL1JlYWN0VmVyc2lvblwiOjI1MX1dLDIxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTUNoaWxkcmVuT3BlcmF0aW9ucycpO1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IHJlcXVpcmUoJy4vc2V0VGV4dENvbnRlbnQnKTtcbnZhciB2YWxpZGF0ZURPTU5lc3RpbmcgPSByZXF1aXJlKCcuL3ZhbGlkYXRlRE9NTmVzdGluZycpO1xuXG4vKipcbiAqIFRleHQgbm9kZXMgdmlvbGF0ZSBhIGNvdXBsZSBhc3N1bXB0aW9ucyB0aGF0IFJlYWN0IG1ha2VzIGFib3V0IGNvbXBvbmVudHM6XG4gKlxuICogIC0gV2hlbiBtb3VudGluZyB0ZXh0IGludG8gdGhlIERPTSwgYWRqYWNlbnQgdGV4dCBub2RlcyBhcmUgbWVyZ2VkLlxuICogIC0gVGV4dCBub2RlcyBjYW5ub3QgYmUgYXNzaWduZWQgYSBSZWFjdCByb290IElELlxuICpcbiAqIFRoaXMgY29tcG9uZW50IGlzIHVzZWQgdG8gd3JhcCBzdHJpbmdzIGluIGVsZW1lbnRzIHNvIHRoYXQgdGhleSBjYW4gdW5kZXJnb1xuICogdGhlIHNhbWUgcmVjb25jaWxpYXRpb24gdGhhdCBpcyBhcHBsaWVkIHRvIGVsZW1lbnRzLlxuICpcbiAqIFRPRE86IEludmVzdGlnYXRlIHJlcHJlc2VudGluZyBSZWFjdCBjb21wb25lbnRzIGluIHRoZSBET00gd2l0aCB0ZXh0IG5vZGVzLlxuICpcbiAqIEBjbGFzcyBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0Q29tcG9uZW50XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAvLyBUaGlzIGNvbnN0cnVjdG9yIGFuZCBpdHMgYXJndW1lbnQgaXMgY3VycmVudGx5IHVzZWQgYnkgbW9ja3MuXG59O1xuXG5hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0VGV4dH0gdGV4dFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIHJlYWxseSBhIFJlYWN0VGV4dCAoUmVhY3ROb2RlKSwgbm90IGEgUmVhY3RFbGVtZW50XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG5cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuICAgKiBhbnkgZmVhdHVyZXMgYmVzaWRlcyBjb250YWluaW5nIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbnRleHRbdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXldKSB7XG4gICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZygnc3BhbicsIG51bGwsIGNvbnRleHRbdmFsaWRhdGVET01OZXN0aW5nLmFuY2VzdG9ySW5mb0NvbnRleHRLZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9yb290Tm9kZUlEID0gcm9vdElEO1xuICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXJEb2N1bWVudCA9IGNvbnRleHRbUmVhY3RNb3VudC5vd25lckRvY3VtZW50Q29udGV4dEtleV07XG4gICAgICB2YXIgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRBdHRyaWJ1dGVGb3JJRChlbCwgcm9vdElEKTtcbiAgICAgIC8vIFBvcHVsYXRlIG5vZGUgY2FjaGVcbiAgICAgIFJlYWN0TW91bnQuZ2V0SUQoZWwpO1xuICAgICAgc2V0VGV4dENvbnRlbnQoZWwsIHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgcmV0dXJuIGVsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXNjYXBlZFRleHQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGhpcy5fc3RyaW5nVGV4dCk7XG5cbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgICAgLy8gc2luY2UgdGhpcyBpcyBhIHNpdHVhdGlvbiB3aGVyZSBSZWFjdCB3b24ndCB0YWtlIG92ZXIgKHN0YXRpYyBwYWdlcyksXG4gICAgICAgIC8vIHdlIGNhbiBzaW1wbHkgcmV0dXJuIHRoZSB0ZXh0IGFzIGl0IGlzLlxuICAgICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnPHNwYW4gJyArIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRChyb290SUQpICsgJz4nICsgZXNjYXBlZFRleHQgKyAnPC9zcGFuPic7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RUZXh0fSBuZXh0VGV4dCBUaGUgbmV4dCB0ZXh0IGNvbnRlbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0VGV4dCwgdHJhbnNhY3Rpb24pIHtcbiAgICBpZiAobmV4dFRleHQgIT09IHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRUZXh0O1xuICAgICAgdmFyIG5leHRTdHJpbmdUZXh0ID0gJycgKyBuZXh0VGV4dDtcbiAgICAgIGlmIChuZXh0U3RyaW5nVGV4dCAhPT0gdGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICAvLyBUT0RPOiBTYXZlIHRoaXMgYXMgcGVuZGluZyBwcm9wcyBhbmQgdXNlIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeVxuICAgICAgICAvLyBhbmQvb3IgdXBkYXRlQ29tcG9uZW50IHRvIGRvIHRoZSBhY3R1YWwgdXBkYXRlIGZvciBjb25zaXN0ZW5jeSB3aXRoXG4gICAgICAgIC8vIG90aGVyIGNvbXBvbmVudCB0eXBlcz9cbiAgICAgICAgdGhpcy5fc3RyaW5nVGV4dCA9IG5leHRTdHJpbmdUZXh0O1xuICAgICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnVwZGF0ZVRleHRDb250ZW50KG5vZGUsIG5leHRTdHJpbmdUZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnNcIjoxNzUsXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiOjE3NyxcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcIjoxOTgsXCIuL1JlYWN0TW91bnRcIjoyMzIsXCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOjI3MyxcIi4vc2V0VGV4dENvbnRlbnRcIjoyOTEsXCIuL3ZhbGlkYXRlRE9NTmVzdGluZ1wiOjI5NCxcIl9wcm9jZXNzXCI6MTE0fV0sMjE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0YXJlYVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RET01JRE9wZXJhdGlvbnMnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSB7XG4gIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICAhKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC5cbiAgICB2YXIgbmF0aXZlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjaGlsZHJlbjogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyBjaGlsZHJlbjtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJztcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAvLyBXZSBzYXZlIHRoZSBpbml0aWFsIHZhbHVlIHNvIHRoYXQgYFJlYWN0RE9NQ29tcG9uZW50YCBkb2Vzbid0IHVwZGF0ZVxuICAgICAgLy8gYHRleHRDb250ZW50YCAodW5uZWNlc3Nhcnkgc2luY2Ugd2UgdXBkYXRlIHZhbHVlKS5cbiAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuICAgICAgLy8gZm9yY2VkIHRvIGJlIGEgc3RyaW5nLlxuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KVxuICAgIH07XG4gIH0sXG5cbiAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIFJlYWN0RE9NSURPcGVyYXRpb25zLnVwZGF0ZVByb3BlcnR5QnlJRChpbnN0Ll9yb290Tm9kZUlELCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dGFyZWE7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9MaW5rZWRWYWx1ZVV0aWxzXCI6MTg4LFwiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiOjIwNyxcIi4vUmVhY3RVcGRhdGVzXCI6MjUwLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xuXG52YXIgUkVTRVRfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbiAgfVxufTtcblxudmFyIEZMVVNIX0JBVENIRURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgY2xvc2U6IFJlYWN0VXBkYXRlcy5mbHVzaEJhdGNoZWRVcGRhdGVzLmJpbmQoUmVhY3RVcGRhdGVzKVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW0ZMVVNIX0JBVENIRURfVVBEQVRFUywgUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtcblxuZnVuY3Rpb24gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG59XG5cbmFzc2lnbihSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9XG59KTtcblxudmFyIHRyYW5zYWN0aW9uID0gbmV3IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpO1xuXG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHtcbiAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBpbiBhIGNvbnRleHQgd2l0aGluIHdoaWNoIGNhbGxzIHRvIGBzZXRTdGF0ZWBcbiAgICogYW5kIGZyaWVuZHMgYXJlIGJhdGNoZWQgc3VjaCB0aGF0IGNvbXBvbmVudHMgYXJlbid0IHVwZGF0ZWQgdW5uZWNlc3NhcmlseS5cbiAgICovXG4gIGJhdGNoZWRVcGRhdGVzOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpIHtcbiAgICB2YXIgYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM7XG5cbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBjb2RlIGlzIHdyaXR0ZW4gdGhpcyB3YXkgdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnNcbiAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgY2FsbGJhY2soYSwgYiwgYywgZCwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIsIGMsIGQsIGUpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0VXBkYXRlc1wiOjI1MCxcIi4vVHJhbnNhY3Rpb25cIjoyNjcsXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCI6MjZ9XSwyMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRJbmplY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luJyk7XG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0NoYW5nZUV2ZW50UGx1Z2luJyk7XG52YXIgQ2xpZW50UmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL0NsaWVudFJlYWN0Um9vdEluZGV4Jyk7XG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSByZXF1aXJlKCcuL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyJyk7XG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0gcmVxdWlyZSgnLi9FbnRlckxlYXZlRXZlbnRQbHVnaW4nKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZSgnLi9IVE1MRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoJy4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4nKTtcbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRDb21wb25lbnQnKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL1JlYWN0RXZlbnRMaXN0ZW5lcicpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluamVjdGlvbicpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlSGFuZGxlcycpO1xudmFyIFJlYWN0TW91bnQgPSByZXF1aXJlKCcuL1JlYWN0TW91bnQnKTtcbnZhciBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uJyk7XG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL1NlbGVjdEV2ZW50UGx1Z2luJyk7XG52YXIgU2VydmVyUmVhY3RSb290SW5kZXggPSByZXF1aXJlKCcuL1NlcnZlclJlYWN0Um9vdEluZGV4Jyk7XG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL1NpbXBsZUV2ZW50UGx1Z2luJyk7XG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKCcuL1NWR0RPTVByb3BlcnR5Q29uZmlnJyk7XG5cbnZhciBhbHJlYWR5SW5qZWN0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaW5qZWN0KCkge1xuICBpZiAoYWxyZWFkeUluamVjdGVkKSB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyBjdXJyZW50bHkgdHJ1ZSBiZWNhdXNlIHRoZXNlIGluamVjdGlvbnMgYXJlIHNoYXJlZCBiZXR3ZWVuXG4gICAgLy8gdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlciBwYWNrYWdlLiBUaGV5IHNob3VsZCBiZSBidWlsdCBpbmRlcGVuZGVudGx5XG4gICAgLy8gYW5kIG5vdCBzaGFyZSBhbnkgaW5qZWN0aW9uIHN0YXRlLiBUaGVuIHRoaXMgcHJvYmxlbSB3aWxsIGJlIHNvbHZlZC5cbiAgICByZXR1cm47XG4gIH1cbiAgYWxyZWFkeUluamVjdGVkID0gdHJ1ZTtcblxuICBSZWFjdEluamVjdGlvbi5FdmVudEVtaXR0ZXIuaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyKFJlYWN0RXZlbnRMaXN0ZW5lcik7XG5cbiAgLyoqXG4gICAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcik7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEluc3RhbmNlSGFuZGxlKFJlYWN0SW5zdGFuY2VIYW5kbGVzKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0TW91bnQoUmVhY3RNb3VudCk7XG5cbiAgLyoqXG4gICAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICAgKiB0aGVtKS5cbiAgICovXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFJlYWN0RE9NQ29tcG9uZW50KTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFJlYWN0RE9NVGV4dENvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uQ2xhc3MuaW5qZWN0TWl4aW4oUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4pO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKEhUTUxET01Qcm9wZXJ0eUNvbmZpZyk7XG4gIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKFNWR0RPTVByb3BlcnR5Q29uZmlnKTtcblxuICBSZWFjdEluamVjdGlvbi5FbXB0eUNvbXBvbmVudC5pbmplY3RFbXB0eUNvbXBvbmVudCgnbm9zY3JpcHQnKTtcblxuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uUm9vdEluZGV4LmluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4KEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IENsaWVudFJlYWN0Um9vdEluZGV4LmNyZWF0ZVJlYWN0Um9vdEluZGV4IDogU2VydmVyUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkNvbXBvbmVudC5pbmplY3RFbnZpcm9ubWVudChSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgdXJsID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICcnO1xuICAgIGlmICgvWz8mXXJlYWN0X3BlcmZcXGIvLnRlc3QodXJsKSkge1xuICAgICAgdmFyIFJlYWN0RGVmYXVsdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdFBlcmYnKTtcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmYuc3RhcnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluamVjdDogaW5qZWN0XG59O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiOjE2OSxcIi4vQ2hhbmdlRXZlbnRQbHVnaW5cIjoxNzMsXCIuL0NsaWVudFJlYWN0Um9vdEluZGV4XCI6MTc0LFwiLi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlclwiOjE3OSxcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCI6MTgwLFwiLi9IVE1MRE9NUHJvcGVydHlDb25maWdcIjoxODcsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6MTkyLFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiOjE5OCxcIi4vUmVhY3RET01Db21wb25lbnRcIjoyMDQsXCIuL1JlYWN0RE9NVGV4dENvbXBvbmVudFwiOjIxMyxcIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVwiOjIxNSxcIi4vUmVhY3REZWZhdWx0UGVyZlwiOjIxNyxcIi4vUmVhY3RFdmVudExpc3RlbmVyXCI6MjI1LFwiLi9SZWFjdEluamVjdGlvblwiOjIyNixcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMjgsXCIuL1JlYWN0TW91bnRcIjoyMzIsXCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cIjoyNDIsXCIuL1NWR0RPTVByb3BlcnR5Q29uZmlnXCI6MjUyLFwiLi9TZWxlY3RFdmVudFBsdWdpblwiOjI1MyxcIi4vU2VydmVyUmVhY3RSb290SW5kZXhcIjoyNTQsXCIuL1NpbXBsZUV2ZW50UGx1Z2luXCI6MjU1LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjIwfV0sMjE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyA9IHJlcXVpcmUoJy4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoJy4vUmVhY3RQZXJmJyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG5cbmZ1bmN0aW9uIHJvdW5kRmxvYXQodmFsKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHZhbCAqIDEwMCkgLyAxMDA7XG59XG5cbmZ1bmN0aW9uIGFkZFZhbHVlKG9iaiwga2V5LCB2YWwpIHtcbiAgb2JqW2tleV0gPSAob2JqW2tleV0gfHwgMCkgKyB2YWw7XG59XG5cbnZhciBSZWFjdERlZmF1bHRQZXJmID0ge1xuICBfYWxsTWVhc3VyZW1lbnRzOiBbXSwgLy8gbGFzdCBpdGVtIGluIHRoZSBsaXN0IGlzIHRoZSBjdXJyZW50IG9uZVxuICBfbW91bnRTdGFjazogWzBdLFxuICBfaW5qZWN0ZWQ6IGZhbHNlLFxuXG4gIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFSZWFjdERlZmF1bHRQZXJmLl9pbmplY3RlZCkge1xuICAgICAgUmVhY3RQZXJmLmluamVjdGlvbi5pbmplY3RNZWFzdXJlKFJlYWN0RGVmYXVsdFBlcmYubWVhc3VyZSk7XG4gICAgfVxuXG4gICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSB0cnVlO1xuICB9LFxuXG4gIHN0b3A6IGZ1bmN0aW9uICgpIHtcbiAgICBSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSA9IGZhbHNlO1xuICB9LFxuXG4gIGdldExhc3RNZWFzdXJlbWVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICB9LFxuXG4gIHByaW50RXhjbHVzaXZlOiBmdW5jdGlvbiAobWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ0NvbXBvbmVudCBjbGFzcyBuYW1lJzogaXRlbS5jb21wb25lbnROYW1lLFxuICAgICAgICAnVG90YWwgaW5jbHVzaXZlIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5pbmNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIG1vdW50IHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5leGNsdXNpdmUpLFxuICAgICAgICAnRXhjbHVzaXZlIHJlbmRlciB0aW1lIChtcyknOiByb3VuZEZsb2F0KGl0ZW0ucmVuZGVyKSxcbiAgICAgICAgJ01vdW50IHRpbWUgcGVyIGluc3RhbmNlIChtcyknOiByb3VuZEZsb2F0KGl0ZW0uZXhjbHVzaXZlIC8gaXRlbS5jb3VudCksXG4gICAgICAgICdSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIgLyBpdGVtLmNvdW50KSxcbiAgICAgICAgJ0luc3RhbmNlcyc6IGl0ZW0uY291bnRcbiAgICAgIH07XG4gICAgfSkpO1xuICAgIC8vIFRPRE86IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRUb3RhbFRpbWUoKSBkb2VzIG5vdCByZXR1cm4gdGhlIGNvcnJlY3RcbiAgICAvLyBudW1iZXIuXG4gIH0sXG5cbiAgcHJpbnRJbmNsdXNpdmU6IGZ1bmN0aW9uIChtZWFzdXJlbWVudHMpIHtcbiAgICBtZWFzdXJlbWVudHMgPSBtZWFzdXJlbWVudHMgfHwgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzO1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzKTtcbiAgICBjb25zb2xlLnRhYmxlKHN1bW1hcnkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdJbmNsdXNpdmUgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnRpbWUpLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgY29uc29sZS5sb2coJ1RvdGFsIHRpbWU6JywgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJyk7XG4gIH0sXG5cbiAgZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcDogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldEluY2x1c2l2ZVN1bW1hcnkobWVhc3VyZW1lbnRzLCB0cnVlKTtcbiAgICByZXR1cm4gc3VtbWFyeS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICdPd25lciA+IGNvbXBvbmVudCc6IGl0ZW0uY29tcG9uZW50TmFtZSxcbiAgICAgICAgJ1dhc3RlZCB0aW1lIChtcyknOiBpdGVtLnRpbWUsXG4gICAgICAgICdJbnN0YW5jZXMnOiBpdGVtLmNvdW50XG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIHByaW50V2FzdGVkOiBmdW5jdGlvbiAobWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICBjb25zb2xlLnRhYmxlKFJlYWN0RGVmYXVsdFBlcmYuZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcChtZWFzdXJlbWVudHMpKTtcbiAgICBjb25zb2xlLmxvZygnVG90YWwgdGltZTonLCBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnKTtcbiAgfSxcblxuICBwcmludERPTTogZnVuY3Rpb24gKG1lYXN1cmVtZW50cykge1xuICAgIG1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cyB8fCBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHM7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpO1xuICAgIGNvbnNvbGUudGFibGUoc3VtbWFyeS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIHJlc3VsdFtET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRV0gPSBpdGVtLmlkO1xuICAgICAgcmVzdWx0LnR5cGUgPSBpdGVtLnR5cGU7XG4gICAgICByZXN1bHQuYXJncyA9IEpTT04uc3RyaW5naWZ5KGl0ZW0uYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pKTtcbiAgICBjb25zb2xlLmxvZygnVG90YWwgdGltZTonLCBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnKTtcbiAgfSxcblxuICBfcmVjb3JkV3JpdGU6IGZ1bmN0aW9uIChpZCwgZm5OYW1lLCB0b3RhbFRpbWUsIGFyZ3MpIHtcbiAgICAvLyBUT0RPOiB0b3RhbFRpbWUgaXNuJ3QgdGhhdCB1c2VmdWwgc2luY2UgaXQgZG9lc24ndCBjb3VudCBwYWludHMvcmVmbG93c1xuICAgIHZhciB3cml0ZXMgPSBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdLndyaXRlcztcbiAgICB3cml0ZXNbaWRdID0gd3JpdGVzW2lkXSB8fCBbXTtcbiAgICB3cml0ZXNbaWRdLnB1c2goe1xuICAgICAgdHlwZTogZm5OYW1lLFxuICAgICAgdGltZTogdG90YWxUaW1lLFxuICAgICAgYXJnczogYXJnc1xuICAgIH0pO1xuICB9LFxuXG4gIG1lYXN1cmU6IGZ1bmN0aW9uIChtb2R1bGVOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvdGFsVGltZTtcbiAgICAgIHZhciBydjtcbiAgICAgIHZhciBzdGFydDtcblxuICAgICAgaWYgKGZuTmFtZSA9PT0gJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyB8fCBmbk5hbWUgPT09ICdmbHVzaEJhdGNoZWRVcGRhdGVzJykge1xuICAgICAgICAvLyBBIFwibWVhc3VyZW1lbnRcIiBpcyBhIHNldCBvZiBtZXRyaWNzIHJlY29yZGVkIGZvciBlYWNoIGZsdXNoLiBXZSB3YW50XG4gICAgICAgIC8vIHRvIGdyb3VwIHRoZSBtZXRyaWNzIGZvciBhIGdpdmVuIGZsdXNoIHRvZ2V0aGVyIHNvIHdlIGNhbiBsb29rIGF0IHRoZVxuICAgICAgICAvLyBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgYW5kIHRoZSBET00gb3BlcmF0aW9ucyB0aGF0IGFjdHVhbGx5XG4gICAgICAgIC8vIGhhcHBlbmVkIHRvIGRldGVybWluZSB0aGUgYW1vdW50IG9mIFwid2FzdGVkIHdvcmtcIiBwZXJmb3JtZWQuXG4gICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICBleGNsdXNpdmU6IHt9LFxuICAgICAgICAgIGluY2x1c2l2ZToge30sXG4gICAgICAgICAgcmVuZGVyOiB7fSxcbiAgICAgICAgICBjb3VudHM6IHt9LFxuICAgICAgICAgIHdyaXRlczoge30sXG4gICAgICAgICAgZGlzcGxheU5hbWVzOiB7fSxcbiAgICAgICAgICB0b3RhbFRpbWU6IDAsXG4gICAgICAgICAgY3JlYXRlZDoge31cbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHNbUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCAtIDFdLnRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdfbW91bnRJbWFnZUludG9Ob2RlJyB8fCBtb2R1bGVOYW1lID09PSAnUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyJyB8fCBtb2R1bGVOYW1lID09PSAnUmVhY3RET01JRE9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdDU1NQcm9wZXJ0eU9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdET01DaGlsZHJlbk9wZXJhdGlvbnMnIHx8IG1vZHVsZU5hbWUgPT09ICdET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKSB7XG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGZuTmFtZSA9PT0gJ19tb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICAgICAgdmFyIHdyaXRlQXJncyA9IHt9O1xuICAgICAgICAgICAgaWYgKHVwZGF0ZS5mcm9tSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLmZyb21JbmRleCA9IHVwZGF0ZS5mcm9tSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLnRvSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLnRvSW5kZXggPSB1cGRhdGUudG9JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudGV4dENvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgd3JpdGVBcmdzLnRleHRDb250ZW50ID0gdXBkYXRlLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5tYXJrdXBJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MubWFya3VwID0gYXJnc1sxXVt1cGRhdGUubWFya3VwSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUodXBkYXRlLnBhcmVudElELCB1cGRhdGUudHlwZSwgdG90YWxUaW1lLCB3cml0ZUFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGJhc2ljIGZvcm1hdFxuICAgICAgICAgIHZhciBpZCA9IGFyZ3NbMF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlkID0gUmVhY3RNb3VudC5nZXRJRChhcmdzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoaWQsIGZuTmFtZSwgdG90YWxUaW1lLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSBlbHNlIGlmIChtb2R1bGVOYW1lID09PSAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnICYmIChmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgfHwgZm5OYW1lID09PSAndXBkYXRlQ29tcG9uZW50JyB8fCAvLyBUT0RPOiByZWNlaXZlQ29tcG9uZW50KCk/XG4gICAgICBmbk5hbWUgPT09ICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JykpIHtcblxuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSA9PT0gUmVhY3RNb3VudC5Ub3BMZXZlbFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb290Tm9kZUlEID0gZm5OYW1lID09PSAnbW91bnRDb21wb25lbnQnID8gYXJnc1swXSA6IHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHZhciBpc1JlbmRlciA9IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnO1xuICAgICAgICB2YXIgaXNNb3VudCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JztcblxuICAgICAgICB2YXIgbW91bnRTdGFjayA9IFJlYWN0RGVmYXVsdFBlcmYuX21vdW50U3RhY2s7XG4gICAgICAgIHZhciBlbnRyeSA9IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50c1tSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuY291bnRzLCByb290Tm9kZUlELCAxKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01vdW50KSB7XG4gICAgICAgICAgZW50cnkuY3JlYXRlZFtyb290Tm9kZUlEXSA9IHRydWU7XG4gICAgICAgICAgbW91bnRTdGFjay5wdXNoKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICBydiA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHRvdGFsVGltZSA9IHBlcmZvcm1hbmNlTm93KCkgLSBzdGFydDtcblxuICAgICAgICBpZiAoaXNSZW5kZXIpIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5yZW5kZXIsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIHZhciBzdWJNb3VudFRpbWUgPSBtb3VudFN0YWNrLnBvcCgpO1xuICAgICAgICAgIG1vdW50U3RhY2tbbW91bnRTdGFjay5sZW5ndGggLSAxXSArPSB0b3RhbFRpbWU7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuZXhjbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUgLSBzdWJNb3VudFRpbWUpO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmluY2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbnRyeS5kaXNwbGF5TmFtZXNbcm9vdE5vZGVJRF0gPSB7XG4gICAgICAgICAgY3VycmVudDogdGhpcy5nZXROYW1lKCksXG4gICAgICAgICAgb3duZXI6IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lciA/IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgOiAnPHJvb3Q+J1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZjtcbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjE3NixcIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXCI6MjE4LFwiLi9SZWFjdE1vdW50XCI6MjMyLFwiLi9SZWFjdFBlcmZcIjoyMzgsXCJmYmpzL2xpYi9wZXJmb3JtYW5jZU5vd1wiOjQyfV0sMjE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcblxuLy8gRG9uJ3QgdHJ5IHRvIHNhdmUgdXNlcnMgbGVzcyB0aGFuIDEuMm1zIChhIG51bWJlciBJIG1hZGUgdXApXG52YXIgRE9OVF9DQVJFX1RIUkVTSE9MRCA9IDEuMjtcbnZhciBET01fT1BFUkFUSU9OX1RZUEVTID0ge1xuICAnX21vdW50SW1hZ2VJbnRvTm9kZSc6ICdzZXQgaW5uZXJIVE1MJyxcbiAgSU5TRVJUX01BUktVUDogJ3NldCBpbm5lckhUTUwnLFxuICBNT1ZFX0VYSVNUSU5HOiAnbW92ZScsXG4gIFJFTU9WRV9OT0RFOiAncmVtb3ZlJyxcbiAgU0VUX01BUktVUDogJ3NldCBpbm5lckhUTUwnLFxuICBURVhUX0NPTlRFTlQ6ICdzZXQgdGV4dENvbnRlbnQnLFxuICAnc2V0VmFsdWVGb3JQcm9wZXJ0eSc6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgJ3NldFZhbHVlRm9yQXR0cmlidXRlJzogJ3VwZGF0ZSBhdHRyaWJ1dGUnLFxuICAnZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eSc6ICdyZW1vdmUgYXR0cmlidXRlJyxcbiAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCc6ICdyZXBsYWNlJ1xufTtcblxuZnVuY3Rpb24gZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykge1xuICAvLyBUT0RPOiByZXR1cm4gbnVtYmVyIG9mIERPTSBvcHM/IGNvdWxkIGJlIG1pc2xlYWRpbmcuXG4gIC8vIFRPRE86IG1lYXN1cmUgZHJvcHBlZCBmcmFtZXMgYWZ0ZXIgcmVjb25jaWxlP1xuICAvLyBUT0RPOiBsb2cgdG90YWwgdGltZSBvZiBlYWNoIHJlY29uY2lsZSBhbmQgdGhlIHRvcC1sZXZlbCBjb21wb25lbnRcbiAgLy8gY2xhc3MgdGhhdCB0cmlnZ2VyZWQgaXQuXG4gIHZhciB0b3RhbFRpbWUgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1lYXN1cmVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB0b3RhbFRpbWUgKz0gbWVhc3VyZW1lbnQudG90YWxUaW1lO1xuICB9XG4gIHJldHVybiB0b3RhbFRpbWU7XG59XG5cbmZ1bmN0aW9uIGdldERPTVN1bW1hcnkobWVhc3VyZW1lbnRzKSB7XG4gIHZhciBpdGVtcyA9IFtdO1xuICBtZWFzdXJlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobWVhc3VyZW1lbnQpIHtcbiAgICBPYmplY3Qua2V5cyhtZWFzdXJlbWVudC53cml0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBtZWFzdXJlbWVudC53cml0ZXNbaWRdLmZvckVhY2goZnVuY3Rpb24gKHdyaXRlKSB7XG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICB0eXBlOiBET01fT1BFUkFUSU9OX1RZUEVTW3dyaXRlLnR5cGVdIHx8IHdyaXRlLnR5cGUsXG4gICAgICAgICAgYXJnczogd3JpdGUuYXJnc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuXG5mdW5jdGlvbiBnZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cykge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgZGlzcGxheU5hbWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbih7fSwgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLCBtZWFzdXJlbWVudC5pbmNsdXNpdmUpO1xuXG4gICAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgICBkaXNwbGF5TmFtZSA9IG1lYXN1cmVtZW50LmRpc3BsYXlOYW1lc1tpZF0uY3VycmVudDtcblxuICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0gPSBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSB8fCB7XG4gICAgICAgIGNvbXBvbmVudE5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgICBpbmNsdXNpdmU6IDAsXG4gICAgICAgIGV4Y2x1c2l2ZTogMCxcbiAgICAgICAgcmVuZGVyOiAwLFxuICAgICAgICBjb3VudDogMFxuICAgICAgfTtcbiAgICAgIGlmIChtZWFzdXJlbWVudC5yZW5kZXJbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLnJlbmRlciArPSBtZWFzdXJlbWVudC5yZW5kZXJbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmV4Y2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uZXhjbHVzaXZlICs9IG1lYXN1cmVtZW50LmV4Y2x1c2l2ZVtpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5pbmNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5jb3VudHNbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGRpc3BsYXlOYW1lIGluIGNhbmRpZGF0ZXMpIHtcbiAgICBpZiAoY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uZXhjbHVzaXZlID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdKTtcbiAgICB9XG4gIH1cblxuICBhcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmV4Y2x1c2l2ZSAtIGEuZXhjbHVzaXZlO1xuICB9KTtcblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBnZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cywgb25seUNsZWFuKSB7XG4gIHZhciBjYW5kaWRhdGVzID0ge307XG4gIHZhciBpbmNsdXNpdmVLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWFzdXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbaV07XG4gICAgdmFyIGFsbElEcyA9IGFzc2lnbih7fSwgbWVhc3VyZW1lbnQuZXhjbHVzaXZlLCBtZWFzdXJlbWVudC5pbmNsdXNpdmUpO1xuICAgIHZhciBjbGVhbkNvbXBvbmVudHM7XG5cbiAgICBpZiAob25seUNsZWFuKSB7XG4gICAgICBjbGVhbkNvbXBvbmVudHMgPSBnZXRVbmNoYW5nZWRDb21wb25lbnRzKG1lYXN1cmVtZW50KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGlmIChvbmx5Q2xlYW4gJiYgIWNsZWFuQ29tcG9uZW50c1tpZF0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IG1lYXN1cmVtZW50LmRpc3BsYXlOYW1lc1tpZF07XG5cbiAgICAgIC8vIEluY2x1c2l2ZSB0aW1lIGlzIG5vdCB1c2VmdWwgZm9yIG1hbnkgY29tcG9uZW50cyB3aXRob3V0IGtub3dpbmcgd2hlcmVcbiAgICAgIC8vIHRoZXkgYXJlIGluc3RhbnRpYXRlZC4gU28gd2UgYWdncmVnYXRlIGluY2x1c2l2ZSB0aW1lIHdpdGggYm90aCB0aGVcbiAgICAgIC8vIG93bmVyIGFuZCBjdXJyZW50IGRpc3BsYXlOYW1lIGFzIHRoZSBrZXkuXG4gICAgICBpbmNsdXNpdmVLZXkgPSBkaXNwbGF5TmFtZS5vd25lciArICcgPiAnICsgZGlzcGxheU5hbWUuY3VycmVudDtcblxuICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldID0gY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogaW5jbHVzaXZlS2V5LFxuICAgICAgICB0aW1lOiAwLFxuICAgICAgICBjb3VudDogMFxuICAgICAgfTtcblxuICAgICAgaWYgKG1lYXN1cmVtZW50LmluY2x1c2l2ZVtpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLnRpbWUgKz0gbWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5jb3VudHNbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS5jb3VudCArPSBtZWFzdXJlbWVudC5jb3VudHNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE5vdyBtYWtlIGEgc29ydGVkIGFycmF5IHdpdGggdGhlIHJlc3VsdHMuXG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yIChpbmNsdXNpdmVLZXkgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSA+PSBET05UX0NBUkVfVEhSRVNIT0xEKSB7XG4gICAgICBhcnIucHVzaChjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIudGltZSAtIGEudGltZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5jaGFuZ2VkQ29tcG9uZW50cyhtZWFzdXJlbWVudCkge1xuICAvLyBGb3IgYSBnaXZlbiByZWNvbmNpbGUsIGxvb2sgYXQgd2hpY2ggY29tcG9uZW50cyBkaWQgbm90IGFjdHVhbGx5XG4gIC8vIHJlbmRlciBhbnl0aGluZyB0byB0aGUgRE9NIGFuZCByZXR1cm4gYSBtYXBwaW5nIG9mIHRoZWlyIElEIHRvXG4gIC8vIHRoZSBhbW91bnQgb2YgdGltZSBpdCB0b29rIHRvIHJlbmRlciB0aGUgZW50aXJlIHN1YnRyZWUuXG4gIHZhciBjbGVhbkNvbXBvbmVudHMgPSB7fTtcbiAgdmFyIGRpcnR5TGVhZklEcyA9IE9iamVjdC5rZXlzKG1lYXN1cmVtZW50LndyaXRlcyk7XG4gIHZhciBhbGxJRHMgPSBhc3NpZ24oe30sIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSwgbWVhc3VyZW1lbnQuaW5jbHVzaXZlKTtcblxuICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICB2YXIgaXNEaXJ0eSA9IGZhbHNlO1xuICAgIC8vIEZvciBlYWNoIGNvbXBvbmVudCB0aGF0IHJlbmRlcmVkLCBzZWUgaWYgYSBjb21wb25lbnQgdGhhdCB0cmlnZ2VyZWRcbiAgICAvLyBhIERPTSBvcCBpcyBpbiBpdHMgc3VidHJlZS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnR5TGVhZklEcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRpcnR5TGVhZklEc1tpXS5pbmRleE9mKGlkKSA9PT0gMCkge1xuICAgICAgICBpc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGNoZWNrIGlmIGNvbXBvbmVudCBuZXdseSBjcmVhdGVkXG4gICAgaWYgKG1lYXN1cmVtZW50LmNyZWF0ZWRbaWRdKSB7XG4gICAgICBpc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFpc0RpcnR5ICYmIG1lYXN1cmVtZW50LmNvdW50c1tpZF0gPiAwKSB7XG4gICAgICBjbGVhbkNvbXBvbmVudHNbaWRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsZWFuQ29tcG9uZW50cztcbn1cblxudmFyIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyA9IHtcbiAgZ2V0RXhjbHVzaXZlU3VtbWFyeTogZ2V0RXhjbHVzaXZlU3VtbWFyeSxcbiAgZ2V0SW5jbHVzaXZlU3VtbWFyeTogZ2V0SW5jbHVzaXZlU3VtbWFyeSxcbiAgZ2V0RE9NU3VtbWFyeTogZ2V0RE9NU3VtbWFyeSxcbiAgZ2V0VG90YWxUaW1lOiBnZXRUb3RhbFRpbWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzO1xufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODl9XSwyMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVsZW1lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQgdHlwZS4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sWydmb3InXSAmJiBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgfHwgMHhlYWM3O1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcbiAgICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHlcbiAgfVxufVxuXG4vKipcbiAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBSZWFjdCBlbGVtZW50cy4gVGhpcyBpcyBvbmx5IHVzZWQgdG8gbWFrZSB0aGlzXG4gKiB3b3JrIHdpdGggYSBkeW5hbWljIGluc3RhbmNlb2YgY2hlY2suIE5vdGhpbmcgc2hvdWxkIGxpdmUgb24gdGhpcyBwcm90b3R5cGUuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gcHJvcHNcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICB2YXIgZWxlbWVudCA9IHtcbiAgICAvLyBUaGlzIHRhZyBhbGxvdyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgRWxlbWVudFxuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG5cbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG5cbiAgICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuICAgIF9vd25lcjogb3duZXJcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9O1xuXG4gICAgLy8gVG8gbWFrZSBjb21wYXJpbmcgUmVhY3RFbGVtZW50cyBlYXNpZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHdlIG1ha2VcbiAgICAvLyB0aGUgdmFsaWRhdGlvbiBmbGFnIG5vbi1lbnVtZXJhYmxlICh3aGVyZSBwb3NzaWJsZSwgd2hpY2ggc2hvdWxkXG4gICAgLy8gaW5jbHVkZSBldmVyeSBlbnZpcm9ubWVudCB3ZSBydW4gdGVzdHMgaW4pLCBzbyB0aGUgdGVzdCBmcmFtZXdvcmtcbiAgICAvLyBpZ25vcmVzIGl0LlxuICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc2VsZlxuICAgICAgfSk7XG4gICAgICAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgICAgLy8gZXF1YWwgZm9yIHRlc3RpbmcgcHVycG9zZXMgYW5kIHRoZXJlZm9yZSB3ZSBoaWRlIGl0IGZyb20gZW51bWVyYXRpb24uXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zb3VyY2UnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnQuX3NlbGYgPSBzZWxmO1xuICAgICAgZWxlbWVudC5fc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgIE9iamVjdC5mcmVlemUoZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG5cblJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIHByb3BzID0ge307XG5cbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciByZWYgPSBudWxsO1xuICB2YXIgc2VsZiA9IG51bGw7XG4gIHZhciBzb3VyY2UgPSBudWxsO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIHJlZiA9IGNvbmZpZy5yZWYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcucmVmO1xuICAgIGtleSA9IGNvbmZpZy5rZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGNvbmZpZy5rZXk7XG4gICAgc2VsZiA9IGNvbmZpZy5fX3NlbGYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zZWxmO1xuICAgIHNvdXJjZSA9IGNvbmZpZy5fX3NvdXJjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NvdXJjZTtcbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xufTtcblxuUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gIC8vIEV4cG9zZSB0aGUgdHlwZSBvbiB0aGUgZmFjdG9yeSBhbmQgdGhlIHByb3RvdHlwZSBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyBlYXNpbHkgYWNjZXNzZWQgb24gZWxlbWVudHMuIEUuZy4gYDxGb28gLz4udHlwZSA9PT0gRm9vYC5cbiAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuICAvLyB0aGF0IGNyZWF0ZWQgdGhlIGVsZW1lbnQsIGFuZCBpdCBtYXkgbm90IGV2ZW4gYmUgYSBjb25zdHJ1Y3Rvci5cbiAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gIGZhY3RvcnkudHlwZSA9IHR5cGU7XG4gIHJldHVybiBmYWN0b3J5O1xufTtcblxuUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleSA9IGZ1bmN0aW9uIChvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQob2xkRWxlbWVudC50eXBlLCBuZXdLZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBvbGRFbGVtZW50LnByb3BzKTtcblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn07XG5cblJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyA9IGZ1bmN0aW9uIChvbGRFbGVtZW50LCBuZXdQcm9wcykge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG9sZEVsZW1lbnQua2V5LCBvbGRFbGVtZW50LnJlZiwgb2xkRWxlbWVudC5fc2VsZiwgb2xkRWxlbWVudC5fc291cmNlLCBvbGRFbGVtZW50Ll9vd25lciwgbmV3UHJvcHMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gSWYgdGhlIGtleSBvbiB0aGUgb3JpZ2luYWwgaXMgdmFsaWQsIHRoZW4gdGhlIGNsb25lIGlzIHZhbGlkXG4gICAgbmV3RWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gb2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkO1xuICB9XG5cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcbiAgdmFyIHByb3BzID0gYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAvLyBTZWxmIGlzIHByZXNlcnZlZCBzaW5jZSB0aGUgb3duZXIgaXMgcHJlc2VydmVkLlxuICB2YXIgc2VsZiA9IGVsZW1lbnQuX3NlbGY7XG4gIC8vIFNvdXJjZSBpcyBwcmVzZXJ2ZWQgc2luY2UgY2xvbmVFbGVtZW50IGlzIHVubGlrZWx5IHRvIGJlIHRhcmdldGVkIGJ5IGFcbiAgLy8gdHJhbnNwaWxlciwgYW5kIHRoZSBvcmlnaW5hbCBzb3VyY2UgaXMgcHJvYmFibHkgYSBiZXR0ZXIgaW5kaWNhdG9yIG9mIHRoZVxuICAvLyB0cnVlIG93bmVyLlxuICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlO1xuXG4gIC8vIE93bmVyIHdpbGwgYmUgcHJlc2VydmVkLCB1bmxlc3MgcmVmIGlzIG92ZXJyaWRkZW5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gU2lsZW50bHkgc3RlYWwgdGhlIHJlZiBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIG92ZXJyaWRlIGV4aXN0aW5nIHByb3BzXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBjb21wb25lbnQuXG4gKiBAZmluYWxcbiAqL1xuUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOjIwMSxcIl9wcm9jZXNzXCI6MTE0fV0sMjIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50VmFsaWRhdG9yXG4gKi9cblxuLyoqXG4gKiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgcHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBhIGVsZW1lbnQgZmFjdG9yeVxuICogd2hpY2ggdmFsaWRhdGVzIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhlIGVsZW1lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG4gKiB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG5cbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcblxuICB2YXIgYWRkZW5kYSA9IGdldEFkZGVuZGFGb3JLZXlVc2UoJ3VuaXF1ZUtleScsIGVsZW1lbnQsIHBhcmVudFR5cGUpO1xuICBpZiAoYWRkZW5kYSA9PT0gbnVsbCkge1xuICAgIC8vIHdlIGFscmVhZHkgc2hvd2VkIHRoZSB3YXJuaW5nXG4gICAgcmV0dXJuO1xuICB9XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzJXMnLCBhZGRlbmRhLnBhcmVudE9yT3duZXIgfHwgJycsIGFkZGVuZGEuY2hpbGRPd25lciB8fCAnJywgYWRkZW5kYS51cmwgfHwgJycpIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFNoYXJlZCB3YXJuaW5nIGFuZCBtb25pdG9yaW5nIGNvZGUgZm9yIHRoZSBrZXkgd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVR5cGUgQSBrZXkgdXNlZCBmb3IgZGUtZHVwaW5nIHdhcm5pbmdzLlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKiBAcmV0dXJucyB7P29iamVjdH0gQSBzZXQgb2YgYWRkZW5kYSB0byB1c2UgaW4gdGhlIHdhcm5pbmcgbWVzc2FnZSwgb3IgbnVsbFxuICogaWYgdGhlIHdhcm5pbmcgaGFzIGFscmVhZHkgYmVlbiBzaG93biBiZWZvcmUgKGFuZCBzaG91bGRuJ3QgYmUgc2hvd24gYWdhaW4pLlxuICovXG5mdW5jdGlvbiBnZXRBZGRlbmRhRm9yS2V5VXNlKG1lc3NhZ2VUeXBlLCBlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICBpZiAoIWFkZGVuZHVtKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGFkZGVuZHVtID0gJyBDaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDwnICsgcGFyZW50TmFtZSArICc+Lic7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSA9IHt9KTtcbiAgaWYgKG1lbW9pemVyW2FkZGVuZHVtXSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIG1lbW9pemVyW2FkZGVuZHVtXSA9IHRydWU7XG5cbiAgdmFyIGFkZGVuZGEgPSB7XG4gICAgcGFyZW50T3JPd25lcjogYWRkZW5kdW0sXG4gICAgdXJsOiAnIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgIGNoaWxkT3duZXI6IG51bGxcbiAgfTtcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICBhZGRlbmRhLmNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBlbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLic7XG4gIH1cblxuICByZXR1cm4gYWRkZW5kYTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAvLyBFbnRyeSBpdGVyYXRvcnMgcHJvdmlkZSBpbXBsaWNpdCBrZXlzLlxuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSBwcm9wcyBhcmUgdmFsaWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BUeXBlcyBNYXAgb2YgcHJvcCBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICEodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSwgdHlwZW9mIGVycm9yKSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB2YXIgY29tcG9uZW50Q2xhc3MgPSBlbGVtZW50LnR5cGU7XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5hbWUgPSBjb21wb25lbnRDbGFzcy5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnRDbGFzcy5uYW1lO1xuICBpZiAoY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzKSB7XG4gICAgY2hlY2tQcm9wVHlwZXMobmFtZSwgY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICB9XG4gIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdW5kZWZpbmVkO1xuICB9XG59XG5cbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSB7XG5cbiAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciB2YWxpZFR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHZhbGlkVHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsLCB1bmRlZmluZWQsIGJvb2xlYW4sIG9yICcgKyAnbnVtYmVyLiBJdCBzaG91bGQgYmUgYSBzdHJpbmcgKGZvciBET00gZWxlbWVudHMpIG9yIGEgUmVhY3RDbGFzcyAnICsgJyhmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gICAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuICAgIGlmICh2YWxpZFR5cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICBjcmVhdGVGYWN0b3J5OiBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHkgKGVzNS1zaGltL3NoYW0gdG9vKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICB9LFxuXG4gIGNsb25lRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgfVxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoyMDEsXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjoyMzksXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoyNDAsXCIuL2dldEl0ZXJhdG9yRm5cIjoyODEsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMjIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVtcHR5Q29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeScpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcblxudmFyIHBsYWNlaG9sZGVyRWxlbWVudDtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIGluamVjdEVtcHR5Q29tcG9uZW50OiBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgcGxhY2Vob2xkZXJFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50KTtcbiAgfVxufTtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSBmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBudWxsO1xuICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0YW50aWF0ZShwbGFjZWhvbGRlckVsZW1lbnQpO1xufTtcbmFzc2lnbihSZWFjdEVtcHR5Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7fSxcbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5LnJlZ2lzdGVyTnVsbENvbXBvbmVudElEKHJvb3RJRCk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IHJvb3RJRDtcbiAgICByZXR1cm4gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgfSxcbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKCkge30sXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQpO1xuICAgIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeS5kZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgfVxufSk7XG5cblJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uID0gUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVtcHR5Q29tcG9uZW50O1xufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5XCI6MjIyLFwiLi9SZWFjdFJlY29uY2lsZXJcIjoyNDN9XSwyMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyByZWdpc3RyeSBrZWVwcyB0cmFjayBvZiB0aGUgUmVhY3QgSURzIG9mIHRoZSBjb21wb25lbnRzIHRoYXQgcmVuZGVyZWQgdG9cbi8vIGBudWxsYCAoaW4gcmVhbGl0eSBhIHBsYWNlaG9sZGVyIHN1Y2ggYXMgYG5vc2NyaXB0YClcbnZhciBudWxsQ29tcG9uZW50SURzUmVnaXN0cnkgPSB7fTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCB0byBudWxsLlxuICovXG5mdW5jdGlvbiBpc051bGxDb21wb25lbnRJRChpZCkge1xuICByZXR1cm4gISFudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdO1xufVxuXG4vKipcbiAqIE1hcmsgdGhlIGNvbXBvbmVudCBhcyBoYXZpbmcgcmVuZGVyZWQgdG8gbnVsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBDb21wb25lbnQncyBgX3Jvb3ROb2RlSURgLlxuICovXG5mdW5jdGlvbiByZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBudWxsQ29tcG9uZW50SURzUmVnaXN0cnlbaWRdID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBVbm1hcmsgdGhlIGNvbXBvbmVudCBhcyBoYXZpbmcgcmVuZGVyZWQgdG8gbnVsbDogaXQgcmVuZGVycyB0byBzb21ldGhpbmcgbm93LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQoaWQpIHtcbiAgZGVsZXRlIG51bGxDb21wb25lbnRJRHNSZWdpc3RyeVtpZF07XG59XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50UmVnaXN0cnkgPSB7XG4gIGlzTnVsbENvbXBvbmVudElEOiBpc051bGxDb21wb25lbnRJRCxcbiAgcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IHJlZ2lzdGVyTnVsbENvbXBvbmVudElELFxuICBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEOiBkZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeTtcbn0se31dLDIyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXJyb3JVdGlsc1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbi8qKlxuICogQ2FsbCBhIGZ1bmN0aW9uIHdoaWxlIGd1YXJkaW5nIGFnYWluc3QgZXJyb3JzIHRoYXQgaGFwcGVucyB3aXRoaW4gaXQuXG4gKlxuICogQHBhcmFtIHs/U3RyaW5nfSBuYW1lIG9mIHRoZSBndWFyZCB0byB1c2UgZm9yIGxvZ2dpbmcgb3IgZGVidWdnaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAqIEBwYXJhbSB7Kn0gYSBGaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIHsqfSBiIFNlY29uZCBhcmd1bWVudFxuICovXG5mdW5jdGlvbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgZnVuYywgYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBmdW5jKGEsIGIpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgaWYgKGNhdWdodEVycm9yID09PSBudWxsKSB7XG4gICAgICBjYXVnaHRFcnJvciA9IHg7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrOiBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssXG5cbiAgLyoqXG4gICAqIEludm9rZWQgYnkgUmVhY3RUZXN0VXRpbHMuU2ltdWxhdGUgc28gdGhhdCBhbnkgZXJyb3JzIHRocm93biBieSB0aGUgZXZlbnRcbiAgICogaGFuZGxlciBhcmUgc3VyZSB0byBiZSByZXRocm93biBieSByZXRocm93Q2F1Z2h0RXJyb3IuXG4gICAqL1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tXaXRoQ2F0Y2g6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogRHVyaW5nIGV4ZWN1dGlvbiBvZiBndWFyZGVkIGZ1bmN0aW9ucyB3ZSB3aWxsIGNhcHR1cmUgdGhlIGZpcnN0IGVycm9yIHdoaWNoXG4gICAqIHdlIHdpbGwgcmV0aHJvdyB0byBiZSBoYW5kbGVkIGJ5IHRoZSB0b3AgbGV2ZWwgZXJyb3IgaGFuZGxlci5cbiAgICovXG4gIHJldGhyb3dDYXVnaHRFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYXVnaHRFcnJvcikge1xuICAgICAgdmFyIGVycm9yID0gY2F1Z2h0RXJyb3I7XG4gICAgICBjYXVnaHRFcnJvciA9IG51bGw7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8qKlxuICAgKiBUbyBoZWxwIGRldmVsb3BtZW50IHdlIGNhbiBnZXQgYmV0dGVyIGRldnRvb2xzIGludGVncmF0aW9uIGJ5IHNpbXVsYXRpbmcgYVxuICAgKiByZWFsIGJyb3dzZXIgZXZlbnQuXG4gICAqL1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBmYWtlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3JlYWN0Jyk7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jLCBhLCBiKSB7XG4gICAgICB2YXIgYm91bmRGdW5jID0gZnVuYy5iaW5kKG51bGwsIGEsIGIpO1xuICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KG5hbWUpKTtcbiAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjExNH1dLDIyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFdmVudEVtaXR0ZXJNaXhpblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xuXG5mdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudHMpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZShmYWxzZSk7XG59XG5cbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge1xuXG4gIC8qKlxuICAgKiBTdHJlYW1zIGEgZmlyZWQgdG9wLWxldmVsIGV2ZW50IHRvIGBFdmVudFBsdWdpbkh1YmAgd2hlcmUgcGx1Z2lucyBoYXZlIHRoZVxuICAgKiBvcHBvcnR1bml0eSB0byBjcmVhdGUgYFJlYWN0RXZlbnRgcyB0byBiZSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgZW52aXJvbm1lbnQgZXZlbnQuXG4gICAqL1xuICBoYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBldmVudHMgPSBFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50RW1pdHRlck1peGluO1xufSx7XCIuL0V2ZW50UGx1Z2luSHViXCI6MTgyfV0sMjI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ2ZianMvbGliL0V2ZW50TGlzdGVuZXInKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcbnZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uJyk7XG5cbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgcGFyZW50IFJlYWN0IGNvbXBvbmVudCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIHsqfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9IFBhcmVudCBjb250YWluZXIsIG9yIGBudWxsYCBpZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5lc3RlZC5cbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudChub2RlKSB7XG4gIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG4gIC8vIHRyYXZlcnNhbCwgYnV0IGNhY2hpbmcgaXMgZGlmZmljdWx0IHRvIGRvIGNvcnJlY3RseSB3aXRob3V0IHVzaW5nIGFcbiAgLy8gbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbGlzdGVuIGZvciBhbGwgRE9NIGNoYW5nZXMuXG4gIHZhciBub2RlSUQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICB2YXIgcm9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKHJvb3RJRCk7XG4gIHZhciBwYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY29udGFpbmVyKTtcbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLy8gVXNlZCB0byBzdG9yZSBhbmNlc3RvciBoaWVyYXJjaHkgaW4gdG9wIGxldmVsIGNhbGxiYWNrXG5mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xufVxuYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudG9wTGV2ZWxUeXBlID0gbnVsbDtcbiAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuICB9XG59KTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsIFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxJbXBsKGJvb2tLZWVwaW5nKSB7XG4gIC8vIFRPRE86IFJlLWVuYWJsZSBldmVudC5wYXRoIGhhbmRsaW5nXG4gIC8vXG4gIC8vIGlmIChib29rS2VlcGluZy5uYXRpdmVFdmVudC5wYXRoICYmIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LnBhdGgubGVuZ3RoID4gMSkge1xuICAvLyAgIC8vIE5ldyBicm93c2VycyBoYXZlIGEgcGF0aCBhdHRyaWJ1dGUgb24gbmF0aXZlIGV2ZW50c1xuICAvLyAgIGhhbmRsZVRvcExldmVsV2l0aFBhdGgoYm9va0tlZXBpbmcpO1xuICAvLyB9IGVsc2Uge1xuICAvLyAgIC8vIExlZ2FjeSBicm93c2VycyBkb24ndCBoYXZlIGEgcGF0aCBhdHRyaWJ1dGUgb24gbmF0aXZlIGV2ZW50c1xuICAvLyAgIGhhbmRsZVRvcExldmVsV2l0aG91dFBhdGgoYm9va0tlZXBpbmcpO1xuICAvLyB9XG5cbiAgdm9pZCBoYW5kbGVUb3BMZXZlbFdpdGhQYXRoOyAvLyB0ZW1wb3JhcmlseSB1bnVzZWRcbiAgaGFuZGxlVG9wTGV2ZWxXaXRob3V0UGF0aChib29rS2VlcGluZyk7XG59XG5cbi8vIExlZ2FjeSBicm93c2VycyBkb24ndCBoYXZlIGEgcGF0aCBhdHRyaWJ1dGUgb24gbmF0aXZlIGV2ZW50c1xuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxXaXRob3V0UGF0aChib29rS2VlcGluZykge1xuICB2YXIgdG9wTGV2ZWxUYXJnZXQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oZ2V0RXZlbnRUYXJnZXQoYm9va0tlZXBpbmcubmF0aXZlRXZlbnQpKSB8fCB3aW5kb3c7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBoaWVyYXJjaHksIGluIGNhc2UgdGhlcmUncyBhbnkgbmVzdGVkIGNvbXBvbmVudHMuXG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYnVpbGQgdGhlIGFycmF5IG9mIGFuY2VzdG9ycyBiZWZvcmUgY2FsbGluZyBhbnlcbiAgLy8gZXZlbnQgaGFuZGxlcnMsIGJlY2F1c2UgZXZlbnQgaGFuZGxlcnMgY2FuIG1vZGlmeSB0aGUgRE9NLCBsZWFkaW5nIHRvXG4gIC8vIGluY29uc2lzdGVuY2llcyB3aXRoIFJlYWN0TW91bnQncyBub2RlIGNhY2hlLiBTZWUgIzExMDUuXG4gIHZhciBhbmNlc3RvciA9IHRvcExldmVsVGFyZ2V0O1xuICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChhbmNlc3Rvcik7XG4gICAgYW5jZXN0b3IgPSBmaW5kUGFyZW50KGFuY2VzdG9yKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYm9va0tlZXBpbmcuYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdG9wTGV2ZWxUYXJnZXQgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgdmFyIHRvcExldmVsVGFyZ2V0SUQgPSBSZWFjdE1vdW50LmdldElEKHRvcExldmVsVGFyZ2V0KSB8fCAnJztcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgdG9wTGV2ZWxUYXJnZXQsIHRvcExldmVsVGFyZ2V0SUQsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbi8vIE5ldyBicm93c2VycyBoYXZlIGEgcGF0aCBhdHRyaWJ1dGUgb24gbmF0aXZlIGV2ZW50c1xuZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxXaXRoUGF0aChib29rS2VlcGluZykge1xuICB2YXIgcGF0aCA9IGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LnBhdGg7XG4gIHZhciBjdXJyZW50TmF0aXZlVGFyZ2V0ID0gcGF0aFswXTtcbiAgdmFyIGV2ZW50c0ZpcmVkID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnRQYXRoRWxlbWVudCA9IHBhdGhbaV07XG4gICAgaWYgKGN1cnJlbnRQYXRoRWxlbWVudC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSB7XG4gICAgICBjdXJyZW50TmF0aXZlVGFyZ2V0ID0gcGF0aFtpICsgMV07XG4gICAgfVxuICAgIC8vIFRPRE86IHNsb3dcbiAgICB2YXIgcmVhY3RQYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY3VycmVudFBhdGhFbGVtZW50KTtcbiAgICBpZiAocmVhY3RQYXJlbnQgPT09IGN1cnJlbnRQYXRoRWxlbWVudCkge1xuICAgICAgdmFyIGN1cnJlbnRQYXRoRWxlbWVudElEID0gUmVhY3RNb3VudC5nZXRJRChjdXJyZW50UGF0aEVsZW1lbnQpO1xuICAgICAgdmFyIG5ld1Jvb3RJRCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChjdXJyZW50UGF0aEVsZW1lbnRJRCk7XG4gICAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChjdXJyZW50UGF0aEVsZW1lbnQpO1xuXG4gICAgICB2YXIgdG9wTGV2ZWxUYXJnZXRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY3VycmVudFBhdGhFbGVtZW50KSB8fCAnJztcbiAgICAgIGV2ZW50c0ZpcmVkKys7XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgY3VycmVudFBhdGhFbGVtZW50LCB0b3BMZXZlbFRhcmdldElELCBib29rS2VlcGluZy5uYXRpdmVFdmVudCwgY3VycmVudE5hdGl2ZVRhcmdldCk7XG5cbiAgICAgIC8vIEp1bXAgdG8gdGhlIHJvb3Qgb2YgdGhpcyBSZWFjdCByZW5kZXIgdHJlZVxuICAgICAgd2hpbGUgKGN1cnJlbnRQYXRoRWxlbWVudElEICE9PSBuZXdSb290SUQpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBjdXJyZW50UGF0aEVsZW1lbnQgPSBwYXRoW2ldO1xuICAgICAgICBjdXJyZW50UGF0aEVsZW1lbnRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY3VycmVudFBhdGhFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGV2ZW50c0ZpcmVkID09PSAwKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbChib29rS2VlcGluZy50b3BMZXZlbFR5cGUsIHdpbmRvdywgJycsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuICBjYihzY3JvbGxQb3NpdGlvbik7XG59XG5cbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gIF9lbmFibGVkOiB0cnVlLFxuICBfaGFuZGxlVG9wTGV2ZWw6IG51bGwsXG5cbiAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcblxuICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24gKGhhbmRsZVRvcExldmVsKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9oYW5kbGVUb3BMZXZlbCA9IGhhbmRsZVRvcExldmVsO1xuICB9LFxuXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkID0gISFlbmFibGVkO1xuICB9LFxuXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIHRvcC1sZXZlbCBldmVudHMgYnkgdXNpbmcgZXZlbnQgYnViYmxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBoYW5kbGUgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5saXN0ZW4oZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLCBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFwcyBhIHRvcC1sZXZlbCBldmVudCBieSB1c2luZyBldmVudCBjYXB0dXJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhbmRsZXJCYXNlTmFtZSBFdmVudCBuYW1lIChlLmcuIFwiY2xpY2tcIikuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBoYW5kbGUgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIuY2FwdHVyZShlbGVtZW50LCBoYW5kbGVyQmFzZU5hbWUsIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG4gIH0sXG5cbiAgbW9uaXRvclNjcm9sbFZhbHVlOiBmdW5jdGlvbiAocmVmcmVzaCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNjcm9sbFZhbHVlTW9uaXRvci5iaW5kKG51bGwsIHJlZnJlc2gpO1xuICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJvb2tLZWVwaW5nID0gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLmdldFBvb2xlZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICB0cnkge1xuICAgICAgLy8gRXZlbnQgcXVldWUgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBzYW1lIGN5Y2xlIGFsbG93c1xuICAgICAgLy8gYHByZXZlbnREZWZhdWx0YC5cbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhoYW5kbGVUb3BMZXZlbEltcGwsIGJvb2tLZWVwaW5nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnJlbGVhc2UoYm9va0tlZXBpbmcpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUG9vbGVkQ2xhc3NcIjoxOTAsXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCI6MjI4LFwiLi9SZWFjdE1vdW50XCI6MjMyLFwiLi9SZWFjdFVwZGF0ZXNcIjoyNTAsXCIuL2dldEV2ZW50VGFyZ2V0XCI6MjgwLFwiZmJqcy9saWIvRXZlbnRMaXN0ZW5lclwiOjE5LFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMCxcImZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uXCI6MzF9XSwyMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5qZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3ROYXRpdmVDb21wb25lbnQnKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZSgnLi9SZWFjdFJvb3RJbmRleCcpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBSZWFjdEluamVjdGlvbiA9IHtcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LmluamVjdGlvbixcbiAgQ2xhc3M6IFJlYWN0Q2xhc3MuaW5qZWN0aW9uLFxuICBET01Qcm9wZXJ0eTogRE9NUHJvcGVydHkuaW5qZWN0aW9uLFxuICBFbXB0eUNvbXBvbmVudDogUmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIEV2ZW50UGx1Z2luSHViOiBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24sXG4gIEV2ZW50RW1pdHRlcjogUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmluamVjdGlvbixcbiAgTmF0aXZlQ29tcG9uZW50OiBSZWFjdE5hdGl2ZUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIFBlcmY6IFJlYWN0UGVyZi5pbmplY3Rpb24sXG4gIFJvb3RJbmRleDogUmVhY3RSb290SW5kZXguaW5qZWN0aW9uLFxuICBVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5qZWN0aW9uO1xufSx7XCIuL0RPTVByb3BlcnR5XCI6MTc2LFwiLi9FdmVudFBsdWdpbkh1YlwiOjE4MixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6MTkzLFwiLi9SZWFjdENsYXNzXCI6MTk2LFwiLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50XCI6MTk5LFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCI6MjIxLFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiOjIzNSxcIi4vUmVhY3RQZXJmXCI6MjM4LFwiLi9SZWFjdFJvb3RJbmRleFwiOjI0NSxcIi4vUmVhY3RVcGRhdGVzXCI6MjUwfV0sMjI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdElucHV0U2VsZWN0aW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0aW9uJyk7XG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9jb250YWluc05vZGUnKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9mb2N1c05vZGUnKTtcbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCcpO1xuXG5mdW5jdGlvbiBpc0luRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gY29udGFpbnNOb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbm9kZSk7XG59XG5cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHtcblxuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgICBzZWxlY3Rpb25SYW5nZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZm9jdXNlZEVsZW0pID8gUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXN0b3JlU2VsZWN0aW9uOiBJZiBhbnkgc2VsZWN0aW9uIGluZm9ybWF0aW9uIHdhcyBwb3RlbnRpYWxseSBsb3N0LFxuICAgKiByZXN0b3JlIGl0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyB0aGF0IGNvdWxkIHJlbW92ZSBkb21cbiAgICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gICAqL1xuICByZXN0b3JlU2VsZWN0aW9uOiBmdW5jdGlvbiAocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJiBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAgICogLUBpbnB1dDogTG9vayB1cCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXRcbiAgICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gICAqL1xuICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiAoaW5wdXQubm9kZU5hbWUgJiYgaW5wdXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JykpIHtcbiAgICAgIC8vIElFOCBpbnB1dC5cbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHNlbGVjdGlvbiBwZXIgZG9jdW1lbnQgaW4gSUUsIHNvIGl0IG11c3RcbiAgICAgIC8vIGJlIGluIG91ciBlbGVtZW50LlxuICAgICAgaWYgKHJhbmdlLnBhcmVudEVsZW1lbnQoKSA9PT0gaW5wdXQpIHtcbiAgICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICAgIHN0YXJ0OiAtcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKSxcbiAgICAgICAgICBlbmQ6IC1yYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50IGVkaXRhYmxlIG9yIG9sZCBJRSB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IFJlYWN0RE9NU2VsZWN0aW9uLmdldE9mZnNldHMoaW5wdXQpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Rpb24gfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICAgKiB0aGUgaW5wdXQuXG4gICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAgICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICAgKi9cbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbiAoaW5wdXQsIG9mZnNldHMpIHtcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIHZhciBlbmQgPSBvZmZzZXRzLmVuZDtcbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgIH1cblxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIChpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSkge1xuICAgICAgdmFyIHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICAgICAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RE9NU2VsZWN0aW9uLnNldE9mZnNldHMoaW5wdXQsIG9mZnNldHMpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdElucHV0U2VsZWN0aW9uO1xufSx7XCIuL1JlYWN0RE9NU2VsZWN0aW9uXCI6MjExLFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCI6MjMsXCJmYmpzL2xpYi9mb2N1c05vZGVcIjoyOCxcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIjoyOX1dLDIyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5zdGFuY2VIYW5kbGVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZSgnLi9SZWFjdFJvb3RJbmRleCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU0VQQVJBVE9SX0xFTkdUSCA9IFNFUEFSQVRPUi5sZW5ndGg7XG5cbi8qKlxuICogTWF4aW11bSBkZXB0aCBvZiB0cmF2ZXJzYWxzIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgcG9zc2liaWxpdHkgb2YgYSBiYWQgSUQuXG4gKi9cbnZhciBNQVhfVFJFRV9ERVBUSCA9IDEwMDAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gSUQgcHJlZml4IHRvIHVzZSB3aGVuIG1vdW50aW5nIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVhY3Qgcm9vdCBJRC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCkge1xuICByZXR1cm4gU0VQQVJBVE9SICsgaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoYXJhY3RlciBpcyBhIHNlcGFyYXRvciBvciBlbmQgb2YgdGhlIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCb3VuZGFyeShpZCwgaW5kZXgpIHtcbiAgcmV0dXJuIGlkLmNoYXJBdChpbmRleCkgPT09IFNFUEFSQVRPUiB8fCBpbmRleCA9PT0gaWQubGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRCwgbWF5YmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcbiAgcmV0dXJuIGlkID09PSAnJyB8fCBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5jaGFyQXQoaWQubGVuZ3RoIC0gMSkgIT09IFNFUEFSQVRPUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGZpcnN0IElEIGlzIGFuIGFuY2VzdG9yIG9mIG9yIGVxdWFsIHRvIHRoZSBzZWNvbmQgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjZW5kYW50SURcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYGFuY2VzdG9ySURgIGlzIGFuIGFuY2VzdG9yIG9mIGBkZXNjZW5kYW50SURgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc2NlbmRhbnRJRCkge1xuICByZXR1cm4gZGVzY2VuZGFudElELmluZGV4T2YoYW5jZXN0b3JJRCkgPT09IDAgJiYgaXNCb3VuZGFyeShkZXNjZW5kYW50SUQsIGFuY2VzdG9ySUQubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgSUQgb2YgdGhlIHN1cHBsaWVkIFJlYWN0IERPTSBJRCwgYGlkYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgYSBjb21wb25lbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IElEIG9mIHRoZSBwYXJlbnQsIG9yIGFuIGVtcHR5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudElEKGlkKSB7XG4gIHJldHVybiBpZCA/IGlkLnN1YnN0cigwLCBpZC5sYXN0SW5kZXhPZihTRVBBUkFUT1IpKSA6ICcnO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5leHQgRE9NIElEIG9uIHRoZSB0cmVlIHBhdGggZnJvbSB0aGUgc3VwcGxpZWQgYGFuY2VzdG9ySURgIHRvIHRoZVxuICogc3VwcGxpZWQgYGRlc3RpbmF0aW9uSURgLiBJZiB0aGV5IGFyZSBlcXVhbCwgdGhlIElEIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNlc3RvcklEIElEIG9mIGFuIGFuY2VzdG9yIG5vZGUgb2YgYGRlc3RpbmF0aW9uSURgLlxuICogQHBhcmFtIHtzdHJpbmd9IGRlc3RpbmF0aW9uSUQgSUQgb2YgdGhlIGRlc3RpbmF0aW9uIG5vZGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5leHQgSUQgb24gdGhlIHBhdGggZnJvbSBgYW5jZXN0b3JJRGAgdG8gYGRlc3RpbmF0aW9uSURgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dERlc2NlbmRhbnRJRChhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSB7XG4gICEoaXNWYWxpZElEKGFuY2VzdG9ySUQpICYmIGlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0TmV4dERlc2NlbmRhbnRJRCglcywgJXMpOiBSZWNlaXZlZCBhbiBpbnZhbGlkIFJlYWN0IERPTSBJRC4nLCBhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICFpc0FuY2VzdG9ySURPZihhbmNlc3RvcklELCBkZXN0aW5hdGlvbklEKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROZXh0RGVzY2VuZGFudElEKC4uLik6IFJlYWN0IGhhcyBtYWRlIGFuIGludmFsaWQgYXNzdW1wdGlvbiBhYm91dCAnICsgJ3RoZSBET00gaGllcmFyY2h5LiBFeHBlY3RlZCBgJXNgIHRvIGJlIGFuIGFuY2VzdG9yIG9mIGAlc2AuJywgYW5jZXN0b3JJRCwgZGVzdGluYXRpb25JRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBpZiAoYW5jZXN0b3JJRCA9PT0gZGVzdGluYXRpb25JRCkge1xuICAgIHJldHVybiBhbmNlc3RvcklEO1xuICB9XG4gIC8vIFNraXAgb3ZlciB0aGUgYW5jZXN0b3IgYW5kIHRoZSBpbW1lZGlhdGUgc2VwYXJhdG9yLiBUcmF2ZXJzZSB1bnRpbCB3ZSBoaXRcbiAgLy8gYW5vdGhlciBzZXBhcmF0b3Igb3Igd2UgcmVhY2ggdGhlIGVuZCBvZiBgZGVzdGluYXRpb25JRGAuXG4gIHZhciBzdGFydCA9IGFuY2VzdG9ySUQubGVuZ3RoICsgU0VQQVJBVE9SX0xFTkdUSDtcbiAgdmFyIGk7XG4gIGZvciAoaSA9IHN0YXJ0OyBpIDwgZGVzdGluYXRpb25JRC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0JvdW5kYXJ5KGRlc3RpbmF0aW9uSUQsIGkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlc3RpbmF0aW9uSUQuc3Vic3RyKDAsIGkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIG9mIHR3byBJRHMuXG4gKlxuICogVXNpbmcgdGhpcyBJRCBzY2hlbWUsIHRoZSBuZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCBpcyB0aGUgbG9uZ2VzdCBjb21tb25cbiAqIHByZWZpeCBvZiB0aGUgdHdvIElEcyB0aGF0IGltbWVkaWF0ZWx5IHByZWNlZGVkIGEgXCJtYXJrZXJcIiBpbiBib3RoIHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG9uZUlEXG4gKiBAcGFyYW0ge3N0cmluZ30gdHdvSURcbiAqIEByZXR1cm4ge3N0cmluZ30gTmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQsIG9yIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm9uZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRChvbmVJRCwgdHdvSUQpIHtcbiAgdmFyIG1pbkxlbmd0aCA9IE1hdGgubWluKG9uZUlELmxlbmd0aCwgdHdvSUQubGVuZ3RoKTtcbiAgaWYgKG1pbkxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgbGFzdENvbW1vbk1hcmtlckluZGV4ID0gMDtcbiAgLy8gVXNlIGA8PWAgdG8gdHJhdmVyc2UgdW50aWwgdGhlIFwiRU9MXCIgb2YgdGhlIHNob3J0ZXIgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8PSBtaW5MZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0JvdW5kYXJ5KG9uZUlELCBpKSAmJiBpc0JvdW5kYXJ5KHR3b0lELCBpKSkge1xuICAgICAgbGFzdENvbW1vbk1hcmtlckluZGV4ID0gaTtcbiAgICB9IGVsc2UgaWYgKG9uZUlELmNoYXJBdChpKSAhPT0gdHdvSUQuY2hhckF0KGkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdmFyIGxvbmdlc3RDb21tb25JRCA9IG9uZUlELnN1YnN0cigwLCBsYXN0Q29tbW9uTWFya2VySW5kZXgpO1xuICAhaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKCVzLCAlcyk6IEV4cGVjdGVkIGEgdmFsaWQgUmVhY3QgRE9NIElEOiAlcycsIG9uZUlELCB0d29JRCwgbG9uZ2VzdENvbW1vbklEKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHR3byBJRHMgKGVpdGhlciB1cCBvciBkb3duKS4gVGhlIElEcyBtdXN0XG4gKiBub3QgYmUgdGhlIHNhbWUsIGFuZCB0aGVyZSBtdXN0IGV4aXN0IGEgcGFyZW50IHBhdGggYmV0d2VlbiB0aGVtLiBJZiB0aGVcbiAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdGFydCBJRCBhdCB3aGljaCB0byBzdGFydCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBlYWNoIElEIHdpdGguXG4gKiBAcGFyYW0geyp9IGFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGguXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwRmlyc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgZmlyc3Qgbm9kZS5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuICBzdGFydCA9IHN0YXJ0IHx8ICcnO1xuICBzdG9wID0gc3RvcCB8fCAnJztcbiAgIShzdGFydCAhPT0gc3RvcCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhdmVyc2VQYXJlbnRQYXRoKC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIGFuZCB0byB0aGUgc2FtZSBJRCwgYCVzYC4nLCBzdGFydCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICB2YXIgdHJhdmVyc2VVcCA9IGlzQW5jZXN0b3JJRE9mKHN0b3AsIHN0YXJ0KTtcbiAgISh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogQ2Fubm90IHRyYXZlcnNlIGZyb20gdHdvIElEcyB0aGF0IGRvICcgKyAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLCBzdGFydCwgc3RvcCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAvLyBUcmF2ZXJzZSBmcm9tIGBzdGFydGAgdG8gYHN0b3BgIG9uZSBkZXB0aCBhdCBhIHRpbWUuXG4gIHZhciBkZXB0aCA9IDA7XG4gIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG4gIGZvciAodmFyIGlkID0gc3RhcnQ7OyAvKiB1bnRpbCBicmVhayAqL2lkID0gdHJhdmVyc2UoaWQsIHN0b3ApKSB7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoKCFza2lwRmlyc3QgfHwgaWQgIT09IHN0YXJ0KSAmJiAoIXNraXBMYXN0IHx8IGlkICE9PSBzdG9wKSkge1xuICAgICAgcmV0ID0gY2IoaWQsIHRyYXZlcnNlVXAsIGFyZyk7XG4gICAgfVxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IGlkID09PSBzdG9wKSB7XG4gICAgICAvLyBPbmx5IGJyZWFrIC8vYWZ0ZXIvLyB2aXNpdGluZyBgc3RvcGAuXG4gICAgICBicmVhaztcbiAgICB9XG4gICAgIShkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IERldGVjdGVkIGFuIGluZmluaXRlIGxvb3Agd2hpbGUgJyArICd0cmF2ZXJzaW5nIHRoZSBSZWFjdCBET00gSUQgdHJlZS4gVGhpcyBtYXkgYmUgZHVlIHRvIG1hbGZvcm1lZCBJRHM6ICVzJywgc3RhcnQsIHN0b3AsIGlkKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBJRHMgYXNzaWduZWQgdG8gRE9NIHJlcHJlc2VudGF0aW9ucyBvZiBSZWFjdCBjb21wb25lbnRzLiBUaGlzXG4gKiB1c2VzIGEgc3BlY2lmaWMgc2NoZW1lIGluIG9yZGVyIHRvIHRyYXZlcnNlIHRoZSBET00gZWZmaWNpZW50bHkgKGUuZy4gaW5cbiAqIG9yZGVyIHRvIHNpbXVsYXRlIGV2ZW50cykuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IHJvb3QgSURcbiAgICogQHJldHVybiB7c3RyaW5nfSBBIFJlYWN0IHJvb3QgSUQuXG4gICAqL1xuICBjcmVhdGVSZWFjdFJvb3RJRDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRSZWFjdFJvb3RJRFN0cmluZyhSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCgpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIFJlYWN0IElEIGJ5IGpvaW5pbmcgYSByb290IElEIHdpdGggYSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIFJvb3QgSUQgb2YgYSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBIGNvbXBvbmVudCdzIG5hbWUgKGFzIGZsYXR0ZW5lZCBjaGlsZHJlbikuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBSZWFjdCBJRC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBjcmVhdGVSZWFjdElEOiBmdW5jdGlvbiAocm9vdElELCBuYW1lKSB7XG4gICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdGhhdFxuICAgKiBjb250YWlucyB0aGUgUmVhY3QgY29tcG9uZW50IHdpdGggdGhlIHN1cHBsaWVkIERPTSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIERPTSBJRCBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ30gRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIGlmIChpZCAmJiBpZC5jaGFyQXQoMCkgPT09IFNFUEFSQVRPUiAmJiBpZC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgaW5kZXggPSBpZC5pbmRleE9mKFNFUEFSQVRPUiwgMSk7XG4gICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGlkLnN1YnN0cigwLCBpbmRleCkgOiBpZDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB0aGUgSUQgaGllcmFyY2h5IGFuZCBpbnZva2VzIHRoZSBzdXBwbGllZCBgY2JgIG9uIGFueSBJRHMgdGhhdFxuICAgKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gICAqXG4gICAqIE5PVEU6IERvZXMgbm90IGludm9rZSB0aGUgY2FsbGJhY2sgb24gdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIGJlY2F1c2VcbiAgICogbm90aGluZyBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZWF2ZUlEIElEIGJlaW5nIGxlZnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRlcklEIElEIGJlaW5nIGVudGVyZWQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBvbiBlYWNoIGVudGVyZWQvbGVmdCBJRC5cbiAgICogQHBhcmFtIHsqfSB1cEFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggb24gbGVmdCBJRHMuXG4gICAqIEBwYXJhbSB7Kn0gZG93bkFyZyBBcmd1bWVudCB0byBpbnZva2UgdGhlIGNhbGxiYWNrIHdpdGggb24gZW50ZXJlZCBJRHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhdmVyc2VFbnRlckxlYXZlOiBmdW5jdGlvbiAobGVhdmVJRCwgZW50ZXJJRCwgY2IsIHVwQXJnLCBkb3duQXJnKSB7XG4gICAgdmFyIGFuY2VzdG9ySUQgPSBnZXRGaXJzdENvbW1vbkFuY2VzdG9ySUQobGVhdmVJRCwgZW50ZXJJRCk7XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGxlYXZlSUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChsZWF2ZUlELCBhbmNlc3RvcklELCBjYiwgdXBBcmcsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGFuY2VzdG9ySUQgIT09IGVudGVySUQpIHtcbiAgICAgIHRyYXZlcnNlUGFyZW50UGF0aChhbmNlc3RvcklELCBlbnRlcklELCBjYiwgZG93bkFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2ltdWxhdGVzIHRoZSB0cmF2ZXJzYWwgb2YgYSB0d28tcGhhc2UsIGNhcHR1cmUvYnViYmxlIGV2ZW50IGRpc3BhdGNoLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uICh0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2FtZSBhcyBgdHJhdmVyc2VUd29QaGFzZWAgYnV0IHNraXBzIHRoZSBgdGFyZ2V0SURgLlxuICAgKi9cbiAgdHJhdmVyc2VUd29QaGFzZVNraXBUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgodGFyZ2V0SUQsICcnLCBjYiwgYXJnLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlIGEgbm9kZSBJRCwgY2FsbGluZyB0aGUgc3VwcGxpZWQgYGNiYCBmb3IgZWFjaCBhbmNlc3RvciBJRC4gRm9yXG4gICAqIGV4YW1wbGUsIHBhc3NpbmcgYC4wLiRyb3ctMC4xYCB3b3VsZCByZXN1bHQgaW4gYGNiYCBnZXR0aW5nIGNhbGxlZFxuICAgKiB3aXRoIGAuMGAsIGAuMC4kcm93LTBgLCBhbmQgYC4wLiRyb3ctMC4xYC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZUFuY2VzdG9yczogZnVuY3Rpb24gKHRhcmdldElELCBjYiwgYXJnKSB7XG4gICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICB9LFxuXG4gIGdldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDogZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklELFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TmV4dERlc2NlbmRhbnRJRDogZ2V0TmV4dERlc2NlbmRhbnRJRCxcblxuICBpc0FuY2VzdG9ySURPZjogaXNBbmNlc3RvcklET2YsXG5cbiAgU0VQQVJBVE9SOiBTRVBBUkFUT1JcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlSGFuZGxlcztcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0Um9vdEluZGV4XCI6MjQ1LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNH1dLDIyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZU1hcFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDtcbn0se31dLDIzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SXNvbW9ycGhpY1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnQnKTtcbnZhciBSZWFjdENsYXNzID0gcmVxdWlyZSgnLi9SZWFjdENsYXNzJyk7XG52YXIgUmVhY3RET01GYWN0b3JpZXMgPSByZXF1aXJlKCcuL1JlYWN0RE9NRmFjdG9yaWVzJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xuXG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50O1xudmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbnZhciBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbn1cblxudmFyIFJlYWN0ID0ge1xuXG4gIC8vIE1vZGVyblxuXG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG4gICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgdG9BcnJheTogUmVhY3RDaGlsZHJlbi50b0FycmF5LFxuICAgIG9ubHk6IG9ubHlDaGlsZFxuICB9LFxuXG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG5cbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG4gIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG5cbiAgLy8gQ2xhc3NpY1xuXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGNyZWF0ZUNsYXNzOiBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICBjcmVhdGVNaXhpbjogZnVuY3Rpb24gKG1peGluKSB7XG4gICAgLy8gQ3VycmVudGx5IGEgbm9vcC4gV2lsbCBiZSB1c2VkIHRvIHZhbGlkYXRlIGFuZCB0cmFjZSBtaXhpbnMuXG4gICAgcmV0dXJuIG1peGluO1xuICB9LFxuXG4gIC8vIFRoaXMgbG9va3MgRE9NIHNwZWNpZmljIGJ1dCB0aGVzZSBhcmUgYWN0dWFsbHkgaXNvbW9ycGhpYyBoZWxwZXJzXG4gIC8vIHNpbmNlIHRoZXkgYXJlIGp1c3QgZ2VuZXJhdGluZyBET00gc3RyaW5ncy5cbiAgRE9NOiBSZWFjdERPTUZhY3RvcmllcyxcblxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG5cbiAgLy8gSG9vayBmb3IgSlNYIHNwcmVhZCwgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nIGVsc2UuXG4gIF9fc3ByZWFkOiBhc3NpZ25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9SZWFjdENoaWxkcmVuXCI6MTk1LFwiLi9SZWFjdENsYXNzXCI6MTk2LFwiLi9SZWFjdENvbXBvbmVudFwiOjE5NyxcIi4vUmVhY3RET01GYWN0b3JpZXNcIjoyMDUsXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MjIwLFwiLi9SZWFjdFByb3BUeXBlc1wiOjI0MSxcIi4vUmVhY3RWZXJzaW9uXCI6MjUxLFwiLi9vbmx5Q2hpbGRcIjoyODcsXCJfcHJvY2Vzc1wiOjExNH1dLDIzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNYXJrdXBDaGVja3N1bVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKCcuL2FkbGVyMzInKTtcblxudmFyIFRBR19FTkQgPSAvXFwvPz4vO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXApIHtcbiAgICB2YXIgY2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG5cbiAgICAvLyBBZGQgY2hlY2tzdW0gKGhhbmRsZSBib3RoIHBhcmVudCB0YWdzIGFuZCBzZWxmLWNsb3NpbmcgdGFncylcbiAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoVEFHX0VORCwgJyAnICsgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUgKyAnPVwiJyArIGNoZWNrc3VtICsgJ1wiJCYnKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHJvb3QgUmVhY3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgdGhlIG1hcmt1cCBpcyB0aGUgc2FtZVxuICAgKi9cbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtO1xufSx7XCIuL2FkbGVyMzJcIjoyNzB9XSwyMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE1vdW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeSA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VIYW5kbGVzJyk7XG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xudmFyIFJlYWN0TWFya3VwQ2hlY2tzdW0gPSByZXF1aXJlKCcuL1JlYWN0TWFya3VwQ2hlY2tzdW0nKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKCcuL1JlYWN0UGVyZicpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbnZhciBvd25lckRvY3VtZW50Q29udGV4dEtleSA9ICdfX1JlYWN0TW91bnRfb3duZXJEb2N1bWVudCQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvKiogX19ERVZfXy1vbmx5IG1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byByb290IGVsZW1lbnRzLiAqL1xuICB2YXIgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCA9IHt9O1xufVxuXG4vLyBVc2VkIHRvIHN0b3JlIGJyZWFkdGgtZmlyc3Qgc2VhcmNoIHN0YXRlIGluIGZpbmRDb21wb25lbnRSb290LlxudmFyIGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSA9IFtdO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gKiB0aGF0J3Mgbm90IGNvbW1vbiBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gc3RyaW5ncy5cbiAqXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgY2hhcmFjdGVyIHdoZXJlIHRoZSBzdHJpbmdzIGRpdmVyZ2VcbiAqL1xuZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoc3RyaW5nMSwgc3RyaW5nMikge1xuICB2YXIgbWluTGVuID0gTWF0aC5taW4oc3RyaW5nMS5sZW5ndGgsIHN0cmluZzIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xuICAgIGlmIChzdHJpbmcxLmNoYXJBdChpKSAhPT0gc3RyaW5nMi5jaGFyQXQoaSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyaW5nMS5sZW5ndGggPT09IHN0cmluZzIubGVuZ3RoID8gLTEgOiBtaW5MZW47XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTURvY3VtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpblxuICogYSBSZWFjdCBjb21wb25lbnRcbiAqIEByZXR1cm4gez8qfSBET00gZWxlbWVudCB0aGF0IG1heSBoYXZlIHRoZSByZWFjdFJvb3QgSUQsIG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluIGEgUmVhY3QgY29tcG9uZW50LlxuICogQHJldHVybiB7P3N0cmluZ30gQSBcInJlYWN0Um9vdFwiIElELCBpZiBhIFJlYWN0IGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKSB7XG4gIHZhciByb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICByZXR1cm4gcm9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5nZXRJRChyb290RWxlbWVudCk7XG59XG5cbi8qKlxuICogQWNjZXNzaW5nIG5vZGVbQVRUUl9OQU1FXSBvciBjYWxsaW5nIGdldEF0dHJpYnV0ZShBVFRSX05BTUUpIG9uIGEgZm9ybVxuICogZWxlbWVudCBjYW4gcmV0dXJuIGl0cyBjb250cm9sIHdob3NlIG5hbWUgb3IgSUQgZXF1YWxzIEFUVFJfTkFNRS4gQWxsXG4gKiBET00gbm9kZXMgc3VwcG9ydCBgZ2V0QXR0cmlidXRlTm9kZWAgYnV0IHRoaXMgY2FuIGFsc28gZ2V0IGNhbGxlZCBvblxuICogb3RoZXIgb2JqZWN0cyBzbyBqdXN0IHJldHVybiAnJyBpZiB3ZSdyZSBnaXZlbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhXG4gKiBET00gbm9kZSAoc3VjaCBhcyB3aW5kb3cpLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR8RE9NV2luZG93fERPTURvY3VtZW50fERPTVRleHROb2RlfSBub2RlIERPTSBub2RlLlxuICogQHJldHVybiB7c3RyaW5nfSBJRCBvZiB0aGUgc3VwcGxpZWQgYGRvbU5vZGVgLlxuICovXG5mdW5jdGlvbiBnZXRJRChub2RlKSB7XG4gIHZhciBpZCA9IGludGVybmFsR2V0SUQobm9kZSk7XG4gIGlmIChpZCkge1xuICAgIGlmIChub2RlQ2FjaGUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgY2FjaGVkID0gbm9kZUNhY2hlW2lkXTtcbiAgICAgIGlmIChjYWNoZWQgIT09IG5vZGUpIHtcbiAgICAgICAgISFpc1ZhbGlkKGNhY2hlZCwgaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0TW91bnQ6IFR3byB2YWxpZCBidXQgdW5lcXVhbCBub2RlcyB3aXRoIHRoZSBzYW1lIGAlc2A6ICVzJywgQVRUUl9OQU1FLCBpZCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SUQobm9kZSkge1xuICAvLyBJZiBub2RlIGlzIHNvbWV0aGluZyBsaWtlIGEgd2luZG93LCBkb2N1bWVudCwgb3IgdGV4dCBub2RlLCBub25lIG9mXG4gIC8vIHdoaWNoIHN1cHBvcnQgYXR0cmlidXRlcyBvciBhIC5nZXRBdHRyaWJ1dGUgbWV0aG9kLCBncmFjZWZ1bGx5IHJldHVyblxuICAvLyB0aGUgZW1wdHkgc3RyaW5nLCBhcyBpZiB0aGUgYXR0cmlidXRlIHdlcmUgbWlzc2luZy5cbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBSZWFjdC1zcGVjaWZpYyBJRCBvZiB0aGUgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgVGhlIERPTSBub2RlIHdob3NlIElEIHdpbGwgYmUgc2V0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB2YWx1ZSBvZiB0aGUgSUQgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBzZXRJRChub2RlLCBpZCkge1xuICB2YXIgb2xkSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAob2xkSUQgIT09IGlkKSB7XG4gICAgZGVsZXRlIG5vZGVDYWNoZVtvbGRJRF07XG4gIH1cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoQVRUUl9OQU1FLCBpZCk7XG4gIG5vZGVDYWNoZVtpZF0gPSBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIEEgUmVhY3QtZ2VuZXJhdGVkIERPTSBJRC5cbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IERPTSBub2RlIHdpdGggdGhlIHN1cHBsZWQgYGlkYC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXROb2RlKGlkKSB7XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgcHVibGljIFJlYWN0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gaW5zdGFuY2UgQSBwdWJsaWMgUmVhY3QgaW5zdGFuY2UuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxlZCBgaWRgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQoaW5zdGFuY2UpLl9yb290Tm9kZUlEO1xuICBpZiAoUmVhY3RFbXB0eUNvbXBvbmVudFJlZ2lzdHJ5LmlzTnVsbENvbXBvbmVudElEKGlkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghbm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSB8fCAhaXNWYWxpZChub2RlQ2FjaGVbaWRdLCBpZCkpIHtcbiAgICBub2RlQ2FjaGVbaWRdID0gUmVhY3RNb3VudC5maW5kUmVhY3ROb2RlQnlJRChpZCk7XG4gIH1cbiAgcmV0dXJuIG5vZGVDYWNoZVtpZF07XG59XG5cbi8qKlxuICogQSBub2RlIGlzIFwidmFsaWRcIiBpZiBpdCBpcyBjb250YWluZWQgYnkgYSBjdXJyZW50bHkgbW91bnRlZCBjb250YWluZXIuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IHRoZSBub2RlIGRvZXMgbm90IGhhdmUgdG8gYmUgY29udGFpbmVkIGJ5IGEgZG9jdW1lbnQgaW5cbiAqIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgdmFsaWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRWxlbWVudH0gbm9kZSBUaGUgY2FuZGlkYXRlIERPTSBub2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBleHBlY3RlZCBJRCBvZiB0aGUgbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgY29udGFpbmVkIGJ5IGEgbW91bnRlZCBjb250YWluZXIuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWQobm9kZSwgaWQpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICAhKGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdE1vdW50OiBVbmV4cGVjdGVkIG1vZGlmaWNhdGlvbiBvZiBgJXNgJywgQVRUUl9OQU1FKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY29udGFpbmVyID0gUmVhY3RNb3VudC5maW5kUmVhY3RDb250YWluZXJGb3JJRChpZCk7XG4gICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluc05vZGUoY29udGFpbmVyLCBub2RlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENhdXNlcyB0aGUgY2FjaGUgdG8gZm9yZ2V0IGFib3V0IG9uZSBSZWFjdC1zcGVjaWZpYyBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIHRvIGZvcmdldC5cbiAqL1xuZnVuY3Rpb24gcHVyZ2VJRChpZCkge1xuICBkZWxldGUgbm9kZUNhY2hlW2lkXTtcbn1cblxudmFyIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwoYW5jZXN0b3JJRCkge1xuICB2YXIgYW5jZXN0b3IgPSBub2RlQ2FjaGVbYW5jZXN0b3JJRF07XG4gIGlmIChhbmNlc3RvciAmJiBpc1ZhbGlkKGFuY2VzdG9yLCBhbmNlc3RvcklEKSkge1xuICAgIGRlZXBlc3ROb2RlU29GYXIgPSBhbmNlc3RvcjtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG5vZGUgaXNuJ3QgcG9wdWxhdGVkIGluIHRoZSBjYWNoZSwgc28gcHJlc3VtYWJseSBub25lIG9mIGl0c1xuICAgIC8vIGRlc2NlbmRhbnRzIGFyZS4gQnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZGVlcGVzdCBjYWNoZWQgbm9kZSB3aG9zZSBJRCBpcyBhIHByZWZpeCBvZiBgdGFyZ2V0SURgLlxuICovXG5mdW5jdGlvbiBmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yKHRhcmdldElEKSB7XG4gIGRlZXBlc3ROb2RlU29GYXIgPSBudWxsO1xuICBSZWFjdEluc3RhbmNlSGFuZGxlcy50cmF2ZXJzZUFuY2VzdG9ycyh0YXJnZXRJRCwgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGwpO1xuXG4gIHZhciBmb3VuZE5vZGUgPSBkZWVwZXN0Tm9kZVNvRmFyO1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgcmV0dXJuIGZvdW5kTm9kZTtcbn1cblxuLyoqXG4gKiBNb3VudHMgdGhpcyBjb21wb25lbnQgYW5kIGluc2VydHMgaXQgaW50byB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIGlmIChSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgY29udGV4dCA9IGFzc2lnbih7fSwgY29udGV4dCk7XG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgICAgY29udGV4dFtvd25lckRvY3VtZW50Q29udGV4dEtleV0gPSBjb250YWluZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHRbb3duZXJEb2N1bWVudENvbnRleHRLZXldID0gY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQgPT09IGVtcHR5T2JqZWN0KSB7XG4gICAgICBjb250ZXh0ID0ge307XG4gICAgfVxuICAgIHZhciB0YWcgPSBjb250YWluZXIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb250ZXh0W3ZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5XSA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKG51bGwsIHRhZywgbnVsbCk7XG4gIH1cbiAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gIGNvbXBvbmVudEluc3RhbmNlLl9yZW5kZXJlZENvbXBvbmVudC5fdG9wTGV2ZWxXcmFwcGVyID0gY29tcG9uZW50SW5zdGFuY2U7XG4gIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKTtcbn1cblxuLyoqXG4gKiBCYXRjaGVkIG1vdW50LlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudEluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byBtb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICogQHBhcmFtIHtib29sZWFufSBzaG91bGRSZXVzZU1hcmt1cCBJZiB0cnVlLCBkbyBub3QgaW5zZXJ0IG1hcmt1cFxuICovXG5mdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgcm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZChcbiAgLyogZm9yY2VIVE1MICovc2hvdWxkUmV1c2VNYXJrdXApO1xuICB0cmFuc2FjdGlvbi5wZXJmb3JtKG1vdW50Q29tcG9uZW50SW50b05vZGUsIG51bGwsIGNvbXBvbmVudEluc3RhbmNlLCByb290SUQsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KTtcbiAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0cmFuc2FjdGlvbik7XG59XG5cbi8qKlxuICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGluc3RhbmNlIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAqIEBmaW5hbFxuICogQGludGVybmFsXG4gKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gKi9cbmZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRGcm9tTm9kZShpbnN0YW5jZSwgY29udGFpbmVyKSB7XG4gIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KGluc3RhbmNlKTtcblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgfVxufVxuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGhhcyBhIGRpcmVjdCBSZWFjdC1yZW5kZXJlZCBjaGlsZCB0aGF0IGlzXG4gKiBub3QgYSBSZWFjdCByb290IGVsZW1lbnQuIFVzZWZ1bCBmb3Igd2FybmluZyBpbiBgcmVuZGVyYCxcbiAqIGB1bm1vdW50Q29tcG9uZW50QXROb2RlYCwgZXRjLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBlbGVtZW50IGNvbnRhaW5zIGEgZGlyZWN0IGNoaWxkIHRoYXQgd2FzXG4gKiByZW5kZXJlZCBieSBSZWFjdCBidXQgaXMgbm90IGEgcm9vdCBlbGVtZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhc05vblJvb3RSZWFjdENoaWxkKG5vZGUpIHtcbiAgdmFyIHJlYWN0Um9vdElEID0gZ2V0UmVhY3RSb290SUQobm9kZSk7XG4gIHJldHVybiByZWFjdFJvb3RJRCA/IHJlYWN0Um9vdElEICE9PSBSZWFjdEluc3RhbmNlSGFuZGxlcy5nZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQocmVhY3RSb290SUQpIDogZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgKGRlZXBlc3QpIGFuY2VzdG9yIG9mIGEgbm9kZSB3aGljaCBpcyByZW5kZXJlZCBieSB0aGlzIGNvcHlcbiAqIG9mIFJlYWN0LlxuICovXG5mdW5jdGlvbiBmaW5kRmlyc3RSZWFjdERPTUltcGwobm9kZSkge1xuICAvLyBUaGlzIG5vZGUgbWlnaHQgYmUgZnJvbSBhbm90aGVyIFJlYWN0IGluc3RhbmNlLCBzbyB3ZSBtYWtlIHN1cmUgbm90IHRvXG4gIC8vIGV4YW1pbmUgdGhlIG5vZGUgY2FjaGUgaGVyZVxuICBmb3IgKDsgbm9kZSAmJiBub2RlLnBhcmVudE5vZGUgIT09IG5vZGU7IG5vZGUgPSBub2RlLnBhcmVudE5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBub2RlSUQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICAgIGlmICghbm9kZUlEKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG5cbiAgICAvLyBJZiBjb250YWluZXJzQnlSZWFjdFJvb3RJRCBjb250YWlucyB0aGUgY29udGFpbmVyIHdlIGZpbmQgYnkgY3Jhd2xpbmcgdXBcbiAgICAvLyB0aGUgdHJlZSwgd2Uga25vdyB0aGF0IHRoaXMgaW5zdGFuY2Ugb2YgUmVhY3QgcmVuZGVyZWQgdGhlIG5vZGUuXG4gICAgLy8gbmIuIGlzVmFsaWQncyBzdHJhdGVneSAod2l0aCBjb250YWluc05vZGUpIGRvZXMgbm90IHdvcmsgYmVjYXVzZSByZW5kZXJcbiAgICAvLyB0cmVlcyBtYXkgYmUgbmVzdGVkIGFuZCB3ZSBkb24ndCB3YW50IGEgZmFsc2UgcG9zaXRpdmUgaW4gdGhhdCBjYXNlLlxuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB2YXIgbGFzdElEO1xuICAgIGRvIHtcbiAgICAgIGxhc3RJRCA9IGludGVybmFsR2V0SUQoY3VycmVudCk7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgcGFzc2VkLWluIG5vZGUgaGFzIGJlZW4gZGV0YWNoZWQgZnJvbSB0aGUgY29udGFpbmVyIGl0IHdhc1xuICAgICAgICAvLyBvcmlnaW5hbGx5IHJlbmRlcmVkIGludG8uXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGxhc3RJRCAhPT0gcmVhY3RSb290SUQpO1xuXG4gICAgaWYgKGN1cnJlbnQgPT09IGNvbnRhaW5lcnNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFRlbXBvcmFyeSAoPykgaGFjayBzbyB0aGF0IHdlIGNhbiBzdG9yZSBhbGwgdG9wLWxldmVsIHBlbmRpbmcgdXBkYXRlcyBvblxuICogY29tcG9zaXRlcyBpbnN0ZWFkIG9mIGhhdmluZyB0byB3b3JyeSBhYm91dCBkaWZmZXJlbnQgdHlwZXMgb2YgY29tcG9uZW50c1xuICogaGVyZS5cbiAqL1xudmFyIFRvcExldmVsV3JhcHBlciA9IGZ1bmN0aW9uICgpIHt9O1xuVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb3BMZXZlbFdyYXBwZXIuZGlzcGxheU5hbWUgPSAnVG9wTGV2ZWxXcmFwcGVyJztcbn1cblRvcExldmVsV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzLnByb3BzIGlzIGFjdHVhbGx5IGEgUmVhY3RFbGVtZW50XG4gIHJldHVybiB0aGlzLnByb3BzO1xufTtcblxuLyoqXG4gKiBNb3VudGluZyBpcyB0aGUgcHJvY2VzcyBvZiBpbml0aWFsaXppbmcgYSBSZWFjdCBjb21wb25lbnQgYnkgY3JlYXRpbmcgaXRzXG4gKiByZXByZXNlbnRhdGl2ZSBET00gZWxlbWVudHMgYW5kIGluc2VydGluZyB0aGVtIGludG8gYSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAqIEFueSBwcmlvciBjb250ZW50IGluc2lkZSBgY29udGFpbmVyYCBpcyBkZXN0cm95ZWQgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogICBSZWFjdE1vdW50LnJlbmRlcihcbiAqICAgICBjb21wb25lbnQsXG4gKiAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRhaW5lcicpXG4gKiAgICk7XG4gKlxuICogICA8ZGl2IGlkPVwiY29udGFpbmVyXCI+ICAgICAgICAgICAgICAgICAgIDwtLSBTdXBwbGllZCBgY29udGFpbmVyYC5cbiAqICAgICA8ZGl2IGRhdGEtcmVhY3RpZD1cIi4zXCI+ICAgICAgICAgICAgICA8LS0gUmVuZGVyZWQgcmVhY3RSb290IG9mIFJlYWN0XG4gKiAgICAgICAvLyAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuXG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICpcbiAqIEluc2lkZSBvZiBgY29udGFpbmVyYCwgdGhlIGZpcnN0IGVsZW1lbnQgcmVuZGVyZWQgaXMgdGhlIFwicmVhY3RSb290XCIuXG4gKi9cbnZhciBSZWFjdE1vdW50ID0ge1xuXG4gIFRvcExldmVsV3JhcHBlcjogVG9wTGV2ZWxXcmFwcGVyLFxuXG4gIC8qKiBFeHBvc2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMgKiovXG4gIF9pbnN0YW5jZXNCeVJlYWN0Um9vdElEOiBpbnN0YW5jZXNCeVJlYWN0Um9vdElELFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaG9vayBwcm92aWRlZCB0byBzdXBwb3J0IHJlbmRlcmluZyBSZWFjdCBjb21wb25lbnRzIHdoaWxlXG4gICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3RcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyQ2FsbGJhY2sgVGhpcyBtdXN0IGJlIGNhbGxlZCBvbmNlIHRvIGRvIHRoZSByZW5kZXIuXG4gICAqL1xuICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbiAoY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRha2UgYSBjb21wb25lbnQgdGhhdCdzIGFscmVhZHkgbW91bnRlZCBpbnRvIHRoZSBET00gYW5kIHJlcGxhY2UgaXRzIHByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IHByZXZDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIGFscmVhZHkgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24gKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24gKCkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFja0ludGVybmFsKHByZXZDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtnZXRSZWFjdFJvb3RJRChjb250YWluZXIpXSA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGNvbXBvbmVudCBpbnRvIHRoZSBpbnN0YW5jZSBtYXAgYW5kIHN0YXJ0cyBzY3JvbGwgdmFsdWVcbiAgICogbW9uaXRvcmluZ1xuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcmVhY3RSb290IElEIHByZWZpeFxuICAgKi9cbiAgX3JlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dENvbXBvbmVudCwgY29udGFpbmVyKSB7XG4gICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnX3JlZ2lzdGVyQ29tcG9uZW50KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnQgZWxlbWVudCB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiAnICsgJ29mIHByb3BzIGFuZCBzdGF0ZTsgdHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSAnICsgJ3JlbmRlciBpcyBub3QgYWxsb3dlZC4gSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiAlcy4nLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgbnVsbCk7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lcik7XG5cbiAgICAvLyBUaGUgaW5pdGlhbCByZW5kZXIgaXMgc3luY2hyb25vdXMgYnV0IGFueSB1cGRhdGVzIHRoYXQgaGFwcGVuIGR1cmluZ1xuICAgIC8vIHJlbmRlcmluZywgaW4gY29tcG9uZW50V2lsbE1vdW50IG9yIGNvbXBvbmVudERpZE1vdW50LCB3aWxsIGJlIGJhdGNoZWRcbiAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgYmF0Y2hpbmcgc3RyYXRlZ3kuXG5cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoYmF0Y2hlZE1vdW50Q29tcG9uZW50SW50b05vZGUsIGNvbXBvbmVudEluc3RhbmNlLCByZWFjdFJvb3RJRCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gUmVjb3JkIHRoZSByb290IGVsZW1lbnQgaW4gY2FzZSBpdCBsYXRlciBnZXRzIHRyYW5zcGxhbnRlZC5cbiAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgUmVhY3QgY29tcG9uZW50IGludG8gdGhlIERPTSBpbiB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIElmIHRoZSBSZWFjdCBjb21wb25lbnQgd2FzIHByZXZpb3VzbHkgcmVuZGVyZWQgaW50byBgY29udGFpbmVyYCwgdGhpcyB3aWxsXG4gICAqIHBlcmZvcm0gYW4gdXBkYXRlIG9uIGl0IGFuZCBvbmx5IG11dGF0ZSB0aGUgRE9NIGFzIG5lY2Vzc2FyeSB0byByZWZsZWN0IHRoZVxuICAgKiBsYXRlc3QgUmVhY3QgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBwYXJlbnRDb21wb25lbnQgVGhlIGNvbmNlcHR1YWwgcGFyZW50IG9mIHRoaXMgcmVuZGVyIHRyZWUuXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICEocGFyZW50Q29tcG9uZW50ICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncGFyZW50Q29tcG9uZW50IG11c3QgYmUgYSB2YWxpZCBSZWFjdCBDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICB9LFxuXG4gIF9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTS5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhbiBlbGVtZW50IHN0cmluZywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNvbXBvbmVudCBjbGFzcywgbWFrZSBzdXJlIHRvIGluc3RhbnRpYXRlICcgKyAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuICAgIC8vIENoZWNrIGlmIGl0IHF1YWNrcyBsaWtlIGFuIGVsZW1lbnRcbiAgICBuZXh0RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50LnByb3BzICE9PSB1bmRlZmluZWQgPyAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArICdjb3BpZXMgb2YgUmVhY3QuJyA6ICcnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVyIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoVG9wTGV2ZWxXcmFwcGVyLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBuZXh0RWxlbWVudCk7XG5cbiAgICB2YXIgcHJldkNvbXBvbmVudCA9IGluc3RhbmNlc0J5UmVhY3RSb290SURbZ2V0UmVhY3RSb290SUQoY29udGFpbmVyKV07XG5cbiAgICBpZiAocHJldkNvbXBvbmVudCkge1xuICAgICAgdmFyIHByZXZXcmFwcGVkRWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldldyYXBwZWRFbGVtZW50LnByb3BzO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQocHJldkNvbXBvbmVudCwgbmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKS5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWFjdFJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGNvbnRhaW5lckhhc1JlYWN0TWFya3VwID0gcmVhY3RSb290RWxlbWVudCAmJiAhIWludGVybmFsR2V0SUQocmVhY3RSb290RWxlbWVudCk7XG4gICAgdmFyIGNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkID0gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQsICdyZW5kZXIoLi4uKTogUmVwbGFjaW5nIFJlYWN0LXJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBuZXcgcm9vdCAnICsgJ2NvbXBvbmVudC4gSWYgeW91IGludGVuZGVkIHRvIHVwZGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlLCAnICsgJ3lvdSBzaG91bGQgaW5zdGVhZCBoYXZlIHRoZSBleGlzdGluZyBjaGlsZHJlbiB1cGRhdGUgdGhlaXIgc3RhdGUgJyArICdhbmQgcmVuZGVyIHRoZSBuZXcgY29tcG9uZW50cyBpbnN0ZWFkIG9mIGNhbGxpbmcgUmVhY3RET00ucmVuZGVyLicpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lckhhc1JlYWN0TWFya3VwIHx8IHJlYWN0Um9vdEVsZW1lbnQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgdmFyIHJvb3RFbGVtZW50U2libGluZyA9IHJlYWN0Um9vdEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlIChyb290RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBpZiAoaW50ZXJuYWxHZXRJRChyb290RWxlbWVudFNpYmxpbmcpKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3JlbmRlcigpOiBUYXJnZXQgbm9kZSBoYXMgbWFya3VwIHJlbmRlcmVkIGJ5IFJlYWN0LCBidXQgdGhlcmUgJyArICdhcmUgdW5yZWxhdGVkIG5vZGVzIGFzIHdlbGwuIFRoaXMgaXMgbW9zdCBjb21tb25seSBjYXVzZWQgYnkgJyArICd3aGl0ZS1zcGFjZSBpbnNlcnRlZCBhcm91bmQgc2VydmVyLXJlbmRlcmVkIG1hcmt1cC4nKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICByb290RWxlbWVudFNpYmxpbmcgPSByb290RWxlbWVudFNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUmV1c2VNYXJrdXAgPSBjb250YWluZXJIYXNSZWFjdE1hcmt1cCAmJiAhcHJldkNvbXBvbmVudCAmJiAhY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQ7XG4gICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQobmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBwYXJlbnRDb21wb25lbnQgIT0gbnVsbCA/IHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9wcm9jZXNzQ2hpbGRDb250ZXh0KHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9jb250ZXh0KSA6IGVtcHR5T2JqZWN0KS5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwoY29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogUmVuZGVycyBhIFJlYWN0IGNvbXBvbmVudCBpbnRvIHRoZSBET00gaW4gdGhlIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBJZiB0aGUgUmVhY3QgY29tcG9uZW50IHdhcyBwcmV2aW91c2x5IHJlbmRlcmVkIGludG8gYGNvbnRhaW5lcmAsIHRoaXMgd2lsbFxuICAgKiBwZXJmb3JtIGFuIHVwZGF0ZSBvbiBpdCBhbmQgb25seSBtdXRhdGUgdGhlIERPTSBhcyBuZWNlc3NhcnkgdG8gcmVmbGVjdCB0aGVcbiAgICogbGF0ZXN0IFJlYWN0IGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IENvbXBvbmVudCBlbGVtZW50IHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0cmlnZ2VyZWQgb24gY29tcGxldGlvblxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuICAgKi9cbiAgcmVuZGVyOiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5fcmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjb250YWluZXIgbm9kZSBpbnRvIHdoaWNoIFJlYWN0IGNvbXBvbmVudHMgd2lsbCBiZSByZW5kZXJlZC5cbiAgICogVGhpcyBhbHNvIGNyZWF0ZXMgdGhlIFwicmVhY3RSb290XCIgSUQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBlbGVtZW50XG4gICAqIHJlbmRlcmVkIHdpdGhpbi5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgYXMgYSBjb250YWluZXIuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFwicmVhY3RSb290XCIgSUQgb2YgZWxlbWVudHMgcmVuZGVyZWQgd2l0aGluLlxuICAgKi9cbiAgcmVnaXN0ZXJDb250YWluZXI6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIGlmIChyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gSWYgb25lIGV4aXN0cywgbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgXCJyZWFjdFJvb3RcIiBJRC5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKHJlYWN0Um9vdElEKTtcbiAgICB9XG4gICAgaWYgKCFyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gTm8gdmFsaWQgXCJyZWFjdFJvb3RcIiBJRCBmb3VuZCwgY3JlYXRlIG9uZS5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB9XG4gICAgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyO1xuICAgIHJldHVybiByZWFjdFJvb3RJRDtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYW5kIGRlc3Ryb3lzIHRoZSBSZWFjdCBjb21wb25lbnQgcmVuZGVyZWQgaW4gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgY29tcG9uZW50IHdhcyBmb3VuZCBpbiBhbmQgdW5tb3VudGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgYGNvbnRhaW5lcmBcbiAgICovXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAvLyBWYXJpb3VzIHBhcnRzIG9mIG91ciBjb2RlIChzdWNoIGFzIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50J3NcbiAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChTdHJpY3RseSBzcGVha2luZywgdW5tb3VudGluZyB3b24ndCBjYXVzZSBhXG4gICAgLy8gcmVuZGVyIGJ1dCB3ZSBzdGlsbCBkb24ndCBleHBlY3QgdG8gYmUgaW4gYSByZW5kZXIgY2FsbCBoZXJlLilcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArICdvZiBwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyICcgKyAnaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZS4gQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuJywgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHVuZGVmaW5lZDtcblxuICAgICEoY29udGFpbmVyICYmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIHZhciBjb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5vZGUgYmVpbmcgdW5tb3VudGVkIHdhcyByZW5kZXJlZCBieSBSZWFjdCwgYnV0IGlzbid0IGFcbiAgICAgIC8vIHJvb3Qgbm9kZS5cbiAgICAgIHZhciBjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCA9IGhhc05vblJvb3RSZWFjdENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250YWluZXIgaXRzZWxmIGlzIGEgUmVhY3Qgcm9vdCBub2RlLlxuICAgICAgdmFyIGNvbnRhaW5lcklEID0gaW50ZXJuYWxHZXRJRChjb250YWluZXIpO1xuICAgICAgdmFyIGlzQ29udGFpbmVyUmVhY3RSb290ID0gY29udGFpbmVySUQgJiYgY29udGFpbmVySUQgPT09IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmdldFJlYWN0Um9vdElERnJvbU5vZGVJRChjb250YWluZXJJRCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogVGhlIG5vZGUgeW91XFwncmUgYXR0ZW1wdGluZyB0byB1bm1vdW50ICcgKyAnd2FzIHJlbmRlcmVkIGJ5IFJlYWN0IGFuZCBpcyBub3QgYSB0b3AtbGV2ZWwgY29udGFpbmVyLiAlcycsIGlzQ29udGFpbmVyUmVhY3RSb290ID8gJ1lvdSBtYXkgaGF2ZSBhY2NpZGVudGFsbHkgcGFzc2VkIGluIGEgUmVhY3Qgcm9vdCBub2RlIGluc3RlYWQgJyArICdvZiBpdHMgY29udGFpbmVyLicgOiAnSW5zdGVhZCwgaGF2ZSB0aGUgcGFyZW50IGNvbXBvbmVudCB1cGRhdGUgaXRzIHN0YXRlIGFuZCAnICsgJ3JlcmVuZGVyIGluIG9yZGVyIHRvIHJlbW92ZSB0aGlzIGNvbXBvbmVudC4nKSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXModW5tb3VudENvbXBvbmVudEZyb21Ob2RlLCBjb21wb25lbnQsIGNvbnRhaW5lcik7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGRlbGV0ZSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGRlbGV0ZSByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyBSZWFjdCBjb21wb25lbnQgdG8gd2hpY2ggdGhlXG4gICAqIHN1cHBsaWVkIERPTSBgaWRgIGJlbG9uZ3MuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgYW4gZWxlbWVudCByZW5kZXJlZCBieSBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P0RPTUVsZW1lbnR9IERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGBpZGAuXG4gICAqL1xuICBmaW5kUmVhY3RDb250YWluZXJGb3JJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGlkKTtcbiAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgICAgaWYgKHJvb3RFbGVtZW50ICYmIHJvb3RFbGVtZW50LnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhcbiAgICAgICAgLy8gQ2FsbCBpbnRlcm5hbEdldElEIGhlcmUgYmVjYXVzZSBnZXRJRCBjYWxscyBpc1ZhbGlkIHdoaWNoIGNhbGxzXG4gICAgICAgIC8vIGZpbmRSZWFjdENvbnRhaW5lckZvcklEICh0aGlzIGZ1bmN0aW9uKS5cbiAgICAgICAgaW50ZXJuYWxHZXRJRChyb290RWxlbWVudCkgPT09IHJlYWN0Um9vdElELCAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IElEIGRpZmZlcmVkIGZyb20gcmVhY3RSb290SUQuJykgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjb250YWluZXJDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICBpZiAoY29udGFpbmVyQ2hpbGQgJiYgcmVhY3RSb290SUQgPT09IGludGVybmFsR2V0SUQoY29udGFpbmVyQ2hpbGQpKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGNvbnRhaW5lciBoYXMgYSBuZXcgY2hpbGQgd2l0aCB0aGUgc2FtZSBJRCBhcyB0aGUgb2xkXG4gICAgICAgICAgLy8gcm9vdCBlbGVtZW50LCB0aGVuIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdIGlzXG4gICAgICAgICAgLy8ganVzdCBzdGFsZSBhbmQgbmVlZHMgdG8gYmUgdXBkYXRlZC4gVGhlIGNhc2UgdGhhdCBkZXNlcnZlcyBhXG4gICAgICAgICAgLy8gd2FybmluZyBpcyB3aGVuIHRoZSBjb250YWluZXIgaXMgZW1wdHkuXG4gICAgICAgICAgcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF0gPSBjb250YWluZXJDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkIGZyb20gaXRzIG9yaWdpbmFsICcgKyAnY29udGFpbmVyLiBOZXcgY29udGFpbmVyOiAlcycsIHJvb3RFbGVtZW50LnBhcmVudE5vZGUpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfSxcblxuICAvKipcbiAgICogRmluZHMgYW4gZWxlbWVudCByZW5kZXJlZCBieSBSZWFjdCB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGEgRE9NIG5vZGUgaW4gdGhlIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7RE9NRWxlbWVudH0gUm9vdCBET00gbm9kZSBvZiB0aGUgUmVhY3QgY29tcG9uZW50LlxuICAgKi9cbiAgZmluZFJlYWN0Tm9kZUJ5SUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciByZWFjdFJvb3QgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5maW5kQ29tcG9uZW50Um9vdChyZWFjdFJvb3QsIGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2VzIHVwIHRoZSBhbmNlc3RvcnMgb2YgdGhlIHN1cHBsaWVkIG5vZGUgdG8gZmluZCBhIG5vZGUgdGhhdCBpcyBhXG4gICAqIERPTSByZXByZXNlbnRhdGlvbiBvZiBhIFJlYWN0IGNvbXBvbmVudCByZW5kZXJlZCBieSB0aGlzIGNvcHkgb2YgUmVhY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbm9kZVxuICAgKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0Rmlyc3RSZWFjdERPTTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gZmluZEZpcnN0UmVhY3RET01JbXBsKG5vZGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYCBpbnNpZGUgb2YgdGhlIHN1cHBsaWVkXG4gICAqIGBhbmNlc3Rvck5vZGVgLiAgRXhwbG9pdHMgdGhlIElEIG5hbWluZyBzY2hlbWUgdG8gcGVyZm9ybSB0aGUgc2VhcmNoXG4gICAqIHF1aWNrbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IGFuY2VzdG9yTm9kZSBTZWFyY2ggZnJvbSB0aGlzIHJvb3QuXG4gICAqIEBwYXJhcm0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gRE9NIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgYHRhcmdldElEYC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBmaW5kQ29tcG9uZW50Um9vdDogZnVuY3Rpb24gKGFuY2VzdG9yTm9kZSwgdGFyZ2V0SUQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZHJlbiA9IGZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheTtcbiAgICB2YXIgY2hpbGRJbmRleCA9IDA7XG5cbiAgICB2YXIgZGVlcGVzdEFuY2VzdG9yID0gZmluZERlZXBlc3RDYWNoZWRBbmNlc3Rvcih0YXJnZXRJRCkgfHwgYW5jZXN0b3JOb2RlO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBvbiB0aGUgbmV4dCBsaW5lOyBnaXZlIGFuIGVhcmx5IHdhcm5pbmdcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRlZXBlc3RBbmNlc3RvciAhPSBudWxsLCAnUmVhY3QgY2FuXFwndCBmaW5kIHRoZSByb290IGNvbXBvbmVudCBub2RlIGZvciBkYXRhLXJlYWN0aWQgdmFsdWUgJyArICdgJXNgLiBJZiB5b3VcXCdyZSBzZWVpbmcgdGhpcyBtZXNzYWdlLCBpdCBwcm9iYWJseSBtZWFucyB0aGF0ICcgKyAneW91XFwndmUgbG9hZGVkIHR3byBjb3BpZXMgb2YgUmVhY3Qgb24gdGhlIHBhZ2UuIEF0IHRoaXMgdGltZSwgb25seSAnICsgJ2Egc2luZ2xlIGNvcHkgb2YgUmVhY3QgY2FuIGJlIGxvYWRlZCBhdCBhIHRpbWUuJywgdGFyZ2V0SUQpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW5bMF0gPSBkZWVwZXN0QW5jZXN0b3IuZmlyc3RDaGlsZDtcbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDE7XG5cbiAgICB3aGlsZSAoY2hpbGRJbmRleCA8IGZpcnN0Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQgPSBmaXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107XG4gICAgICB2YXIgdGFyZ2V0Q2hpbGQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY2hpbGQpO1xuICAgICAgICBpZiAoY2hpbGRJRCkge1xuICAgICAgICAgIC8vIEV2ZW4gaWYgd2UgZmluZCB0aGUgbm9kZSB3ZSdyZSBsb29raW5nIGZvciwgd2UgZmluaXNoIGxvb3BpbmdcbiAgICAgICAgICAvLyB0aHJvdWdoIGl0cyBzaWJsaW5ncyB0byBlbnN1cmUgdGhleSdyZSBjYWNoZWQgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gdG8gcmV2aXNpdCB0aGlzIG5vZGUgYWdhaW4uIE90aGVyd2lzZSwgd2UgbWFrZSBuXjIgY2FsbHMgdG8gZ2V0SURcbiAgICAgICAgICAvLyB3aGVuIHZpc2l0aW5nIHRoZSBtYW55IGNoaWxkcmVuIG9mIGEgc2luZ2xlIG5vZGUgaW4gb3JkZXIuXG5cbiAgICAgICAgICBpZiAodGFyZ2V0SUQgPT09IGNoaWxkSUQpIHtcbiAgICAgICAgICAgIHRhcmdldENoaWxkID0gY2hpbGQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChSZWFjdEluc3RhbmNlSGFuZGxlcy5pc0FuY2VzdG9ySURPZihjaGlsZElELCB0YXJnZXRJRCkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZpbmQgYSBjaGlsZCB3aG9zZSBJRCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gSUQsXG4gICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBiZSBzdXJlIHRoYXQgd2Ugb25seSB3YW50IHRvIHNlYXJjaCB0aGUgc3VidHJlZVxuICAgICAgICAgICAgLy8gcm9vdGVkIGF0IHRoaXMgY2hpbGQsIHNvIHdlIGNhbiB0aHJvdyBvdXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICAgICAgICAvLyBzZWFyY2ggc3RhdGUuXG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IGNoaWxkSW5kZXggPSAwO1xuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNoaWxkIGhhZCBubyBJRCwgdGhlbiB0aGVyZSdzIGEgY2hhbmNlIHRoYXQgaXQgd2FzXG4gICAgICAgICAgLy8gaW5qZWN0ZWQgYXV0b21hdGljYWxseSBieSB0aGUgYnJvd3NlciwgYXMgd2hlbiBhIGA8dGFibGU+YFxuICAgICAgICAgIC8vIGVsZW1lbnQgc3Byb3V0cyBhbiBleHRyYSBgPHRib2R5PmAgY2hpbGQgYXMgYSBzaWRlIGVmZmVjdCBvZlxuICAgICAgICAgIC8vIGAuaW5uZXJIVE1MYCBwYXJzaW5nLiBPcHRpbWlzdGljYWxseSBjb250aW51ZSBkb3duIHRoaXNcbiAgICAgICAgICAvLyBicmFuY2gsIGJ1dCBub3QgYmVmb3JlIGV4YW1pbmluZyB0aGUgb3RoZXIgc2libGluZ3MuXG4gICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldENoaWxkKSB7XG4gICAgICAgIC8vIEVtcHR5aW5nIGZpcnN0Q2hpbGRyZW4vZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5IGlzXG4gICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIGNvcnJlY3RuZXNzLCBidXQgaXQgaGVscHMgdGhlIEdDIHJlY2xhaW1cbiAgICAgICAgLy8gYW55IG5vZGVzIHRoYXQgd2VyZSBsZWZ0IGF0IHRoZSBlbmQgb2YgdGhlIHNlYXJjaC5cbiAgICAgICAgZmlyc3RDaGlsZHJlbi5sZW5ndGggPSAwO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRDaGlsZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZmluZENvbXBvbmVudFJvb3QoLi4uLCAlcyk6IFVuYWJsZSB0byBmaW5kIGVsZW1lbnQuIFRoaXMgcHJvYmFibHkgJyArICdtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlIGJyb3dzZXIpLCAnICsgJ3VzdWFsbHkgZHVlIHRvIGZvcmdldHRpbmcgYSA8dGJvZHk+IHdoZW4gdXNpbmcgdGFibGVzLCBuZXN0aW5nIHRhZ3MgJyArICdsaWtlIDxmb3JtPiwgPHA+LCBvciA8YT4sIG9yIHVzaW5nIG5vbi1TVkcgZWxlbWVudHMgaW4gYW4gPHN2Zz4gJyArICdwYXJlbnQuICcgKyAnVHJ5IGluc3BlY3RpbmcgdGhlIGNoaWxkIG5vZGVzIG9mIHRoZSBlbGVtZW50IHdpdGggUmVhY3QgSUQgYCVzYC4nLCB0YXJnZXRJRCwgUmVhY3RNb3VudC5nZXRJRChhbmNlc3Rvck5vZGUpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgX21vdW50SW1hZ2VJbnRvTm9kZTogZnVuY3Rpb24gKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgdHJhbnNhY3Rpb24pIHtcbiAgICAhKGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtb3VudENvbXBvbmVudEludG9Ob2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IHZhbGlkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChzaG91bGRSZXVzZU1hcmt1cCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICBpZiAoUmVhY3RNYXJrdXBDaGVja3N1bS5jYW5SZXVzZU1hcmt1cChtYXJrdXAsIHJvb3RFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSByb290RWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgICAgICByb290RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuXG4gICAgICAgIHZhciByb290TWFya3VwID0gcm9vdEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICByb290RWxlbWVudC5zZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUsIGNoZWNrc3VtKTtcblxuICAgICAgICB2YXIgbm9ybWFsaXplZE1hcmt1cCA9IG1hcmt1cDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAvLyBiZWNhdXNlIHJvb3RNYXJrdXAgaXMgcmV0cmlldmVkIGZyb20gdGhlIERPTSwgdmFyaW91cyBub3JtYWxpemF0aW9uc1xuICAgICAgICAgIC8vIHdpbGwgaGF2ZSBvY2N1cnJlZCB3aGljaCB3aWxsIG5vdCBiZSBwcmVzZW50IGluIGBtYXJrdXBgLiBIZXJlLFxuICAgICAgICAgIC8vIGluc2VydCBtYXJrdXAgaW50byBhIDxkaXY+IG9yIDxpZnJhbWU+IGRlcGVuZGluZyBvbiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgLy8gdHlwZSB0byBwZXJmb3JtIHRoZSBzYW1lIG5vcm1hbGl6YXRpb25zIGJlZm9yZSBjb21wYXJpbmcuXG4gICAgICAgICAgdmFyIG5vcm1hbGl6ZXI7XG4gICAgICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG5vcm1hbGl6ZXIuaW5uZXJIVE1MID0gbWFya3VwO1xuICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuaW5uZXJIVE1MO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3JtYWxpemVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgICAgbm9ybWFsaXplci5jb250ZW50RG9jdW1lbnQud3JpdGUobWFya3VwKTtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRNYXJrdXAgPSBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChub3JtYWxpemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlmZkluZGV4ID0gZmlyc3REaWZmZXJlbmNlSW5kZXgobm9ybWFsaXplZE1hcmt1cCwgcm9vdE1hcmt1cCk7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlID0gJyAoY2xpZW50KSAnICsgbm9ybWFsaXplZE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKSArICdcXG4gKHNlcnZlcikgJyArIHJvb3RNYXJrdXAuc3Vic3RyaW5nKGRpZmZJbmRleCAtIDIwLCBkaWZmSW5kZXggKyAyMCk7XG5cbiAgICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nICcgKyAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArICd0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpICcgKyAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICsgJ3Nob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgJyArICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsIGRpZmZlcmVuY2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3QgYXR0ZW1wdGVkIHRvIHJldXNlIG1hcmt1cCBpbiBhIGNvbnRhaW5lciBidXQgdGhlICcgKyAnY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSAnICsgJ3VzaW5nIHNlcnZlciByZW5kZXJpbmcgYW5kIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSAnICsgJ3NlcnZlciB3YXMgbm90IHdoYXQgdGhlIGNsaWVudCB3YXMgZXhwZWN0aW5nLiBSZWFjdCBpbmplY3RlZCAnICsgJ25ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55ICcgKyAnb2YgdGhlIGJlbmVmaXRzIG9mIHNlcnZlciByZW5kZXJpbmcuIEluc3RlYWQsIGZpZ3VyZSBvdXQgJyArICd3aHkgdGhlIG1hcmt1cCBiZWluZyBnZW5lcmF0ZWQgaXMgZGlmZmVyZW50IG9uIHRoZSBjbGllbnQgJyArICdvciBzZXJ2ZXI6XFxuJXMnLCBkaWZmZXJlbmNlKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICEoY29udGFpbmVyLm5vZGVUeXBlICE9PSBET0NfTk9ERV9UWVBFKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCBidXQgJyArICd5b3UgZGlkblxcJ3QgdXNlIHNlcnZlciByZW5kZXJpbmcuIFdlIGNhblxcJ3QgZG8gdGhpcyAnICsgJ3dpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuICcgKyAnU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtYXJrdXApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJbm5lckhUTUwoY29udGFpbmVyLCBtYXJrdXApO1xuICAgIH1cbiAgfSxcblxuICBvd25lckRvY3VtZW50Q29udGV4dEtleTogb3duZXJEb2N1bWVudENvbnRleHRLZXksXG5cbiAgLyoqXG4gICAqIFJlYWN0IElEIHV0aWxpdGllcy5cbiAgICovXG5cbiAgZ2V0UmVhY3RSb290SUQ6IGdldFJlYWN0Um9vdElELFxuXG4gIGdldElEOiBnZXRJRCxcblxuICBzZXRJRDogc2V0SUQsXG5cbiAgZ2V0Tm9kZTogZ2V0Tm9kZSxcblxuICBnZXROb2RlRnJvbUluc3RhbmNlOiBnZXROb2RlRnJvbUluc3RhbmNlLFxuXG4gIGlzVmFsaWQ6IGlzVmFsaWQsXG5cbiAgcHVyZ2VJRDogcHVyZ2VJRFxufTtcblxuUmVhY3RQZXJmLm1lYXN1cmVNZXRob2RzKFJlYWN0TW91bnQsICdSZWFjdE1vdW50Jywge1xuICBfcmVuZGVyTmV3Um9vdENvbXBvbmVudDogJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyxcbiAgX21vdW50SW1hZ2VJbnRvTm9kZTogJ19tb3VudEltYWdlSW50b05vZGUnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50O1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRE9NUHJvcGVydHlcIjoxNzYsXCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOjE5MyxcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoyMDEsXCIuL1JlYWN0RE9NRmVhdHVyZUZsYWdzXCI6MjA2LFwiLi9SZWFjdEVsZW1lbnRcIjoyMTksXCIuL1JlYWN0RW1wdHlDb21wb25lbnRSZWdpc3RyeVwiOjIyMixcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMjgsXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjoyMjksXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIjoyMzEsXCIuL1JlYWN0UGVyZlwiOjIzOCxcIi4vUmVhY3RSZWNvbmNpbGVyXCI6MjQzLFwiLi9SZWFjdFVwZGF0ZVF1ZXVlXCI6MjQ5LFwiLi9SZWFjdFVwZGF0ZXNcIjoyNTAsXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIjoyODQsXCIuL3NldElubmVySFRNTFwiOjI5MCxcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjoyOTIsXCIuL3ZhbGlkYXRlRE9NTmVzdGluZ1wiOjI5NCxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCI6MjMsXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiOjI3LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcycpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZFJlY29uY2lsZXInKTtcblxudmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbkNoaWxkcmVuJyk7XG5cbi8qKlxuICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuICogdXNlZCB0byBiYXRjaCByZWN1cnNpdmUgdXBkYXRlcyB0byByZW5kZXIgbWFya3VwIG1vcmUgZWZmaWNpZW50bHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVEZXB0aCA9IDA7XG5cbi8qKlxuICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBFYWNoIG9iamVjdCBoYXMgYSBgdHlwZWAgcHJvcGVydHkgdGhhdCBpcyBpbiBgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNgLlxuICpcbiAqIEB0eXBlIHthcnJheTxvYmplY3Q+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZVF1ZXVlID0gW107XG5cbi8qKlxuICogUXVldWUgb2YgbWFya3VwIHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG1hcmt1cFF1ZXVlID0gW107XG5cbi8qKlxuICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVJbnNlcnRNYXJrdXAocGFyZW50SUQsIG1hcmt1cCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG1hcmt1cFF1ZXVlLnB1c2gobWFya3VwKSAtIDEsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBtb3ZpbmcgYW4gZXhpc3RpbmcgZWxlbWVudCB0byBhbm90aGVyIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggU291cmNlIGluZGV4IG9mIHRoZSBleGlzdGluZyBlbGVtZW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTW92ZShwYXJlbnRJRCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICBtYXJrdXBJbmRleDogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGZyb21JbmRleDogZnJvbUluZGV4LFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgcmVtb3ZpbmcgYW4gZWxlbWVudCBhdCBhbiBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJlbW92ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVSZW1vdmUocGFyZW50SUQsIGZyb21JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSBtYXJrdXAgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlU2V0TWFya3VwKHBhcmVudElELCBtYXJrdXApIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICB1cGRhdGVRdWV1ZS5wdXNoKHtcbiAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5TRVRfTUFSS1VQLFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IG1hcmt1cCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVGV4dENvbnRlbnQocGFyZW50SUQsIHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIGNvbnRlbnQ6IHRleHRDb250ZW50LFxuICAgIGZyb21JbmRleDogbnVsbCxcbiAgICB0b0luZGV4OiBudWxsXG4gIH0pO1xufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUoKSB7XG4gIGlmICh1cGRhdGVRdWV1ZS5sZW5ndGgpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXModXBkYXRlUXVldWUsIG1hcmt1cFF1ZXVlKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICBfcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLmluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICBfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAocHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBuZXh0Q2hpbGRyZW47XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzKTtcbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIHZhciBtb3VudEltYWdlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCByb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uIChuZXh0Q29udGVudCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgLy8gUmVtb3ZlIGFueSByZW5kZXJlZCBjaGlsZHJlbi5cbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbik7XG4gICAgICAgIC8vIFRPRE86IFRoZSBzZXRUZXh0Q29udGVudCBvcGVyYXRpb24gc2hvdWxkIGJlIGVub3VnaFxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGRyZW5bbmFtZV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgbmV3IHRleHQgY29udGVudC5cbiAgICAgICAgdGhpcy5zZXRUZXh0Q29udGVudChuZXh0Q29udGVudCk7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB1cGRhdGVEZXB0aC0tO1xuICAgICAgICBpZiAoIXVwZGF0ZURlcHRoKSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjbGVhclF1ZXVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG1hcmt1cCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dE1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZU1hcmt1cDogZnVuY3Rpb24gKG5leHRNYXJrdXApIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihwcmV2Q2hpbGRyZW4pO1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldE1hcmt1cChuZXh0TWFya3VwKTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgIGNsZWFyUXVldWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyBOZXN0ZWQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24gKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdXBkYXRlRGVwdGgrKztcbiAgICAgIHZhciBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgY2xlYXJRdWV1ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW1wcm92ZSBwZXJmb3JtYW5jZSBieSBpc29sYXRpbmcgdGhpcyBob3QgY29kZSBwYXRoIGZyb20gdGhlIHRyeS9jYXRjaFxuICAgICAqIGJsb2NrIGluIGB1cGRhdGVDaGlsZHJlbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbmV4dENoaWxkcmVuO1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIC8vIGBuZXh0SW5kZXhgIHdpbGwgaW5jcmVtZW50IGZvciBlYWNoIGNoaWxkIGluIGBuZXh0Q2hpbGRyZW5gLCBidXRcbiAgICAgIC8vIGBsYXN0SW5kZXhgIHdpbGwgYmUgdGhlIGxhc3QgaW5kZXggdmlzaXRlZCBpbiBgcHJldkNoaWxkcmVuYC5cbiAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbmV4dEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZChwcmV2Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB0aGlzLl9tb3VudENoaWxkQnlOYW1lQXRJbmRleChuZXh0Q2hpbGQsIG5hbWUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpICYmICEobmV4dENoaWxkcmVuICYmIG5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkpIHtcbiAgICAgICAgICB0aGlzLl91bm1vdW50Q2hpbGQocHJldkNoaWxkcmVuW25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhbGwgcmVuZGVyZWQgY2hpbGRyZW4uIFRoaXMgc2hvdWxkIGJlIHVzZWQgdG8gY2xlYW4gdXAgY2hpbGRyZW5cbiAgICAgKiB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHJlbmRlcmVkQ2hpbGRyZW4pO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgY2hpbGQgY29tcG9uZW50IHRvIHRoZSBzdXBwbGllZCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3ZlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0SW5kZXggTGFzdCBpbmRleCB2aXNpdGVkIG9mIHRoZSBzaWJsaW5ncyBvZiBgY2hpbGRgLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgdG9JbmRleCwgbGFzdEluZGV4KSB7XG4gICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cbiAgICAgIC8vIGJlIG1vdmVkLiBPdGhlcndpc2UsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgaXQgYmVjYXVzZSBhIGNoaWxkIHdpbGwgYmVcbiAgICAgIC8vIGluc2VydGVkIG9yIG1vdmVkIGJlZm9yZSBgY2hpbGRgLlxuICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgIGVucXVldWVNb3ZlKHRoaXMuX3Jvb3ROb2RlSUQsIGNoaWxkLl9tb3VudEluZGV4LCB0b0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgbW91bnRJbWFnZSkge1xuICAgICAgZW5xdWV1ZUluc2VydE1hcmt1cCh0aGlzLl9yb290Tm9kZUlELCBtb3VudEltYWdlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIGVucXVldWVSZW1vdmUodGhpcy5fcm9vdE5vZGVJRCwgY2hpbGQuX21vdW50SW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBzZXRUZXh0Q29udGVudDogZnVuY3Rpb24gKHRleHRDb250ZW50KSB7XG4gICAgICBlbnF1ZXVlVGV4dENvbnRlbnQodGhpcy5fcm9vdE5vZGVJRCwgdGV4dENvbnRlbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoaXMgbWFya3VwIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRvIHNldC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc2V0TWFya3VwOiBmdW5jdGlvbiAobWFya3VwKSB7XG4gICAgICBlbnF1ZXVlU2V0TWFya3VwKHRoaXMuX3Jvb3ROb2RlSUQsIG1hcmt1cCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdW50cyBhIGNoaWxkIHdpdGggdGhlIHN1cHBsaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IGF0IHdoaWNoIHRvIGluc2VydCB0aGUgY2hpbGQuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21vdW50Q2hpbGRCeU5hbWVBdEluZGV4OiBmdW5jdGlvbiAoY2hpbGQsIG5hbWUsIGluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgLy8gSW5saW5lZCBmb3IgcGVyZm9ybWFuY2UsIHNlZSBgUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RJRGAuXG4gICAgICB2YXIgcm9vdElEID0gdGhpcy5fcm9vdE5vZGVJRCArIG5hbWU7XG4gICAgICB2YXIgbW91bnRJbWFnZSA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjaGlsZCwgcm9vdElELCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGEgcmVuZGVyZWQgY2hpbGQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBUaGlzIGlzIHBhcnQgb2YgYHVwZGF0ZUNoaWxkcmVuYCBhbmQgaXMgaGVyZSBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gdW5tb3VudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91bm1vdW50Q2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IG51bGw7XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdENoaWxkUmVjb25jaWxlclwiOjE5NCxcIi4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudFwiOjE5OSxcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoyMDEsXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCI6MjM0LFwiLi9SZWFjdFJlY29uY2lsZXJcIjoyNDMsXCIuL2ZsYXR0ZW5DaGlsZHJlblwiOjI3NSxcIl9wcm9jZXNzXCI6MTE0fV0sMjM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG4vKipcbiAqIFdoZW4gYSBjb21wb25lbnQncyBjaGlsZHJlbiBhcmUgdXBkYXRlZCwgYSBzZXJpZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAqIG9iamVjdHMgYXJlIGNyZWF0ZWQgaW4gb3JkZXIgdG8gYmF0Y2ggYW5kIHNlcmlhbGl6ZSB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAqXG4gKiBFbnVtZXJhdGVzIGFsbCB0aGUgcG9zc2libGUgdHlwZXMgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICBJTlNFUlRfTUFSS1VQOiBudWxsLFxuICBNT1ZFX0VYSVNUSU5HOiBudWxsLFxuICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgU0VUX01BUktVUDogbnVsbCxcbiAgVEVYVF9DT05URU5UOiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcztcbn0se1wiZmJqcy9saWIva2V5TWlycm9yXCI6Mzd9XSwyMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdGl2ZUNvbXBvbmVudFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gbnVsbDtcbnZhciBnZW5lcmljQ29tcG9uZW50Q2xhc3MgPSBudWxsO1xuLy8gVGhpcyByZWdpc3RyeSBrZWVwcyB0cmFjayBvZiB3cmFwcGVyIGNsYXNzZXMgYXJvdW5kIG5hdGl2ZSB0YWdzLlxudmFyIHRhZ1RvQ29tcG9uZW50Q2xhc3MgPSB7fTtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIC8vIFRoaXMgYWNjZXB0cyBhIGNsYXNzIHRoYXQgcmVjZWl2ZXMgdGhlIHRhZyBzdHJpbmcuIFRoaXMgaXMgYSBjYXRjaCBhbGxcbiAgLy8gdGhhdCBjYW4gcmVuZGVyIGFueSBraW5kIG9mIHRhZy5cbiAgaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzOiBmdW5jdGlvbiAoY29tcG9uZW50Q2xhc3MpIHtcbiAgICBnZW5lcmljQ29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRDbGFzcztcbiAgfSxcbiAgLy8gVGhpcyBhY2NlcHRzIGEgdGV4dCBjb21wb25lbnQgY2xhc3MgdGhhdCB0YWtlcyB0aGUgdGV4dCBzdHJpbmcgdG8gYmVcbiAgLy8gcmVuZGVyZWQgYXMgcHJvcHMuXG4gIGluamVjdFRleHRDb21wb25lbnRDbGFzczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgdGV4dENvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIGtleWVkIG9iamVjdCB3aXRoIGNsYXNzZXMgYXMgdmFsdWVzLiBFYWNoIGtleSByZXByZXNlbnRzIGFcbiAgLy8gdGFnLiBUaGF0IHBhcnRpY3VsYXIgdGFnIHdpbGwgdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZ2VuZXJpYyBvbmUuXG4gIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzc2VzKSB7XG4gICAgYXNzaWduKHRhZ1RvQ29tcG9uZW50Q2xhc3MsIGNvbXBvbmVudENsYXNzZXMpO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIGNvbXBvc2l0ZSBjb21wb25lbnQgd3JhcHBlciBjbGFzcyBmb3IgYSBzcGVjaWZpYyB0YWcuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgVGhlIHRhZyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBjbGFzcy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgUmVhY3QgY2xhc3MgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudChlbGVtZW50KSB7XG4gIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgfVxuICB2YXIgdGFnID0gZWxlbWVudC50eXBlO1xuICB2YXIgY29tcG9uZW50Q2xhc3MgPSB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ107XG4gIGlmIChjb21wb25lbnRDbGFzcyA9PSBudWxsKSB7XG4gICAgdGFnVG9Db21wb25lbnRDbGFzc1t0YWddID0gY29tcG9uZW50Q2xhc3MgPSBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3ModGFnKTtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50Q2xhc3M7XG59XG5cbi8qKlxuICogR2V0IGEgbmF0aXZlIGludGVybmFsIGNvbXBvbmVudCBjbGFzcyBmb3IgYSBzcGVjaWZpYyB0YWcuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gY3JlYXRlLlxuICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBpbnRlcm5hbCBjbGFzcyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCkge1xuICAhZ2VuZXJpY0NvbXBvbmVudENsYXNzID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJywgZWxlbWVudC50eXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQudHlwZSwgZWxlbWVudC5wcm9wcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdFRleHR9IHRleHRcbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUZvclRleHQodGV4dCkge1xuICByZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyh0ZXh0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVGV4dENvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGNvbXBvbmVudCBpbnN0YW5jZW9mIHRleHRDb21wb25lbnRDbGFzcztcbn1cblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0ge1xuICBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQ6IGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCxcbiAgY3JlYXRlSW50ZXJuYWxDb21wb25lbnQ6IGNyZWF0ZUludGVybmFsQ29tcG9uZW50LFxuICBjcmVhdGVJbnN0YW5jZUZvclRleHQ6IGNyZWF0ZUluc3RhbmNlRm9yVGV4dCxcbiAgaXNUZXh0Q29tcG9uZW50OiBpc1RleHRDb21wb25lbnQsXG4gIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVDb21wb25lbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNH1dLDIzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5vb3BVcGRhdGVRdWV1ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIHdhcm5URFoocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvciAmJiBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnJykgOiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBhYnN0cmFjdCBBUEkgZm9yIGFuIHVwZGF0ZSBxdWV1ZS5cbiAqL1xudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhZnRlciBhbGwgdGhlIHBlbmRpbmcgdXBkYXRlc1xuICAgKiBoYXZlIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdG8gdXNlIGFzIGB0aGlzYCBjb250ZXh0LlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNhbGxiYWNrKSB7fSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSkge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRQcm9wczogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsUHJvcHMpIHtcbiAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAnc2V0UHJvcHMnKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyBOZXcgcHJvcHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VQcm9wczogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwcm9wcykge1xuICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdyZXBsYWNlUHJvcHMnKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMjM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcblxuICAvKipcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIG93bmVyLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzVmFsaWRPd25lcjogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uIChjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAhUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0ICcgKyAnYmUgYWRkaW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIG93bmVyLmF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBjb21wb25lbnQgYnkgcmVmIGZyb20gYW4gb3duZXIgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIGRlcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgb2YgdGhlIHJlZiB0byByZW1vdmUuXG4gICAqIEBwYXJhbSB7UmVhY3RPd25lcn0gb3duZXIgQ29tcG9uZW50IG9uIHdoaWNoIHRoZSByZWYgaXMgcmVjb3JkZWQuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCAnICsgJ2JlIHJlbW92aW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgIC8vIENoZWNrIHRoYXQgYGNvbXBvbmVudGAgaXMgc3RpbGwgdGhlIGN1cnJlbnQgcmVmIGJlY2F1c2Ugd2UgZG8gbm90IHdhbnQgdG9cbiAgICAvLyBkZXRhY2ggdGhlIHJlZiBpZiBhbm90aGVyIGNvbXBvbmVudCBzdG9sZSBpdC5cbiAgICBpZiAob3duZXIuZ2V0UHVibGljSW5zdGFuY2UoKS5yZWZzW3JlZl0gPT09IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKSB7XG4gICAgICBvd25lci5kZXRhY2hSZWYocmVmKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE93bmVyO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlYWN0UGVyZiBpcyBhIGdlbmVyYWwgQU9QIHN5c3RlbSBkZXNpZ25lZCB0byBtZWFzdXJlIHBlcmZvcm1hbmNlLiBUaGlzXG4gKiBtb2R1bGUgb25seSBoYXMgdGhlIGhvb2tzOiBzZWUgUmVhY3REZWZhdWx0UGVyZiBmb3IgdGhlIGFuYWx5c2lzIHRvb2wuXG4gKi9cbnZhciBSZWFjdFBlcmYgPSB7XG4gIC8qKlxuICAgKiBCb29sZWFuIHRvIGVuYWJsZS9kaXNhYmxlIG1lYXN1cmVtZW50LiBTZXQgdG8gZmFsc2UgYnkgZGVmYXVsdCB0byBwcmV2ZW50XG4gICAqIGFjY2lkZW50YWwgbG9nZ2luZyBhbmQgcGVyZiBsb3NzLlxuICAgKi9cbiAgZW5hYmxlTWVhc3VyZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhvbGRzIG9udG8gdGhlIG1lYXN1cmUgZnVuY3Rpb24gaW4gdXNlLiBCeSBkZWZhdWx0LCBkb24ndCBtZWFzdXJlXG4gICAqIGFueXRoaW5nLCBidXQgd2UnbGwgb3ZlcnJpZGUgdGhpcyBpZiB3ZSBpbmplY3QgYSBtZWFzdXJlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc3RvcmVkTWVhc3VyZTogX25vTWVhc3VyZSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqZWN0TmFtZVxuICAgKiBAcGFyYW0ge29iamVjdDxzdHJpbmc+fSBtZXRob2ROYW1lc1xuICAgKi9cbiAgbWVhc3VyZU1ldGhvZHM6IGZ1bmN0aW9uIChvYmplY3QsIG9iamVjdE5hbWUsIG1ldGhvZE5hbWVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBtZXRob2ROYW1lcykge1xuICAgICAgICBpZiAoIW1ldGhvZE5hbWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3Rba2V5XSA9IFJlYWN0UGVyZi5tZWFzdXJlKG9iamVjdE5hbWUsIG1ldGhvZE5hbWVzW2tleV0sIG9iamVjdFtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVzZSB0aGlzIHRvIHdyYXAgbWV0aG9kcyB5b3Ugd2FudCB0byBtZWFzdXJlLiBaZXJvIG92ZXJoZWFkIGluIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmpOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbk5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAgICovXG4gIG1lYXN1cmU6IGZ1bmN0aW9uIChvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1lYXN1cmVkRnVuYyA9IG51bGw7XG4gICAgICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlKSB7XG4gICAgICAgICAgaWYgKCFtZWFzdXJlZEZ1bmMpIHtcbiAgICAgICAgICAgIG1lYXN1cmVkRnVuYyA9IFJlYWN0UGVyZi5zdG9yZWRNZWFzdXJlKG9iak5hbWUsIGZuTmFtZSwgZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZWFzdXJlZEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuZGlzcGxheU5hbWUgPSBvYmpOYW1lICsgJ18nICsgZm5OYW1lO1xuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lYXN1cmVcbiAgICAgKi9cbiAgICBpbmplY3RNZWFzdXJlOiBmdW5jdGlvbiAobWVhc3VyZSkge1xuICAgICAgUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUgPSBtZWFzdXJlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTaW1wbHkgcGFzc2VzIHRocm91Z2ggdGhlIG1lYXN1cmVkIGZ1bmN0aW9uLCB3aXRob3V0IG1lYXN1cmluZyBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIF9ub01lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gIHJldHVybiBmdW5jO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UGVyZjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjExNH1dLDIzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0fV0sMjQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUeXBlTG9jYXRpb25zXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0ga2V5TWlycm9yKHtcbiAgcHJvcDogbnVsbCxcbiAgY29udGV4dDogbnVsbCxcbiAgY2hpbGRDb250ZXh0OiBudWxsXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25zO1xufSx7XCJmYmpzL2xpYi9rZXlNaXJyb3JcIjozN31dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuXG4gIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgaW5zdGFuY2VPZjogY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcixcbiAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gIG9uZU9mOiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIsXG4gIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agd2FzIG5vdCBzcGVjaWZpZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAvLyAnb2YgdHlwZSBgb2JqZWN0YCcuXG4gICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKG51bGwpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBhcnJheS4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnWycgKyBpICsgJ10nKTtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBleHBlY3RlZFZhbHVlc1tpXSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcyk7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIG9uZSBvZiAnICsgdmFsdWVzU3RyaW5nICsgJy4nKSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJyk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgIGlmIChjaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXkpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiBwcm9wVmFsdWUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuICFwcm9wVmFsdWU7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BWYWx1ZS5ldmVyeShpc05vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKHByb3BWYWx1ZSk7XG4gICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGlmICghaXNOb2RlKHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShlbnRyeVsxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiAnYXJyYXknO1xuICB9XG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAvLyBPbGQgd2Via2l0cyAoYXQgbGVhc3QgdW50aWwgQW5kcm9pZCA0LjApIHJldHVybiAnZnVuY3Rpb24nIHJhdGhlciB0aGFuXG4gICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgcmV0dXJuICdvYmplY3QnO1xuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG5mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbmZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgcmV0dXJuICc8PGFub255bW91cz4+JztcbiAgfVxuICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXM7XG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjE5LFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOjIzOSxcIi4vZ2V0SXRlcmF0b3JGblwiOjI4MSxcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIjoyNn1dLDI0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHJlcXVpcmUoJy4vUmVhY3RET01GZWF0dXJlRmxhZ3MnKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQsIHdoZW4gcG9zc2libGUsIHRoZSBzZWxlY3Rpb24gcmFuZ2UgKGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gKiBpbnB1dCkgaXMgbm90IGRpc3R1cmJlZCBieSBwZXJmb3JtaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIFNFTEVDVElPTl9SRVNUT1JBVElPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge1NlbGVjdGlvbn0gU2VsZWN0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb25JbmZvcm1hdGlvbixcbiAgLyoqXG4gICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgU2VsZWN0aW9uIGluZm9ybWF0aW9uIHJldHVybmVkIGZyb20gYGluaXRpYWxpemVgLlxuICAgKi9cbiAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxufTtcblxuLyoqXG4gKiBTdXBwcmVzc2VzIGV2ZW50cyAoYmx1ci9mb2N1cykgdGhhdCBjb3VsZCBiZSBpbmFkdmVydGVudGx5IGRpc3BhdGNoZWQgZHVlIHRvXG4gKiBoaWdoIGxldmVsIERPTSBtYW5pcHVsYXRpb25zIChsaWtlIHRlbXBvcmFyaWx5IHJlbW92aW5nIGEgdGV4dCBpbnB1dCBmcm9tIHRoZVxuICogRE9NKS5cbiAqL1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGVuYWJsZWQgc3RhdHVzIG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGJlZm9yZVxuICAgKiB0aGUgcmVjb25jaWxpYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnRseUVuYWJsZWQgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaXNFbmFibGVkKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByZXZpb3VzbHlFbmFibGVkIEVuYWJsZWQgc3RhdHVzIG9mXG4gICAqICAgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlIHRoZSByZWNvbmNpbGlhdGlvbiBvY2N1cnJlZC4gYGNsb3NlYFxuICAgKiAgIHJlc3RvcmVzIHRoZSBwcmV2aW91cyB2YWx1ZS5cbiAgICovXG4gIGNsb3NlOiBmdW5jdGlvbiAocHJldmlvdXNseUVuYWJsZWQpIHtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gIH1cbn07XG5cbi8qKlxuICogUHJvdmlkZXMgYSBxdWV1ZSBmb3IgY29sbGVjdGluZyBgY29tcG9uZW50RGlkTW91bnRgIGFuZFxuICogYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGR1cmluZyB0aGUgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZnRlciBET00gaXMgZmx1c2hlZCwgaW52b2tlIGFsbCByZWdpc3RlcmVkIGBvbkRPTVJlYWR5YCBjYWxsYmFja3MuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbU0VMRUNUSU9OX1JFU1RPUkFUSU9OLCBFVkVOVF9TVVBQUkVTU0lPTiwgT05fRE9NX1JFQURZX1FVRVVFSU5HXTtcblxuLyoqXG4gKiBDdXJyZW50bHk6XG4gKiAtIFRoZSBvcmRlciB0aGF0IHRoZXNlIGFyZSBsaXN0ZWQgaW4gdGhlIHRyYW5zYWN0aW9uIGlzIGNyaXRpY2FsOlxuICogLSBTdXBwcmVzc2VzIGV2ZW50cy5cbiAqIC0gUmVzdG9yZXMgc2VsZWN0aW9uIHJhbmdlLlxuICpcbiAqIEZ1dHVyZTpcbiAqIC0gUmVzdG9yZSBkb2N1bWVudC9vdmVyZmxvdyBzY3JvbGwgcG9zaXRpb25zIHRoYXQgd2VyZSB1bmludGVudGlvbmFsbHlcbiAqICAgbW9kaWZpZWQgdmlhIERPTSBpbnNlcnRpb25zIGFib3ZlIHRoZSB0b3Agdmlld3BvcnQgYm91bmRhcnkuXG4gKiAtIEltcGxlbWVudC9pbnRlZ3JhdGUgd2l0aCBjdXN0b21pemVkIGNvbnN0cmFpbnQgYmFzZWQgbGF5b3V0IHN5c3RlbSBhbmQga2VlcFxuICogICB0cmFjayBvZiB3aGljaCBkaW1lbnNpb25zIG11c3QgYmUgcmVtZWFzdXJlZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICovXG5mdW5jdGlvbiBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKGZvcmNlSFRNTCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RUZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gIWZvcmNlSFRNTCAmJiBSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50O1xufVxuXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBAc2VlIFRyYW5zYWN0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAZmluYWxcbiAgICogQHJldHVybiB7YXJyYXk8b2JqZWN0Pn0gTGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKiAgIFRPRE86IGNvbnZlcnQgdG8gYXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMsIGFuZCB3aWxsIGludm9rZSB0aGlzIGJlZm9yZSBhbGxvd2luZyB0aGlzXG4gICAqIGluc3RhbmNlIHRvIGJlIHJldXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcblxuYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbn0se1wiLi9DYWxsYmFja1F1ZXVlXCI6MTcyLFwiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9Qb29sZWRDbGFzc1wiOjE5MCxcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6MTkzLFwiLi9SZWFjdERPTUZlYXR1cmVGbGFnc1wiOjIwNixcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiOjIyNyxcIi4vVHJhbnNhY3Rpb25cIjoyNjd9XSwyNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVjb25jaWxlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVmID0gcmVxdWlyZSgnLi9SZWFjdFJlZicpO1xuXG4vKipcbiAqIEhlbHBlciB0byBjYWxsIFJlYWN0UmVmLmF0dGFjaFJlZnMgd2l0aCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQsIHNwbGl0IG91dFxuICogdG8gYXZvaWQgYWxsb2NhdGlvbnMgaW4gdGhlIHRyYW5zYWN0aW9uIG1vdW50LXJlYWR5IHF1ZXVlLlxuICovXG5mdW5jdGlvbiBhdHRhY2hSZWZzKCkge1xuICBSZWFjdFJlZi5hdHRhY2hSZWZzKHRoaXMsIHRoaXMuX2N1cnJlbnRFbGVtZW50KTtcbn1cblxudmFyIFJlYWN0UmVjb25jaWxlciA9IHtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIHJvb3RJRCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya3VwID0gaW50ZXJuYWxJbnN0YW5jZS5tb3VudENvbXBvbmVudChyb290SUQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoYXR0YWNoUmVmcywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIGFueSByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IGBtb3VudENvbXBvbmVudGAuXG4gICAqXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCk7XG4gICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIGNvbXBvbmVudCB1c2luZyBhIG5ldyBlbGVtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBwcmV2RWxlbWVudCA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50O1xuXG4gICAgaWYgKG5leHRFbGVtZW50ID09PSBwcmV2RWxlbWVudCAmJiBjb250ZXh0ID09PSBpbnRlcm5hbEluc3RhbmNlLl9jb250ZXh0KSB7XG4gICAgICAvLyBTaW5jZSBlbGVtZW50cyBhcmUgaW1tdXRhYmxlIGFmdGVyIHRoZSBvd25lciBpcyByZW5kZXJlZCxcbiAgICAgIC8vIHdlIGNhbiBkbyBhIGNoZWFwIGlkZW50aXR5IGNvbXBhcmUgaGVyZSB0byBkZXRlcm1pbmUgaWYgdGhpcyBpcyBhXG4gICAgICAvLyBzdXBlcmZsdW91cyByZWNvbmNpbGUuIEl0J3MgcG9zc2libGUgZm9yIHN0YXRlIHRvIGJlIG11dGFibGUgYnV0IHN1Y2hcbiAgICAgIC8vIGNoYW5nZSBzaG91bGQgdHJpZ2dlciBhbiB1cGRhdGUgb2YgdGhlIG93bmVyIHdoaWNoIHdvdWxkIHJlY3JlYXRlXG4gICAgICAvLyB0aGUgZWxlbWVudC4gV2UgZXhwbGljaXRseSBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBvd25lciBzaW5jZVxuICAgICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgYW4gZWxlbWVudCBjcmVhdGVkIG91dHNpZGUgYSBjb21wb3NpdGUgdG8gYmVcbiAgICAgIC8vIGRlZXBseSBtdXRhdGVkIGFuZCByZXVzZWQuXG5cbiAgICAgIC8vIFRPRE86IEJhaWxpbmcgb3V0IGVhcmx5IGlzIGp1c3QgYSBwZXJmIG9wdGltaXphdGlvbiByaWdodD9cbiAgICAgIC8vIFRPRE86IFJlbW92aW5nIHRoZSByZXR1cm4gc3RhdGVtZW50IHNob3VsZCBhZmZlY3QgY29ycmVjdG5lc3M/XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJlZnNDaGFuZ2VkID0gUmVhY3RSZWYuc2hvdWxkVXBkYXRlUmVmcyhwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpO1xuXG4gICAgaWYgKHJlZnNDaGFuZ2VkKSB7XG4gICAgICBSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsIHByZXZFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbEluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIGlmIChyZWZzQ2hhbmdlZCAmJiBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCAmJiBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5yZWYgIT0gbnVsbCkge1xuICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZsdXNoIGFueSBkaXJ0eSBjaGFuZ2VzIGluIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnRlcm5hbEluc3RhbmNlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCB0cmFuc2FjdGlvbikge1xuICAgIGludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjtcbn0se1wiLi9SZWFjdFJlZlwiOjI0NH1dLDI0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSZWZcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdE93bmVyJyk7XG5cbnZhciBSZWFjdFJlZiA9IHt9O1xuXG5mdW5jdGlvbiBhdHRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMZWdhY3kgcmVmXG4gICAgUmVhY3RPd25lci5hZGRDb21wb25lbnRBc1JlZlRvKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihudWxsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMZWdhY3kgcmVmXG4gICAgUmVhY3RPd25lci5yZW1vdmVDb21wb25lbnRBc1JlZkZyb20oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgfVxufVxuXG5SZWFjdFJlZi5hdHRhY2hSZWZzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgYXR0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgfVxufTtcblxuUmVhY3RSZWYuc2hvdWxkVXBkYXRlUmVmcyA9IGZ1bmN0aW9uIChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgLy8gSWYgZWl0aGVyIHRoZSBvd25lciBvciBhIGByZWZgIGhhcyBjaGFuZ2VkLCBtYWtlIHN1cmUgdGhlIG5ld2VzdCBvd25lclxuICAvLyBoYXMgc3RvcmVkIGEgcmVmZXJlbmNlIHRvIGB0aGlzYCwgYW5kIHRoZSBwcmV2aW91cyBvd25lciAoaWYgZGlmZmVyZW50KVxuICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAvLyBvZiB0aGUgcHVibGljIHRoaXMucHJvcHMgYmVjYXVzZSB0aGUgcG9zdCBwcm9jZXNzaW5nIGNhbm5vdCBkZXRlcm1pbmVcbiAgLy8gYSByZWYuIFRoZSByZWYgY29uY2VwdHVhbGx5IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuXG4gIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgLy8gaXQncyBmb3JiaWRkZW4gYnkgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQuIFRoZSByZWYgY2FuIGNoYW5nZVxuICAvLyBpZiB5b3Ugc3dhcCB0aGUga2V5cyBvZiBidXQgbm90IHRoZSByZWZzLiBSZWNvbnNpZGVyIHdoZXJlIHRoaXMgY2hlY2tcbiAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAvLyBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50IGlzIGRvbmUuXG5cbiAgdmFyIHByZXZFbXB0eSA9IHByZXZFbGVtZW50ID09PSBudWxsIHx8IHByZXZFbGVtZW50ID09PSBmYWxzZTtcbiAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcblxuICByZXR1cm4oXG4gICAgLy8gVGhpcyBoYXMgYSBmZXcgZmFsc2UgcG9zaXRpdmVzIHcvci90IGVtcHR5IGNvbXBvbmVudHMuXG4gICAgcHJldkVtcHR5IHx8IG5leHRFbXB0eSB8fCBuZXh0RWxlbWVudC5fb3duZXIgIT09IHByZXZFbGVtZW50Ll9vd25lciB8fCBuZXh0RWxlbWVudC5yZWYgIT09IHByZXZFbGVtZW50LnJlZlxuICApO1xufTtcblxuUmVhY3RSZWYuZGV0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChyZWYgIT0gbnVsbCkge1xuICAgIGRldGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWY7XG59LHtcIi4vUmVhY3RPd25lclwiOjIzN31dLDI0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RSb290SW5kZXhcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSb290SW5kZXhJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgICovXG4gIGluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbiAoX2NyZWF0ZVJlYWN0Um9vdEluZGV4KSB7XG4gICAgUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggPSBfY3JlYXRlUmVhY3RSb290SW5kZXg7XG4gIH1cbn07XG5cbnZhciBSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IG51bGwsXG4gIGluamVjdGlvbjogUmVhY3RSb290SW5kZXhJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSb290SW5kZXg7XG59LHt9XSwyNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGhlcmUuIER1cmluZyB0aGUgc2VydmVyIHJlbmRlcmluZyB3ZSBkb24ndCB3YW50IHRvXG4gICAgLy8gc2NoZWR1bGUgYW55IHVwZGF0ZXMuIFdlIHdpbGwgc2ltcGx5IGlnbm9yZSB0aGVtLlxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneTtcbn0se31dLDI0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5Jyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZSgnLi9SZWFjdE1hcmt1cENoZWNrc3VtJyk7XG52YXIgUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RyaW5nKGVsZW1lbnQpIHtcbiAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW5kZXJUb1N0cmluZygpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQoZmFsc2UpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCBudWxsKTtcbiAgICAgIHZhciBtYXJrdXAgPSBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudChpZCwgdHJhbnNhY3Rpb24sIGVtcHR5T2JqZWN0KTtcbiAgICAgIHJldHVybiBSZWFjdE1hcmt1cENoZWNrc3VtLmFkZENoZWNrc3VtVG9NYXJrdXAobWFya3VwKTtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIC8vIFJldmVydCB0byB0aGUgRE9NIGJhdGNoaW5nIHN0cmF0ZWd5IHNpbmNlIHRoZXNlIHR3byByZW5kZXJlcnNcbiAgICAvLyBjdXJyZW50bHkgc2hhcmUgdGhlc2Ugc3RhdGVmdWwgbW9kdWxlcy5cbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgSFRNTCBtYXJrdXAsIHdpdGhvdXQgdGhlIGV4dHJhIFJlYWN0IElEIGFuZCBjaGVja3N1bVxuICogKGZvciBnZW5lcmF0aW5nIHN0YXRpYyBwYWdlcylcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCkge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3JlbmRlclRvU3RhdGljTWFya3VwKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5KTtcblxuICAgIHZhciBpZCA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0Um9vdElEKCk7XG4gICAgdHJhbnNhY3Rpb24gPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmdldFBvb2xlZCh0cnVlKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5wZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgbnVsbCk7XG4gICAgICByZXR1cm4gY29tcG9uZW50SW5zdGFuY2UubW91bnRDb21wb25lbnQoaWQsIHRyYW5zYWN0aW9uLCBlbXB0eU9iamVjdCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICAvLyBSZXZlcnQgdG8gdGhlIERPTSBiYXRjaGluZyBzdHJhdGVneSBzaW5jZSB0aGVzZSB0d28gcmVuZGVyZXJzXG4gICAgLy8gY3VycmVudGx5IHNoYXJlIHRoZXNlIHN0YXRlZnVsIG1vZHVsZXMuXG4gICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZW5kZXJUb1N0cmluZzogcmVuZGVyVG9TdHJpbmcsXG4gIHJlbmRlclRvU3RhdGljTWFya3VwOiByZW5kZXJUb1N0YXRpY01hcmt1cFxufTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lcIjoyMTUsXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMjgsXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIjoyMzEsXCIuL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneVwiOjI0NixcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblwiOjI0OCxcIi4vUmVhY3RVcGRhdGVzXCI6MjUwLFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCI6Mjg0LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiOjI3LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoJy4vQ2FsbGJhY2tRdWV1ZScpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIGBDYWxsYmFja1F1ZXVlYCBxdWV1ZSBmb3IgY29sbGVjdGluZyBgb25ET01SZWFkeWAgY2FsbGJhY2tzXG4gKiBkdXJpbmcgdGhlIHBlcmZvcm1pbmcgb2YgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGludGVybmFsIGBvbkRPTVJlYWR5YCBxdWV1ZS5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG59O1xuXG4vKipcbiAqIEV4ZWN1dGVkIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGBUcmFuc2FjdGlvbmAgaW5zdGFuY2UuIENvbnNpZGVyIHRoZXNlIGFzXG4gKiBiZWluZyBtZW1iZXIgbWV0aG9kcywgYnV0IHdpdGggYW4gaW1wbGllZCBvcmRlcmluZyB3aGlsZSBiZWluZyBpc29sYXRlZCBmcm9tXG4gKiBlYWNoIG90aGVyLlxuICovXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbT05fRE9NX1JFQURZX1FVRVVFSU5HXTtcblxuLyoqXG4gKiBAY2xhc3MgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSByZW5kZXJUb1N0YXRpY01hcmt1cFxuICovXG5mdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSBmYWxzZTtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5fSBFbXB0eSBsaXN0IG9mIG9wZXJhdGlvbiB3cmFwIHByb2NlZHVyZXMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IGBvbkRPTVJlYWR5YCBjYWxsYmFja3Mgd2l0aC5cbiAgICovXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmV1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuICB9XG59O1xuXG5hc3NpZ24oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uO1xufSx7XCIuL0NhbGxiYWNrUXVldWVcIjoxNzIsXCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1Bvb2xlZENsYXNzXCI6MTkwLFwiLi9UcmFuc2FjdGlvblwiOjI2NyxcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIjoyNn1dLDI0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZVF1ZXVlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSkge1xuICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQocHVibGljSW5zdGFuY2UpO1xuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gT25seSB3YXJuIHdoZW4gd2UgaGF2ZSBhIGNhbGxlck5hbWUuIE90aGVyd2lzZSB3ZSBzaG91bGQgYmUgc2lsZW50LlxuICAgICAgLy8gV2UncmUgcHJvYmFibHkgY2FsbGluZyBmcm9tIGVucXVldWVDYWxsYmFjay4gV2UgZG9uJ3Qgd2FudCB0byB3YXJuXG4gICAgICAvLyB0aGVyZSBiZWNhdXNlIHdlIGFscmVhZHkgd2FybmVkIGZvciB0aGUgY29ycmVzcG9uZGluZyBsaWZlY3ljbGUgbWV0aG9kLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNhbGxlck5hbWUsICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuICcgKyAnVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY2FsbGVyTmFtZSwgcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3IuZGlzcGxheU5hbWUpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAnJXMoLi4uKTogQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAnICsgJyhzdWNoIGFzIHdpdGhpbiBgcmVuZGVyYCkuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArICdvZiBwcm9wcyBhbmQgc3RhdGUuJywgY2FsbGVyTmFtZSkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZTtcbn1cblxuLyoqXG4gKiBSZWFjdFVwZGF0ZVF1ZXVlIGFsbG93cyBmb3Igc3RhdGUgdXBkYXRlcyB0byBiZSBzY2hlZHVsZWQgaW50byBhIGxhdGVyXG4gKiByZWNvbmNpbGlhdGlvbiBzdGVwLlxuICovXG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHtcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB3ZSB3YW50IHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNNb3VudGVkOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIGlmIChvd25lciAhPT0gbnVsbCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIsICclcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQocHVibGljSW5zdGFuY2UpO1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAvLyBEdXJpbmcgY29tcG9uZW50V2lsbE1vdW50IGFuZCByZW5kZXIgdGhpcyB3aWxsIHN0aWxsIGJlIG51bGwgYnV0IGFmdGVyXG4gICAgICAvLyB0aGF0IHdpbGwgYWx3YXlzIHJlbmRlciB0byBzb21ldGhpbmcuIEF0IGxlYXN0IGZvciBub3cuIFNvIHdlIGNhbiB1c2VcbiAgICAgIC8vIHRoaXMgaGFjay5cbiAgICAgIHJldHVybiAhIWludGVybmFsSW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAhKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZW5xdWV1ZUNhbGxiYWNrKC4uLik6IFlvdSBjYWxsZWQgYHNldFByb3BzYCwgYHJlcGxhY2VQcm9wc2AsICcgKyAnYHNldFN0YXRlYCwgYHJlcGxhY2VTdGF0ZWAsIG9yIGBmb3JjZVVwZGF0ZWAgd2l0aCBhIGNhbGxiYWNrIHRoYXQgJyArICdpc25cXCd0IGNhbGxhYmxlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSk7XG5cbiAgICAvLyBQcmV2aW91c2x5IHdlIHdvdWxkIHRocm93IGFuIGVycm9yIGlmIHdlIGRpZG4ndCBoYXZlIGFuIGludGVybmFsXG4gICAgLy8gaW5zdGFuY2UuIFNpbmNlIHdlIHdhbnQgdG8gbWFrZSBpdCBhIG5vLW9wIGluc3RlYWQsIHdlIG1pcnJvciB0aGUgc2FtZVxuICAgIC8vIGJlaGF2aW9yIHdlIGhhdmUgaW4gb3RoZXIgZW5xdWV1ZSogbWV0aG9kcy5cbiAgICAvLyBXZSBhbHNvIG5lZWQgdG8gaWdub3JlIGNhbGxiYWNrcyBpbiBjb21wb25lbnRXaWxsTW91bnQuIFNlZVxuICAgIC8vIGVucXVldWVVcGRhdGVzLlxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgIH1cbiAgICAvLyBUT0RPOiBUaGUgY2FsbGJhY2sgaGVyZSBpcyBpZ25vcmVkIHdoZW4gc2V0U3RhdGUgaXMgY2FsbGVkIGZyb21cbiAgICAvLyBjb21wb25lbnRXaWxsTW91bnQuIEVpdGhlciBmaXggaXQgb3IgZGlzYWxsb3cgZG9pbmcgc28gY29tcGxldGVseSBpblxuICAgIC8vIGZhdm9yIG9mIGdldEluaXRpYWxTdGF0ZS4gQWx0ZXJuYXRpdmVseSwgd2UgY2FuIGRpc2FsbG93XG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGR1cmluZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICBlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gICAgISh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2VucXVldWVDYWxsYmFjayguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICsgJ2BzZXRTdGF0ZWAsIGByZXBsYWNlU3RhdGVgLCBvciBgZm9yY2VVcGRhdGVgIHdpdGggYSBjYWxsYmFjayB0aGF0ICcgKyAnaXNuXFwndCBjYWxsYWJsZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgIH1cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgPSBbY29tcGxldGVTdGF0ZV07XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBxdWV1ZSA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8IChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHBhcnRpYWxTdGF0ZSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBwcm9wcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsUHJvcHMgU3Vic2V0IG9mIHRoZSBuZXh0IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRQcm9wczogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsUHJvcHMpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ3NldFByb3BzJyk7XG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZVNldFByb3BzSW50ZXJuYWwoaW50ZXJuYWxJbnN0YW5jZSwgcGFydGlhbFByb3BzKTtcbiAgfSxcblxuICBlbnF1ZXVlU2V0UHJvcHNJbnRlcm5hbDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIHBhcnRpYWxQcm9wcykge1xuICAgIHZhciB0b3BMZXZlbFdyYXBwZXIgPSBpbnRlcm5hbEluc3RhbmNlLl90b3BMZXZlbFdyYXBwZXI7XG4gICAgIXRvcExldmVsV3JhcHBlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRQcm9wcyguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2Agb24gYSAnICsgJ2NvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsICcgKyAnZ2V0IHJlYWN0aXZlbHkgdXBkYXRlZCB3aGVuIHJlbmRlcmVkLiBJbnN0ZWFkLCBjaGFuZ2UgdGhlIG93bmVyXFwncyAnICsgJ2ByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgJyArICd3aGVyZSBpdCBpcyBjcmVhdGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgLy8gZWxlbWVudCBwcm9wcy5cbiAgICB2YXIgd3JhcEVsZW1lbnQgPSB0b3BMZXZlbFdyYXBwZXIuX3BlbmRpbmdFbGVtZW50IHx8IHRvcExldmVsV3JhcHBlci5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIGVsZW1lbnQgPSB3cmFwRWxlbWVudC5wcm9wcztcbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcyk7XG4gICAgdG9wTGV2ZWxXcmFwcGVyLl9wZW5kaW5nRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VQcm9wcyh3cmFwRWxlbWVudCwgUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKGVsZW1lbnQsIHByb3BzKSk7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKHRvcExldmVsV3JhcHBlcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgcHJvcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgTmV3IHByb3BzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVSZXBsYWNlUHJvcHM6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgcHJvcHMpIHtcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VQcm9wcycpO1xuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVSZXBsYWNlUHJvcHNJbnRlcm5hbChpbnRlcm5hbEluc3RhbmNlLCBwcm9wcyk7XG4gIH0sXG5cbiAgZW5xdWV1ZVJlcGxhY2VQcm9wc0ludGVybmFsOiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgcHJvcHMpIHtcbiAgICB2YXIgdG9wTGV2ZWxXcmFwcGVyID0gaW50ZXJuYWxJbnN0YW5jZS5fdG9wTGV2ZWxXcmFwcGVyO1xuICAgICF0b3BMZXZlbFdyYXBwZXIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVwbGFjZVByb3BzKC4uLik6IFlvdSBjYWxsZWQgYHJlcGxhY2VQcm9wc2Agb24gYSAnICsgJ2NvbXBvbmVudCB3aXRoIGEgcGFyZW50LiBUaGlzIGlzIGFuIGFudGktcGF0dGVybiBzaW5jZSBwcm9wcyB3aWxsICcgKyAnZ2V0IHJlYWN0aXZlbHkgdXBkYXRlZCB3aGVuIHJlbmRlcmVkLiBJbnN0ZWFkLCBjaGFuZ2UgdGhlIG93bmVyXFwncyAnICsgJ2ByZW5kZXJgIG1ldGhvZCB0byBwYXNzIHRoZSBjb3JyZWN0IHZhbHVlIGFzIHByb3BzIHRvIHRoZSBjb21wb25lbnQgJyArICd3aGVyZSBpdCBpcyBjcmVhdGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgLy8gZWxlbWVudCBwcm9wcy5cbiAgICB2YXIgd3JhcEVsZW1lbnQgPSB0b3BMZXZlbFdyYXBwZXIuX3BlbmRpbmdFbGVtZW50IHx8IHRvcExldmVsV3JhcHBlci5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIGVsZW1lbnQgPSB3cmFwRWxlbWVudC5wcm9wcztcbiAgICB0b3BMZXZlbFdyYXBwZXIuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKHdyYXBFbGVtZW50LCBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoZWxlbWVudCwgcHJvcHMpKTtcblxuICAgIGVucXVldWVVcGRhdGUodG9wTGV2ZWxXcmFwcGVyKTtcbiAgfSxcblxuICBlbnF1ZXVlRWxlbWVudEludGVybmFsOiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgbmV3RWxlbWVudCkge1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gbmV3RWxlbWVudDtcbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MjAxLFwiLi9SZWFjdEVsZW1lbnRcIjoyMTksXCIuL1JlYWN0SW5zdGFuY2VNYXBcIjoyMjksXCIuL1JlYWN0VXBkYXRlc1wiOjI1MCxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZSgnLi9SZWFjdFBlcmYnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbnZhciBkaXJ0eUNvbXBvbmVudHMgPSBbXTtcbnZhciBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG52YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cbnZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gICEoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgJyArICdzdHJhdGVneScpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbn1cblxudmFyIE5FU1RFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCggLyogZm9yY2VIVE1MICovZmFsc2UpO1xufVxuXG5hc3NpZ24oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5jYWxsYmFja1F1ZXVlKTtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IG51bGw7XG4gIH0sXG5cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uTWl4aW4ucGVyZm9ybS5jYWxsKHRoaXMsIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSwgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgbWV0aG9kLCBzY29wZSwgYSk7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbik7XG5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG4gIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xufVxuXG4vKipcbiAqIEFycmF5IGNvbXBhcmF0b3IgZm9yIFJlYWN0Q29tcG9uZW50cyBieSBtb3VudCBvcmRlcmluZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnRPcmRlckNvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAhKGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgKyAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaXQgd2lsbCBzdGlsbFxuICAgIC8vIGJlIGhlcmUsIGJ1dCB3ZSBhc3N1bWUgdGhhdCBpdCBoYXMgY2xlYXJlZCBpdHMgX3BlbmRpbmdDYWxsYmFja3MgYW5kXG4gICAgLy8gdGhhdCBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaXMgYSBub29wLlxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG5cbiAgICAvLyBJZiBwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkgaGFwcGVucyB0byBlbnF1ZXVlIGFueSBuZXcgdXBkYXRlcywgd2VcbiAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgIC8vIHN0YXNoIHRoZSBjYWxsYmFja3MgZmlyc3RcbiAgICB2YXIgY2FsbGJhY2tzID0gY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzO1xuICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG5cbiAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGNvbXBvbmVudCwgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uY2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrc1tqXSwgY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICBxdWV1ZS5ub3RpZnlBbGwoKTtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgfVxuICB9XG59O1xuZmx1c2hCYXRjaGVkVXBkYXRlcyA9IFJlYWN0UGVyZi5tZWFzdXJlKCdSZWFjdFVwZGF0ZXMnLCAnZmx1c2hCYXRjaGVkVXBkYXRlcycsIGZsdXNoQmF0Y2hlZFVwZGF0ZXMpO1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG5cbiAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChUaGlzIGlzIGNhbGxlZCBieSBlYWNoIHRvcC1sZXZlbCB1cGRhdGVcbiAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0UHJvcHMsIHNldFN0YXRlLCBmb3JjZVVwZGF0ZSwgZXRjLjsgY3JlYXRpb24gYW5kXG4gIC8vIGRlc3RydWN0aW9uIG9mIHRvcC1sZXZlbCBjb21wb25lbnRzIGlzIGd1YXJkZWQgaW4gUmVhY3RNb3VudC4pXG5cbiAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpcnR5Q29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgKyAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICBhc2FwQ2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbn1cblxudmFyIFJlYWN0VXBkYXRlc0luamVjdGlvbiA9IHtcbiAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uIChSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgICFSZWNvbmNpbGVUcmFuc2FjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlY29uY2lsZVRyYW5zYWN0aW9uO1xuICB9LFxuXG4gIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uIChfYmF0Y2hpbmdTdHJhdGVneSkge1xuICAgICFfYmF0Y2hpbmdTdHJhdGVneSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoaW5nIHN0cmF0ZWd5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgYmF0Y2hpbmdTdHJhdGVneSA9IF9iYXRjaGluZ1N0cmF0ZWd5O1xuICB9XG59O1xuXG52YXIgUmVhY3RVcGRhdGVzID0ge1xuICAvKipcbiAgICogUmVhY3QgcmVmZXJlbmNlcyBgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbmAgdXNpbmcgdGhpcyBwcm9wZXJ0eSBpbiBvcmRlclxuICAgKiB0byBhbGxvdyBkZXBlbmRlbmN5IGluamVjdGlvbi5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBudWxsLFxuXG4gIGJhdGNoZWRVcGRhdGVzOiBiYXRjaGVkVXBkYXRlcyxcbiAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgZmx1c2hCYXRjaGVkVXBkYXRlczogZmx1c2hCYXRjaGVkVXBkYXRlcyxcbiAgaW5qZWN0aW9uOiBSZWFjdFVwZGF0ZXNJbmplY3Rpb24sXG4gIGFzYXA6IGFzYXBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVzO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ2FsbGJhY2tRdWV1ZVwiOjE3MixcIi4vT2JqZWN0LmFzc2lnblwiOjE4OSxcIi4vUG9vbGVkQ2xhc3NcIjoxOTAsXCIuL1JlYWN0UGVyZlwiOjIzOCxcIi4vUmVhY3RSZWNvbmNpbGVyXCI6MjQzLFwiLi9UcmFuc2FjdGlvblwiOjI2NyxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0VmVyc2lvblxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAnMC4xNC4wJztcbn0se31dLDI1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU1ZHRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcblxudmFyIE1VU1RfVVNFX0FUVFJJQlVURSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9BVFRSSUJVVEU7XG5cbnZhciBOUyA9IHtcbiAgeGxpbms6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xufTtcblxudmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0ge1xuICBQcm9wZXJ0aWVzOiB7XG4gICAgY2xpcFBhdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250RmFtaWx5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udFNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyRW5kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyTWlkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyU3RhcnQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvZmZzZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Vbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBvaW50czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwcmVhZE1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BDb2xvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlTGluZWNhcDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZU9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VXaWR0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRleHRBbmNob3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0cmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2ZXJzaW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmlld0JveDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtBY3R1YXRlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtBcmNyb2xlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtIcmVmOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtSb2xlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtTaG93OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeGxpbmtUaXRsZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhsaW5rVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHhtbEJhc2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4bWxMYW5nOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeG1sU3BhY2U6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHkyOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTogTVVTVF9VU0VfQVRUUklCVVRFXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6IHtcbiAgICB4bGlua0FjdHVhdGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rQXJjcm9sZTogTlMueGxpbmssXG4gICAgeGxpbmtIcmVmOiBOUy54bGluayxcbiAgICB4bGlua1JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rU2hvdzogTlMueGxpbmssXG4gICAgeGxpbmtUaXRsZTogTlMueGxpbmssXG4gICAgeGxpbmtUeXBlOiBOUy54bGluayxcbiAgICB4bWxCYXNlOiBOUy54bWwsXG4gICAgeG1sTGFuZzogTlMueG1sLFxuICAgIHhtbFNwYWNlOiBOUy54bWxcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gICAgZmlsbE9wYWNpdHk6ICdmaWxsLW9wYWNpdHknLFxuICAgIGZvbnRGYW1pbHk6ICdmb250LWZhbWlseScsXG4gICAgZm9udFNpemU6ICdmb250LXNpemUnLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICAgIGdyYWRpZW50VW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgICBtYXJrZXJNaWQ6ICdtYXJrZXItbWlkJyxcbiAgICBtYXJrZXJTdGFydDogJ21hcmtlci1zdGFydCcsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICAgIHBhdHRlcm5Vbml0czogJ3BhdHRlcm5Vbml0cycsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICAgIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gICAgc3RvcENvbG9yOiAnc3RvcC1jb2xvcicsXG4gICAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICAgIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICAgIHN0cm9rZUxpbmVjYXA6ICdzdHJva2UtbGluZWNhcCcsXG4gICAgc3Ryb2tlT3BhY2l0eTogJ3N0cm9rZS1vcGFjaXR5JyxcbiAgICBzdHJva2VXaWR0aDogJ3N0cm9rZS13aWR0aCcsXG4gICAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgICB2aWV3Qm94OiAndmlld0JveCcsXG4gICAgeGxpbmtBY3R1YXRlOiAneGxpbms6YWN0dWF0ZScsXG4gICAgeGxpbmtBcmNyb2xlOiAneGxpbms6YXJjcm9sZScsXG4gICAgeGxpbmtIcmVmOiAneGxpbms6aHJlZicsXG4gICAgeGxpbmtSb2xlOiAneGxpbms6cm9sZScsXG4gICAgeGxpbmtTaG93OiAneGxpbms6c2hvdycsXG4gICAgeGxpbmtUaXRsZTogJ3hsaW5rOnRpdGxlJyxcbiAgICB4bGlua1R5cGU6ICd4bGluazp0eXBlJyxcbiAgICB4bWxCYXNlOiAneG1sOmJhc2UnLFxuICAgIHhtbExhbmc6ICd4bWw6bGFuZycsXG4gICAgeG1sU3BhY2U6ICd4bWw6c3BhY2UnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHRE9NUHJvcGVydHlDb25maWc7XG59LHtcIi4vRE9NUHJvcGVydHlcIjoxNzZ9XSwyNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlbGVjdEV2ZW50UGx1Z2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCcpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoJy4vaXNUZXh0SW5wdXRFbGVtZW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgc2VsZWN0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TZWxlY3Q6IG51bGwgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblNlbGVjdENhcHR1cmU6IG51bGwgfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudSwgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwLCB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZV1cbiAgfVxufTtcblxudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG52YXIgbW91c2VEb3duID0gZmFsc2U7XG5cbi8vIFRyYWNrIHdoZXRoZXIgYSBsaXN0ZW5lciBleGlzdHMgZm9yIHRoaXMgcGx1Z2luLiBJZiBub25lIGV4aXN0LCB3ZSBkb1xuLy8gbm90IGV4dHJhY3QgZXZlbnRzLlxudmFyIGhhc0xpc3RlbmVyID0gZmFsc2U7XG52YXIgT05fU0VMRUNUX0tFWSA9IGtleU9mKHsgb25TZWxlY3Q6IG51bGwgfSk7XG5cbi8qKlxuICogR2V0IGFuIG9iamVjdCB3aGljaCBpcyBhIHVuaXF1ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIG5vdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBub2RlcyBvciBicm93c2VycywgYnV0XG4gKiB0d28gaWRlbnRpY2FsIHNlbGVjdGlvbnMgb24gdGhlIHNhbWUgbm9kZSB3aWxsIHJldHVybiBpZGVudGljYWwgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRFbGVtZW50OiByYW5nZS5wYXJlbnRFbGVtZW50KCksXG4gICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcbiAgICAgIGxlZnQ6IHJhbmdlLmJvdW5kaW5nTGVmdFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQb2xsIHNlbGVjdGlvbiB0byBzZWUgd2hldGhlciBpdCdzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAvLyBFbnN1cmUgd2UgaGF2ZSB0aGUgcmlnaHQgZWxlbWVudCwgYW5kIHRoYXQgdGhlIHVzZXIgaXMgbm90IGRyYWdnaW5nIGFcbiAgLy8gc2VsZWN0aW9uICh0aGlzIG1hdGNoZXMgbmF0aXZlIGBzZWxlY3RgIGV2ZW50IGJlaGF2aW9yKS4gSW4gSFRNTDUsIHNlbGVjdFxuICAvLyBmaXJlcyBvbmx5IG9uIGlucHV0IGFuZCB0ZXh0YXJlYSB0aHVzIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50IHdlXG4gIC8vIHdvbid0IGRpc3BhdGNoLlxuICBpZiAobW91c2VEb3duIHx8IGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fCBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oYWN0aXZlRWxlbWVudCk7XG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG5cbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5zZWxlY3QsIGFjdGl2ZUVsZW1lbnRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcblxuICAgIHJldHVybiBzeW50aGV0aWNFdmVudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uU2VsZWN0YCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgc2VsZWN0IGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gY29udGVudEVkaXRhYmxlXG4gKlxuICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAqIC0gRmlyZXMgb24gY29udGVudEVkaXRhYmxlIGZpZWxkcyBhcyB3ZWxsIGFzIGlucHV0cy5cbiAqIC0gRmlyZXMgZm9yIGNvbGxhcHNlZCBzZWxlY3Rpb24uXG4gKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG4gKi9cbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElELCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICBpZiAoIWhhc0xpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgLy8gVHJhY2sgdGhlIGlucHV0IG5vZGUgdGhhdCBoYXMgZm9jdXMuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpIHx8IHRvcExldmVsVGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHRvcExldmVsVGFyZ2V0O1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IHRvcExldmVsVGFyZ2V0SUQ7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuIElFJ3MgZXZlbnQgZmlyZXMgb3V0IG9mIG9yZGVyIHdpdGggcmVzcGVjdFxuICAgICAgLy8gdG8ga2V5IGFuZCBpbnB1dCBldmVudHMgb24gZGVsZXRpb24sIHNvIHdlIGRpc2NhcmQgaXQuXG4gICAgICAvL1xuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgLy8gVGhpcyBpcyBhbHNvIG91ciBhcHByb2FjaCBmb3IgSUUgaGFuZGxpbmcsIGZvciB0aGUgcmVhc29uIGFib3ZlLlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcbiAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgZGlkUHV0TGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fU0VMRUNUX0tFWSkge1xuICAgICAgaGFzTGlzdGVuZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RFdmVudFBsdWdpbjtcbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjE4MSxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjE4NSxcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiOjIyNyxcIi4vU3ludGhldGljRXZlbnRcIjoyNTksXCIuL2lzVGV4dElucHV0RWxlbWVudFwiOjI4NixcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MjAsXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCI6MjksXCJmYmpzL2xpYi9rZXlPZlwiOjM4LFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCI6NDN9XSwyNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNlcnZlclJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaXplIG9mIHRoZSByZWFjdFJvb3QgSUQgc3BhY2UuIFdlIGdlbmVyYXRlIHJhbmRvbSBudW1iZXJzIGZvciBSZWFjdCByb290XG4gKiBJRHMgYW5kIGlmIHRoZXJlJ3MgYSBjb2xsaXNpb24gdGhlIGV2ZW50cyBhbmQgRE9NIHVwZGF0ZSBzeXN0ZW0gd2lsbFxuICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuICogbm93IHRoaXMgd2lsbCB3b3JrIG9uIGEgc21hbGxlciBzY2FsZS5cbiAqL1xudmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiBHTE9CQUxfTU9VTlRfUE9JTlRfTUFYKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJSZWFjdFJvb3RJbmRleDtcbn0se31dLDI1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFNpbXBsZUV2ZW50UGx1Z2luXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ2ZianMvbGliL0V2ZW50TGlzdGVuZXInKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0ZvY3VzRXZlbnQnKTtcbnZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50Jyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRHJhZ0V2ZW50Jyk7XG52YXIgU3ludGhldGljVG91Y2hFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVG91Y2hFdmVudCcpO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNXaGVlbEV2ZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKCcuL2dldEV2ZW50Q2hhckNvZGUnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGFib3J0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25BYm9ydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQWJvcnRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBibHVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25CbHVyOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25CbHVyQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY2FuUGxheToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ2FuUGxheTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ2FuUGxheUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNhblBsYXlUaHJvdWdoOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25DYW5QbGF5VGhyb3VnaDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ2FuUGxheVRocm91Z2hDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjbGljazoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uQ2xpY2s6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgY29udGV4dE1lbnU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNvbnRleHRNZW51OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Db250ZXh0TWVudUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGNvcHk6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkNvcHk6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkNvcHlDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBjdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkN1dDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uQ3V0Q2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZG91YmxlQ2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRvdWJsZUNsaWNrOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWc6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnRW5kOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnRW5kQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VudGVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnRW50ZXI6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkRyYWdFbnRlckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdFeGl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25EcmFnRXhpdDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0V4aXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcmFnTGVhdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdMZWF2ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRHJhZ0xlYXZlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ092ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkRyYWdPdmVyOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnT3ZlckNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGRyYWdTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRHJhZ1N0YXJ0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EcmFnU3RhcnRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBkcm9wOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ecm9wOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Ecm9wQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZHVyYXRpb25DaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkR1cmF0aW9uQ2hhbmdlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25EdXJhdGlvbkNoYW5nZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGVtcHRpZWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkVtcHRpZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkVtcHRpZWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBlbmNyeXB0ZWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkVuY3J5cHRlZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRW5jcnlwdGVkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgZW5kZWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkVuZGVkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25FbmRlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGVycm9yOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25FcnJvcjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uRXJyb3JDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBmb2N1czoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uRm9jdXM6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkZvY3VzQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbklucHV0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25JbnB1dENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGtleURvd246IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbktleURvd246IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbktleURvd25DYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBrZXlQcmVzczoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uS2V5UHJlc3M6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbktleVByZXNzQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAga2V5VXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbktleVVwOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25LZXlVcENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGxvYWQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkxvYWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbkxvYWRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBsb2FkZWREYXRhOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Mb2FkZWREYXRhOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Mb2FkZWREYXRhQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbG9hZGVkTWV0YWRhdGE6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbkxvYWRlZE1ldGFkYXRhOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Mb2FkZWRNZXRhZGF0YUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIGxvYWRTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTG9hZFN0YXJ0OiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Mb2FkU3RhcnRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICAvLyBOb3RlOiBXZSBkbyBub3QgYWxsb3cgbGlzdGVuaW5nIHRvIG1vdXNlT3ZlciBldmVudHMuIEluc3RlYWQsIHVzZSB0aGVcbiAgLy8gb25Nb3VzZUVudGVyL29uTW91c2VMZWF2ZSBjcmVhdGVkIGJ5IGBFbnRlckxlYXZlRXZlbnRQbHVnaW5gLlxuICBtb3VzZURvd246IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlRG93bjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZU1vdmU6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIG1vdXNlT3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Nb3VzZU91dDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTW91c2VPdXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBtb3VzZU92ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbk1vdXNlT3ZlcjogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTW91c2VPdmVyQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VVcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uTW91c2VVcDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uTW91c2VVcENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHBhc3RlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25QYXN0ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUGFzdGVDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwYXVzZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUGF1c2U6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBhdXNlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcGxheToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUGxheTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUGxheUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHBsYXlpbmc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblBsYXlpbmc6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblBsYXlpbmdDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBwcm9ncmVzczoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUHJvZ3Jlc3M6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblByb2dyZXNzQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgcmF0ZUNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uUmF0ZUNoYW5nZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUmF0ZUNoYW5nZUNhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHJlc2V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25SZXNldDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uUmVzZXRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzY3JvbGw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblNjcm9sbDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uU2Nyb2xsQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc2Vla2VkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TZWVrZWQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblNlZWtlZENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHNlZWtpbmc6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblNlZWtpbmc6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblNlZWtpbmdDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICBzdGFsbGVkOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TdGFsbGVkOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25TdGFsbGVkQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgc3VibWl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25TdWJtaXQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblN1Ym1pdENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHN1c3BlbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblN1c3BlbmQ6IHRydWUgfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2YoeyBvblN1c3BlbmRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0aW1lVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25UaW1lVXBkYXRlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25UaW1lVXBkYXRlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hDYW5jZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRvdWNoQ2FuY2VsOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Ub3VjaENhbmNlbENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHRvdWNoRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25Ub3VjaEVuZDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVG91Y2hFbmRDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB0b3VjaE1vdmU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvblRvdWNoTW92ZTogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVG91Y2hNb3ZlQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVG91Y2hTdGFydDogdHJ1ZSB9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7IG9uVG91Y2hTdGFydENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH0sXG4gIHZvbHVtZUNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7IG9uVm9sdW1lQ2hhbmdlOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25Wb2x1bWVDaGFuZ2VDYXB0dXJlOiB0cnVlIH0pXG4gICAgfVxuICB9LFxuICB3YWl0aW5nOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHsgb25XYWl0aW5nOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25XYWl0aW5nQ2FwdHVyZTogdHJ1ZSB9KVxuICAgIH1cbiAgfSxcbiAgd2hlZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2YoeyBvbldoZWVsOiB0cnVlIH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHsgb25XaGVlbENhcHR1cmU6IHRydWUgfSlcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7XG4gIHRvcEFib3J0OiBldmVudFR5cGVzLmFib3J0LFxuICB0b3BCbHVyOiBldmVudFR5cGVzLmJsdXIsXG4gIHRvcENhblBsYXk6IGV2ZW50VHlwZXMuY2FuUGxheSxcbiAgdG9wQ2FuUGxheVRocm91Z2g6IGV2ZW50VHlwZXMuY2FuUGxheVRocm91Z2gsXG4gIHRvcENsaWNrOiBldmVudFR5cGVzLmNsaWNrLFxuICB0b3BDb250ZXh0TWVudTogZXZlbnRUeXBlcy5jb250ZXh0TWVudSxcbiAgdG9wQ29weTogZXZlbnRUeXBlcy5jb3B5LFxuICB0b3BDdXQ6IGV2ZW50VHlwZXMuY3V0LFxuICB0b3BEb3VibGVDbGljazogZXZlbnRUeXBlcy5kb3VibGVDbGljayxcbiAgdG9wRHJhZzogZXZlbnRUeXBlcy5kcmFnLFxuICB0b3BEcmFnRW5kOiBldmVudFR5cGVzLmRyYWdFbmQsXG4gIHRvcERyYWdFbnRlcjogZXZlbnRUeXBlcy5kcmFnRW50ZXIsXG4gIHRvcERyYWdFeGl0OiBldmVudFR5cGVzLmRyYWdFeGl0LFxuICB0b3BEcmFnTGVhdmU6IGV2ZW50VHlwZXMuZHJhZ0xlYXZlLFxuICB0b3BEcmFnT3ZlcjogZXZlbnRUeXBlcy5kcmFnT3ZlcixcbiAgdG9wRHJhZ1N0YXJ0OiBldmVudFR5cGVzLmRyYWdTdGFydCxcbiAgdG9wRHJvcDogZXZlbnRUeXBlcy5kcm9wLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogZXZlbnRUeXBlcy5kdXJhdGlvbkNoYW5nZSxcbiAgdG9wRW1wdGllZDogZXZlbnRUeXBlcy5lbXB0aWVkLFxuICB0b3BFbmNyeXB0ZWQ6IGV2ZW50VHlwZXMuZW5jcnlwdGVkLFxuICB0b3BFbmRlZDogZXZlbnRUeXBlcy5lbmRlZCxcbiAgdG9wRXJyb3I6IGV2ZW50VHlwZXMuZXJyb3IsXG4gIHRvcEZvY3VzOiBldmVudFR5cGVzLmZvY3VzLFxuICB0b3BJbnB1dDogZXZlbnRUeXBlcy5pbnB1dCxcbiAgdG9wS2V5RG93bjogZXZlbnRUeXBlcy5rZXlEb3duLFxuICB0b3BLZXlQcmVzczogZXZlbnRUeXBlcy5rZXlQcmVzcyxcbiAgdG9wS2V5VXA6IGV2ZW50VHlwZXMua2V5VXAsXG4gIHRvcExvYWQ6IGV2ZW50VHlwZXMubG9hZCxcbiAgdG9wTG9hZGVkRGF0YTogZXZlbnRUeXBlcy5sb2FkZWREYXRhLFxuICB0b3BMb2FkZWRNZXRhZGF0YTogZXZlbnRUeXBlcy5sb2FkZWRNZXRhZGF0YSxcbiAgdG9wTG9hZFN0YXJ0OiBldmVudFR5cGVzLmxvYWRTdGFydCxcbiAgdG9wTW91c2VEb3duOiBldmVudFR5cGVzLm1vdXNlRG93bixcbiAgdG9wTW91c2VNb3ZlOiBldmVudFR5cGVzLm1vdXNlTW92ZSxcbiAgdG9wTW91c2VPdXQ6IGV2ZW50VHlwZXMubW91c2VPdXQsXG4gIHRvcE1vdXNlT3ZlcjogZXZlbnRUeXBlcy5tb3VzZU92ZXIsXG4gIHRvcE1vdXNlVXA6IGV2ZW50VHlwZXMubW91c2VVcCxcbiAgdG9wUGFzdGU6IGV2ZW50VHlwZXMucGFzdGUsXG4gIHRvcFBhdXNlOiBldmVudFR5cGVzLnBhdXNlLFxuICB0b3BQbGF5OiBldmVudFR5cGVzLnBsYXksXG4gIHRvcFBsYXlpbmc6IGV2ZW50VHlwZXMucGxheWluZyxcbiAgdG9wUHJvZ3Jlc3M6IGV2ZW50VHlwZXMucHJvZ3Jlc3MsXG4gIHRvcFJhdGVDaGFuZ2U6IGV2ZW50VHlwZXMucmF0ZUNoYW5nZSxcbiAgdG9wUmVzZXQ6IGV2ZW50VHlwZXMucmVzZXQsXG4gIHRvcFNjcm9sbDogZXZlbnRUeXBlcy5zY3JvbGwsXG4gIHRvcFNlZWtlZDogZXZlbnRUeXBlcy5zZWVrZWQsXG4gIHRvcFNlZWtpbmc6IGV2ZW50VHlwZXMuc2Vla2luZyxcbiAgdG9wU3RhbGxlZDogZXZlbnRUeXBlcy5zdGFsbGVkLFxuICB0b3BTdWJtaXQ6IGV2ZW50VHlwZXMuc3VibWl0LFxuICB0b3BTdXNwZW5kOiBldmVudFR5cGVzLnN1c3BlbmQsXG4gIHRvcFRpbWVVcGRhdGU6IGV2ZW50VHlwZXMudGltZVVwZGF0ZSxcbiAgdG9wVG91Y2hDYW5jZWw6IGV2ZW50VHlwZXMudG91Y2hDYW5jZWwsXG4gIHRvcFRvdWNoRW5kOiBldmVudFR5cGVzLnRvdWNoRW5kLFxuICB0b3BUb3VjaE1vdmU6IGV2ZW50VHlwZXMudG91Y2hNb3ZlLFxuICB0b3BUb3VjaFN0YXJ0OiBldmVudFR5cGVzLnRvdWNoU3RhcnQsXG4gIHRvcFZvbHVtZUNoYW5nZTogZXZlbnRUeXBlcy52b2x1bWVDaGFuZ2UsXG4gIHRvcFdhaXRpbmc6IGV2ZW50VHlwZXMud2FpdGluZyxcbiAgdG9wV2hlZWw6IGV2ZW50VHlwZXMud2hlZWxcbn07XG5cbmZvciAodmFyIHR5cGUgaW4gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnKSB7XG4gIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0eXBlXS5kZXBlbmRlbmNpZXMgPSBbdHlwZV07XG59XG5cbnZhciBPTl9DTElDS19LRVkgPSBrZXlPZih7IG9uQ2xpY2s6IG51bGwgfSk7XG52YXIgb25DbGlja0xpc3RlbmVycyA9IHt9O1xuXG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0b3BMZXZlbFRhcmdldCwgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBFdmVudENvbnN0cnVjdG9yO1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQWJvcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2FuUGxheTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDYW5QbGF5VGhyb3VnaDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEdXJhdGlvbkNoYW5nZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFbXB0aWVkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVuY3J5cHRlZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFbmRlZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFcnJvcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRlZERhdGE6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZGVkTWV0YWRhdGE6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZFN0YXJ0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhdXNlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGxheWluZzpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQcm9ncmVzczpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSYXRlQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFJlc2V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlZWtlZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVraW5nOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN0YWxsZWQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3VibWl0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1c3BlbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVGltZVVwZGF0ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BWb2x1bWVDaGFuZ2U6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2FpdGluZzpcbiAgICAgICAgLy8gSFRNTCBFdmVudHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAgIC8vIEZpcmVGb3ggY3JlYXRlcyBhIGtleXByZXNzIGV2ZW50IGZvciBmdW5jdGlvbiBrZXlzIHRvby4gVGhpcyByZW1vdmVzXG4gICAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG4gICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDbGljazpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAgIC8vIHVud2FudGVkIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRG91YmxlQ2xpY2s6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWc6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VuZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnRW50ZXI6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0V4aXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0xlYXZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdTdGFydDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcm9wOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRHJhZ0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29weTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGFzdGU6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgICFFdmVudENvbnN0cnVjdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLCB0b3BMZXZlbFR5cGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChkaXNwYXRjaENvbmZpZywgdG9wTGV2ZWxUYXJnZXRJRCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIC8vIE1vYmlsZSBTYWZhcmkgZG9lcyBub3QgZmlyZSBwcm9wZXJseSBidWJibGUgY2xpY2sgZXZlbnRzIG9uXG4gICAgLy8gbm9uLWludGVyYWN0aXZlIGVsZW1lbnRzLCB3aGljaCBtZWFucyBkZWxlZ2F0ZWQgY2xpY2sgbGlzdGVuZXJzIGRvIG5vdFxuICAgIC8vIGZpcmUuIFRoZSB3b3JrYXJvdW5kIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2tcbiAgICAvLyBsaXN0ZW5lciBvbiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09IE9OX0NMSUNLX0tFWSkge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgICAgaWYgKCFvbkNsaWNrTGlzdGVuZXJzW2lkXSkge1xuICAgICAgICBvbkNsaWNrTGlzdGVuZXJzW2lkXSA9IEV2ZW50TGlzdGVuZXIubGlzdGVuKG5vZGUsICdjbGljaycsIGVtcHR5RnVuY3Rpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB3aWxsRGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIChpZCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSBPTl9DTElDS19LRVkpIHtcbiAgICAgIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpbXBsZUV2ZW50UGx1Z2luO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjoxODEsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjoxODUsXCIuL1JlYWN0TW91bnRcIjoyMzIsXCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50XCI6MjU2LFwiLi9TeW50aGV0aWNEcmFnRXZlbnRcIjoyNTgsXCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU5LFwiLi9TeW50aGV0aWNGb2N1c0V2ZW50XCI6MjYwLFwiLi9TeW50aGV0aWNLZXlib2FyZEV2ZW50XCI6MjYyLFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCI6MjYzLFwiLi9TeW50aGV0aWNUb3VjaEV2ZW50XCI6MjY0LFwiLi9TeW50aGV0aWNVSUV2ZW50XCI6MjY1LFwiLi9TeW50aGV0aWNXaGVlbEV2ZW50XCI6MjY2LFwiLi9nZXRFdmVudENoYXJDb2RlXCI6Mjc3LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9FdmVudExpc3RlbmVyXCI6MTksXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCI6MjYsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNCxcImZianMvbGliL2tleU9mXCI6Mzh9XSwyNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvXG4gKi9cbnZhciBDbGlwYm9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/IGV2ZW50LmNsaXBib2FyZERhdGEgOiB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xufSx7XCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU5fV0sMjU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LCBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xufSx7XCIuL1N5bnRoZXRpY0V2ZW50XCI6MjU5fV0sMjU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNEcmFnRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRHJhZ0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIERyYWdFdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YVRyYW5zZmVyOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNEcmFnRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbn0se1wiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCI6MjYzfV0sMjU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgdHlwZTogbnVsbCxcbiAgLy8gY3VycmVudFRhcmdldCBpcyBzZXQgd2hlbiBkaXNwYXRjaGluZzsgbm8gdXNlIGluIGNvcHlpbmcgaXQgaGVyZVxuICBjdXJyZW50VGFyZ2V0OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCxcbiAgZXZlbnRQaGFzZTogbnVsbCxcbiAgYnViYmxlczogbnVsbCxcbiAgY2FuY2VsYWJsZTogbnVsbCxcbiAgdGltZVN0YW1wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcbiAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IGRpc3BhdGNoTWFya2VyO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gIHRoaXMuY3VycmVudFRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuXG4gIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgaWYgKCFJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZSA9IEludGVyZmFjZVtwcm9wTmFtZV07XG4gICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgdGhpc1twcm9wTmFtZV0gPSBub3JtYWxpemUobmF0aXZlRXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgIT0gbnVsbCA/IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOiBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgfVxuICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xufVxuXG5hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGV2ZW50LCAnVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3VcXCdyZSAnICsgJ3NlZWluZyB0aGlzLCB5b3VcXCdyZSBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgb24gYSAnICsgJ3JlbGVhc2VkL251bGxpZmllZCBzeW50aGV0aWMgZXZlbnQuIFRoaXMgaXMgYSBuby1vcC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1ldmVudC1wb29saW5nIGZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGV2ZW50LCAnVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3VcXCdyZSAnICsgJ3NlZWluZyB0aGlzLCB5b3VcXCdyZSBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIG9uIGEgJyArICdyZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiBUaGlzIGlzIGEgbm8tb3AuIFNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtZXZlbnQtcG9vbGluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIHJlbGVhc2UgYWxsIGRpc3BhdGNoZWQgYFN5bnRoZXRpY0V2ZW50YHMgYWZ0ZXIgZWFjaCBldmVudCBsb29wLCBhZGRpbmdcbiAgICogdGhlbSBiYWNrIGludG8gdGhlIHBvb2wuIFRoaXMgYWxsb3dzIGEgd2F5IHRvIGhvbGQgb250byBhIHJlZmVyZW5jZSB0aGF0XG4gICAqIHdvbid0IGJlIGFkZGVkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICovXG4gIHBlcnNpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzUGVyc2lzdGVudCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhpcyBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgc2hvdWxkIG5vdCBiZSByZWxlYXNlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNQZXJzaXN0ZW50OiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UsXG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIGBkZXN0cnVjdG9yYCBvbiBlYWNoIGluc3RhbmNlIGl0IHJlbGVhc2VzLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gIH1cblxufSk7XG5cblN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuXG4vKipcbiAqIEhlbHBlciB0byByZWR1Y2UgYm9pbGVycGxhdGUgd2hlbiBjcmVhdGluZyBzdWJjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IENsYXNzXG4gKiBAcGFyYW0gez9vYmplY3R9IEludGVyZmFjZVxuICovXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MgPSBmdW5jdGlvbiAoQ2xhc3MsIEludGVyZmFjZSkge1xuICB2YXIgU3VwZXIgPSB0aGlzO1xuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gIGFzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gYXNzaWduKHt9LCBTdXBlci5JbnRlcmZhY2UsIEludGVyZmFjZSk7XG4gIENsYXNzLmF1Z21lbnRDbGFzcyA9IFN1cGVyLmF1Z21lbnRDbGFzcztcblxuICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2xhc3MsIFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcik7XG59O1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oU3ludGhldGljRXZlbnQsIFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRXZlbnQ7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiLi9Qb29sZWRDbGFzc1wiOjE5MCxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiOjI2LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMjYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNGb2N1c0V2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNGb2N1c0V2ZW50LCBGb2N1c0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjV9XSwyNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0lucHV0RXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNVxuICogICAgICAvI2V2ZW50cy1pbnB1dGV2ZW50c1xuICovXG52YXIgSW5wdXRFdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljSW5wdXRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0lucHV0RXZlbnQsIElucHV0RXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG59LHtcIi4vU3ludGhldGljRXZlbnRcIjoyNTl9XSwyNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0tleWJvYXJkRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIGdldEV2ZW50S2V5ID0gcmVxdWlyZSgnLi9nZXRFdmVudEtleScpO1xudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRNb2RpZmllclN0YXRlJyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBLZXlib2FyZEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGtleTogZ2V0RXZlbnRLZXksXG4gIGxvY2F0aW9uOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICByZXBlYXQ6IG51bGwsXG4gIGxvY2FsZTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAvLyBMZWdhY3kgSW50ZXJmYWNlXG4gIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgY2hhckNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlQcmVzcyBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGUgYWN0dWFsIHByaW50YWJsZSBjaGFyYWN0ZXIuXG5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYGtleUNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlEb3duL1VwIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHBoeXNpY2FsIGtleWJvYXJkIGtleS5cblxuICAgIC8vIFRoZSBhY3R1YWwgbWVhbmluZyBvZiB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgdXNlcnMnIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHdoaWNoIGNhbm5vdCBiZSBkZXRlY3RlZC4gQXNzdW1pbmcgdGhhdCBpdCBpcyBhIFVTIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cbiAgICAvLyBEdWUgdG8gdGhpcywgaXQgaXMgbGVmdCB0byB0aGUgdXNlciB0byBpbXBsZW1lbnQgYXQgdGhpcyB0aW1lLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYHdoaWNoYCBpcyBhbiBhbGlhcyBmb3IgZWl0aGVyIGBrZXlDb2RlYCBvciBgY2hhckNvZGVgIGRlcGVuZGluZyBvbiB0aGVcbiAgICAvLyB0eXBlIG9mIHRoZSBldmVudC5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljS2V5Ym9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNLZXlib2FyZEV2ZW50LCBLZXlib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjUsXCIuL2dldEV2ZW50Q2hhckNvZGVcIjoyNzcsXCIuL2dldEV2ZW50S2V5XCI6Mjc4LFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIjoyNzl9XSwyNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY01vdXNlRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJy4vVmlld3BvcnRNZXRyaWNzJyk7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgTW91c2VFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBNb3VzZUV2ZW50SW50ZXJmYWNlID0ge1xuICBzY3JlZW5YOiBudWxsLFxuICBzY3JlZW5ZOiBudWxsLFxuICBjbGllbnRYOiBudWxsLFxuICBjbGllbnRZOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIGJ1dHRvbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gV2Via2l0LCBGaXJlZm94LCBJRTkrXG4gICAgLy8gd2hpY2g6ICAxIDIgM1xuICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIC8vIElFPDlcbiAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuICAgIC8vIGJ1dHRvbjogMCAwIDBcbiAgICAvLyBidXR0b246IDEgNCAyIChvbm1vdXNldXApXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgfSxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQpO1xuICB9LFxuICAvLyBcIlByb3ByaWV0YXJ5XCIgSW50ZXJmYWNlLlxuICBwYWdlWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQ7XG4gIH0sXG4gIHBhZ2VZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VZJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VZIDogZXZlbnQuY2xpZW50WSArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY01vdXNlRXZlbnQsIE1vdXNlRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG59LHtcIi4vU3ludGhldGljVUlFdmVudFwiOjI2NSxcIi4vVmlld3BvcnRNZXRyaWNzXCI6MjY4LFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIjoyNzl9XSwyNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1RvdWNoRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVUlFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUb3VjaEV2ZW50LCBUb3VjaEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoyNjUsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjI3OX1dLDI2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVUlFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9nZXRFdmVudFRhcmdldCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudmlldykge1xuICAgICAgcmV0dXJuIGV2ZW50LnZpZXc7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0LndpbmRvdyA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyB0YXJnZXQgaXMgYSB3aW5kb3cgb2JqZWN0XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgaWYgKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgfSxcbiAgZGV0YWlsOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQuZGV0YWlsIHx8IDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNVSUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVUlFdmVudCwgVUlFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVUlFdmVudDtcbn0se1wiLi9TeW50aGV0aWNFdmVudFwiOjI1OSxcIi4vZ2V0RXZlbnRUYXJnZXRcIjoyODB9XSwyNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1doZWVsRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgV2hlZWxFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6XG4gICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOlxuICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY01vdXNlRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcbn0se1wiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCI6MjYzfV0sMjY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVHJhbnNhY3Rpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBgVHJhbnNhY3Rpb25gIGNyZWF0ZXMgYSBibGFjayBib3ggdGhhdCBpcyBhYmxlIHRvIHdyYXAgYW55IG1ldGhvZCBzdWNoIHRoYXRcbiAqIGNlcnRhaW4gaW52YXJpYW50cyBhcmUgbWFpbnRhaW5lZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBtZXRob2QgaXMgaW52b2tlZFxuICogKEV2ZW4gaWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biB3aGlsZSBpbnZva2luZyB0aGUgd3JhcHBlZCBtZXRob2QpLiBXaG9ldmVyXG4gKiBpbnN0YW50aWF0ZXMgYSB0cmFuc2FjdGlvbiBjYW4gcHJvdmlkZSBlbmZvcmNlcnMgb2YgdGhlIGludmFyaWFudHMgYXRcbiAqIGNyZWF0aW9uIHRpbWUuIFRoZSBgVHJhbnNhY3Rpb25gIGNsYXNzIGl0c2VsZiB3aWxsIHN1cHBseSBvbmUgYWRkaXRpb25hbFxuICogYXV0b21hdGljIGludmFyaWFudCBmb3IgeW91IC0gdGhlIGludmFyaWFudCB0aGF0IGFueSB0cmFuc2FjdGlvbiBpbnN0YW5jZVxuICogc2hvdWxkIG5vdCBiZSBydW4gd2hpbGUgaXQgaXMgYWxyZWFkeSBiZWluZyBydW4uIFlvdSB3b3VsZCB0eXBpY2FsbHkgY3JlYXRlIGFcbiAqIHNpbmdsZSBpbnN0YW5jZSBvZiBhIGBUcmFuc2FjdGlvbmAgZm9yIHJldXNlIG11bHRpcGxlIHRpbWVzLCB0aGF0IHBvdGVudGlhbGx5XG4gKiBpcyB1c2VkIHRvIHdyYXAgc2V2ZXJhbCBkaWZmZXJlbnQgbWV0aG9kcy4gV3JhcHBlcnMgYXJlIGV4dHJlbWVseSBzaW1wbGUgLVxuICogdGhleSBvbmx5IHJlcXVpcmUgaW1wbGVtZW50aW5nIHR3byBtZXRob2RzLlxuICpcbiAqIDxwcmU+XG4gKiAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlcnMgKGluamVjdGVkIGF0IGNyZWF0aW9uIHRpbWUpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgK1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS18LS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgdiAgICAgICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICAgICArLS0tLS0tLS0tLS0tLS0tKyAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgKy0tfCAgICB3cmFwcGVyMSAgIHwtLS18LS0tLSsgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICstLS0tLS0tLS0tLS0tLS0rICAgdiAgICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICAgICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgKy0tLS18ICAgd3JhcHBlcjIgIHwtLS0tLS0tLSsgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgdiAgICAgdiAgICAgICAgICAgICAgICAgICAgIHYgICAgIHYgICB8IHdyYXBwZXJcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8IGludmFyaWFudHNcbiAqIHBlcmZvcm0oYW55TWV0aG9kKSB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8IG1haW50YWluZWRcbiAqICstLS0tLS0tLS0tLS0tLS0tLT58LXwtLS18LXwtLS18LS0+fGFueU1ldGhvZHwtLS18LS0tfC18LS0tfC18LS0tLS0tLS0+XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfFxuICogICAgICAgICAgICAgICAgICAgIHwgIGluaXRpYWxpemUgICAgICAgICAgICAgICAgICAgIGNsb3NlICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiA8L3ByZT5cbiAqXG4gKiBVc2UgY2FzZXM6XG4gKiAtIFByZXNlcnZpbmcgdGhlIGlucHV0IHNlbGVjdGlvbiByYW5nZXMgYmVmb3JlL2FmdGVyIHJlY29uY2lsaWF0aW9uLlxuICogICBSZXN0b3Jpbmcgc2VsZWN0aW9uIGV2ZW4gaW4gdGhlIGV2ZW50IG9mIGFuIHVuZXhwZWN0ZWQgZXJyb3IuXG4gKiAtIERlYWN0aXZhdGluZyBldmVudHMgd2hpbGUgcmVhcnJhbmdpbmcgdGhlIERPTSwgcHJldmVudGluZyBibHVycy9mb2N1c2VzLFxuICogICB3aGlsZSBndWFyYW50ZWVpbmcgdGhhdCBhZnRlcndhcmRzLCB0aGUgZXZlbnQgc3lzdGVtIGlzIHJlYWN0aXZhdGVkLlxuICogLSBGbHVzaGluZyBhIHF1ZXVlIG9mIGNvbGxlY3RlZCBET00gbXV0YXRpb25zIHRvIHRoZSBtYWluIFVJIHRocmVhZCBhZnRlciBhXG4gKiAgIHJlY29uY2lsaWF0aW9uIHRha2VzIHBsYWNlIGluIGEgd29ya2VyIHRocmVhZC5cbiAqIC0gSW52b2tpbmcgYW55IGNvbGxlY3RlZCBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgYWZ0ZXIgcmVuZGVyaW5nIG5ld1xuICogICBjb250ZW50LlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogV3JhcHBpbmcgcGFydGljdWxhciBmbHVzaGVzIG9mIHRoZSBgUmVhY3RXb3JrZXJgIHF1ZXVlXG4gKiAgIHRvIHByZXNlcnZlIHRoZSBgc2Nyb2xsVG9wYCAoYW4gYXV0b21hdGljIHNjcm9sbCBhd2FyZSBET00pLlxuICogLSAoRnV0dXJlIHVzZSBjYXNlKTogTGF5b3V0IGNhbGN1bGF0aW9ucyBiZWZvcmUgYW5kIGFmdGVyIERPTSB1cGRhdGVzLlxuICpcbiAqIFRyYW5zYWN0aW9uYWwgcGx1Z2luIEFQSTpcbiAqIC0gQSBtb2R1bGUgdGhhdCBoYXMgYW4gYGluaXRpYWxpemVgIG1ldGhvZCB0aGF0IHJldHVybnMgYW55IHByZWNvbXB1dGF0aW9uLlxuICogLSBhbmQgYSBgY2xvc2VgIG1ldGhvZCB0aGF0IGFjY2VwdHMgdGhlIHByZWNvbXB1dGF0aW9uLiBgY2xvc2VgIGlzIGludm9rZWRcbiAqICAgd2hlbiB0aGUgd3JhcHBlZCBwcm9jZXNzIGlzIGNvbXBsZXRlZCwgb3IgaGFzIGZhaWxlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PFRyYW5zYWN0aW9uYWxXcmFwcGVyPn0gdHJhbnNhY3Rpb25XcmFwcGVyIFdyYXBwZXIgbW9kdWxlc1xuICogdGhhdCBpbXBsZW1lbnQgYGluaXRpYWxpemVgIGFuZCBgY2xvc2VgLlxuICogQHJldHVybiB7VHJhbnNhY3Rpb259IFNpbmdsZSB0cmFuc2FjdGlvbiBmb3IgcmV1c2UgaW4gdGhyZWFkLlxuICpcbiAqIEBjbGFzcyBUcmFuc2FjdGlvblxuICovXG52YXIgTWl4aW4gPSB7XG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoaXMgaW5zdGFuY2Ugc28gdGhhdCBpdCBpcyBwcmVwYXJlZCBmb3IgY29sbGVjdGluZyBtZXRyaWNzLiBEb2VzXG4gICAqIHNvIHN1Y2ggdGhhdCB0aGlzIHNldHVwIG1ldGhvZCBtYXkgYmUgdXNlZCBvbiBhbiBpbnN0YW5jZSB0aGF0IGlzIGFscmVhZHlcbiAgICogaW5pdGlhbGl6ZWQsIGluIGEgd2F5IHRoYXQgZG9lcyBub3QgY29uc3VtZSBhZGRpdGlvbmFsIG1lbW9yeSB1cG9uIHJldXNlLlxuICAgKiBUaGF0IGNhbiBiZSB1c2VmdWwgaWYgeW91IGRlY2lkZSB0byBtYWtlIHlvdXIgc3ViY2xhc3Mgb2YgdGhpcyBtaXhpbiBhXG4gICAqIFwiUG9vbGVkQ2xhc3NcIi5cbiAgICovXG4gIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhKSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YSA9IFtdO1xuICAgIH1cbiAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgfSxcblxuICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge0FycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj59IEFycmF5IG9mIHRyYW5zYWN0aW9uIHdyYXBwZXJzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogbnVsbCxcblxuICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc0luVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBmdW5jdGlvbiB3aXRoaW4gYSBzYWZldHkgd2luZG93LiBVc2UgdGhpcyBmb3IgdGhlIHRvcCBsZXZlbFxuICAgKiBtZXRob2RzIHRoYXQgcmVzdWx0IGluIGxhcmdlIGFtb3VudHMgb2YgY29tcHV0YXRpb24vbXV0YXRpb25zIHRoYXQgd291bGRcbiAgICogbmVlZCB0byBiZSBzYWZldHkgY2hlY2tlZC4gVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyBoZWxwcyBwcmV2ZW50IHRoZSBuZWVkXG4gICAqIHRvIGJpbmQgaW4gbWFueSBjYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1lbWJlciBvZiBzY29wZSB0byBjYWxsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgU2NvcGUgdG8gaW52b2tlIGZyb20uXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGEgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBiIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYyBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGQgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBlIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZiBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4geyp9IFJldHVybiB2YWx1ZSBmcm9tIGBtZXRob2RgLlxuICAgKi9cbiAgcGVyZm9ybTogZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAhIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgJyArICdpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAvLyBvbmUgb2YgdGhlc2UgY2FsbHMgdGhyZXcuXG4gICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbGwoMCk7XG4gICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBJZiBgbWV0aG9kYCB0aHJvd3MsIHByZWZlciB0byBzaG93IHRoYXQgc3RhY2sgdHJhY2Ugb3ZlciBhbnkgdGhyb3duXG4gICAgICAgICAgLy8gYnkgaW52b2tpbmcgYGNsb3NlQWxsYC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2UgYG1ldGhvZGAgZGlkbid0IHRocm93LCB3ZSBkb24ndCB3YW50IHRvIHNpbGVuY2UgdGhlIGV4Y2VwdGlvblxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24gKHN0YXJ0SW5kZXgpIHtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGggdGhlXG4gICAgICAgIC8vIE9CU0VSVkVEX0VSUk9SIHN0YXRlIGJlZm9yZSBvdmVyd3JpdGluZyBpdCB3aXRoIHRoZSByZWFsIHJldHVybiB2YWx1ZVxuICAgICAgICAvLyBvZiBpbml0aWFsaXplIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIE9CU0VSVkVEX0VSUk9SIGluIHRoZSBmaW5hbGx5XG4gICAgICAgIC8vIGJsb2NrLCBpdCBtZWFucyB3cmFwcGVyLmluaXRpYWxpemUgdGhyZXcuXG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1I7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhW2ldID0gd3JhcHBlci5pbml0aWFsaXplID8gd3JhcHBlci5pbml0aWFsaXplLmNhbGwodGhpcykgOiBudWxsO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhW2ldID09PSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUikge1xuICAgICAgICAgIC8vIFRoZSBpbml0aWFsaXplciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBpbml0aWFsaXplIHRoZVxuICAgICAgICAgIC8vIHJlbWFpbmluZyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlXG4gICAgICAgICAgLy8gdGhhdCB0aGUgZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGVhY2ggb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5jbG9zZVtpXWAgZnVuY3Rpb25zLCBwYXNzaW5nIGludG9cbiAgICogdGhlbSB0aGUgcmVzcGVjdGl2ZSByZXR1cm4gdmFsdWVzIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuaW5pdFtpXWBcbiAgICogKGBjbG9zZWBycyB0aGF0IGNvcnJlc3BvbmQgdG8gaW5pdGlhbGl6ZXJzIHRoYXQgZmFpbGVkIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQpLlxuICAgKi9cbiAgY2xvc2VBbGw6IGZ1bmN0aW9uIChzdGFydEluZGV4KSB7XG4gICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcbiAgICAgIHZhciBlcnJvclRocm93bjtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgICAgLy8gZXJyb3JUaHJvd24gc2V0IHRvIHRydWUgYmVmb3JlIHNldHRpbmcgaXQgdG8gZmFsc2UgYWZ0ZXIgY2FsbGluZ1xuICAgICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgICAvLyB3cmFwcGVyLmNsb3NlIHRocmV3LlxuICAgICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGlmIChpbml0RGF0YSAhPT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IgJiYgd3JhcHBlci5jbG9zZSkge1xuICAgICAgICAgIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgIC8vIFRoZSBjbG9zZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgY2xvc2UgdGhlIHJlbWFpbmluZ1xuICAgICAgICAgIC8vIHdyYXBwZXJzIGJ1dCBzaWxlbmNlIGFueSBleGNlcHRpb25zIGZyb20gdGhlbSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAgICAgICAvLyBmaXJzdCBlcnJvciBpcyB0aGUgb25lIHRvIGJ1YmJsZSB1cC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICB9XG59O1xuXG52YXIgVHJhbnNhY3Rpb24gPSB7XG5cbiAgTWl4aW46IE1peGluLFxuXG4gIC8qKlxuICAgKiBUb2tlbiB0byBsb29rIGZvciB0byBkZXRlcm1pbmUgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4gICAqL1xuICBPQlNFUlZFRF9FUlJPUjoge31cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0fV0sMjY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBWaWV3cG9ydE1ldHJpY3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBWaWV3cG9ydE1ldHJpY3MgPSB7XG5cbiAgY3VycmVudFNjcm9sbExlZnQ6IDAsXG5cbiAgY3VycmVudFNjcm9sbFRvcDogMCxcblxuICByZWZyZXNoU2Nyb2xsVmFsdWVzOiBmdW5jdGlvbiAoc2Nyb2xsUG9zaXRpb24pIHtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQgPSBzY3JvbGxQb3NpdGlvbi54O1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsUG9zaXRpb24ueTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljcztcbn0se31dLDI2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFjY3VtdWxhdGVJbnRvXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICpcbiAqIEFjY3VtdWxhdGVzIGl0ZW1zIHRoYXQgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgaW50byB0aGUgZmlyc3Qgb25lLiBUaGlzXG4gKiBpcyB1c2VkIHRvIGNvbnNlcnZlIG1lbW9yeSBieSBhdm9pZGluZyBhcnJheSBhbGxvY2F0aW9ucywgYW5kIHRodXMgc2FjcmlmaWNlc1xuICogQVBJIGNsZWFubmVzcy4gU2luY2UgYGN1cnJlbnRgIGNhbiBiZSBudWxsIGJlZm9yZSBiZWluZyBwYXNzZWQgaW4gYW5kIG5vdFxuICogbnVsbCBhZnRlciB0aGlzIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdG8gYXNzaWduIGl0IGJhY2sgdG8gYGN1cnJlbnRgOlxuICpcbiAqIGBhID0gYWNjdW11bGF0ZUludG8oYSwgYik7YFxuICpcbiAqIFRoaXMgQVBJIHNob3VsZCBiZSBzcGFyaW5nbHkgdXNlZC4gVHJ5IGBhY2N1bXVsYXRlYCBmb3Igc29tZXRoaW5nIGNsZWFuZXIuXG4gKlxuICogQHJldHVybiB7KnxhcnJheTwqPn0gQW4gYWNjdW11bGF0aW9uIG9mIGl0ZW1zLlxuICovXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgIShuZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FjY3VtdWxhdGVJbnRvKC4uLik6IEFjY3VtdWxhdGVkIGl0ZW1zIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgLy8gQm90aCBhcmUgbm90IGVtcHR5LiBXYXJuaW5nOiBOZXZlciBjYWxsIHguY29uY2F0KHkpIHdoZW4geW91IGFyZSBub3RcbiAgLy8gY2VydGFpbiB0aGF0IHggaXMgYW4gQXJyYXkgKHggY291bGQgYmUgYSBzdHJpbmcgd2l0aCBjb25jYXQgbWV0aG9kKS5cbiAgdmFyIGN1cnJlbnRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcbiAgdmFyIG5leHRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShuZXh0KTtcblxuICBpZiAoY3VycmVudElzQXJyYXkgJiYgbmV4dElzQXJyYXkpIHtcbiAgICBjdXJyZW50LnB1c2guYXBwbHkoY3VycmVudCwgbmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoY3VycmVudElzQXJyYXkpIHtcbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAobmV4dElzQXJyYXkpIHtcbiAgICAvLyBBIGJpdCB0b28gZGFuZ2Vyb3VzIHRvIG11dGF0ZSBgbmV4dGAuXG4gICAgcmV0dXJuIFtjdXJyZW50XS5jb25jYXQobmV4dCk7XG4gIH1cblxuICByZXR1cm4gW2N1cnJlbnQsIG5leHRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFjY3VtdWxhdGVJbnRvO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzR9XSwyNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFkbGVyMzJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gYWRsZXIzMiBpcyBub3QgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nLCBhbmQgaXMgb25seSB1c2VkIHRvIHNhbml0eSBjaGVjayB0aGF0XG4vLyBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBzZXJ2ZXIgbWF0Y2hlcyB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgY2xpZW50LlxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiAoYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBTaGVldEpTIHZlcnNpb24pIGhhcyBiZWVuIG9wdGltaXplZFxuLy8gZm9yIG91ciB1c2UgY2FzZSwgYXQgdGhlIGV4cGVuc2Ugb2YgY29uZm9ybWluZyB0byB0aGUgYWRsZXIzMiBzcGVjaWZpY2F0aW9uXG4vLyBmb3Igbm9uLWFzY2lpIGlucHV0cy5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGRhdGEubGVuZ3RoO1xuICB2YXIgbSA9IGwgJiB+MHgzO1xuICB3aGlsZSAoaSA8IG0pIHtcbiAgICBmb3IgKDsgaSA8IE1hdGgubWluKGkgKyA0MDk2LCBtKTsgaSArPSA0KSB7XG4gICAgICBiICs9IChhICs9IGRhdGEuY2hhckNvZGVBdChpKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDEpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMikpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAzKSk7XG4gICAgfVxuICAgIGEgJT0gTU9EO1xuICAgIGIgJT0gTU9EO1xuICB9XG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgYiArPSBhICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgfVxuICBhICU9IE1PRDtcbiAgYiAlPSBNT0Q7XG4gIHJldHVybiBhIHwgYiA8PCAxNjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xufSx7fV0sMjcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBkYW5nZXJvdXNTdHlsZVZhbHVlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuICogc2hvdWxkIGJlIGxvZ2ljYWwgKG5vIGh5cGhlbnMpLCBhcyBzcGVjaWZpZWRcbiAqIGluIGBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgcHJvcGVydHkgbmFtZSBzdWNoIGFzIGB0b3BNYXJnaW5gLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBDU1MgcHJvcGVydHkgdmFsdWUgc3VjaCBhcyBgMTBweGAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cbmZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuICAvLyB3aG9sZSBzdHJpbmcgd2lsbCBiZSBlc2NhcGVkIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBpbmplY3RlZCBpbnRvXG4gIC8vIHRoZSBtYXJrdXAuIElmIHlvdSBwcm92aWRlIHVuc2FmZSB1c2VyIGRhdGEgaGVyZSB0aGV5IGNhbiBpbmplY3RcbiAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0XG4gIC8vIGh0dHA6Ly93d3cudGhlc3Bhbm5lci5jby51ay8yMDA3LzExLzI2L3VsdGltYXRlLXhzcy1jc3MtaW5qZWN0aW9uL1xuICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG4gIC8vIHdoaWNoIGhhcyBsZWFkIHRvIGEgZ3JlYXRlciBkaXNjdXNzaW9uIGFib3V0IGhvdyB3ZSdyZSBnb2luZyB0b1xuICAvLyB0cnVzdCBVUkxzIG1vdmluZyBmb3J3YXJkLiBTZWUgIzIxMTU5MDFcblxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gIGlmIChpc05vbk51bWVyaWMgfHwgdmFsdWUgPT09IDAgfHwgaXNVbml0bGVzc051bWJlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBpc1VuaXRsZXNzTnVtYmVyW25hbWVdKSB7XG4gICAgcmV0dXJuICcnICsgdmFsdWU7IC8vIGNhc3QgdG8gc3RyaW5nXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICB9XG4gIHJldHVybiB2YWx1ZSArICdweCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZTtcbn0se1wiLi9DU1NQcm9wZXJ0eVwiOjE3MH1dLDI3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRlcHJlY2F0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL09iamVjdC5hc3NpZ24nKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIFRoaXMgd2lsbCBsb2cgYSBzaW5nbGUgZGVwcmVjYXRpb24gbm90aWNlIHBlciBmdW5jdGlvbiBhbmQgZm9yd2FyZCB0aGUgY2FsbFxuICogb24gdG8gdGhlIG5ldyBBUEkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZSBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdNb2R1bGUgVGhlIG1vZHVsZSB0aGF0IGZuIHdpbGwgZXhpc3QgaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdQYWNrYWdlIFRoZSBtb2R1bGUgdGhhdCBmbiB3aWxsIGV4aXN0IGluXG4gKiBAcGFyYW0geyp9IGN0eCBUaGUgY29udGV4dCB0aGlzIGZvcndhcmRlZCBjYWxsIHNob3VsZCBydW4gaW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBmb3J3YXJkIG9uIHRvXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCB3YXJuIG9uY2UgYW5kIHRoZW4gY2FsbCBmblxuICovXG5mdW5jdGlvbiBkZXByZWNhdGVkKGZuTmFtZSwgbmV3TW9kdWxlLCBuZXdQYWNrYWdlLCBjdHgsIGZuKSB7XG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgbmV3Rm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh3YXJuZWQsXG4gICAgICAvLyBSZXF1aXJlIGV4YW1wbGVzIGluIHRoaXMgc3RyaW5nIG11c3QgYmUgc3BsaXQgdG8gcHJldmVudCBSZWFjdCdzXG4gICAgICAvLyBidWlsZCB0b29scyBmcm9tIG1pc3Rha2luZyB0aGVtIGZvciByZWFsIHJlcXVpcmVzLlxuICAgICAgLy8gT3RoZXJ3aXNlIHRoZSBidWlsZCB0b29scyB3aWxsIGF0dGVtcHQgdG8gYnVpbGQgYSAnJXMnIG1vZHVsZS5cbiAgICAgICdSZWFjdC4lcyBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICVzLiVzIGZyb20gcmVxdWlyZScgKyAnKFxcJyVzXFwnKSAnICsgJ2luc3RlYWQuJywgZm5OYW1lLCBuZXdNb2R1bGUsIGZuTmFtZSwgbmV3UGFja2FnZSkgOiB1bmRlZmluZWQ7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbCBmbiBhcmUgY29waWVkIG92ZXIuXG4gICAgLy8gSW4gcGFydGljdWxhciwgdGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBQcm9wVHlwZXNcbiAgICByZXR1cm4gYXNzaWduKG5ld0ZuLCBmbik7XG4gIH1cblxuICByZXR1cm4gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlZDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL3dhcm5pbmdcIjo0NX1dLDI3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVNDQVBFX0xPT0tVUCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJzwnOiAnJmx0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICAnXFwnJzogJyYjeDI3Oydcbn07XG5cbnZhciBFU0NBUEVfUkVHRVggPSAvWyY+PFwiJ10vZztcblxuZnVuY3Rpb24gZXNjYXBlcihtYXRjaCkge1xuICByZXR1cm4gRVNDQVBFX0xPT0tVUFttYXRjaF07XG59XG5cbi8qKlxuICogRXNjYXBlcyB0ZXh0IHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB0ZXh0IFRleHQgdmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCBlc2NhcGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXI7XG59LHt9XSwyNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmaW5kRE9NTm9kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBET00gbm9kZSByZW5kZXJlZCBieSB0aGlzIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudHxET01FbGVtZW50fSBjb21wb25lbnRPckVsZW1lbnRcbiAqIEByZXR1cm4gez9ET01FbGVtZW50fSBUaGUgcm9vdCBub2RlIG9mIHRoaXMgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICBpZiAob3duZXIgIT09IG51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBnZXRET01Ob2RlIG9yIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB1bmRlZmluZWQ7XG4gICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoY29tcG9uZW50T3JFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbiAgfVxuICBpZiAoUmVhY3RJbnN0YW5jZU1hcC5oYXMoY29tcG9uZW50T3JFbGVtZW50KSkge1xuICAgIHJldHVybiBSZWFjdE1vdW50LmdldE5vZGVGcm9tSW5zdGFuY2UoY29tcG9uZW50T3JFbGVtZW50KTtcbiAgfVxuICAhKGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIgPT0gbnVsbCB8fCB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZmluZERPTU5vZGUgd2FzIGNhbGxlZCBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLCBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZERPTU5vZGU7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEN1cnJlbnRPd25lclwiOjIwMSxcIi4vUmVhY3RJbnN0YW5jZU1hcFwiOjIyOSxcIi4vUmVhY3RNb3VudFwiOjIzMixcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmbGF0dGVuQ2hpbGRyZW5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBwYXNzZWQgdGhyb3VnaCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9SZWFjdENvbXBvbmVudH0gY2hpbGQgUmVhY3QgY2hpbGQgY29tcG9uZW50LlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFN0cmluZyBuYW1lIG9mIGtleSBwYXRoIHRvIGNoaWxkLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICB2YXIgcmVzdWx0ID0gdHJhdmVyc2VDb250ZXh0O1xuICB2YXIga2V5VW5pcXVlID0gcmVzdWx0W25hbWVdID09PSB1bmRlZmluZWQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoa2V5VW5pcXVlLCAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICsgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJywgbmFtZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGtleVVuaXF1ZSAmJiBjaGlsZCAhPSBudWxsKSB7XG4gICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi90cmF2ZXJzZUFsbENoaWxkcmVuXCI6MjkzLFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZvckVhY2hBY2N1bXVsYXRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IGZ1bmN0aW9uIChhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcbn0se31dLDI3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRDaGFyQ29kZVxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYGNoYXJDb2RlYCByZXByZXNlbnRzIHRoZSBhY3R1YWwgXCJjaGFyYWN0ZXIgY29kZVwiIGFuZCBpcyBzYWZlIHRvIHVzZSB3aXRoXG4gKiBgU3RyaW5nLmZyb21DaGFyQ29kZWAuIEFzIHN1Y2gsIG9ubHkga2V5cyB0aGF0IGNvcnJlc3BvbmQgdG8gcHJpbnRhYmxlXG4gKiBjaGFyYWN0ZXJzIHByb2R1Y2UgYSB2YWxpZCBgY2hhckNvZGVgLCB0aGUgb25seSBleGNlcHRpb24gdG8gdGhpcyBpcyBFbnRlci5cbiAqIFRoZSBUYWIta2V5IGlzIGNvbnNpZGVyZWQgbm9uLXByaW50YWJsZSBhbmQgZG9lcyBub3QgaGF2ZSBhIGBjaGFyQ29kZWAsXG4gKiBwcmVzdW1hYmx5IGJlY2F1c2UgaXQgZG9lcyBub3QgcHJvZHVjZSBhIHRhYi1jaGFyYWN0ZXIgaW4gYnJvd3NlcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7bnVtYmVyfSBOb3JtYWxpemVkIGBjaGFyQ29kZWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG59LHt9XSwyNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50S2V5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKCcuL2dldEV2ZW50Q2hhckNvZGUnKTtcblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICAnRXNjJzogJ0VzY2FwZScsXG4gICdTcGFjZWJhcic6ICcgJyxcbiAgJ0xlZnQnOiAnQXJyb3dMZWZ0JyxcbiAgJ1VwJzogJ0Fycm93VXAnLFxuICAnUmlnaHQnOiAnQXJyb3dSaWdodCcsXG4gICdEb3duJzogJ0Fycm93RG93bicsXG4gICdEZWwnOiAnRGVsZXRlJyxcbiAgJ1dpbic6ICdPUycsXG4gICdNZW51JzogJ0NvbnRleHRNZW51JyxcbiAgJ0FwcHMnOiAnQ29udGV4dE1lbnUnLFxuICAnU2Nyb2xsJzogJ1Njcm9sbExvY2snLFxuICAnTW96UHJpbnRhYmxlS2V5JzogJ1VuaWRlbnRpZmllZCdcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gIDg6ICdCYWNrc3BhY2UnLFxuICA5OiAnVGFiJyxcbiAgMTI6ICdDbGVhcicsXG4gIDEzOiAnRW50ZXInLFxuICAxNjogJ1NoaWZ0JyxcbiAgMTc6ICdDb250cm9sJyxcbiAgMTg6ICdBbHQnLFxuICAxOTogJ1BhdXNlJyxcbiAgMjA6ICdDYXBzTG9jaycsXG4gIDI3OiAnRXNjYXBlJyxcbiAgMzI6ICcgJyxcbiAgMzM6ICdQYWdlVXAnLFxuICAzNDogJ1BhZ2VEb3duJyxcbiAgMzU6ICdFbmQnLFxuICAzNjogJ0hvbWUnLFxuICAzNzogJ0Fycm93TGVmdCcsXG4gIDM4OiAnQXJyb3dVcCcsXG4gIDM5OiAnQXJyb3dSaWdodCcsXG4gIDQwOiAnQXJyb3dEb3duJyxcbiAgNDU6ICdJbnNlcnQnLFxuICA0NjogJ0RlbGV0ZScsXG4gIDExMjogJ0YxJywgMTEzOiAnRjInLCAxMTQ6ICdGMycsIDExNTogJ0Y0JywgMTE2OiAnRjUnLCAxMTc6ICdGNicsXG4gIDExODogJ0Y3JywgMTE5OiAnRjgnLCAxMjA6ICdGOScsIDEyMTogJ0YxMCcsIDEyMjogJ0YxMScsIDEyMzogJ0YxMicsXG4gIDE0NDogJ051bUxvY2snLFxuICAxNDU6ICdTY3JvbGxMb2NrJyxcbiAgMjI0OiAnTWV0YSdcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXG4gICAgLy8gRmlyZUZveCBpbXBsZW1lbnRzIGBrZXlgIGJ1dCByZXR1cm5zIGBNb3pQcmludGFibGVLZXlgIGZvciBhbGxcbiAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIEJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IGBrZXlgLCBwb2x5ZmlsbCBhcyBtdWNoIG9mIGl0IGFzIHdlIGNhbi5cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudEtleTtcbn0se1wiLi9nZXRFdmVudENoYXJDb2RlXCI6Mjc3fV0sMjc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbnZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgJ0FsdCc6ICdhbHRLZXknLFxuICAnQ29udHJvbCc6ICdjdHJsS2V5JyxcbiAgJ01ldGEnOiAnbWV0YUtleScsXG4gICdTaGlmdCc6ICdzaGlmdEtleSdcbn07XG5cbi8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgZ2V0TW9kaWZpZXJTdGF0ZSBzbyB3ZSBzaW1wbHkgbWFwIGl0IHRvIHRoZSBvbmx5XG4vLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50IGl0c2VsZiwgZG9lcyBub3Qgc3VwcG9ydCBMb2NrLWtleXMuXG4vLyBDdXJyZW50bHksIGFsbCBtYWpvciBicm93c2VycyBleGNlcHQgQ2hyb21lIHNlZW1zIHRvIHN1cHBvcnQgTG9jay1rZXlzLlxuZnVuY3Rpb24gbW9kaWZpZXJTdGF0ZUdldHRlcihrZXlBcmcpIHtcbiAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gdGhpcztcbiAgdmFyIG5hdGl2ZUV2ZW50ID0gc3ludGhldGljRXZlbnQubmF0aXZlRXZlbnQ7XG4gIGlmIChuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUoa2V5QXJnKTtcbiAgfVxuICB2YXIga2V5UHJvcCA9IG1vZGlmaWVyS2V5VG9Qcm9wW2tleUFyZ107XG4gIHJldHVybiBrZXlQcm9wID8gISFuYXRpdmVFdmVudFtrZXlQcm9wXSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIG1vZGlmaWVyU3RhdGVHZXR0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRNb2RpZmllclN0YXRlO1xufSx7fV0sMjgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcbn0se31dLDI4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0SXRlcmF0b3JGblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbnZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4vKipcbiAqIFJldHVybnMgdGhlIGl0ZXJhdG9yIG1ldGhvZCBmdW5jdGlvbiBjb250YWluZWQgb24gdGhlIGl0ZXJhYmxlIG9iamVjdC5cbiAqXG4gKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAqXG4gKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gKiAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobXlJdGVyYWJsZSk7XG4gKiAgICAgICAuLi5cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEl0ZXJhdG9yRm47XG59LHt9XSwyODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2l2ZW4gYW55IG5vZGUgcmV0dXJuIHRoZSBmaXJzdCBsZWFmIG5vZGUgd2l0aG91dCBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2libGluZ05vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBvYmplY3QgZGVzY3JpYmluZyB0aGUgbm9kZXMgd2hpY2ggY29udGFpbiBjaGFyYWN0ZXJzIGF0IG9mZnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHZhciBub2RlU3RhcnQgPSAwO1xuICB2YXIgbm9kZUVuZCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldDtcbn0se31dLDI4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvcjtcbn0se1wiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMH1dLDI4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudCcpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCcpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9PYmplY3QuYXNzaWduJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLy8gVG8gYXZvaWQgYSBjeWNsaWMgZGVwZW5kZW5jeSwgd2UgY3JlYXRlIHRoZSBmaW5hbCBjbGFzcyBpbiB0aGlzIG1vZHVsZVxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciA9IGZ1bmN0aW9uICgpIHt9O1xuYXNzaWduKFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLCB7XG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG59KTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHR5cGUgcmVmZXJlbmNlIGlzIGEga25vd24gaW50ZXJuYWwgdHlwZS4gSS5lLiBub3QgYSB1c2VyXG4gKiBwcm92aWRlZCBjb21wb3NpdGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhpcyBpcyBhIHZhbGlkIGludGVybmFsIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVhY3ROb2RlLCBjcmVhdGUgYW4gaW5zdGFuY2UgdGhhdCB3aWxsIGFjdHVhbGx5IGJlIG1vdW50ZWQuXG4gKlxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH0gQSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGVsZW1lbnQncyBjb25zdHJ1Y3Rvci5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChub2RlKSB7XG4gIHZhciBpbnN0YW5jZTtcblxuICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgIGluc3RhbmNlID0gbmV3IFJlYWN0RW1wdHlDb21wb25lbnQoaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBub2RlO1xuICAgICEoZWxlbWVudCAmJiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpICcgKyAnb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIGVsZW1lbnQudHlwZSA9PSBudWxsID8gZWxlbWVudC50eXBlIDogdHlwZW9mIGVsZW1lbnQudHlwZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGVsZW1lbnQuX293bmVyKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW50ZXJuYWxDb21wb25lbnQoZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmIChpc0ludGVybmFsQ29tcG9uZW50VHlwZShlbGVtZW50LnR5cGUpKSB7XG4gICAgICAvLyBUaGlzIGlzIHRlbXBvcmFyaWx5IGF2YWlsYWJsZSBmb3IgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgbm90IHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW50YXRpb25zLiBJLmUuIEFSVC4gT25jZSB0aG9zZSBhcmUgdXBkYXRlZCB0byB1c2UgdGhlIHN0cmluZ1xuICAgICAgLy8gcmVwcmVzZW50YXRpb24sIHdlIGNhbiBkcm9wIHRoaXMgY29kZSBwYXRoLlxuICAgICAgaW5zdGFuY2UgPSBuZXcgZWxlbWVudC50eXBlKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJykge1xuICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2VGb3JUZXh0KG5vZGUpO1xuICB9IGVsc2Uge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbmNvdW50ZXJlZCBpbnZhbGlkIFJlYWN0IG5vZGUgb2YgdHlwZSAlcycsIHR5cGVvZiBub2RlKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0YW5jZS5jb25zdHJ1Y3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nLCAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLicpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gU2V0cyB1cCB0aGUgaW5zdGFuY2UuIFRoaXMgY2FuIHByb2JhYmx5IGp1c3QgbW92ZSBpbnRvIHRoZSBjb25zdHJ1Y3RvciBub3cuXG4gIGluc3RhbmNlLmNvbnN0cnVjdChub2RlKTtcblxuICAvLyBUaGVzZSB0d28gZmllbGRzIGFyZSB1c2VkIGJ5IHRoZSBET00gYW5kIEFSVCBkaWZmaW5nIGFsZ29yaXRobXNcbiAgLy8gcmVzcGVjdGl2ZWx5LiBJbnN0ZWFkIG9mIHVzaW5nIGV4cGFuZG9zIG9uIGNvbXBvbmVudHMsIHdlIHNob3VsZCBiZVxuICAvLyBzdG9yaW5nIHRoZSBzdGF0ZSBuZWVkZWQgYnkgdGhlIGRpZmZpbmcgYWxnb3JpdGhtcyBlbHNld2hlcmUuXG4gIGluc3RhbmNlLl9tb3VudEluZGV4ID0gMDtcbiAgaW5zdGFuY2UuX21vdW50SW1hZ2UgPSBudWxsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuX2lzT3duZXJOZWNlc3NhcnkgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEludGVybmFsIGluc3RhbmNlcyBzaG91bGQgZnVsbHkgY29uc3RydWN0ZWQgYXQgdGhpcyBwb2ludCwgc28gdGhleSBzaG91bGRcbiAgLy8gbm90IGdldCBhbnkgbmV3IGZpZWxkcyBhZGRlZCB0byB0aGVtIGF0IHRoaXMgcG9pbnQuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjoxODksXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCI6MjAwLFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCI6MjIxLFwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudFwiOjIzNSxcIl9wcm9jZXNzXCI6MTE0LFwiZmJqcy9saWIvaW52YXJpYW50XCI6MzQsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHwgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBkb2N1bWVudCk7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbn0se1wiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMH1dLDI4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgJ2NvbG9yJzogdHJ1ZSxcbiAgJ2RhdGUnOiB0cnVlLFxuICAnZGF0ZXRpbWUnOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICAnZW1haWwnOiB0cnVlLFxuICAnbW9udGgnOiB0cnVlLFxuICAnbnVtYmVyJzogdHJ1ZSxcbiAgJ3Bhc3N3b3JkJzogdHJ1ZSxcbiAgJ3JhbmdlJzogdHJ1ZSxcbiAgJ3NlYXJjaCc6IHRydWUsXG4gICd0ZWwnOiB0cnVlLFxuICAndGV4dCc6IHRydWUsXG4gICd0aW1lJzogdHJ1ZSxcbiAgJ3VybCc6IHRydWUsXG4gICd3ZWVrJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV0gfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDtcbn0se31dLDI4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG9ubHlDaGlsZFxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi4gVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpc1xuICogZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHMgcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlXG4gKiBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlXG4gKiBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RDb21wb25lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MjE5LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9pbnZhcmlhbnRcIjozNH1dLDI4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xuXG4vKipcbiAqIEVzY2FwZXMgYXR0cmlidXRlIHZhbHVlIHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSkge1xuICByZXR1cm4gJ1wiJyArIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyO1xufSx7XCIuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlclwiOjI3M31dLDI4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4qIEBwcm92aWRlc01vZHVsZSByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lclxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQucmVuZGVyU3VidHJlZUludG9Db250YWluZXI7XG59LHtcIi4vUmVhY3RNb3VudFwiOjIzMn1dLDI5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0SW5uZXJIVE1MXG4gKi9cblxuLyogZ2xvYmFscyBNU0FwcCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG52YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG5cbi8qKlxuICogU2V0IHRoZSBpbm5lckhUTUwgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldElubmVySFRNTCA9IGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbn07XG5cbi8vIFdpbjggYXBwczogQWxsb3cgYWxsIGh0bWwgdG8gYmUgaW5zZXJ0ZWRcbmlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gIHNldElubmVySFRNTCA9IGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgIH0pO1xuICB9O1xufVxuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFODogV2hlbiB1cGRhdGluZyBhIGp1c3QgY3JlYXRlZCBub2RlIHdpdGggaW5uZXJIVE1MIG9ubHkgbGVhZGluZ1xuICAvLyB3aGl0ZXNwYWNlIGlzIHJlbW92ZWQuIFdoZW4gdXBkYXRpbmcgYW4gZXhpc3Rpbmcgbm9kZSB3aXRoIGlubmVySFRNTFxuICAvLyB3aGl0ZXNwYWNlIGluIHJvb3QgVGV4dE5vZGVzIGlzIGFsc28gY29sbGFwc2VkLlxuICAvLyBAc2VlIHF1aXJrc21vZGUub3JnL2J1Z3JlcG9ydHMvYXJjaGl2ZXMvMjAwNC8xMS9pbm5lcmh0bWxfYW5kX3QuaHRtbFxuXG4gIC8vIEZlYXR1cmUgZGV0ZWN0aW9uOyBvbmx5IElFOCBpcyBrbm93biB0byBiZWhhdmUgaW1wcm9wZXJseSBsaWtlIHRoaXMuXG4gIHZhciB0ZXN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSAnICc7XG4gIGlmICh0ZXN0RWxlbWVudC5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgc2V0SW5uZXJIVE1MID0gZnVuY3Rpb24gKG5vZGUsIGh0bWwpIHtcbiAgICAgIC8vIE1hZ2ljIHRoZW9yeTogSUU4IHN1cHBvc2VkbHkgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiBhZGRlZCBhbmQgdXBkYXRlZFxuICAgICAgLy8gbm9kZXMgd2hlbiBwcm9jZXNzaW5nIGlubmVySFRNTCwgaW5uZXJIVE1MIG9uIHVwZGF0ZWQgbm9kZXMgc3VmZmVyc1xuICAgICAgLy8gZnJvbSB3b3JzZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLiBSZS1hZGRpbmcgYSBub2RlIGxpa2UgdGhpcyB0cmlnZ2Vyc1xuICAgICAgLy8gdGhlIGluaXRpYWwgYW5kIG1vcmUgZmF2b3JhYmxlIHdoaXRlc3BhY2UgYmVoYXZpb3IuXG4gICAgICAvLyBUT0RPOiBXaGF0IHRvIGRvIG9uIGEgZGV0YWNoZWQgbm9kZT9cbiAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgYWxzbyBpbXBsZW1lbnQgYSB3b3JrYXJvdW5kIGZvciBub24tdmlzaWJsZSB0YWdzIGRpc2FwcGVhcmluZyBpbnRvXG4gICAgICAvLyB0aGluIGFpciBvbiBJRTgsIHRoaXMgb25seSBoYXBwZW5zIGlmIHRoZXJlIGlzIG5vIHZpc2libGUgdGV4dFxuICAgICAgLy8gaW4tZnJvbnQgb2YgdGhlIG5vbi12aXNpYmxlIHRhZ3MuIFBpZ2d5YmFjayBvbiB0aGUgd2hpdGVzcGFjZSBmaXhcbiAgICAgIC8vIGFuZCBzaW1wbHkgY2hlY2sgaWYgYW55IG5vbi12aXNpYmxlIHRhZ3MgYXBwZWFyIGluIHRoZSBzb3VyY2UuXG4gICAgICBpZiAoV0hJVEVTUEFDRV9URVNULnRlc3QoaHRtbCkgfHwgaHRtbFswXSA9PT0gJzwnICYmIE5PTlZJU0lCTEVfVEVTVC50ZXN0KGh0bWwpKSB7XG4gICAgICAgIC8vIFJlY292ZXIgbGVhZGluZyB3aGl0ZXNwYWNlIGJ5IHRlbXBvcmFyaWx5IHByZXBlbmRpbmcgYW55IGNoYXJhY3Rlci5cbiAgICAgICAgLy8gXFx1RkVGRiBoYXMgdGhlIHBvdGVudGlhbCBhZHZhbnRhZ2Ugb2YgYmVpbmcgemVyby13aWR0aC9pbnZpc2libGUuXG4gICAgICAgIC8vIFVnbGlmeUpTIGRyb3BzIFUrRkVGRiBjaGFycyB3aGVuIHBhcnNpbmcsIHNvIHVzZSBTdHJpbmcuZnJvbUNoYXJDb2RlXG4gICAgICAgIC8vIGluIGhvcGVzIHRoYXQgdGhpcyBpcyBwcmVzZXJ2ZWQgZXZlbiBpZiBcIlxcdUZFRkZcIiBpcyB0cmFuc2Zvcm1lZCB0b1xuICAgICAgICAvLyB0aGUgYWN0dWFsIFVuaWNvZGUgY2hhcmFjdGVyIChieSBCYWJlbCwgZm9yIGV4YW1wbGUpLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWlzaG9vL1VnbGlmeUpTMi9ibG9iL3YyLjQuMjAvbGliL3BhcnNlLmpzI0wyMTZcbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkVGRikgKyBodG1sO1xuXG4gICAgICAgIC8vIGRlbGV0ZURhdGEgbGVhdmVzIGFuIGVtcHR5IGBUZXh0Tm9kZWAgd2hpY2ggb2Zmc2V0cyB0aGUgaW5kZXggb2YgYWxsXG4gICAgICAgIC8vIGNoaWxkcmVuLiBEZWZpbml0ZWx5IHdhbnQgdG8gYXZvaWQgdGhpcy5cbiAgICAgICAgdmFyIHRleHROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICBpZiAodGV4dE5vZGUuZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRleHROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0Tm9kZS5kZWxldGVEYXRhKDAsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldElubmVySFRNTDtcbn0se1wiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoyMH1dLDI5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgc2V0VGV4dENvbnRlbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC4gaW5uZXJUZXh0IGlzIGEgcG9vciBzdWJzdGl0dXRlIGZvciB0ZXh0Q29udGVudCBhbmQsIGFtb25nIG1hbnlcbiAqIGlzc3VlcywgaW5zZXJ0cyA8YnI+IGluc3RlYWQgb2YgdGhlIGxpdGVyYWwgbmV3bGluZSBjaGFycy4gaW5uZXJIVE1MIGJlaGF2ZXNcbiAqIGFzIGl0IHNob3VsZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIGlmICghKCd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUZXh0Q29udGVudDtcbn0se1wiLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXJcIjoyNzMsXCIuL3NldElubmVySFRNTFwiOjI5MCxcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6MjB9XSwyOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhIGBwcmV2RWxlbWVudGAgYW5kIGBuZXh0RWxlbWVudGAsIGRldGVybWluZXMgaWYgdGhlIGV4aXN0aW5nXG4gKiBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZCBhcyBvcHBvc2VkIHRvIGJlaW5nIGRlc3Ryb3llZCBvciByZXBsYWNlZCBieSBhIG5ld1xuICogaW5zdGFuY2UuIEJvdGggYXJndW1lbnRzIGFyZSBlbGVtZW50cy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhpcyBsb2dpYyBjYW5cbiAqIG9wZXJhdGUgb24gc3RhdGVsZXNzIHRyZWVzIHdpdGhvdXQgYW55IGJhY2tpbmcgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2RWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0RWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2Ugc2hvdWxkIGJlIHVwZGF0ZWQuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICB2YXIgcHJldkVtcHR5ID0gcHJldkVsZW1lbnQgPT09IG51bGwgfHwgcHJldkVsZW1lbnQgPT09IGZhbHNlO1xuICB2YXIgbmV4dEVtcHR5ID0gbmV4dEVsZW1lbnQgPT09IG51bGwgfHwgbmV4dEVsZW1lbnQgPT09IGZhbHNlO1xuICBpZiAocHJldkVtcHR5IHx8IG5leHRFbXB0eSkge1xuICAgIHJldHVybiBwcmV2RW1wdHkgPT09IG5leHRFbXB0eTtcbiAgfVxuXG4gIHZhciBwcmV2VHlwZSA9IHR5cGVvZiBwcmV2RWxlbWVudDtcbiAgdmFyIG5leHRUeXBlID0gdHlwZW9mIG5leHRFbGVtZW50O1xuICBpZiAocHJldlR5cGUgPT09ICdzdHJpbmcnIHx8IHByZXZUeXBlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXh0VHlwZSA9PT0gJ3N0cmluZycgfHwgbmV4dFR5cGUgPT09ICdudW1iZXInO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXh0VHlwZSA9PT0gJ29iamVjdCcgJiYgcHJldkVsZW1lbnQudHlwZSA9PT0gbmV4dEVsZW1lbnQudHlwZSAmJiBwcmV2RWxlbWVudC5rZXkgPT09IG5leHRFbGVtZW50LmtleTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQ7XG59LHt9XSwyOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0cmF2ZXJzZUFsbENoaWxkcmVuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdEluc3RhbmNlSGFuZGxlcyA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZUhhbmRsZXMnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZXJMb29rdXAgPSB7XG4gICc9JzogJz0wJyxcbiAgJy4nOiAnPTEnLFxuICAnOic6ICc9Midcbn07XG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9bPS46XS9nO1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwW21hdGNoXTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0IGtleVxuICAgIHJldHVybiB3cmFwVXNlclByb3ZpZGVkS2V5KGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogRXNjYXBlIGEgY29tcG9uZW50IGtleSBzbyB0aGF0IGl0IGlzIHNhZmUgdG8gdXNlIGluIGEgcmVhY3RpZC5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsIHVzZXJQcm92aWRlZEtleUVzY2FwZXIpO1xufVxuXG4vKipcbiAqIFdyYXAgYSBga2V5YCB2YWx1ZSBleHBsaWNpdGx5IHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbiAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFZhbHVlIG9mIGEgdXNlci1wcm92aWRlZCBga2V5YCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gd3JhcFVzZXJQcm92aWRlZEtleShrZXkpIHtcbiAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkaWRXYXJuQWJvdXRNYXBzLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICsgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgd3JhcFVzZXJQcm92aWRlZEtleShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSXQgbG9va3MgbGlrZSB5b3VcXCdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgJyArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDdXJyZW50T3duZXJcIjoyMDEsXCIuL1JlYWN0RWxlbWVudFwiOjIxOSxcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoyMjgsXCIuL2dldEl0ZXJhdG9yRm5cIjoyODEsXCJfcHJvY2Vzc1wiOjExNCxcImZianMvbGliL2ludmFyaWFudFwiOjM0LFwiZmJqcy9saWIvd2FybmluZ1wiOjQ1fV0sMjk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHZhbGlkYXRlRE9NTmVzdGluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vT2JqZWN0LmFzc2lnbicpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIFRoaXMgdmFsaWRhdGlvbiBjb2RlIHdhcyB3cml0dGVuIGJhc2VkIG9uIHRoZSBIVE1MNSBwYXJzaW5nIHNwZWM6XG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLXNjb3BlXG4gIC8vXG4gIC8vIE5vdGU6IHRoaXMgZG9lcyBub3QgY2F0Y2ggYWxsIGludmFsaWQgbmVzdGluZywgbm9yIGRvZXMgaXQgdHJ5IHRvIChhcyBpdCdzXG4gIC8vIG5vdCBjbGVhciB3aGF0IHByYWN0aWNhbCBiZW5lZml0IGRvaW5nIHNvIHByb3ZpZGVzKTsgaW5zdGVhZCwgd2Ugd2FybiBvbmx5XG4gIC8vIGZvciBjYXNlcyB3aGVyZSB0aGUgcGFyc2VyIHdpbGwgZ2l2ZSBhIHBhcnNlIHRyZWUgZGlmZmVyaW5nIGZyb20gd2hhdCBSZWFjdFxuICAvLyBpbnRlbmRlZC4gRm9yIGV4YW1wbGUsIDxiPjxkaXY+PC9kaXY+PC9iPiBpcyBpbnZhbGlkIGJ1dCB3ZSBkb24ndCB3YXJuXG4gIC8vIGJlY2F1c2UgaXQgc3RpbGwgcGFyc2VzIGNvcnJlY3RseTsgd2UgZG8gd2FybiBmb3Igb3RoZXIgY2FzZXMgbGlrZSBuZXN0ZWRcbiAgLy8gPHA+IHRhZ3Mgd2hlcmUgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgaW1wbGljaXRseSBjbG9zZXMgdGhlXG4gIC8vIGZpcnN0LCBjYXVzaW5nIGEgY29uZnVzaW5nIG1lc3MuXG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjc3BlY2lhbFxuICB2YXIgc3BlY2lhbFRhZ3MgPSBbJ2FkZHJlc3MnLCAnYXBwbGV0JywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdiYXNlJywgJ2Jhc2Vmb250JywgJ2Jnc291bmQnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2NlbnRlcicsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGQnLCAnZGV0YWlscycsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2ZyYW1lJywgJ2ZyYW1lc2V0JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaXNpbmRleCcsICdsaScsICdsaW5rJywgJ2xpc3RpbmcnLCAnbWFpbicsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICduYXYnLCAnbm9lbWJlZCcsICdub2ZyYW1lcycsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAncCcsICdwYXJhbScsICdwbGFpbnRleHQnLCAncHJlJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzb3VyY2UnLCAnc3R5bGUnLCAnc3VtbWFyeScsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZW1wbGF0ZScsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1bCcsICd3YnInLCAneG1wJ107XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgdmFyIGluU2NvcGVUYWdzID0gWydhcHBsZXQnLCAnY2FwdGlvbicsICdodG1sJywgJ3RhYmxlJywgJ3RkJywgJ3RoJywgJ21hcnF1ZWUnLCAnb2JqZWN0JywgJ3RlbXBsYXRlJyxcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNodG1sLWludGVncmF0aW9uLXBvaW50XG4gIC8vIFRPRE86IERpc3Rpbmd1aXNoIGJ5IG5hbWVzcGFjZSBoZXJlIC0tIGZvciA8dGl0bGU+LCBpbmNsdWRpbmcgaXQgaGVyZVxuICAvLyBlcnJzIG9uIHRoZSBzaWRlIG9mIGZld2VyIHdhcm5pbmdzXG4gICdmb3JlaWduT2JqZWN0JywgJ2Rlc2MnLCAndGl0bGUnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1idXR0b24tc2NvcGVcbiAgdmFyIGJ1dHRvblNjb3BlVGFncyA9IGluU2NvcGVUYWdzLmNvbmNhdChbJ2J1dHRvbiddKTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNnZW5lcmF0ZS1pbXBsaWVkLWVuZC10YWdzXG4gIHZhciBpbXBsaWVkRW5kVGFncyA9IFsnZGQnLCAnZHQnLCAnbGknLCAnb3B0aW9uJywgJ29wdGdyb3VwJywgJ3AnLCAncnAnLCAncnQnXTtcblxuICB2YXIgZW1wdHlBbmNlc3RvckluZm8gPSB7XG4gICAgcGFyZW50VGFnOiBudWxsLFxuXG4gICAgZm9ybVRhZzogbnVsbCxcbiAgICBhVGFnSW5TY29wZTogbnVsbCxcbiAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgIG5vYnJUYWdJblNjb3BlOiBudWxsLFxuICAgIHBUYWdJbkJ1dHRvblNjb3BlOiBudWxsLFxuXG4gICAgbGlzdEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbCxcbiAgICBkbEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbFxuICB9O1xuXG4gIHZhciB1cGRhdGVkQW5jZXN0b3JJbmZvID0gZnVuY3Rpb24gKG9sZEluZm8sIHRhZywgaW5zdGFuY2UpIHtcbiAgICB2YXIgYW5jZXN0b3JJbmZvID0gYXNzaWduKHt9LCBvbGRJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvKTtcbiAgICB2YXIgaW5mbyA9IHsgdGFnOiB0YWcsIGluc3RhbmNlOiBpbnN0YW5jZSB9O1xuXG4gICAgaWYgKGluU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoYnV0dG9uU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VlIHJ1bGVzIGZvciAnbGknLCAnZGQnLCAnZHQnIHN0YXJ0IHRhZ3MgaW5cbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5XG4gICAgaWYgKHNwZWNpYWxUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEgJiYgdGFnICE9PSAnYWRkcmVzcycgJiYgdGFnICE9PSAnZGl2JyAmJiB0YWcgIT09ICdwJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgICAgYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBhbmNlc3RvckluZm8ucGFyZW50VGFnID0gaW5mbztcblxuICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnYScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdidXR0b24nKSB7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnbGknKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhbmNlc3RvckluZm87XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGlzVGFnVmFsaWRXaXRoUGFyZW50ID0gZnVuY3Rpb24gKHRhZywgcGFyZW50VGFnKSB7XG4gICAgLy8gRmlyc3QsIGxldCdzIGNoZWNrIGlmIHdlJ3JlIGluIGFuIHVudXN1YWwgcGFyc2luZyBtb2RlLi4uXG4gICAgc3dpdGNoIChwYXJlbnRUYWcpIHtcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnNlbGVjdFxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnb3B0Z3JvdXAnIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIGNhc2UgJ29wdGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcsIHNlZWluZyBhbiA8b3B0aW9uPiBkb2Vzbid0IG1lYW4gd2UncmUgaW4gYSA8c2VsZWN0PlxuICAgICAgLy8gYnV0XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50ZFxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY2FwdGlvblxuICAgICAgLy8gTm8gc3BlY2lhbCBiZWhhdmlvciBzaW5jZSB0aGVzZSBydWxlcyBmYWxsIGJhY2sgdG8gXCJpbiBib2R5XCIgbW9kZSBmb3JcbiAgICAgIC8vIGFsbCBleGNlcHQgc3BlY2lhbCB0YWJsZSBub2RlcyB3aGljaCBjYXVzZSBiYWQgcGFyc2luZyBiZWhhdmlvciBhbnl3YXkuXG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRyXG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGJvZHlcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RyJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNvbGdyb3VwXG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGFibGVcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NhcHRpb24nIHx8IHRhZyA9PT0gJ2NvbGdyb3VwJyB8fCB0YWcgPT09ICd0Ym9keScgfHwgdGFnID09PSAndGZvb3QnIHx8IHRhZyA9PT0gJ3RoZWFkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmhlYWRcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnYmFzZScgfHwgdGFnID09PSAnYmFzZWZvbnQnIHx8IHRhZyA9PT0gJ2Jnc291bmQnIHx8IHRhZyA9PT0gJ2xpbmsnIHx8IHRhZyA9PT0gJ21ldGEnIHx8IHRhZyA9PT0gJ3RpdGxlJyB8fCB0YWcgPT09ICdub3NjcmlwdCcgfHwgdGFnID09PSAnbm9mcmFtZXMnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudFxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdoZWFkJyB8fCB0YWcgPT09ICdib2R5JztcbiAgICB9XG5cbiAgICAvLyBQcm9iYWJseSBpbiB0aGUgXCJpbiBib2R5XCIgcGFyc2luZyBtb2RlLCBzbyB3ZSBvdXRsYXcgb25seSB0YWcgY29tYm9zXG4gICAgLy8gd2hlcmUgdGhlIHBhcnNpbmcgcnVsZXMgY2F1c2UgaW1wbGljaXQgb3BlbnMgb3IgY2xvc2VzIHRvIGJlIGFkZGVkLlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnICE9PSAnaDEnICYmIHBhcmVudFRhZyAhPT0gJ2gyJyAmJiBwYXJlbnRUYWcgIT09ICdoMycgJiYgcGFyZW50VGFnICE9PSAnaDQnICYmIHBhcmVudFRhZyAhPT0gJ2g1JyAmJiBwYXJlbnRUYWcgIT09ICdoNic7XG5cbiAgICAgIGNhc2UgJ3JwJzpcbiAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG5cbiAgICAgIGNhc2UgJ2NhcHRpb24nOlxuICAgICAgY2FzZSAnY29sJzpcbiAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgIGNhc2UgJ2ZyYW1lJzpcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgY2FzZSAndGgnOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndHInOlxuICAgICAgICAvLyBUaGVzZSB0YWdzIGFyZSBvbmx5IHZhbGlkIHdpdGggYSBmZXcgcGFyZW50cyB0aGF0IGhhdmUgc3BlY2lhbCBjaGlsZFxuICAgICAgICAvLyBwYXJzaW5nIHJ1bGVzIC0tIGlmIHdlJ3JlIGRvd24gaGVyZSwgdGhlbiBub25lIG9mIHRob3NlIG1hdGNoZWQgYW5kXG4gICAgICAgIC8vIHNvIHdlIGFsbG93IGl0IG9ubHkgaWYgd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSBwYXJlbnQgaXMsIGFzIGFsbCBvdGhlclxuICAgICAgICAvLyBjYXNlcyBhcmUgaW52YWxpZC5cbiAgICAgICAgcmV0dXJuIHBhcmVudFRhZyA9PSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXJcbiAgICovXG4gIHZhciBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnID0gZnVuY3Rpb24gKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgY2FzZSAnYXJ0aWNsZSc6XG4gICAgICBjYXNlICdhc2lkZSc6XG4gICAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIGNhc2UgJ2RpYWxvZyc6XG4gICAgICBjYXNlICdkaXInOlxuICAgICAgY2FzZSAnZGl2JzpcbiAgICAgIGNhc2UgJ2RsJzpcbiAgICAgIGNhc2UgJ2ZpZWxkc2V0JzpcbiAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgY2FzZSAnZmlndXJlJzpcbiAgICAgIGNhc2UgJ2Zvb3Rlcic6XG4gICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgY2FzZSAnaGdyb3VwJzpcbiAgICAgIGNhc2UgJ21haW4nOlxuICAgICAgY2FzZSAnbWVudSc6XG4gICAgICBjYXNlICduYXYnOlxuICAgICAgY2FzZSAnb2wnOlxuICAgICAgY2FzZSAncCc6XG4gICAgICBjYXNlICdzZWN0aW9uJzpcbiAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgY2FzZSAndWwnOlxuXG4gICAgICBjYXNlICdwcmUnOlxuICAgICAgY2FzZSAnbGlzdGluZyc6XG5cbiAgICAgIGNhc2UgJ3RhYmxlJzpcblxuICAgICAgY2FzZSAnaHInOlxuXG4gICAgICBjYXNlICd4bXAnOlxuXG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmZvcm1UYWcgfHwgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlO1xuXG4gICAgICBjYXNlICdsaSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZztcblxuICAgICAgY2FzZSAnZGQnOlxuICAgICAgY2FzZSAnZHQnOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAvLyBTcGVjIHNheXMgc29tZXRoaW5nIGFib3V0IHN0b3JpbmcgYSBsaXN0IG9mIG1hcmtlcnMsIGJ1dCBpdCBzb3VuZHNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byB0aGlzIGNoZWNrLlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlO1xuXG4gICAgICBjYXNlICdub2JyJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2l2ZW4gYSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCBpbnN0YW5jZSwgcmV0dXJuIGEgbGlzdCBvZiBpdHMgcmVjdXJzaXZlXG4gICAqIG93bmVycywgc3RhcnRpbmcgYXQgdGhlIHJvb3QgYW5kIGVuZGluZyB3aXRoIHRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gICAqL1xuICB2YXIgZmluZE93bmVyU3RhY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgLyplc2xpbnQtZGlzYWJsZSBzcGFjZS1hZnRlci1rZXl3b3JkcyAqL1xuICAgIGRvIHtcbiAgICAgIC8qZXNsaW50LWVuYWJsZSBzcGFjZS1hZnRlci1rZXl3b3JkcyAqL1xuICAgICAgc3RhY2sucHVzaChpbnN0YW5jZSk7XG4gICAgfSB3aGlsZSAoaW5zdGFuY2UgPSBpbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcbiAgICBzdGFjay5yZXZlcnNlKCk7XG4gICAgcmV0dXJuIHN0YWNrO1xuICB9O1xuXG4gIHZhciBkaWRXYXJuID0ge307XG5cbiAgdmFsaWRhdGVET01OZXN0aW5nID0gZnVuY3Rpb24gKGNoaWxkVGFnLCBjaGlsZEluc3RhbmNlLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8ucGFyZW50VGFnO1xuICAgIHZhciBwYXJlbnRUYWcgPSBwYXJlbnRJbmZvICYmIHBhcmVudEluZm8udGFnO1xuXG4gICAgdmFyIGludmFsaWRQYXJlbnQgPSBpc1RhZ1ZhbGlkV2l0aFBhcmVudChjaGlsZFRhZywgcGFyZW50VGFnKSA/IG51bGwgOiBwYXJlbnRJbmZvO1xuICAgIHZhciBpbnZhbGlkQW5jZXN0b3IgPSBpbnZhbGlkUGFyZW50ID8gbnVsbCA6IGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcoY2hpbGRUYWcsIGFuY2VzdG9ySW5mbyk7XG4gICAgdmFyIHByb2JsZW1hdGljID0gaW52YWxpZFBhcmVudCB8fCBpbnZhbGlkQW5jZXN0b3I7XG5cbiAgICBpZiAocHJvYmxlbWF0aWMpIHtcbiAgICAgIHZhciBhbmNlc3RvclRhZyA9IHByb2JsZW1hdGljLnRhZztcbiAgICAgIHZhciBhbmNlc3Rvckluc3RhbmNlID0gcHJvYmxlbWF0aWMuaW5zdGFuY2U7XG5cbiAgICAgIHZhciBjaGlsZE93bmVyID0gY2hpbGRJbnN0YW5jZSAmJiBjaGlsZEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgYW5jZXN0b3JPd25lciA9IGFuY2VzdG9ySW5zdGFuY2UgJiYgYW5jZXN0b3JJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICB2YXIgY2hpbGRPd25lcnMgPSBmaW5kT3duZXJTdGFjayhjaGlsZE93bmVyKTtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVycyA9IGZpbmRPd25lclN0YWNrKGFuY2VzdG9yT3duZXIpO1xuXG4gICAgICB2YXIgbWluU3RhY2tMZW4gPSBNYXRoLm1pbihjaGlsZE93bmVycy5sZW5ndGgsIGFuY2VzdG9yT3duZXJzLmxlbmd0aCk7XG4gICAgICB2YXIgaTtcblxuICAgICAgdmFyIGRlZXBlc3RDb21tb24gPSAtMTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5TdGFja0xlbjsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZE93bmVyc1tpXSA9PT0gYW5jZXN0b3JPd25lcnNbaV0pIHtcbiAgICAgICAgICBkZWVwZXN0Q29tbW9uID0gaTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgVU5LTk9XTiA9ICcodW5rbm93biknO1xuICAgICAgdmFyIGNoaWxkT3duZXJOYW1lcyA9IGNoaWxkT3duZXJzLnNsaWNlKGRlZXBlc3RDb21tb24gKyAxKS5tYXAoZnVuY3Rpb24gKGluc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuZ2V0TmFtZSgpIHx8IFVOS05PV047XG4gICAgICB9KTtcbiAgICAgIHZhciBhbmNlc3Rvck93bmVyTmFtZXMgPSBhbmNlc3Rvck93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAgIHJldHVybiBpbnN0LmdldE5hbWUoKSB8fCBVTktOT1dOO1xuICAgICAgfSk7XG4gICAgICB2YXIgb3duZXJJbmZvID0gW10uY29uY2F0KFxuICAgICAgLy8gSWYgdGhlIHBhcmVudCBhbmQgY2hpbGQgaW5zdGFuY2VzIGhhdmUgYSBjb21tb24gb3duZXIgYW5jZXN0b3IsIHN0YXJ0XG4gICAgICAvLyB3aXRoIHRoYXQgLS0gb3RoZXJ3aXNlIHdlIGp1c3Qgc3RhcnQgd2l0aCB0aGUgcGFyZW50J3Mgb3duZXJzLlxuICAgICAgZGVlcGVzdENvbW1vbiAhPT0gLTEgPyBjaGlsZE93bmVyc1tkZWVwZXN0Q29tbW9uXS5nZXROYW1lKCkgfHwgVU5LTk9XTiA6IFtdLCBhbmNlc3Rvck93bmVyTmFtZXMsIGFuY2VzdG9yVGFnLFxuICAgICAgLy8gSWYgd2UncmUgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIChub24tcGFyZW50KSBhbmNlc3RyeSwgYWRkICcuLi4nXG4gICAgICBpbnZhbGlkQW5jZXN0b3IgPyBbJy4uLiddIDogW10sIGNoaWxkT3duZXJOYW1lcywgY2hpbGRUYWcpLmpvaW4oJyA+ICcpO1xuXG4gICAgICB2YXIgd2FybktleSA9ICEhaW52YWxpZFBhcmVudCArICd8JyArIGNoaWxkVGFnICsgJ3wnICsgYW5jZXN0b3JUYWcgKyAnfCcgKyBvd25lckluZm87XG4gICAgICBpZiAoZGlkV2Fyblt3YXJuS2V5XSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkaWRXYXJuW3dhcm5LZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGludmFsaWRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgICAgaWYgKGFuY2VzdG9yVGFnID09PSAndGFibGUnICYmIGNoaWxkVGFnID09PSAndHInKSB7XG4gICAgICAgICAgaW5mbyArPSAnIEFkZCBhIDx0Ym9keT4gdG8geW91ciBjb2RlIHRvIG1hdGNoIHRoZSBET00gdHJlZSBnZW5lcmF0ZWQgYnkgJyArICd0aGUgYnJvd3Nlci4nO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAndmFsaWRhdGVET01OZXN0aW5nKC4uLik6IDwlcz4gY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uICcgKyAnU2VlICVzLiVzJywgY2hpbGRUYWcsIGFuY2VzdG9yVGFnLCBvd25lckluZm8sIGluZm8pIDogdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogPCVzPiBjYW5ub3QgYXBwZWFyIGFzIGEgZGVzY2VuZGFudCBvZiAnICsgJzwlcz4uIFNlZSAlcy4nLCBjaGlsZFRhZywgYW5jZXN0b3JUYWcsIG93bmVySW5mbykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhbGlkYXRlRE9NTmVzdGluZy5hbmNlc3RvckluZm9Db250ZXh0S2V5ID0gJ19fdmFsaWRhdGVET01OZXN0aW5nX2FuY2VzdG9ySW5mbyQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbiAgdmFsaWRhdGVET01OZXN0aW5nLnVwZGF0ZWRBbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvO1xuXG4gIC8vIEZvciB0ZXN0aW5nXG4gIHZhbGlkYXRlRE9NTmVzdGluZy5pc1RhZ1ZhbGlkSW5Db250ZXh0ID0gZnVuY3Rpb24gKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLnBhcmVudFRhZztcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcbiAgICByZXR1cm4gaXNUYWdWYWxpZFdpdGhQYXJlbnQodGFnLCBwYXJlbnRUYWcpICYmICFmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKHRhZywgYW5jZXN0b3JJbmZvKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZGF0ZURPTU5lc3Rpbmc7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6MTg5LFwiX3Byb2Nlc3NcIjoxMTQsXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCI6MjYsXCJmYmpzL2xpYi93YXJuaW5nXCI6NDV9XSwyOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1JlYWN0Jyk7XG5cbn0se1wiLi9saWIvUmVhY3RcIjoxOTF9XSwyOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxMTR9XSwyOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJ2hpc3RvcnknKTtcbnZhciBSb3V0ZXIgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKS5Sb3V0ZXI7XG52YXIgUm91dGUgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKS5Sb3V0ZTtcblxudmFyIEluZGV4VmlldyA9IHJlcXVpcmUoJy4vanMvY29tcG9uZW50cy9pbmRleC12aWV3Jyk7XG52YXIgUmVzdWx0VmlldyA9IHJlcXVpcmUoJy4vanMvY29tcG9uZW50cy9yZXN1bHQtdmlldycpO1xuXG52YXIgaGlzdG9yeSA9IEhpc3RvcnkuY3JlYXRlSGFzaEhpc3RvcnkoKTtcblxuUmVhY3RET00ucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gIFJvdXRlcixcbiAgeyBoaXN0b3J5OiBoaXN0b3J5IH0sXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcGF0aDogJy8nLCBjb21wb25lbnQ6IEluZGV4VmlldyB9KSxcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBwYXRoOiAnc2VhcmNoJywgY29tcG9uZW50OiBSZXN1bHRWaWV3IH0pXG4pLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbicpKTtcblxufSx7XCIuL2pzL2NvbXBvbmVudHMvaW5kZXgtdmlld1wiOjMwNyxcIi4vanMvY29tcG9uZW50cy9yZXN1bHQtdmlld1wiOjMxMCxcImhpc3RvcnlcIjo2MyxcInJlYWN0XCI6Mjk1LFwicmVhY3QtZG9tXCI6MTE2LFwicmVhY3Qtcm91dGVyXCI6MTQyfV0sMjk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIERpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXInKTtcbnZhciBBY3Rpb25UeXBlcyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9jb25zdGFudHMnKS5BY3Rpb25UeXBlcztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlYXJjaDogZnVuY3Rpb24gc2VhcmNoKHF1ZXJ5KSB7XG4gICAgRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5TRUFSQ0gsXG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9KTtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihmaWx0ZXJzKSB7XG4gICAgRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5GSUxURVIsXG4gICAgICBmaWx0ZXJzOiBmaWx0ZXJzXG4gICAgfSk7XG4gIH0sXG5cbiAgcGFnaW5nOiBmdW5jdGlvbiBwYWdpbmcob2Zmc2V0KSB7XG4gICAgRGlzcGF0Y2hlci5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QQUdJTkcsXG4gICAgICBvZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICB9XG59O1xuXG59LHtcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjozMTMsXCIuLi9kaXNwYXRjaGVyL2Rpc3BhdGNoZXJcIjozMTR9XSwyOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvYWdncmVnYXRpb24tc2VsZWN0LmpzJyxcbiAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG4gIGxvY2FsczogW10sXG4gIGltcG9ydHM6IFtfcmVhY3RdXG59KTtcblxuZnVuY3Rpb24gX3dyYXBDb21wb25lbnQodW5pcXVlSWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChSZWFjdENsYXNzKSB7XG4gICAgcmV0dXJuIF9yZWFjdENvbXBvbmVudFdyYXBwZXIoUmVhY3RDbGFzcywgdW5pcXVlSWQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFNlbGVjdCA9IHJlcXVpcmUoJ3JlYWN0LXNlbGVjdCcpO1xuXG52YXIgU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvYWdncmVnYXRpb24tc3RvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfd3JhcENvbXBvbmVudCgnXyRVbmtub3duJykoUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXRlbXM6IFtdLFxuICAgICAgdHlwZTogbnVsbCxcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlNlbGVjdCBPcHRpb25zXCJcbiAgICB9O1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWVzOiBbXSxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZVxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKCFfLmlzRW1wdHkobmV4dFByb3BzLml0ZW1zKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZzogZmFsc2UgfSk7XG4gICAgfVxuICB9LFxuICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGlmIChuZXh0U3RhdGUudmFsdWVzICE9PSB0aGlzLnN0YXRlLnZhbHVlcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMuaXRlbXMgIT09IHRoaXMucHJvcHMuaXRlbXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZXMsIF9fKSB7XG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlczogXy5jb21wYWN0KHZhbHVlcy5zcGxpdCgnLCcpKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlczogW10gfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh2YWx1ZXMpO1xuICAgIH1cbiAgfSxcbiAgb3B0aW9uczogZnVuY3Rpb24gb3B0aW9ucygpIHtcbiAgICByZXR1cm4gXy5tYXAodGhpcy5wcm9wcy5pdGVtcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7IGxhYmVsOiBpdGVtLmtleSwgdmFsdWU6IGl0ZW0ua2V5IH07XG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyBpc0xvYWRpbmc6IHRoaXMuc3RhdGUuaXNMb2FkaW5nLCBuYW1lOiAnY291bnRyaWVzJywgbXVsdGk6IHRydWUsIHBsYWNlaG9sZGVyOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyLCBvcHRpb25zOiB0aGlzLm9wdGlvbnMoKSwgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlcyB9KTtcbiAgfVxufSkpO1xuXG59LHtcIi4uL3N0b3Jlcy9hZ2dyZWdhdGlvbi1zdG9yZVwiOjMxNSxcImxpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtXCI6NzYsXCJsb2Rhc2hcIjo4MCxcInJlYWN0XCI6Mjk1LFwicmVhY3Qtc2VsZWN0XCI6MTY1fV0sMzAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKFwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm1cIik7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX2NvbXBvbmVudHMgPSB7XG4gIF8kVW5rbm93bjoge31cbn07XG5cbnZhciBfcmVhY3RDb21wb25lbnRXcmFwcGVyID0gKDAsIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zW1wiZGVmYXVsdFwiXSkoe1xuICBmaWxlbmFtZTogXCIvVXNlcnMvdmljdG9yL3dvcmsvZ292d2l6ZWx5L2JhY2tib25lLWV4cGxvcmVyL3NyYy9qcy9jb21wb25lbnRzL2FydGljbGUtbGlzdC1pdGVtLmpzXCIsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoXCJfJFVua25vd25cIikoUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiYXJ0aWNsZVwiLFxuICAgICAgeyBjbGFzc05hbWU6IFwiYXJ0aWNsZVwiIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImgxXCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInRpdGxlXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgeyB0YXJnZXQ6IFwiX2JsYW5rXCIsIGhyZWY6IHRoaXMucHJvcHMuYXJ0aWNsZS51cmwsIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogdGhpcy5wcm9wcy5hcnRpY2xlLnRpdGxlIH0gfSlcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInBcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwidXJsXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7IHRhcmdldDogXCJfYmxhbmtcIiwgaHJlZjogdGhpcy5wcm9wcy5hcnRpY2xlLnVybCB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuYXJ0aWNsZS51cmxcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHsgY2xhc3NOYW1lOiBcInNuaXBwZXRcIiwgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0aGlzLnByb3BzLmFydGljbGUuc25pcHBldCB9IH0pXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcImxpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtXCI6NzYsXCJyZWFjdFwiOjI5NX1dLDMwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMiA9IHJlcXVpcmUoJ2xpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtJyk7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9jb21wb25lbnRzID0ge1xuICBfJFVua25vd246IHt9XG59O1xuXG52YXIgX3JlYWN0Q29tcG9uZW50V3JhcHBlciA9ICgwLCBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtM1snZGVmYXVsdCddKSh7XG4gIGZpbGVuYW1lOiAnL1VzZXJzL3ZpY3Rvci93b3JrL2dvdndpemVseS9iYWNrYm9uZS1leHBsb3Jlci9zcmMvanMvY29tcG9uZW50cy9hcnRpY2xlLWxpc3QuanMnLFxuICBjb21wb25lbnRzOiBfY29tcG9uZW50cyxcbiAgbG9jYWxzOiBbXSxcbiAgaW1wb3J0czogW19yZWFjdF1cbn0pO1xuXG5mdW5jdGlvbiBfd3JhcENvbXBvbmVudCh1bmlxdWVJZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKFJlYWN0Q2xhc3MpIHtcbiAgICByZXR1cm4gX3JlYWN0Q29tcG9uZW50V3JhcHBlcihSZWFjdENsYXNzLCB1bmlxdWVJZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBBcnRpY2xlU3RvcmUgPSByZXF1aXJlKCcuLi9zdG9yZXMvYXJ0aWNsZS1zdG9yZScpO1xudmFyIEFydGljbGVMaXN0SXRlbSA9IHJlcXVpcmUoJy4vYXJ0aWNsZS1saXN0LWl0ZW0nKTtcbnZhciBTcGlubmVyID0gcmVxdWlyZSgnLi9zcGlubmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgX29uQ2hhbmdlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFydGljbGVzOiBBcnRpY2xlU3RvcmUuZ2V0QXJ0aWNsZXMoKSB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nOiBmYWxzZSB9KTtcbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIEFydGljbGVTdG9yZS5hZGRMaXN0ZW5lcih0aGlzLl9vbkNoYW5nZSk7XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBBcnRpY2xlU3RvcmUucmVtb3ZlTGlzdGVuZXIodGhpcy5fb25DaGFuZ2UpO1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXJ0aWNsZXM6IEFydGljbGVTdG9yZS5nZXRBcnRpY2xlcygpLFxuICAgICAgaXNMb2FkaW5nOiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNMb2FkaW5nKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTcGlubmVyLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnc2VjdGlvbicsXG4gICAgICB7IGNsYXNzTmFtZTogJ2FydGljbGVzJyB9LFxuICAgICAgXy5tYXAodGhpcy5zdGF0ZS5hcnRpY2xlcywgZnVuY3Rpb24gKGFydGljbGUpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXJ0aWNsZUxpc3RJdGVtLCB7IGtleTogYXJ0aWNsZS5pZCwgYXJ0aWNsZTogYXJ0aWNsZSB9KTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcIi4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlXCI6MzE2LFwiLi9hcnRpY2xlLWxpc3QtaXRlbVwiOjMwMCxcIi4vc3Bpbm5lclwiOjMxMixcImxpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtXCI6NzYsXCJsb2Rhc2hcIjo4MCxcInJlYWN0XCI6Mjk1fV0sMzAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yID0gcmVxdWlyZSgnbGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm0nKTtcblxudmFyIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX2NvbXBvbmVudHMgPSB7XG4gIF8kVW5rbm93bjoge31cbn07XG5cbnZhciBfcmVhY3RDb21wb25lbnRXcmFwcGVyID0gKDAsIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zWydkZWZhdWx0J10pKHtcbiAgZmlsZW5hbWU6ICcvVXNlcnMvdmljdG9yL3dvcmsvZ292d2l6ZWx5L2JhY2tib25lLWV4cGxvcmVyL3NyYy9qcy9jb21wb25lbnRzL2NvbmRlbnNlZC1mb3JtLmpzJyxcbiAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG4gIGxvY2FsczogW10sXG4gIGltcG9ydHM6IFtfcmVhY3RdXG59KTtcblxuZnVuY3Rpb24gX3dyYXBDb21wb25lbnQodW5pcXVlSWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChSZWFjdENsYXNzKSB7XG4gICAgcmV0dXJuIF9yZWFjdENvbXBvbmVudFdyYXBwZXIoUmVhY3RDbGFzcywgdW5pcXVlSWQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBIZWFkZXIgPSByZXF1aXJlKCcuL2hlYWRlcicpO1xudmFyIEtleXdvcmRJbnB1dCA9IHJlcXVpcmUoJy4va2V5d29yZC1pbnB1dCcpO1xudmFyIFNlbGVjdCA9IHJlcXVpcmUoJy4vYWdncmVnYXRpb24tc2VsZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgY2xhc3NOYW1lOiAncm93JyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLW1kLTMnIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGVyLCB7IGNzc0NsYXNzOiAnaGVhZGVyLWNvbmRlbnNlZCcgfSlcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtMycgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChLZXl3b3JkSW5wdXQsIHsga2V5d29yZDogdGhpcy5wcm9wcy5rZXl3b3JkLCBvblN1Ym1pdDogdGhpcy5wcm9wcy5vblN1Ym1pdCwgb25DaGFuZ2U6IHRoaXMucHJvcHMub25LZXl3b3JkQ2hhbmdlLCBleHBhbmRlZDogZmFsc2UgfSlcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtMicgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdHlwZTogJ2NvdW50cmllcycsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IENvdW50cnknLCB2YWx1ZTogdGhpcy5wcm9wcy5jb3VudHJpZXMsIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ291bnRyeUNoYW5nZSwgaXRlbXM6IHRoaXMucHJvcHMuYWdncmVnYXRpb25zLmNvdW50cmllcyB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC0yJyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0eXBlOiAnaW5kdXN0cmllcycsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IEluZHVzdHJ5JywgdmFsdWU6IHRoaXMucHJvcHMuaW5kdXN0cmllcywgb25DaGFuZ2U6IHRoaXMucHJvcHMub25JbmR1c3RyeUNoYW5nZSwgaXRlbXM6IHRoaXMucHJvcHMuYWdncmVnYXRpb25zLmluZHVzdHJpZXMgfSlcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtMicgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdHlwZTogJ3RvcGljcycsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IFRvcGljJywgdmFsdWU6IHRoaXMucHJvcHMudG9waWNzLCBvbkNoYW5nZTogdGhpcy5wcm9wcy5vblRvcGljQ2hhbmdlLCBpdGVtczogdGhpcy5wcm9wcy5hZ2dyZWdhdGlvbnMudG9waWNzIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcIi4vYWdncmVnYXRpb24tc2VsZWN0XCI6Mjk5LFwiLi9oZWFkZXJcIjozMDYsXCIuL2tleXdvcmQtaW5wdXRcIjozMDgsXCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiOjc2LFwicmVhY3RcIjoyOTV9XSwzMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvZXhwYW5kZWQtZm9ybS5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgSGVhZGVyID0gcmVxdWlyZSgnLi9oZWFkZXInKTtcbnZhciBLZXl3b3JkSW5wdXQgPSByZXF1aXJlKCcuL2tleXdvcmQtaW5wdXQnKTtcbnZhciBTZWxlY3QgPSByZXF1aXJlKCcuL2FnZ3JlZ2F0aW9uLXNlbGVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwQ29tcG9uZW50KCdfJFVua25vd24nKShSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgY2xhc3NOYW1lOiAncm93IHBhZ2UtaGVhZGVyJyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRlciwgeyBjc3NDbGFzczogJ3RleHQtY2VudGVyJyB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC04IGtleXdvcmQtaW5wdXQnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGV4dC1tdXRlZCcgfSxcbiAgICAgICAgICAgICdTZWFyY2ggYnkgS2V5d29yZCdcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoS2V5d29yZElucHV0LCB7IGtleXdvcmQ6IHRoaXMucHJvcHMua2V5d29yZCwgb25TdWJtaXQ6IHRoaXMucHJvcHMub25TdWJtaXQsIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uS2V5d29yZENoYW5nZSB9KVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29sLW1kLTQgY2F0ZWdvcnktaW5wdXQnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGV4dC1tdXRlZCcgfSxcbiAgICAgICAgICAgICdTZWFyY2ggYnkgQ2F0ZWdvcnknXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0eXBlOiAnY291bnRyaWVzJywgb25DaGFuZ2U6IHRoaXMucHJvcHMub25Db3VudHJ5Q2hhbmdlLCBwbGFjZWhvbGRlcjogJ1NlbGVjdCBDb3VudHJ5JywgaXRlbXM6IHRoaXMucHJvcHMuYWdncmVnYXRpb25zLmNvdW50cmllcyB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyB0eXBlOiAnaW5kdXN0cmllcycsIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uSW5kdXN0cnlDaGFuZ2UsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IEluZHVzdHJ5JywgaXRlbXM6IHRoaXMucHJvcHMuYWdncmVnYXRpb25zLmluZHVzdHJpZXMgfSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3QsIHsgdHlwZTogJ3RvcGljcycsIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uVG9waWNDaGFuZ2UsIHBsYWNlaG9sZGVyOiAnU2VsZWN0IFRvcGljJywgaXRlbXM6IHRoaXMucHJvcHMuYWdncmVnYXRpb25zLnRvcGljcyB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcIi4vYWdncmVnYXRpb24tc2VsZWN0XCI6Mjk5LFwiLi9oZWFkZXJcIjozMDYsXCIuL2tleXdvcmQtaW5wdXRcIjozMDgsXCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiOjc2LFwicmVhY3RcIjoyOTV9XSwzMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvZmlsdGVycy5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBBcnRpY2xlQWN0b3IgPSByZXF1aXJlKCcuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvcicpO1xudmFyIEFydGljbGVTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgX29uQ2hhbmdlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGZpbHRlcnM6IEFydGljbGVTdG9yZS5nZXRBZ2dyZWdhdGlvbnMoKSB9KTtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbHRlcnM6IEFydGljbGVTdG9yZS5nZXRBZ2dyZWdhdGlvbnMoKVxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBBcnRpY2xlU3RvcmUuYWRkTGlzdGVuZXIodGhpcy5fb25DaGFuZ2UpO1xuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgQXJ0aWNsZVN0b3JlLnJlbW92ZUxpc3RlbmVyKHRoaXMuX29uQ2hhbmdlKTtcbiAgfSxcbiAgY3JlYXRlTmVzdGVkRmlsdGVyT3B0aW9uOiBmdW5jdGlvbiBjcmVhdGVOZXN0ZWRGaWx0ZXJPcHRpb24obGlzdCwgbmFtZSwgaXRlbSwgaW5kZXgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdsaScsXG4gICAgICB7IGNsYXNzTmFtZTogJ2xpc3QtZ3JvdXAtaXRlbSBjaGVja2JveCcsIGtleTogaXRlbSB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IG9uQ2hhbmdlOiB0aGlzLm9uRmlsdGVyLCBuYW1lOiBuYW1lLCB0eXBlOiAnY2hlY2tib3gnLCB2YWx1ZTogaXRlbSB9KSxcbiAgICAgICAgaXRlbVxuICAgICAgKSxcbiAgICAgIHRoaXMuY3JlYXRlRmlsdGVyTGlzdChsaXN0W2l0ZW1dLCBuYW1lLCB0aGlzLmNyZWF0ZU5lc3RlZEZpbHRlck9wdGlvbilcbiAgICApO1xuICB9LFxuICBjcmVhdGVGaWx0ZXJPcHRpb246IGZ1bmN0aW9uIGNyZWF0ZUZpbHRlck9wdGlvbihsaXN0LCBuYW1lLCBpdGVtLCBpbmRleCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xpJyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnbGlzdC1ncm91cC1pdGVtIGNoZWNrYm94Jywga2V5OiBpdGVtIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgb25DaGFuZ2U6IHRoaXMub25GaWx0ZXIsIG5hbWU6IG5hbWUsIHR5cGU6ICdjaGVja2JveCcsIHZhbHVlOiBpdGVtIH0pLFxuICAgICAgICBpdGVtXG4gICAgICApXG4gICAgKTtcbiAgfSxcbiAgY3JlYXRlRmlsdGVyTGlzdDogZnVuY3Rpb24gY3JlYXRlRmlsdGVyTGlzdChsaXN0LCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmIChfLmlzRW1wdHkobGlzdCkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3VsJyxcbiAgICAgIHsgY2xhc3NOYW1lOiAnbGlzdC1ncm91cCcgfSxcbiAgICAgIF8ua2V5cyhsaXN0KS5tYXAoY2FsbGJhY2suYmluZChudWxsLCBsaXN0LCBuYW1lKSlcbiAgICApO1xuICB9LFxuICBvbkZpbHRlcjogZnVuY3Rpb24gb25GaWx0ZXIoZSkge1xuICAgIHZhciBmaWx0ZXJzID0gXy5yZWR1Y2UoJCgnI2ZpbHRlcnMgaW5wdXQ6Y2hlY2tlZCcpLCBmdW5jdGlvbiAocmVzdWx0cywgY2hlY2tlZCwgX18pIHtcbiAgICAgIHN3aXRjaCAoY2hlY2tlZC5uYW1lKSB7XG4gICAgICAgIGNhc2UgJ2NvdW50cnktZmlsdGVyJzpcbiAgICAgICAgICByZXN1bHRzLmNvdW50cmllcy5wdXNoKGNoZWNrZWQudmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2luZHVzdHJ5LWZpbHRlcic6XG4gICAgICAgICAgcmVzdWx0cy5pbmR1c3RyaWVzLnB1c2goY2hlY2tlZC52YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAndG9waWMtZmlsdGVyJzpcbiAgICAgICAgICByZXN1bHRzLnRvcGljcy5wdXNoKGNoZWNrZWQudmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9LCB7IGNvdW50cmllczogW10sIGluZHVzdHJpZXM6IFtdLCB0b3BpY3M6IFtdIH0pO1xuXG4gICAgQXJ0aWNsZUFjdG9yLmZpbHRlcihmaWx0ZXJzKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgaWQ6ICdmaWx0ZXJzJyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NlY3Rpb24nLFxuICAgICAgICBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoNScsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAnQ291bnRyeSdcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ292ZXJmbG93JyB9LFxuICAgICAgICAgIHRoaXMuY3JlYXRlRmlsdGVyTGlzdCh0aGlzLnN0YXRlLmZpbHRlcnMuY291bnRyaWVzLCAnY291bnRyeS1maWx0ZXInLCB0aGlzLmNyZWF0ZUZpbHRlck9wdGlvbilcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnaDUnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgJ0luZHVzdHJ5J1xuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnb3ZlcmZsb3cnIH0sXG4gICAgICAgICAgdGhpcy5jcmVhdGVGaWx0ZXJMaXN0KHRoaXMuc3RhdGUuZmlsdGVycy5pbmR1c3RyaWVzLCAnaW5kdXN0cnktZmlsdGVyJywgdGhpcy5jcmVhdGVOZXN0ZWRGaWx0ZXJPcHRpb24pXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgIG51bGwsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2g1JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdUb3BpYydcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ292ZXJmbG93JyB9LFxuICAgICAgICAgIHRoaXMuY3JlYXRlRmlsdGVyTGlzdCh0aGlzLnN0YXRlLmZpbHRlcnMudG9waWNzLCAndG9waWMtZmlsdGVyJywgdGhpcy5jcmVhdGVOZXN0ZWRGaWx0ZXJPcHRpb24pXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuICB9XG59KSk7XG5cbn0se1wiLi4vYWN0b3JzL2FydGljbGUtYWN0b3JcIjoyOTgsXCIuLi9zdG9yZXMvYXJ0aWNsZS1zdG9yZVwiOjMxNixcImpxdWVyeVwiOjc0LFwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm1cIjo3NixcImxvZGFzaFwiOjgwLFwicmVhY3RcIjoyOTV9XSwzMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvZm9ybS5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBFeHBhbmRlZEZvcm0gPSByZXF1aXJlKCcuL2V4cGFuZGVkLWZvcm0nKTtcbnZhciBDb25kZW5zZWRGb3JtID0gcmVxdWlyZSgnLi9jb25kZW5zZWQtZm9ybScpO1xudmFyIEFydGljbGVBY3RvciA9IHJlcXVpcmUoJy4uL2FjdG9ycy9hcnRpY2xlLWFjdG9yJyk7XG52YXIgQXJ0aWNsZVN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL2FydGljbGUtc3RvcmUnKTtcbnZhciBBZ2dyZWdhdGlvblN0b3JlID0gcmVxdWlyZSgnLi4vc3RvcmVzL2FnZ3JlZ2F0aW9uLXN0b3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cGFuZGVkOiB0cnVlXG4gICAgfTtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleXdvcmQ6IEFydGljbGVTdG9yZS5nZXRRdWVyeSgpLnEgfHwgJycsXG4gICAgICBjb3VudHJpZXM6IEFydGljbGVTdG9yZS5nZXRRdWVyeSgpLmNvdW50cmllcyB8fCAnJyxcbiAgICAgIGluZHVzdHJpZXM6IEFydGljbGVTdG9yZS5nZXRRdWVyeSgpLmluZHVzdHJpZXMgfHwgJycsXG4gICAgICB0b3BpY3M6IEFydGljbGVTdG9yZS5nZXRRdWVyeSgpLnRvcGljcyB8fCAnJyxcbiAgICAgIGFnZ3JlZ2F0aW9uczoge31cbiAgICB9O1xuICB9LFxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBBZ2dyZWdhdGlvblN0b3JlLmdldEFsbCgoZnVuY3Rpb24gKGFnZ3JlZ2F0aW9ucykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFnZ3JlZ2F0aW9uczogYWdncmVnYXRpb25zIH0pO1xuICAgIH0pLmJpbmQodGhpcykpO1xuICB9LFxuICBoYW5kbGVTdWJtaXQ6IGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChlKSB7XG4gICAgdmFyIHF1ZXJ5ID0gXy5waWNrKHtcbiAgICAgIHE6IHRoaXMuc3RhdGUua2V5d29yZCxcbiAgICAgIGNvdW50cmllczogdGhpcy5zdGF0ZS5jb3VudHJpZXMsXG4gICAgICBpbmR1c3RyaWVzOiB0aGlzLnN0YXRlLmluZHVzdHJpZXMsXG4gICAgICB0b3BpY3M6IHRoaXMuc3RhdGUudG9waWNzXG4gICAgfSwgXy5pZGVudGl0eSk7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2hTdGF0ZShxdWVyeSwgJy9zZWFyY2gnLCBxdWVyeSk7XG4gIH0sXG4gIGhhbmRsZUtleXdvcmRDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUtleXdvcmRDaGFuZ2UoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBrZXl3b3JkOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfSxcbiAgaGFuZGxlQ291bnRyeUNoYW5nZTogZnVuY3Rpb24gaGFuZGxlQ291bnRyeUNoYW5nZSh2YWx1ZXMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgY291bnRyaWVzOiB2YWx1ZXMgfSk7XG4gIH0sXG4gIGhhbmRsZUluZHVzdHJ5Q2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVJbmR1c3RyeUNoYW5nZSh2YWx1ZXMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaW5kdXN0cmllczogdmFsdWVzIH0pO1xuICB9LFxuICBoYW5kbGVUb3BpY0NoYW5nZTogZnVuY3Rpb24gaGFuZGxlVG9waWNDaGFuZ2UodmFsdWVzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvcGljczogdmFsdWVzIH0pO1xuICB9LFxuICB2aWV3OiBmdW5jdGlvbiB2aWV3KCkge1xuICAgIHZhciBwcm9wcyA9IHtcbiAgICAgIGtleXdvcmQ6IHRoaXMuc3RhdGUua2V5d29yZCxcbiAgICAgIGNvdW50cmllczogdGhpcy5zdGF0ZS5jb3VudHJpZXMsXG4gICAgICBpbmR1c3RyaWVzOiB0aGlzLnN0YXRlLmluZHVzdHJpZXMsXG4gICAgICB0b3BpY3M6IHRoaXMuc3RhdGUudG9waWNzLFxuICAgICAgYWdncmVnYXRpb25zOiB0aGlzLnN0YXRlLmFnZ3JlZ2F0aW9ucyxcbiAgICAgIG9uS2V5d29yZENoYW5nZTogdGhpcy5oYW5kbGVLZXl3b3JkQ2hhbmdlLFxuICAgICAgb25Db3VudHJ5Q2hhbmdlOiB0aGlzLmhhbmRsZUNvdW50cnlDaGFuZ2UsXG4gICAgICBvbkluZHVzdHJ5Q2hhbmdlOiB0aGlzLmhhbmRsZUluZHVzdHJ5Q2hhbmdlLFxuICAgICAgb25TdWJtaXQ6IHRoaXMuaGFuZGxlU3VibWl0XG4gICAgfTtcbiAgICBpZiAoIXRoaXMucHJvcHMuZXhwYW5kZWQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbmRlbnNlZEZvcm0sIHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXhwYW5kZWRGb3JtLCBwcm9wcyk7XG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3KCk7XG4gIH1cbn0pKTtcblxufSx7XCIuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvclwiOjI5OCxcIi4uL3N0b3Jlcy9hZ2dyZWdhdGlvbi1zdG9yZVwiOjMxNSxcIi4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlXCI6MzE2LFwiLi9jb25kZW5zZWQtZm9ybVwiOjMwMixcIi4vZXhwYW5kZWQtZm9ybVwiOjMwMyxcImpxdWVyeVwiOjc0LFwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm1cIjo3NixcImxvZGFzaFwiOjgwLFwicmVhY3RcIjoyOTV9XSwzMDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvaGVhZGVyLmpzJyxcbiAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG4gIGxvY2FsczogW10sXG4gIGltcG9ydHM6IFtfcmVhY3RdXG59KTtcblxuZnVuY3Rpb24gX3dyYXBDb21wb25lbnQodW5pcXVlSWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChSZWFjdENsYXNzKSB7XG4gICAgcmV0dXJuIF9yZWFjdENvbXBvbmVudFdyYXBwZXIoUmVhY3RDbGFzcywgdW5pcXVlSWQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNzc0NsYXNzOiAnJ1xuICAgIH07XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjbGFzc05hbWUgPSBcImhlYWRlciBcIjtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuY29uY2F0KHRoaXMucHJvcHMuY3NzQ2xhc3MpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2hlYWRlcicsXG4gICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnYScsXG4gICAgICAgIHsgaHJlZjogJyMnLCBvbkNsaWNrOiB0aGlzLnByb3BzLm9uQ2xpY2sgfSxcbiAgICAgICAgJ0ZpbmQgTWFya2V0IEludGVsbGlnZW5jZSAnLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BoYXNlJyB9LFxuICAgICAgICAgICdiZXRhJ1xuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcImxpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtXCI6NzYsXCJyZWFjdFwiOjI5NX1dLDMwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMiA9IHJlcXVpcmUoJ2xpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtJyk7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9jb21wb25lbnRzID0ge1xuICBfJFVua25vd246IHt9XG59O1xuXG52YXIgX3JlYWN0Q29tcG9uZW50V3JhcHBlciA9ICgwLCBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtM1snZGVmYXVsdCddKSh7XG4gIGZpbGVuYW1lOiAnL1VzZXJzL3ZpY3Rvci93b3JrL2dvdndpemVseS9iYWNrYm9uZS1leHBsb3Jlci9zcmMvanMvY29tcG9uZW50cy9pbmRleC12aWV3LmpzJyxcbiAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG4gIGxvY2FsczogW10sXG4gIGltcG9ydHM6IFtfcmVhY3RdXG59KTtcblxuZnVuY3Rpb24gX3dyYXBDb21wb25lbnQodW5pcXVlSWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChSZWFjdENsYXNzKSB7XG4gICAgcmV0dXJuIF9yZWFjdENvbXBvbmVudFdyYXBwZXIoUmVhY3RDbGFzcywgdW5pcXVlSWQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJ3JlYWN0LXJvdXRlcicpLkhpc3Rvcnk7XG5cbnZhciBGb3JtID0gcmVxdWlyZSgnLi9mb3JtJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgbWl4aW5zOiBbSGlzdG9yeV0sXG4gIGhhbmRsZVN1Ym1pdDogZnVuY3Rpb24gaGFuZGxlU3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm0sIHsgb25TdWJtaXQ6IHRoaXMuaGFuZGxlU3VibWl0LCBleHBhbmRlZDogdHJ1ZSwgaGlzdG9yeTogdGhpcy5oaXN0b3J5IH0pO1xuICB9XG59KSk7XG5cbn0se1wiLi9mb3JtXCI6MzA1LFwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm1cIjo3NixcInJlYWN0XCI6Mjk1LFwicmVhY3Qtcm91dGVyXCI6MTQyfV0sMzA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yID0gcmVxdWlyZSgnbGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm0nKTtcblxudmFyIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX2NvbXBvbmVudHMgPSB7XG4gIF8kVW5rbm93bjoge31cbn07XG5cbnZhciBfcmVhY3RDb21wb25lbnRXcmFwcGVyID0gKDAsIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zWydkZWZhdWx0J10pKHtcbiAgZmlsZW5hbWU6ICcvVXNlcnMvdmljdG9yL3dvcmsvZ292d2l6ZWx5L2JhY2tib25lLWV4cGxvcmVyL3NyYy9qcy9jb21wb25lbnRzL2tleXdvcmQtaW5wdXQuanMnLFxuICBjb21wb25lbnRzOiBfY29tcG9uZW50cyxcbiAgbG9jYWxzOiBbXSxcbiAgaW1wb3J0czogW19yZWFjdF1cbn0pO1xuXG5mdW5jdGlvbiBfd3JhcENvbXBvbmVudCh1bmlxdWVJZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKFJlYWN0Q2xhc3MpIHtcbiAgICByZXR1cm4gX3JlYWN0Q29tcG9uZW50V3JhcHBlcihSZWFjdENsYXNzLCB1bmlxdWVJZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfd3JhcENvbXBvbmVudCgnXyRVbmtub3duJykoUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXhwYW5kZWQ6IHRydWVcbiAgICB9O1xuICB9LFxuICBoYW5kbGVFbnRlcjogZnVuY3Rpb24gaGFuZGxlRW50ZXIoZSkge1xuICAgIGlmIChlLnR5cGUgPT09ICdrZXlkb3duJyAmJiBlLndoaWNoID09PSAxMykge1xuICAgICAgdGhpcy5wcm9wcy5vblN1Ym1pdChlKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBpbnB1dENsYXNzID0gJ2Zvcm0tY29udHJvbCc7XG4gICAgdmFyIGJ1dHRvbkNsYXNzID0gJ2J0biBidG4tc3VjY2Vzcyc7XG4gICAgdmFyIGNvbnRhaW5lckNsYXNzID0gJ2lucHV0LWdyb3VwJztcbiAgICBpZiAodGhpcy5wcm9wcy5leHBhbmRlZCkge1xuICAgICAgaW5wdXRDbGFzcyA9IGlucHV0Q2xhc3MuY29uY2F0KCcgaW5wdXQtbGcnKTtcbiAgICAgIGJ1dHRvbkNsYXNzID0gYnV0dG9uQ2xhc3MuY29uY2F0KCcgYnRuLWxnJyk7XG4gICAgICBjb250YWluZXJDbGFzcyA9IGNvbnRhaW5lckNsYXNzLmNvbmNhdCgnIGNvbC1tZC0xMCcpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBjbGFzc05hbWU6IGNvbnRhaW5lckNsYXNzIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHsgdHlwZTogJ3RleHQnLCBjbGFzc05hbWU6IGlucHV0Q2xhc3MsIG5hbWU6ICdrZXl3b3JkJywgdmFsdWU6IHRoaXMucHJvcHMua2V5d29yZCwgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2UsIG9uS2V5RG93bjogdGhpcy5oYW5kbGVFbnRlciwgcGxhY2Vob2xkZXI6ICdLZXl3b3JkJyB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdpbnB1dC1ncm91cC1idG4nIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IGJ1dHRvbkNsYXNzLCB0eXBlOiAnYnV0dG9uJywgb25DbGljazogdGhpcy5wcm9wcy5vblN1Ym1pdCB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7IGNsYXNzTmFtZTogJ2ZhIGZhLXNlYXJjaCcgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pKTtcblxufSx7XCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiOjc2LFwicmVhY3RcIjoyOTV9XSwzMDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIgPSByZXF1aXJlKCdsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybScpO1xuXG52YXIgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0yKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbJ2RlZmF1bHQnXSkoe1xuICBmaWxlbmFtZTogJy9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvcGFnaW5hdGlvbi5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBBcnRpY2xlQWN0b3IgPSByZXF1aXJlKCcuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvcicpO1xudmFyIEFydGljbGVTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgX29uQ2hhbmdlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvdGFsOiBNYXRoLmNlaWwoQXJ0aWNsZVN0b3JlLmdldE1ldGFkYXRhKCkudG90YWwgLyB0aGlzLnByb3BzLnBhZ2VTaXplKSB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudDogQXJ0aWNsZVN0b3JlLmdldE1ldGFkYXRhKCkub2Zmc2V0IC8gdGhpcy5wcm9wcy5wYWdlU2l6ZSArIDEgfSk7XG4gIH0sXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYWdlU2l6ZTogMTAsXG4gICAgICBwYWdlUmFuZ2U6IDEwXG4gICAgfTtcbiAgfSxcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgY3VycmVudDogMVxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBBcnRpY2xlU3RvcmUuYWRkTGlzdGVuZXIodGhpcy5fb25DaGFuZ2UpO1xuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgQXJ0aWNsZVN0b3JlLnJlbW92ZUxpc3RlbmVyKHRoaXMuX29uQ2hhbmdlKTtcbiAgfSxcbiAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnL3NlYXJjaCcsIF8uYXNzaWduKHt9LCBBcnRpY2xlU3RvcmUuZ2V0UXVlcnkoKSwgeyBvZmZzZXQ6IGUudGFyZ2V0LmRhdGFzZXQub2Zmc2V0IH0pKTtcbiAgfSxcbiAgcGFnZXM6IGZ1bmN0aW9uIHBhZ2VzKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnRvdGFsIDw9IHRoaXMucHJvcHMucGFnZVJhbmdlKSB7XG4gICAgICByZXR1cm4gXy5yYW5nZSgxLCB0aGlzLnN0YXRlLnRvdGFsICsgMSk7XG4gICAgfVxuICAgIHZhciBwaXZvdCA9IE1hdGguY2VpbCgodGhpcy5wcm9wcy5wYWdlUmFuZ2UgKyAxKSAvIDIpO1xuICAgIHZhciBoZWFkID0gdGhpcy5zdGF0ZS5jdXJyZW50IC0gcGl2b3QgKyAxO1xuICAgIHZhciB0YWlsID0gdGhpcy5zdGF0ZS5jdXJyZW50ICsgdGhpcy5wcm9wcy5wYWdlUmFuZ2U7XG4gICAgcmV0dXJuIF8uY2hhaW4oXy5yYW5nZShoZWFkLCB0YWlsKSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geCA+IDA7XG4gICAgfSkudGFrZSh0aGlzLnByb3BzLnBhZ2VSYW5nZSkudmFsdWUoKTtcbiAgfSxcbiAgcHJldmlvdXNQYWdlOiBmdW5jdGlvbiBwcmV2aW91c1BhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY3VycmVudCAtIDEgfHwgMTtcbiAgfSxcbiAgbmV4dFBhZ2U6IGZ1bmN0aW9uIG5leHRQYWdlKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnQgPT09IHRoaXMuc3RhdGUudG90YWwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRvdGFsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5jdXJyZW50ICsgMTtcbiAgfSxcbiAgb2Zmc2V0OiBmdW5jdGlvbiBvZmZzZXQoaSkge1xuICAgIHJldHVybiAoaSAtIDEpICogdGhpcy5wcm9wcy5wYWdlU2l6ZTtcbiAgfSxcbiAgdXJsOiBmdW5jdGlvbiB1cmwoaSkge1xuICAgIHZhciBwYXJhbXMgPSBBcnRpY2xlU3RvcmUuZ2V0UXVlcnkoKTtcbiAgICBwYXJhbXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQoaSk7XG4gICAgcmV0dXJuICdzZWFyY2g/JyArICQucGFyYW0ocGFyYW1zKTtcbiAgfSxcbiAgY3JlYXRlUGFnZTogZnVuY3Rpb24gY3JlYXRlUGFnZShpLCBpc0FjdGl2ZSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2xpJyxcbiAgICAgIHsga2V5OiBpLCBjbGFzc05hbWU6IGlzQWN0aXZlID8gJ2FjdGl2ZScgOiAnJyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2EnLFxuICAgICAgICB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IHRoaXMudXJsKGkpLCAnZGF0YS1vZmZzZXQnOiB0aGlzLm9mZnNldChpKSB9LFxuICAgICAgICBpXG4gICAgICApXG4gICAgKTtcbiAgfSxcbiAgY3JlYXRlUGFnZVJhbmdlOiBmdW5jdGlvbiBjcmVhdGVQYWdlUmFuZ2UoKSB7XG4gICAgdmFyIHBhZ2VzID0gW107XG4gICAgXy5mb3JFYWNoKHRoaXMucGFnZXMoKSwgKGZ1bmN0aW9uIChpKSB7XG4gICAgICBwYWdlcy5wdXNoKHRoaXMuY3JlYXRlUGFnZShpLCB0aGlzLnN0YXRlLmN1cnJlbnQgPT09IGkpKTtcbiAgICB9KS5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gcGFnZXM7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ25hdicsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3VsJyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdwYWdpbmF0aW9uJyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsaScsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgeyBocmVmOiB0aGlzLnVybCgxKSwgJ2FyaWEtbGFiZWwnOiAnRmlyc3QnLCBjbGFzc05hbWU6ICdmYSBmYS1hbmdsZS1kb3VibGUtbGVmdCcgfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGknLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIHsgaHJlZjogdGhpcy51cmwodGhpcy5wcmV2aW91c1BhZ2UoKSksICdhcmlhLWxhYmVsJzogJ1ByZXZpb3VzJywgY2xhc3NOYW1lOiAnZmEgZmEtYW5nbGUtbGVmdCcgfSlcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5jcmVhdGVQYWdlUmFuZ2UoKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGknLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIHsgaHJlZjogdGhpcy51cmwodGhpcy5uZXh0UGFnZSgpKSwgJ2FyaWEtbGFiZWwnOiAnTmV4dCcsIGNsYXNzTmFtZTogJ2ZhIGZhLWFuZ2xlLXJpZ2h0JyB9KVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdsaScsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgeyBocmVmOiB0aGlzLnVybCh0aGlzLnN0YXRlLnRvdGFsKSwgJ2FyaWEtbGFiZWwnOiAnTGFzdCcsIGNsYXNzTmFtZTogJ2ZhIGZhLWFuZ2xlLWRvdWJsZS1yaWdodCcgfSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pKTtcblxufSx7XCIuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvclwiOjI5OCxcIi4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlXCI6MzE2LFwianF1ZXJ5XCI6NzQsXCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiOjc2LFwibG9kYXNoXCI6ODAsXCJyZWFjdFwiOjI5NX1dLDMxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMiA9IHJlcXVpcmUoJ2xpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtJyk7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9jb21wb25lbnRzID0ge1xuICBfJFVua25vd246IHt9XG59O1xuXG52YXIgX3JlYWN0Q29tcG9uZW50V3JhcHBlciA9ICgwLCBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtM1snZGVmYXVsdCddKSh7XG4gIGZpbGVuYW1lOiAnL1VzZXJzL3ZpY3Rvci93b3JrL2dvdndpemVseS9iYWNrYm9uZS1leHBsb3Jlci9zcmMvanMvY29tcG9uZW50cy9yZXN1bHQtdmlldy5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBIaXN0b3J5ID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyJykuSGlzdG9yeTtcblxudmFyIEZvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKTtcbnZhciBGaWx0ZXJzID0gcmVxdWlyZSgnLi9maWx0ZXJzJyk7XG52YXIgQXJ0aWNsZUxpc3QgPSByZXF1aXJlKCcuL2FydGljbGUtbGlzdCcpO1xudmFyIE1lc3NhZ2VzID0gcmVxdWlyZSgnLi9zZWFyY2gtbWVzc2FnZScpO1xudmFyIFBhZ2luYXRpb24gPSByZXF1aXJlKCcuL3BhZ2luYXRpb24nKTtcbnZhciBBcnRpY2xlQWN0b3IgPSByZXF1aXJlKCcuLi9hY3RvcnMvYXJ0aWNsZS1hY3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwQ29tcG9uZW50KCdfJFVua25vd24nKShSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIG1peGluczogW0hpc3RvcnldLFxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpZiAoXy5pc0VtcHR5KHRoaXMucHJvcHMubG9jYXRpb24ucXVlcnkpKSB7XG4gICAgICB0aGlzLmhpc3RvcnkucHVzaFN0YXRlKG51bGwsICcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEFydGljbGVBY3Rvci5zZWFyY2godGhpcy5wcm9wcy5sb2NhdGlvbi5xdWVyeSk7XG4gICAgfVxuICB9LFxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMubG9jYXRpb24ucXVlcnkgIT09IHRoaXMucHJvcHMubG9jYXRpb24ucXVlcnkpIHtcbiAgICAgIEFydGljbGVBY3Rvci5zZWFyY2gobmV4dFByb3BzLmxvY2F0aW9uLnF1ZXJ5KTtcbiAgICB9XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24gcmVzdWx0KCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzTmFtZTogJ3JvdycgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogJ2NvbC1tZC0zJyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoNCcsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICd0ZXh0LW11dGVkJyB9LFxuICAgICAgICAgICdBZHZhbmNlIE9wdGlvbnMnXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmlsdGVycywgbnVsbClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdjb2wtbWQtOScgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZXNzYWdlcywgbnVsbCksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXJ0aWNsZUxpc3QsIG51bGwpLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2luYXRpb24sIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5IH0pXG4gICAgICApXG4gICAgKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBjbGFzc05hbWU6ICdyb3cnIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybSwgeyBleHBhbmRlZDogZmFsc2UsIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSB9KVxuICAgICAgKSxcbiAgICAgIHRoaXMucmVzdWx0KClcbiAgICApO1xuICB9XG59KSk7XG5cbn0se1wiLi4vYWN0b3JzL2FydGljbGUtYWN0b3JcIjoyOTgsXCIuL2FydGljbGUtbGlzdFwiOjMwMSxcIi4vZmlsdGVyc1wiOjMwNCxcIi4vZm9ybVwiOjMwNSxcIi4vcGFnaW5hdGlvblwiOjMwOSxcIi4vc2VhcmNoLW1lc3NhZ2VcIjozMTEsXCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiOjc2LFwibG9kYXNoXCI6ODAsXCJyZWFjdFwiOjI5NSxcInJlYWN0LXJvdXRlclwiOjE0Mn1dLDMxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMiA9IHJlcXVpcmUoJ2xpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtJyk7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9jb21wb25lbnRzID0ge1xuICBfJFVua25vd246IHt9XG59O1xuXG52YXIgX3JlYWN0Q29tcG9uZW50V3JhcHBlciA9ICgwLCBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtM1snZGVmYXVsdCddKSh7XG4gIGZpbGVuYW1lOiAnL1VzZXJzL3ZpY3Rvci93b3JrL2dvdndpemVseS9iYWNrYm9uZS1leHBsb3Jlci9zcmMvanMvY29tcG9uZW50cy9zZWFyY2gtbWVzc2FnZS5qcycsXG4gIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuICBsb2NhbHM6IFtdLFxuICBpbXBvcnRzOiBbX3JlYWN0XVxufSk7XG5cbmZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KHVuaXF1ZUlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoUmVhY3RDbGFzcykge1xuICAgIHJldHVybiBfcmVhY3RDb21wb25lbnRXcmFwcGVyKFJlYWN0Q2xhc3MsIHVuaXF1ZUlkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIEFydGljbGVTdG9yZSA9IHJlcXVpcmUoJy4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBDb21wb25lbnQoJ18kVW5rbm93bicpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgX29uQ2hhbmdlOiBmdW5jdGlvbiBfb25DaGFuZ2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHRvdGFsOiBBcnRpY2xlU3RvcmUuZ2V0TWV0YWRhdGEoKS50b3RhbCB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgcXVlcnk6IEFydGljbGVTdG9yZS5nZXRRdWVyeSgpIH0pO1xuICB9LFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWw6IDAsXG4gICAgICBxdWVyeTogQXJ0aWNsZVN0b3JlLmdldFF1ZXJ5KClcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgQXJ0aWNsZVN0b3JlLmFkZExpc3RlbmVyKHRoaXMuX29uQ2hhbmdlKTtcbiAgfSxcbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIEFydGljbGVTdG9yZS5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vbkNoYW5nZSk7XG4gIH0sXG4gIG1lc3NhZ2U6IGZ1bmN0aW9uIG1lc3NhZ2UoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUudG90YWwgPT09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgdmFyIG1zZyA9IHRoaXMuc3RhdGUudG90YWwgPyAncmVzdWx0cycgOiAncmVzdWx0JztcbiAgICBtc2cgPSBtc2cuY29uY2F0KCcgd2VyZSBmb3VuZCcpO1xuXG4gICAgaWYgKCFfLmlzRW1wdHkodGhpcy5zdGF0ZS5xdWVyeS5xKSkge1xuICAgICAgbXNnID0gbXNnLmNvbmNhdCgnIGZvciB0aGUgc2VhcmNoIGZvcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtc2cgPSBtc2cuY29uY2F0KCcuJyk7XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG4gIH0sXG4gIGNvdW50OiBmdW5jdGlvbiBjb3VudCgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzdHJvbmcnLFxuICAgICAgeyBjbGFzc05hbWU6ICd0ZXh0LWRhbmdlcicgfSxcbiAgICAgIHRoaXMuc3RhdGUudG90YWxcbiAgICApO1xuICB9LFxuICBrZXl3b3JkOiBmdW5jdGlvbiBrZXl3b3JkKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5xdWVyeS5xKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICdzdHJvbmcnLFxuICAgICAgeyBjbGFzc05hbWU6ICd0ZXh0LWRhbmdlcicgfSxcbiAgICAgIHRoaXMuc3RhdGUucXVlcnkucSxcbiAgICAgICcuJ1xuICAgICk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2g2JyxcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLmNvdW50KCksXG4gICAgICAnICcsXG4gICAgICB0aGlzLm1lc3NhZ2UoKSxcbiAgICAgICcgJyxcbiAgICAgIHRoaXMua2V5d29yZCgpXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcIi4uL3N0b3Jlcy9hcnRpY2xlLXN0b3JlXCI6MzE2LFwibGl2ZXJlYWN0bG9hZC9iYWJlbC10cmFuc2Zvcm1cIjo3NixcImxvZGFzaFwiOjgwLFwicmVhY3RcIjoyOTV9XSwzMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMiA9IHJlcXVpcmUoXCJsaXZlcmVhY3Rsb2FkL2JhYmVsLXRyYW5zZm9ybVwiKTtcblxudmFyIF9saXZlcmVhY3Rsb2FkQmFiZWxUcmFuc2Zvcm0zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGl2ZXJlYWN0bG9hZEJhYmVsVHJhbnNmb3JtMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfY29tcG9uZW50cyA9IHtcbiAgXyRVbmtub3duOiB7fVxufTtcblxudmFyIF9yZWFjdENvbXBvbmVudFdyYXBwZXIgPSAoMCwgX2xpdmVyZWFjdGxvYWRCYWJlbFRyYW5zZm9ybTNbXCJkZWZhdWx0XCJdKSh7XG4gIGZpbGVuYW1lOiBcIi9Vc2Vycy92aWN0b3Ivd29yay9nb3Z3aXplbHkvYmFja2JvbmUtZXhwbG9yZXIvc3JjL2pzL2NvbXBvbmVudHMvc3Bpbm5lci5qc1wiLFxuICBjb21wb25lbnRzOiBfY29tcG9uZW50cyxcbiAgbG9jYWxzOiBbXSxcbiAgaW1wb3J0czogW19yZWFjdF1cbn0pO1xuXG5mdW5jdGlvbiBfd3JhcENvbXBvbmVudCh1bmlxdWVJZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKFJlYWN0Q2xhc3MpIHtcbiAgICByZXR1cm4gX3JlYWN0Q29tcG9uZW50V3JhcHBlcihSZWFjdENsYXNzLCB1bmlxdWVJZCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwQ29tcG9uZW50KFwiXyRVbmtub3duXCIpKFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBjbGFzc05hbWU6IFwic2stZm9sZGluZy1jdWJlXCIgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic2stY3ViZSBzay1jdWJlMVwiIH0pLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJzay1jdWJlIHNrLWN1YmUyXCIgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInNrLWN1YmUgc2stY3ViZTRcIiB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic2stY3ViZSBzay1jdWJlM1wiIH0pXG4gICAgKTtcbiAgfVxufSkpO1xuXG59LHtcImxpdmVyZWFjdGxvYWQvYmFiZWwtdHJhbnNmb3JtXCI6NzYsXCJyZWFjdFwiOjI5NX1dLDMxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXltaXJyb3IgPSByZXF1aXJlKCdrZXltaXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFjdGlvblR5cGVzOiBrZXltaXJyb3Ioe1xuICAgIFNFQVJDSDogbnVsbCxcbiAgICBGSUxURVI6IG51bGwsXG4gICAgUEFHSU5HOiBudWxsXG4gIH0pXG59O1xuXG59LHtcImtleW1pcnJvclwiOjc1fV0sMzE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIERpc3BhdGNoZXIgPSByZXF1aXJlKCdmbHV4JykuRGlzcGF0Y2hlcjtcbm1vZHVsZS5leHBvcnRzID0gbmV3IERpc3BhdGNoZXIoKTtcblxufSx7XCJmbHV4XCI6NDZ9XSwzMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIHJlcXVlc3QgPSByZXF1aXJlKCdheGlvcycpO1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvYWdncmVnYXRpb24tcGFyc2VyJyk7XG5cbnZhciBFTkRQT0lOVCA9ICdodHRwczovL3BsdXRvLmtlcml0cy5vcmcvdjEvYXJ0aWNsZXMvY291bnQnO1xuXG52YXIgX2FnZ3JlZ2F0aW9ucyA9IHt9O1xuXG4vLyBBZGQgYWdncmVnYXRpb25zIG9wdGlvbnMgaGVyZS4gVXNlIHBhcnNlci5wYXJzZSBpZiBrZXkgaXMgaW4gL1BhcmVudC9DaGlsZCBmb3JtYXQuXG52YXIgX3NldHRlcnMgPSB7XG4gIGNvdW50cmllczogZnVuY3Rpb24gY291bnRyaWVzKGFnZ3JlZ2F0aW9ucykge1xuICAgIF9hZ2dyZWdhdGlvbnMuY291bnRyaWVzID0gYWdncmVnYXRpb25zLmNvdW50cmllcztcbiAgfSxcbiAgaW5kdXN0cmllczogZnVuY3Rpb24gaW5kdXN0cmllcyhhZ2dyZWdhdGlvbnMpIHtcbiAgICBfYWdncmVnYXRpb25zLmluZHVzdHJpZXMgPSBwYXJzZXIucGFyc2UoYWdncmVnYXRpb25zLmluZHVzdHJpZXMpO1xuICB9LFxuICB0b3BpY3M6IGZ1bmN0aW9uIHRvcGljcyhhZ2dyZWdhdGlvbnMpIHtcbiAgICBfYWdncmVnYXRpb25zLnRvcGljcyA9IHBhcnNlci5wYXJzZShhZ2dyZWdhdGlvbnMudG9waWNzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKF8uaXNFbXB0eShfYWdncmVnYXRpb25zW3R5cGVdKSkge1xuICAgICAgdGhpcy5mZXRjaCgpLnRoZW4oZnVuY3Rpb24gKF9fKSB7XG4gICAgICAgIGNhbGxiYWNrKF9hZ2dyZWdhdGlvbnNbdHlwZV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKF9hZ2dyZWdhdGlvbnNbdHlwZV0pO1xuICAgIH1cbiAgfSxcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwoY2FsbGJhY2spIHtcbiAgICBpZiAoXy5pc0VtcHR5KF9hZ2dyZWdhdGlvbnMpKSB7XG4gICAgICB0aGlzLmZldGNoKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgY2FsbGJhY2soX2FnZ3JlZ2F0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soX2FnZ3JlZ2F0aW9ucyk7XG4gICAgfVxuICB9LFxuICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuZ2V0KEVORFBPSU5UKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgXyhyZXNwb25zZS5kYXRhLmFnZ3JlZ2F0aW9ucykuY2hhaW4oKS5rZXlzKCkuZWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9zZXR0ZXJzW2tleV0uY2FsbCh0aGlzLCByZXNwb25zZS5kYXRhLmFnZ3JlZ2F0aW9ucyk7XG4gICAgICB9KS52YWx1ZSgpO1xuICAgIH0pO1xuICB9XG59O1xuXG59LHtcIi4uL3V0aWxzL2FnZ3JlZ2F0aW9uLXBhcnNlclwiOjMxOCxcImF4aW9zXCI6MSxcImxvZGFzaFwiOjgwfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbnZhciBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyJyk7XG52YXIgQWN0aW9uVHlwZXMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMvY29uc3RhbnRzJykuQWN0aW9uVHlwZXM7XG52YXIgU3RvcmUgPSByZXF1aXJlKCcuL3N0b3JlJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnLi4vdXRpbHMvYWdncmVnYXRpb24tcGFyc2VyJyk7XG5cbnZhciBFTkRQT0lOVCA9ICdodHRwczovL3BsdXRvLmtlcml0cy5vcmcvdjEvYXJ0aWNsZXMvc2VhcmNoJztcblxudmFyIF9hcnRpY2xlcyA9IHt9LFxuICAgIF9hZ2dyZWdhdGlvbnMgPSB7fSxcbiAgICBfbWV0YWRhdGEgPSB7fSxcbiAgICBfcXVlcnkgPSB7fTtcblxudmFyIF9zZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIF9zZXRNZXRhZGF0YShtZXRhZGF0YSkge1xuICBfbWV0YWRhdGEgPSBtZXRhZGF0YTtcbn07XG5cbnZhciBfc2V0QXJ0aWNsZXMgPSBmdW5jdGlvbiBfc2V0QXJ0aWNsZXMoYXJ0aWNsZXMpIHtcbiAgX2FydGljbGVzID0gYXJ0aWNsZXM7XG59O1xuXG52YXIgX3NldEFnZ3JlZ2F0aW9ucyA9IGZ1bmN0aW9uIF9zZXRBZ2dyZWdhdGlvbnMoYWdncmVnYXRpb25zKSB7XG4gIF9hZ2dyZWdhdGlvbnMuY291bnRyaWVzID0gXy5yZWR1Y2UoYWdncmVnYXRpb25zLmNvdW50cmllcywgZnVuY3Rpb24gKHJlc3VsdHMsIGNvdW50cnksIGtleSkge1xuICAgIHJlc3VsdHNbY291bnRyeS5rZXldID0gY291bnRyeS5rZXk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0sIHt9KTtcbiAgX2FnZ3JlZ2F0aW9ucy5pbmR1c3RyaWVzID0gcGFyc2VyLnBhcnNlQXNUcmVlKGFnZ3JlZ2F0aW9ucy5pbmR1c3RyaWVzKTtcbiAgX2FnZ3JlZ2F0aW9ucy50b3BpY3MgPSBwYXJzZXIucGFyc2VBc1RyZWUoYWdncmVnYXRpb25zLnRvcGljcyk7XG59O1xuXG52YXIgX3NldFF1ZXJ5ID0gZnVuY3Rpb24gX3NldFF1ZXJ5KHF1ZXJ5KSB7XG4gIF9xdWVyeSA9IHF1ZXJ5O1xufTtcblxudmFyIEFydGljbGVTdG9yZSA9IGZ1bmN0aW9uIEFydGljbGVTdG9yZShkaXNwYXRjaGVyKSB7XG4gIFN0b3JlLmNhbGwodGhpcywgZGlzcGF0Y2hlcik7XG59O1xuXG5BcnRpY2xlU3RvcmUucHJvdG90eXBlID0gYXNzaWduKHt9LCBTdG9yZS5wcm90b3R5cGUsIHtcblxuICBnZXRBcnRpY2xlczogZnVuY3Rpb24gZ2V0QXJ0aWNsZXMoKSB7XG4gICAgcmV0dXJuIF8uY2xvbmUoX2FydGljbGVzKTtcbiAgfSxcblxuICBnZXRBZ2dyZWdhdGlvbnM6IGZ1bmN0aW9uIGdldEFnZ3JlZ2F0aW9ucygpIHtcbiAgICByZXR1cm4gXy5jbG9uZShfYWdncmVnYXRpb25zKTtcbiAgfSxcblxuICBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEoKSB7XG4gICAgcmV0dXJuIF8uY2xvbmUoX21ldGFkYXRhKTtcbiAgfSxcblxuICBnZXRRdWVyeTogZnVuY3Rpb24gZ2V0UXVlcnkoKSB7XG4gICAgcmV0dXJuIF8uY2xvbmUoX3F1ZXJ5KTtcbiAgfSxcblxuICBfX29uRGlzcGF0Y2g6IGZ1bmN0aW9uIF9fb25EaXNwYXRjaChhY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlIEFjdGlvblR5cGVzLlNFQVJDSDpcbiAgICAgICAgaWYgKF8uaXNFbXB0eShhY3Rpb24ucXVlcnkpKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBfc2V0UXVlcnkoYWN0aW9uLnF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QuZ2V0KEVORFBPSU5ULCB7XG4gICAgICAgICAgcGFyYW1zOiBfcXVlcnlcbiAgICAgICAgfSkudGhlbigoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgX3NldEFydGljbGVzKHJlc3BvbnNlLmRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgX3NldE1ldGFkYXRhKHJlc3BvbnNlLmRhdGEubWV0YWRhdGEpO1xuICAgICAgICAgIF9zZXRBZ2dyZWdhdGlvbnMocmVzcG9uc2UuZGF0YS5hZ2dyZWdhdGlvbnMpO1xuXG4gICAgICAgICAgdGhpcy5fX2VtaXRDaGFuZ2UoKTtcbiAgICAgICAgfSkuYmluZCh0aGlzKSlbJ2NhdGNoJ10oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBBY3Rpb25UeXBlcy5GSUxURVI6XG4gICAgICAgIHZhciBmaWx0ZXJQYXJhbXMgPSBfLnJlZHVjZShhY3Rpb24uZmlsdGVycywgZnVuY3Rpb24gKGgsIHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBoW2tleV0gPSB2YWx1ZS5qb2luKCcsJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9LCB7IG9mZnNldDogMCB9KTtcbiAgICAgICAgY29uc29sZS5sb2coZmlsdGVyUGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QuZ2V0KEVORFBPSU5ULCB7XG4gICAgICAgICAgcGFyYW1zOiBhc3NpZ24oe30sIF9xdWVyeSwgZmlsdGVyUGFyYW1zKVxuICAgICAgICB9KS50aGVuKChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBfc2V0QXJ0aWNsZXMocmVzcG9uc2UuZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICBfc2V0TWV0YWRhdGEocmVzcG9uc2UuZGF0YS5tZXRhZGF0YSk7XG4gICAgICAgICAgY29uc29sZS5sb2coYWN0aW9uLmZpbHRlcnMpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgdGhpcy5fX2VtaXRDaGFuZ2UoKTtcbiAgICAgICAgfSkuYmluZCh0aGlzKSlbJ2NhdGNoJ10oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBBY3Rpb25UeXBlcy5QQUdJTkc6XG4gICAgICAgIHJldHVybiByZXF1ZXN0LmdldChFTkRQT0lOVCwgeyBwYXJhbXM6IGFzc2lnbih7fSwgX3F1ZXJ5LCB7IG9mZnNldDogMCB9KSB9KS50aGVuKChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBfc2V0QXJ0aWNsZXMocmVzcG9uc2UuZGF0YS5yZXN1bHRzKTtcblxuICAgICAgICAgIHRoaXMuX19lbWl0Q2hhbmdlKCk7XG4gICAgICAgIH0pLmJpbmQodGhpcykpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn0pO1xuXG5BcnRpY2xlU3RvcmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJ0aWNsZVN0b3JlO1xuXG52YXIgc3RvcmUgPSBuZXcgQXJ0aWNsZVN0b3JlKERpc3BhdGNoZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcblxufSx7XCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI6MzEzLFwiLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI6MzE0LFwiLi4vdXRpbHMvYWdncmVnYXRpb24tcGFyc2VyXCI6MzE4LFwiLi9zdG9yZVwiOjMxNyxcImF4aW9zXCI6MSxcImxvZGFzaFwiOjgwLFwib2JqZWN0LWFzc2lnblwiOjExM31dLDMxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uL2Rpc3BhdGNoZXIvZGlzcGF0Y2hlcicpO1xuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZShkaXNwYXRjaGVyKSB7XG4gIHRoaXMuX19jaGFuZ2VkID0gZmFsc2U7XG4gIHRoaXMuX19jaGFuZ2VFdmVudCA9ICdjaGFuZ2UnO1xuICB0aGlzLl9fZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG4gIHRoaXMuX19lbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICB0aGlzLl9fZGlzcGF0Y2hUb2tlbiA9IGRpc3BhdGNoZXIucmVnaXN0ZXIoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICB0aGlzLl9faW52b2tlT25EaXNwYXRjaChhY3Rpb24pO1xuICB9KS5iaW5kKHRoaXMpKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZSA9IHtcblxuICBfX2VtaXRDaGFuZ2U6IGZ1bmN0aW9uIF9fZW1pdENoYW5nZShsb2wpIHtcbiAgICB0aGlzLl9fY2hhbmdlZCA9IHRydWU7XG4gIH0sXG5cbiAgX19vbkRpc3BhdGNoOiBmdW5jdGlvbiBfX29uRGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgY29uc29sZS5sb2coJ1N0b3JlLl9fb25EaXNwYXRjaCBtdXN0IGJlIG92ZXJyaWRkZW4hJyk7XG4gIH0sXG5cbiAgX19pbnZva2VPbkRpc3BhdGNoOiBmdW5jdGlvbiBfX2ludm9rZU9uRGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgdGhpcy5fX2NoYW5nZWQgPSBmYWxzZTtcblxuICAgIHZhciBwcm9taXNlID0gdGhpcy5fX29uRGlzcGF0Y2goYWN0aW9uKTtcbiAgICBpZiAoIXByb21pc2UpIHJldHVybjtcblxuICAgIHByb21pc2UudGhlbigoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuX19jaGFuZ2VkKSB0aGlzLl9fZW1pdHRlci5lbWl0KHRoaXMuX19jaGFuZ2VFdmVudCk7XG4gICAgfSkuYmluZCh0aGlzKSk7XG4gIH0sXG5cbiAgLy8gUHVibGljIE1ldGhvZHM7XG4gIGFkZExpc3RlbmVyOiBmdW5jdGlvbiBhZGRMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9fZW1pdHRlci5hZGRMaXN0ZW5lcih0aGlzLl9fY2hhbmdlRXZlbnQsIGNhbGxiYWNrKTtcbiAgfSxcblxuICByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fX2VtaXR0ZXIucmVtb3ZlTGlzdGVuZXIodGhpcy5fX2NoYW5nZUV2ZW50LCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgZ2V0RGlzcGF0Y2hUb2tlbjogZnVuY3Rpb24gZ2V0RGlzcGF0Y2hUb2tlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fX2Rpc3BhdGNoVG9rZW47XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmU7XG5cbn0se1wiLi4vZGlzcGF0Y2hlci9kaXNwYXRjaGVyXCI6MzE0LFwiZXZlbnRzXCI6MTh9XSwzMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGFyc2VBc1RyZWU6IGZ1bmN0aW9uIHBhcnNlQXNUcmVlKHJlY29yZHMpIHtcbiAgICB2YXIgcmVzdWx0cyA9IHt9O1xuICAgIHZhciBzdWJkaXZpZGUgPSBmdW5jdGlvbiBzdWJkaXZpZGUoX3gsIF94Mikge1xuICAgICAgdmFyIF9hZ2FpbiA9IHRydWU7XG5cbiAgICAgIF9mdW5jdGlvbjogd2hpbGUgKF9hZ2Fpbikge1xuICAgICAgICB2YXIgYXJyYXkgPSBfeCxcbiAgICAgICAgICAgIGl0ZW1zID0gX3gyO1xuICAgICAgICBrZXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9hZ2FpbiA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBrZXkgPSBhcnJheS5zaGlmdCgpO1xuICAgICAgICBpdGVtc1trZXldID0gaXRlbXNba2V5XSB8fCB7fTtcblxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgX3ggPSBhcnJheTtcbiAgICAgICAgICBfeDIgPSBpdGVtc1trZXldO1xuICAgICAgICAgIF9hZ2FpbiA9IHRydWU7XG4gICAgICAgICAgY29udGludWUgX2Z1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgfVxuICAgIH07XG4gICAgXy5lYWNoKHJlY29yZHMsIGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgIHZhciBhcnJheSA9IHJlY29yZC5rZXkuc3Vic3RyaW5nKDEpLnNwbGl0KCcvJyk7XG4gICAgICBzdWJkaXZpZGUoYXJyYXksIHJlc3VsdHMpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9LFxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocmVjb3Jkcykge1xuICAgIHJldHVybiBfLm1hcChyZWNvcmRzLCBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICB2YXIgYXJyYXkgPSByZWNvcmQua2V5LnN1YnN0cmluZygxKS5zcGxpdCgnLycpO1xuICAgICAgcmV0dXJuIHsga2V5OiBhcnJheVthcnJheS5sZW5ndGggLSAxXSwgZG9jX2NvdW50OiByZWNvcmQuZG9jX2NvdW50IH07XG4gICAgfSk7XG4gIH1cbn07XG5cbn0se1wibG9kYXNoXCI6ODB9XX0se30sWzI5N10pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
